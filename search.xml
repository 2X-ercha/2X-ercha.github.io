<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>butterfly-css-for-hpptalk: 给HPP的说说页魔改主题（适用于Butterfly）</title>
      <link href="14413.html"/>
      <url>14413.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="butterfly-css-for-hpptalk"><a href="#butterfly-css-for-hpptalk" class="headerlink" title="butterfly-css-for-hpptalk"></a>butterfly-css-for-hpptalk</h1><p>一个提供适配Butterfly主题的HexoPlusPlus-talk的css仓库</p><p>github: <a href="https://github.com/2X-ercha/butterfly-css-for-hpptalk">https://github.com/2X-ercha/butterfly-css-for-hpptalk</a></p><hr><h2 id="第一个魔改的css样式（不知道怎么命名）"><a href="#第一个魔改的css样式（不知道怎么命名）" class="headerlink" title="第一个魔改的css样式（不知道怎么命名）"></a>第一个魔改的css样式（不知道怎么命名）</h2><p>引用地址：<a href="https://cdn.jsdelivr.net/gh/2x-ercha/butterfly-css-for-hpptalk/Butterfly_1.css">https://cdn.jsdelivr.net/gh/2x-ercha/butterfly-css-for-hpptalk/Butterfly_1.css</a></p><h3 id="效果图："><a href="#效果图：" class="headerlink" title="效果图："></a>效果图：</h3><h4 id="（未配上作者魔改后的bf前的效果）"><a href="#（未配上作者魔改后的bf前的效果）" class="headerlink" title="（未配上作者魔改后的bf前的效果）"></a>（未配上作者魔改后的bf前的效果）</h4><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/2X-ercha/picture-bed@master/1612706582000.png" alt="light_normal"></p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/2X-ercha/picture-bed@master/1612706593000.png" alt="dark_normal"></p><h4 id="（配上作者魔改后的bf后的效果）"><a href="#（配上作者魔改后的bf后的效果）" class="headerlink" title="（配上作者魔改后的bf后的效果）"></a>（配上作者魔改后的bf后的效果）</h4><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/2X-ercha/picture-bed@master/1612707007000.png" alt="light_revision"></p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/2X-ercha/picture-bed@master/1612707030000.png" alt="dark_revision"></p><hr><h2 id="第二个"><a href="#第二个" class="headerlink" title="第二个"></a>第二个</h2><p>还没出。。。（咕咕咕）</p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic/image/baitian/file_6574840.webp"></p>]]></content>
      
      
      <categories>
          
          <category> Course </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Project </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HPP专用测试文章</title>
      <link href="17660.html"/>
      <url>17660.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>最近博主上手了<a href="https://github.com/ChenYFan">@ChenYFan</a>开发的hexo后台系统<a href="https://github.com/HexoPlusPlus/HexoPlusPlus">HexoPlusPlus</a>，<del>然后成为了HPP测试版的小白鼠</del></p><p>又不想在测试过程中拿去修改其他的文章，所以单开一页专门测试</p><p>以下为日常测试内容</p><hr><h2 id="试一试新建"><a href="#试一试新建" class="headerlink" title="试一试新建"></a>试一试新建</h2><h2 id="试一试更改"><a href="#试一试更改" class="headerlink" title="试一试更改"></a>试一试更改</h2><h2 id="试一试图片上传"><a href="#试一试图片上传" class="headerlink" title="试一试图片上传"></a>试一试图片上传</h2><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/2X-ercha/picture-bed@master/1612602820000.png"></p><h2 id="试一试手机端"><a href="#试一试手机端" class="headerlink" title="试一试手机端"></a>试一试手机端</h2><p>输入法：中文/English</p><h2 id="试一试表情"><a href="#试一试表情" class="headerlink" title="试一试表情"></a>试一试表情</h2><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Dreamy-TZK/iemotion-pic@latest/img/QQ/0.gif"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Dreamy-TZK/iemotion-pic@latest/img/bilibili_tv_gif/doge.gif"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic/image/bilibili2233/[2233%E5%A8%98_%E5%8D%96%E8%90%8C].png"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic/image/Menhera-chan/1.jpg"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic/image/Tsuri-me-ju_mimi/10753776_key@2x.png"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic/image/Mafumafu/199749454.png"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic/image/Snow-Miku/3583066@2x.png"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic/image/Sweetie-Bunny/12311678.png"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic/image/aodamiao/01.gif"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic/image/Heybox/expression_cube.png"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic/image/baitian/file_6574832.webp"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic/image/weisuomeng/1.jpg"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Dreamy-TZK/iemotion-pic@latest/img/%E7%BD%97%E5%B0%8F%E9%BB%91/%E4%BD%A0%E5%A5%BD%E5%91%80.png"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Dreamy-TZK/iemotion-pic@latest/img/%E9%82%A3%E5%85%94/%E3%80%82%E3%80%82%E3%80%82.png"></p><hr><p><a href="mailto:&#x48;&#x65;&#x78;&#x6f;&#80;&#108;&#117;&#x73;&#80;&#108;&#x75;&#x73;&#x40;&#x31;&#46;&#48;&#x2e;&#x37;">&#x48;&#x65;&#x78;&#x6f;&#80;&#108;&#117;&#x73;&#80;&#108;&#x75;&#x73;&#x40;&#x31;&#46;&#48;&#x2e;&#x37;</a>测试结束，没有bug</p>]]></content>
      
      
      <categories>
          
          <category> Course </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Course </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HNU:ACM校队预选寒假训练题解收录</title>
      <link href="60137.html"/>
      <url>60137.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>个人不喜欢首页搞得太杂了，都是题解意味着我得清一色地配图就很难受</p><p>所以如果是寒假成套的题解就都放这里了</p><p>有一部分题解是自己的，一部分是收录同时参加训练的大佬们的（顺便加点感想）</p><p>以下开始正题</p><hr><h1 id="1-25-1-31"><a href="#1-25-1-31" class="headerlink" title="1.25-1.31"></a>1.25-1.31</h1><h2 id="div3专题"><a href="#div3专题" class="headerlink" title="div3专题"></a>div3专题</h2><h3 id="编程练习专题（各种杂题）"><a href="#编程练习专题（各种杂题）" class="headerlink" title="编程练习专题（各种杂题）"></a>编程练习专题（各种杂题）</h3><p>题目链接：<a href="https://vjudge.net/contest/419530">https://vjudge.net/contest/419530</a></p><p>题解链接：<a href="https://noionion.top/49783.html">https://noionion.top/49783.html</a></p><h3 id="DFS-BFS专题（搜索专题）"><a href="#DFS-BFS专题（搜索专题）" class="headerlink" title="DFS/BFS专题（搜索专题）"></a>DFS/BFS专题（搜索专题）</h3><p>题目链接：<a href="https://vjudge.net/contest/419533">https://vjudge.net/contest/419533</a></p><p>题解链接：？？？</p><h2 id="div2专题"><a href="#div2专题" class="headerlink" title="div2专题"></a>div2专题</h2><h3 id="DP专题"><a href="#DP专题" class="headerlink" title="DP专题"></a>DP专题</h3><p>题目链接：<a href="https://vjudge.net/contest/419535">https://vjudge.net/contest/419535</a></p><p>题解链接：？？？</p><h3 id="贪心专题"><a href="#贪心专题" class="headerlink" title="贪心专题"></a>贪心专题</h3><p>题目链接：<a href="https://vjudge.net/contest/419536">https://vjudge.net/contest/419536</a></p><p>题解链接（来自<a href="http://lijyya.site/">@lijyya</a>）：<a href="http://lijyya.site/2021/01/27/2021%E5%AF%92%E5%81%87%E9%9B%86%E8%AE%AD-%E8%B4%AA%E5%BF%83%E4%B8%93%E9%A2%98-%E9%A2%98%E8%A7%A3/">http://lijyya.site/2021/01/27/2021%E5%AF%92%E5%81%87%E9%9B%86%E8%AE%AD-%E8%B4%AA%E5%BF%83%E4%B8%93%E9%A2%98-%E9%A2%98%E8%A7%A3/</a></p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何实现校园疫情防控自动打卡</title>
      <link href="7431.html"/>
      <url>7431.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><div class="note warning simple"><p><strong>免责声明</strong> 本教程仅提供参考学习使用，若读者参考本教程编写脚本后违反相关法律法规造成损失，将由读者自行承担，教程所有者不承担一切责任！</p></div><div class="note warning simple"><p><strong>请在法律循序范围内自行参考制作自己的打卡脚本，当发生发烧等异常现象是仍需如实填报</strong></p></div><p><strong>此教程针对有爬虫基础的同学编写</strong></p><p>本来是想开源的，但考虑到前阵子的健康码APP事件，以及自动打卡扩散出去实际上是影响疫情防控的行为，<del>还有水一篇博文的需要</del></p><p>就决定写教程了（本教程分几次写完，时间不定）</p><p>理论上来说，只要是能用网页进入打卡页面的打卡网站，都可以参考本教程实现。身在湖大，就用湖大的疫情防控打卡<strong>举个栗子</strong>了</p><hr><h2 id="教程分三步"><a href="#教程分三步" class="headerlink" title="教程分三步"></a>教程分三步</h2><p>打卡-微信提醒-自动化</p><h2 id="你需要"><a href="#你需要" class="headerlink" title="你需要"></a>你需要</h2><ul><li>一个Github账号</li><li>微信</li></ul><p>教程开始！</p><hr><h1 id="用Python实现打卡功能"><a href="#用Python实现打卡功能" class="headerlink" title="用Python实现打卡功能"></a>用Python实现打卡功能</h1><p>最开始想的是用模拟浏览器的方式进行点击处理，但未免过于复杂。后来从大佬那了解到只要知道登录和打卡时网页发送了什么数据给后台(post)就可</p><p>打开<a href="https://fangkong.hnu.edu.cn/app/#/login">湖大的打卡界面</a>，进行登录，康康网页发送了些什么</p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20210124220537.png"></p><p>找到右侧的login文件并查看它的请求内容，显然，Code是我们的账号，Password是我们的密码，VerCode是验证码，那Token又是什么东西呢？</p><p>回到登录页，刷新验证码，网络会得到两个传输文件</p><p>可以看到，它向 <a href="https://fangkong.hnu.edu.cn/api/v1/account/getimgvcode">https://fangkong.hnu.edu.cn/api/v1/account/getimgvcode</a> 这个网址get了一下，然后得到了响应，显然响应得到的token就是了</p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20210124221019.png"></p><p>通过检索网页html可以得到，这个验证码的地址格式为</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;https://fangkong.hnu.edu.cn/imagevcode?token=&quot;</span> + token</span><br></pre></td></tr></table></figure><p>所以第一步要登录所发送的数据就剩验证码内容了</p><h2 id="step-1-爬取验证码并解析"><a href="#step-1-爬取验证码并解析" class="headerlink" title="step 1: 爬取验证码并解析"></a>step 1: 爬取验证码并解析</h2><p>爬取验证码的操作就和爬图片没什么区别,只是前面先加了一步爬取token的操作（这里的请求头不做严格要求）</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">token_json = requests.get(<span class="string">&quot;https://fangkong.hnu.edu.cn/api/v1/account/getimgvcode&quot;</span>, headers=headers_1)</span><br></pre></td></tr></table></figure><p>对爬取的数据解码成字典并取出token</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">data = json.loads(token_json.text)</span><br><span class="line">token = data[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;Token&quot;</span>]</span><br></pre></td></tr></table></figure><p>爬验证码并保存</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">img_url = <span class="string">&quot;https://fangkong.hnu.edu.cn/imagevcode?token=&quot;</span> + token</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;img.jpg&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> img:</span><br><span class="line">    img.write(requests.get(img_url).content)</span><br></pre></td></tr></table></figure><p>为了自动化方便一些，这里采用在线调用接口的方式进行（接口来自于百度飞桨OCR识别）</p><blockquote><p><strong>这里安利一篇教程（来自大二学长）</strong>：<a href="https://zhuanlan.zhihu.com/p/342405677">使用Python快速实现图片文字识别（30行代码）</a></p></blockquote><p>直接放代码（我也是直接<code>ctrl</code>+<code>c</code>和<code>ctrl</code>+<code>v</code>过来的）</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;img.jpg&quot;</span>,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    img = base64.b64encode(f.read())</span><br><span class="line">data = <span class="string">&#x27;&#123;&quot;image&quot;:&quot;%s&quot;&#125;&#x27;</span>%<span class="built_in">str</span>(img)[<span class="number">2</span>:]</span><br><span class="line"></span><br><span class="line">response = requests.post(<span class="string">&#x27;https://www.paddlepaddle.org.cn/paddlehub-api/image_classification/chinese_ocr_db_crnn_mobile&#x27;</span>, headers=headers_1, data=data)</span><br><span class="line">result = response.json()[<span class="string">&#x27;result&#x27;</span>][<span class="number">0</span>][<span class="string">&quot;data&quot;</span>][<span class="number">0</span>][<span class="string">&quot;text&quot;</span>]</span><br></pre></td></tr></table></figure><p>result就是我们的验证码内容了（识别率还挺高的）</p><h2 id="step-2-登录"><a href="#step-2-登录" class="headerlink" title="step 2: 登录"></a>step 2: 登录</h2><p>登录需要发送的信息在上文已经说明了，是一个JSON字符串 <strong>(注意键值对都是字符串（除了null）)</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&quot;Code&quot;</span>:<span class="string">&quot;2020****0131&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Password&quot;</span>:<span class="string">&quot;**********&quot;</span>,</span><br><span class="line">    <span class="string">&quot;WechatUserinfoCode&quot;</span>:null, <span class="comment"># 非必要</span></span><br><span class="line">    <span class="string">&quot;VerCode&quot;</span>:result,</span><br><span class="line">    <span class="string">&quot;Token&quot;</span>:token</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我们可以向网页发送请求了！</p><p>为了保持会话（服务器才知道你登录和提交打卡信息用的是一个号），这里<strong>建立一个临时会话</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">session = requests.Session()</span><br></pre></td></tr></table></figure><p>然后复制粘贴再打引号你的请求头 <strong>(注意一定要login文件的headers,和上面爬验证码和解析验证码用的headers_1不同，这里记为headers_2)</strong></p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20210124223843.png"></p><p>然后post你的账号密码验证码（注意url也是login文件的请求地址，记得对data做json字符串处理）</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">response = session.post(<span class="string">&quot;https://fangkong.hnu.edu.cn/api/v1/account/login&quot;</span>, headers=headers_2, data=json.dumps(data))</span><br></pre></td></tr></table></figure><p>如果得到的<code>response.json()[&quot;code&quot;]</code>不为0，那么验证码错误，需要重新登录（百度的OCR也有一定概率出错的）</p><p>至此，登录部分就完成啦！</p><h2 id="step-3-打卡"><a href="#step-3-打卡" class="headerlink" title="step 3: 打卡"></a>step 3: 打卡</h2><p>我们试着打卡一次，得到的请求如下（因为今天已经打卡过了，我也不记得打卡时网络传输的文件是啥，我只能找一下昨天的截图</p><p>唉，找不到</p><p>大概就这些数据吧</p><blockquote><p>已经更新成<code>1/29</code>的新版本了</p></blockquote><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">data = &#123;</span><br><span class="line">  <span class="string">&quot;RealProvince&quot;</span>:<span class="string">&quot;湖南省&quot;</span>,</span><br><span class="line">  <span class="string">&quot;RealCity&quot;</span>:<span class="string">&quot;长沙市&quot;</span>,</span><br><span class="line">  <span class="string">&quot;RealCounty&quot;</span>:<span class="string">&quot;岳麓区&quot;</span>,</span><br><span class="line">  <span class="string">&quot;RealAddress&quot;</span>:<span class="string">&quot;麓山南路湖南大学德智园学生公寓x-xxx&quot;</span>,</span><br><span class="line">  <span class="comment"># 以下0表示否，1表示是</span></span><br><span class="line">  <span class="string">&quot;IsNormalTemperature&quot;</span>:<span class="string">&quot;1&quot;</span>,  <span class="comment"># 是否体温正常（现版本必填）</span></span><br><span class="line">  <span class="string">&quot;IsInCampus&quot;</span>:<span class="string">&quot;0&quot;</span>,    <span class="comment"># 是否在校（现版本必填）</span></span><br><span class="line">  <span class="comment"># 以下省略“本人及亲属”</span></span><br><span class="line">  <span class="string">&quot;IsUnusual&quot;</span>:<span class="string">&quot;0&quot;</span>,    <span class="comment"># 是否有不良反应（现版本必填）</span></span><br><span class="line">  <span class="string">&quot;UnusualInfo&quot;</span>:<span class="string">&quot;&quot;</span>,   <span class="comment"># 不良反应情况</span></span><br><span class="line">  <span class="string">&quot;IsTouch&quot;</span>:<span class="string">&quot;0&quot;</span>,      <span class="comment"># 是否接触（现版本必填）</span></span><br><span class="line">  <span class="string">&quot;IsInsulated&quot;</span>:<span class="string">&quot;0&quot;</span>,  <span class="comment"># 是否隔离</span></span><br><span class="line">  <span class="string">&quot;IsSuspected&quot;</span>:<span class="string">&quot;0&quot;</span>,  <span class="comment"># 是否疑似</span></span><br><span class="line">  <span class="string">&quot;IsDiagnosis&quot;</span>:<span class="string">&quot;0&quot;</span>,  <span class="comment"># 是否确诊</span></span><br><span class="line">  <span class="string">&quot;dailyinfo&quot;</span>:&#123;</span><br><span class="line">    <span class="string">&quot;IsVia&quot;</span>:<span class="string">&quot;0&quot;</span>,      <span class="comment"># 是否从中高风险地区返回（现版本必填）</span></span><br><span class="line">    <span class="string">&quot;DateTrip&quot;</span>:<span class="string">&quot;&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和上面一样post数据即可 <strong>（注意是<code>session.post()</code>而不是<code>requests.post()</code>）</strong></p><p>提交的url为<a href="https://fangkong.hnu.edu.cn/api/v1/clockinlog/add%EF%BC%8C">https://fangkong.hnu.edu.cn/api/v1/clockinlog/add，</a> 请求头和登录时的请求头headers_2一样即可。</p><p>如果你要查看结果</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">msg = response.json()[<span class="string">&quot;msg&quot;</span>]</span><br><span class="line">print(msg)</span><br></pre></td></tr></table></figure><p>即可，如果打卡成功返回的信息即为<code>成功</code></p><p>至此，你已经可以实现一键打卡了！</p><hr><h1 id="微信提醒"><a href="#微信提醒" class="headerlink" title="微信提醒"></a>微信提醒</h1><p>这里安利一个应用 <a href="http://sc.ftqq.com/3.version">server酱</a> 。你可以向指定的网页发送一个get/post请求来达到微信推送的目的。</p><p>server酱的登录就需要开头说到的github账号了。如果你没有github的账号，可以点此去注册一个 <a href="https://github.com/">https://github.com</a></p><p>登录后根据官网上的提示绑定微信号，获取你的SCKEY。然后在你代码你需要的地方嵌入请求即可</p><p>例如，我在打卡成功后嵌入这样一段代码（其中sckey就是server提供的SCKEY字符串，msg是上文打卡时返回的信息）：</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">requests.get(<span class="string">&quot;http://sc.ftqq.com/&quot;</span>+ sckey +<span class="string">&quot;.send?text=打卡成功啦！&amp;desp=&quot;</span> + msg)</span><br></pre></td></tr></table></figure><p>打卡成功会给我发送如下消息：</p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/1.jpg" alt="打卡消息通知"><br><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/2.jpg" alt="打卡成功"><br><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/3.jpg" alt="今天已经打卡过了"></p><hr><h1 id="利用github-action实现自动化"><a href="#利用github-action实现自动化" class="headerlink" title="利用github action实现自动化"></a>利用github action实现自动化</h1><p>github账号实现微信提醒其实只是次要部分，其真正的用途实际上是实现自动化打卡</p><p>毕竟你不太可能24小时开着电脑，也不太可能白嫖服务器 <del>(如果能的话麻烦告诉我，我也要！)</del></p><h2 id="step-1-设置TOKEN-如果之前已经设置过，请跳过此步"><a href="#step-1-设置TOKEN-如果之前已经设置过，请跳过此步" class="headerlink" title="step 1:设置TOKEN (如果之前已经设置过，请跳过此步)"></a>step 1:设置TOKEN (如果之前已经设置过，请跳过此步)</h2><p>鼠标放在右上角，选择 <code>setting</code> <del>(这边直接偷走小康的图，懒得自己截图上传了)</del></p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/blogimg/picbed@latest/2020/05/14/a81f88e80fd7105d7cc3e1844970e8bd.png"></p><p>点击 <code>Developer settings</code>。</p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/blogimg/picbed@latest/2020/05/14/66df62fbc0d51403fcdc8223c4b6ce52.png"></p><p>选择 <code>Personal access tokens</code>，添加一个新的 TOKEN。</p><p>这个 TOKEN 主要使用来启动 actions 和上传结果用的。</p><p>设置名字为 <code>GITHUB_TOKEN</code> , 然后勾选 <code>repo</code> , <code>admin:repo_hook</code> , <code>workflow</code> 等选项，最后点击 <code>Generate token</code> 即可。</p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/blogimg/picbed@latest/2020/05/15/23ee2808dce8dab17e06107d1ddaf5d6.png"></p><p>名字请务必使用 <code>GITHUB_TOKEN</code> 。</p><h2 id="step-2-编写action配置文件"><a href="#step-2-编写action配置文件" class="headerlink" title="step 2: 编写action配置文件"></a>step 2: 编写action配置文件</h2><p>github会自动对 <code>.github/workflows/</code> 目录下的 <code>xxx.yml</code> 自动运行。例如我的目录结构为：</p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20210128085105.png"></p><p>其中的 <code>AutoClockIn.py</code> 就是打卡的程序代码</p><p>yml代码说明：</p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20210128085719.png"></p><blockquote><p><strong>1</strong> 为自动运行的时间，遵循 <code>UTF-0</code> 时间，+8h 后才是北京时间。如果想自行设定其他时间可以百度<code>cron表达式在线转换</code>,然后删除年和秒的部分。</p></blockquote><blockquote><p><strong>2</strong> 为手动运行的时间，点仓库那个<code>star</code>(<code>unstar</code>要多点一次)就可以手动运行啦！</p></blockquote><p>其他的代码注释应该看得懂，看不懂照着打就是了。</p><h2 id="step-3-创建仓库"><a href="#step-3-创建仓库" class="headerlink" title="step 3: 创建仓库"></a>step 3: 创建仓库</h2><p>这里建议创建个私有仓库（<strong>公开被白嫖后出事你是负责任的</strong>，免责声明可能都救不了你）</p><p>（而且<strong>公开的话意味着你的账号密码公开</strong>，除非你像我一样采用了密钥处理） <del>(什么，你想学？我这里不讲这个东西)</del></p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20210128091623.png"></p><p>熟悉git操作的我就不多说了</p><p>不熟悉也没关系，我们手动创建也可</p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20210128094701.png"></p><p>然后建立你的py文件并把打卡代码复制上去</p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20210128094908.png"></p><p>创建文件夹类似 <code>/github</code> ，同样的，我们创建yml文件并复制粘贴代码</p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20210128095424.png"></p><p><strong>这里再次强调文件目录结构要和上面截图的一样！！！</strong></p><p>全部保存完后可以启动试试啦！</p><h2 id="step-4-启动action"><a href="#step-4-启动action" class="headerlink" title="step 4: 启动action"></a>step 4: 启动action</h2><p>为了保证自动的正常进行，手动启动调试是一个好习惯</p><p>点击仓库右上角的 <code>star</code> 按钮，然后点击 <code>actions</code></p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20210128100003.png"></p><p>成功的话应该是这样的（因为我已经打卡好多天了，所以记录挺多的）</p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20210128100249.png"></p><hr><div class="note warning simple"><p>最后再次强调，当发生发烧等异常现象是仍需如实填报！！！</p></div><hr><h1 id="完结撒花！"><a href="#完结撒花！" class="headerlink" title="完结撒花！"></a>完结撒花！</h1>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Project </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Twikoo-Magic: 一个适用于Twikoo评论系统和HexoPlusPlus的表情仓库</title>
      <link href="4712.html"/>
      <url>4712.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="Twikoo-Magic"><a href="#Twikoo-Magic" class="headerlink" title="Twikoo-Magic"></a>Twikoo-Magic</h1><p>github仓库地址：<a href="https://github.com/2X-ercha/Twikoo-and-HexoPlusPlus-Magic">https://github.com/2X-ercha/Twikoo-and-HexoPlusPlus-Magic</a></p><h3 id="更新说明"><a href="#更新说明" class="headerlink" title="更新说明"></a>更新说明</h3><h4 id="2021-1-15"><a href="#2021-1-15" class="headerlink" title="2021/1/15"></a>2021/1/15</h4><blockquote><p><strong>基于2021/1/14 <a href="https://twikoo.js.org/">Twikoo</a> 更新<code>1.1.0-beta</code>，所有表情都将以缩写形式（如:[ text ]:）输出。1/14之前本仓库有部分表情text缺失及重复, 导致无法正常使用表情</strong><br><strong>1/14后的所有表情json列表已全部更新，已适配<code>Twikoo@1.1.0-beta</code>及此后的版本</strong><br><strong>此前版本所造成的不便作者深感抱歉</strong></p></blockquote><h4 id="2021-2-4"><a href="#2021-2-4" class="headerlink" title="2021/2/4"></a>2021/2/4</h4><blockquote><p>对<a href="https://github.com/ChenYFan">@ChenYFan</a>开发的hexo后台系统<a href="https://github.com/HexoPlusPlus/HexoPlusPlus">HexoPlusPlus</a>也可以直接适配</p></blockquote><h3 id="oss镜像站"><a href="#oss镜像站" class="headerlink" title="oss镜像站"></a>oss镜像站</h3><p>备用的json位于文件夹Class_oss中，图床采用阿里云oss，国内访问速度较快（不过使用了镜像站的json的话记得自己改一下表情组的名字，同时<strong>不要滥用备用站点！！！</strong></p><p><strong>访问量</strong>（自2021.1.6 00:00:00）</p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://count.getloli.com/get/@2X-ercha@Twikoo-Magic?theme=gelbooru"></p><h3 id="白嫖提示"><a href="#白嫖提示" class="headerlink" title="白嫖提示"></a>白嫖提示</h3><blockquote><p>建议白嫖的各位大大们去<a href="https://github.com/2X-ercha/Twikoo-Magic/issues/1">issue#1</a>留言 <del>(不妨给本仓库点个star？)</del></p></blockquote><blockquote><p>本仓库不适配 Valine，如果想找到可以直接用于 valine.json 的表情仓库，建议右转<a href="https://github.com/GamerNoTitle/Valine-Magic">Valine-Magic</a></p></blockquote><blockquote><p>同样适配 Twikoo 的表情仓库还有<a href="https://emotion.xiaokang.me/">小康的表情速查</a>，<strong>在此感谢小康采用了我的oss镜像源！</strong></p></blockquote><h3 id="Twikoo-HexoPlusPlus"><a href="#Twikoo-HexoPlusPlus" class="headerlink" title="Twikoo | HexoPlusPlus"></a>Twikoo | HexoPlusPlus</h3><p>如果采用主站，请直接点击<strong>表情速览</strong>的文字链接；采用oss站点请点击文字链接下方的 <code>oss</code> 链接 </p><p>请注意：如果你想添加多个分类，请记得在每个分类(除了最后一个）的最后一个表情后面加个<code>,</code>否则Twikoo无法识别。</p><p>列表位于对应链接的json文件中。</p><p>复制的时候不要将头尾的 <code>&#123;&#125;</code> 复制进去呀！</p><p>如果你有新的表情包想要加入，你可以提出issue，或者直接发到<a href="mailto:noionion@outlook.com">noionion@outlook.com</a>，并注上你的ID和表情包名字（中文英文都需要）</p><h3 id="表情分类"><a href="#表情分类" class="headerlink" title="表情分类"></a>表情分类</h3><p>为方便阅读，这里提供的json均未压缩。</p><p><strong>表情速览</strong></p><table><thead><tr><th align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://valinecdn.bili33.top/bilibiliHotKey/7.jpg"></th><th align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://valinecdn.bili33.top/bilibilitv/[tv_doge].png"></th><th align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://valinecdn.bili33.top/bilibili2233/[2233%E5%A8%98_%E7%AC%AC%E4%B8%80].png"></th></tr></thead><tbody><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/bilibiliHotKey">哔哩哔哩热词系列</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/bilibilitv">哔哩哔哩小电视系列</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/bilibili2233">哔哩哔哩2233娘系列</a></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/bilibiliHotKey">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/bilibilitv">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/bilibili2233">oss</a></td></tr><tr><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://valinecdn.bili33.top/alu/%E4%B8%AD%E6%9E%AA.png"></td><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src='https://valinecdn.bili33.top/Menhera-chan/5.jpg' width=120 height=102></img></td><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://valinecdn.bili33.top/HONKAI3-Daily/14.gif"></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/alu">阿鲁alu系列</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/Menhera-chan">メンヘラちゃん(Menhera-chan)系列表情包</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/HONKAI3-Daily">HONKAI崩坏3 日常篇</a></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/alu">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/Menhera-chan">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/HONKAI3-Daily">oss</a></td></tr><tr><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://valinecdn.bili33.top/HONKAI3-Star/3.gif"></td><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://valinecdn.bili33.top/HONKAI3-Crayon/16.gif"></td><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://valinecdn.bili33.top/HONKAI3-Pure/13.gif"></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/HONKAI3-Star">HONKAI崩坏3 观星篇</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/HONKAI3-Crayon">HONKAI崩坏3 蜡笔日常篇</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/HONKAI3-Pure">HONKAI崩坏3 纯色日常篇</a></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/HONKAI3-Star">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/HONKAI3-Crayon">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/HONKAI3-Pure">oss</a></td></tr><tr><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src='https://valinecdn.bili33.top/HONKAI3-Stan/4f921b8ad8c16f3d2c73e3c04c5735ca9b41187b.gif' width=104 height=74.4></td><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src='https://valinecdn.bili33.top/HONKAI3-AIChan/d65b36ccae610bc4479209cd6e62bb91b0f76188.jpg' width=125 height=111></img></td><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src='https://valinecdn.bili33.top/HONKAI3-Durandal-Search/f1b9a456587638e488d93ccaa95dde59aef3af01.gif' height=100 width=100></img></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/HONKAI3-Stan">HONKAI崩坏3 史丹</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/HONKAI3-AIChan">HONKAI崩坏3 爱酱</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/HONKAI3-Durandal-Search">HONKAI崩坏3 目标！幽兰黛尔</a></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/HONKAI3-Stan">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/HONKAI3-AIChan">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/HONKAI3-Durandal-Search">oss</a></td></tr><tr><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src='https://valinecdn.bili33.top/HONKAI3-MEI/bf68423446465d396d3cbd8856882b5e9fb1c0c7.gif' width=120 height=120></td><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src='https://valinecdn.bili33.top/HONKAI3-NEWYEAR-2019/dc1a2b2032fad29373fe8460d4ad89ca848355a9.jpg' width=120 height=120></td><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://valinecdn.bili33.top/Tsuri-me-ju_mimi/10753793_key@2x.png"></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/HONKAI3-MEI">HONKAI崩坏3 芽衣的剑道修行</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/HONKAI3-NEWYEAR-2019">HONKAI崩坏3 2019新年</a></td><td align="center"><a href="https://github.com/2X-ercha/Twikoo-Magic/tree/master/Classification/Tsuri-me-ju_mimi">つり目獣耳スタンプ(Sticker of the slant eyes &amp; cat girl)</a></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/HONKAI3-MEI">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/HONKAI3-NEWYEAR-2019">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/Tsuri-me-ju_mimi">oss</a></td></tr><tr><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://valinecdn.bili33.top/Arcaea/184064198.png" style="zoom:50%;" /></td><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://valinecdn.bili33.top/Mafumafu/199749477.png" style="zoom:50%;" /></td><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://valinecdn.bili33.top/weibo/d_jiyan.png"></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/Arcaea">Arcaea</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/MafuMafu">動く！まふまふスタンプ（ねこ）Mafumafu Animation sticker (cat)</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/weibo">微博原生表情包</a></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/Arcaea">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/MafuMafu">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/weibo">oss</a></td></tr><tr><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://valinecdn.bili33.top/Tieba-New/image_emoticon25.png"></td><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://valinecdn.bili33.top/Snow-Miku/3583066@2x.png" style="zoom:50%;" /></td><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://valinecdn.bili33.top/Sweetie-Bunny/12311679.png" style="zoom:50%;" /></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/Tieba-New">百度贴吧原生表情包</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/Snow-Miku">Snow Miku雪初音表情包（LINE）</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/Sweetie-Bunny">うさみみ少女（SWEETIE BUNNY）</a></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/Tieba-New">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/Snow-Miku">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/Sweetie-Bunny">oss</a></td></tr><tr><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://valinecdn.bili33.top/Little-Bad/我们一起做坏坏的事.jpg" style="zoom:50%;" /></td><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://valinecdn.bili33.top/Yurui-Neko/029.png" style="zoom:50%;" /></td><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://valinecdn.bili33.top/Cute-Emoji/010.png" style="zoom:50%;" /></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/Little-Bad">小坏坏表情包</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/Yurui-Neko">Yurui-Neko</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/Cute-Emoji">Cute-Emoji</a></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/Little-Bad">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/Yurui-Neko">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/Cute-Emoji">oss</a></td></tr><tr><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://valinecdn.bili33.top/Set667/032.png" style="zoom:50%;" /></td><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://valinecdn.bili33.top/Marup/038.png" style="zoom:50%;" /></td><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://valinecdn.bili33.top/Convenience-Store-Notes2/010.png" style="zoom:50%;" /></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/Set667">Set667</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/Marup">Marup</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/Convenience-Store-Notes2">Convenience Store Notes2</a></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/Set667">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/Marup">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/Convenience-Store-Notes2">oss</a></td></tr><tr><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://valinecdn.bili33.top/Coolapk/coolapk_emotion_71.png"></td><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://valinecdn.bili33.top/aodamiao/01.gif"></td><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://valinecdn.bili33.top/lengtu/04.gif"></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/Coolapk">Coolapk酷安</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/aodamiao">aodamiao嗷大喵</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/lengtu">lengtu冷兔</a></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/Coolapk">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/aodamiao">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/lengtu">oss</a></td></tr><tr><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://valinecdn.bili33.top/QQ/tuosai.gif"></td><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://valinecdn.bili33.top/dingtalk/emotion_107.png"></td><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://valinecdn.bili33.top/Heybox/expression_heziji_22.png" style="zoom:33%;" /><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://valinecdn.bili33.top/Heybox/expression_cube_wa.png"></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/QQ">QQ官方表情</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/dingtalk">钉钉官方表情</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/Heybox">小黑盒表情包（包括盒娘和方块）</a></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/QQ">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/dingtalk">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/Heybox">oss</a></td></tr><tr><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://valinecdn.bili33.top/Majotabi/367516718.png"></td><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/cpddo/emotion/xiaochou/19.webp" style="zoom:50%;" /></td><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/cpddo/emotion/yuanshen/11.jpg" style="zoom:50%;" /></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/Majotabi">魔女之旅Majotabi（官方）</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/xiaochou">小丑</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/Genshin">原神</a></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/Majotabi">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/xiaochou">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/Genshin">oss</a></td></tr><tr><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/cpddo/emotion/baitian/file_6574887.webp" style="zoom: 33%;" /></td><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/cpddo/emotion/teletubbies/26.jpg" style="zoom:33%;" /></td><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/cpddo/emotion/tom_jerry/5.jpg" style="zoom:67%;" /></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/baitian">柏田</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/teletubbies">天线宝宝</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/tom_jerry">猫和老鼠</a></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/baitian">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/teletubbies">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/tom_jerry">oss</a></td></tr><tr><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/cpddo/emotion/ali/042.gif"  /></td><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/cpddo/emotion/xiaobiaoqing/11.jpg" style="zoom:150%;" /></td><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/cpddo/emotion/tusiji/0011.gif" style="zoom:150%;" /></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/ali">阿狸</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/weisuomeng">猥琐萌</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/tusiji">兔斯基</a></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/ali">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/weisuomeng">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/tusiji">oss</a></td></tr></tbody></table><h3 id="免责声明"><a href="#免责声明" class="headerlink" title="免责声明"></a>免责声明</h3><p>本仓库内所有图片均来源于网络，仅供学习交流使用。若用户违反相关法律法规造成损失，将由用户自行承担，本仓库所有者和PR提交者不承担一切责任！</p>]]></content>
      
      
      <categories>
          
          <category> Course </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Project </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新年前爬个明日方舟的立绘</title>
      <link href="53760.html"/>
      <url>53760.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>新年前随手写的爬虫，2021新年快乐呀！</p><hr><p>今天有个朋友跟我说，他想爬一下明日方舟的人物立绘</p><p>虽然没玩过明日方舟，但自己也去看了看图，好家伙，画得针不戳</p><p>emmm，那我试着爬一爬吧</p><p><strong>（本代码太水所以就不挂 GitHub 了啦,代码在下面）</strong></p><hr><p>先看看朋友给的图片的链接：<code>http://prts.wiki/images/6/65/%E7%AB%8B%E7%BB%98_%E5%87%AF%E5%B0%94%E5%B8%8C_2.png</code></p><p>按照这格式，我觉得只能访问主站了…… <a href="http://prts.wiki/">http://prts.wiki</a></p><p>主站长这样<del>（玩方舟的小伙伴别吐槽我）</del></p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20201230232636.png"></p><p>然后我在左侧菜单里面翻找了半天（啊啊啊，立绘在哪里啊！！！）</p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/NotFoundNEKKO/BQBTwT@1.0/真叫人质壁分离.jpg" width="300" height="300"><p>。。。我眼瞎，右上角大大的搜索框我看不见。。。</p><hr><p>搜索立绘，然后选了选范围为多媒体，然后最下面把单页最大显示数量调成500</p><p>唉，刚好一页（我不用从好多页网页爬图了，开心！）</p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20201230233429.png"></p><p>现在就得开始爬图了</p><hr><p>F12 看一下网页源代码</p><p>蒽？这个链接貌似有点不对</p><p>给的是 <code>/images/thumb/6/65/%E7%AB%8B%E7%BB%98_%E5%87%AF%E5%B0%94%E5%B8%8C_2.png</code> ，我要的是这个 <code>http://prts.wiki/images/6/65/%E7%AB%8B%E7%BB%98_%E5%87%AF%E5%B0%94%E5%B8%8C_2.png</code> 嘛！</p><p>比对一下，后面的都一样（那后期字符串剪一剪就差不多啦）</p><hr><p>因为之前也爬过图片，所以自己感觉总体来说难度不大（我发现我还是比较善于用字符串find）</p><p>我就直接上代码了</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://prts.wiki/index.php?title=%E7%89%B9%E6%AE%8A:%E6%90%9C%E7%B4%A2&amp;limit=500&amp;offset=0&amp;profile=images&amp;search=%E7%AB%8B%E7%BB%98&quot;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;Cookie&quot;</span>: <span class="string">&quot;arccount62298=c; arccount62019=c&quot;</span>,</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36 Edg/87.0.664.66&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">html = requests.get(url, headers=headers)</span><br><span class="line">html.encoding = html.apparent_encoding</span><br><span class="line">soup = BeautifulSoup(html.text, <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span> = soup.find_all(class_ = <span class="string">&quot;searchResultImage&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    os.mkdir(<span class="string">&quot;./Arknights&quot;</span>)  <span class="comment">##  创建文件夹</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">os.chdir(<span class="string">&quot;./Arknights&quot;</span>)</span><br><span class="line">num=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">    string = <span class="built_in">str</span>(s)</span><br><span class="line"></span><br><span class="line">    namebegin = string.find(<span class="string">&#x27;title=&quot;文件&#x27;</span>)</span><br><span class="line">    nameend = string[namebegin:].find(<span class="string">&#x27;png&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    name = string[namebegin+<span class="number">10</span>:namebegin+nameend+<span class="number">3</span>]</span><br><span class="line">    name = name.replace(<span class="string">&quot; &quot;</span>,<span class="string">&quot;_&quot;</span>)</span><br><span class="line"></span><br><span class="line">    urlbegin = string.find(<span class="string">&#x27;data-src=&quot;/images/thumb/&#x27;</span>)</span><br><span class="line">    urlend = string[urlbegin:].find(<span class="string">&#x27;png&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    imgurl = <span class="string">&#x27;http://prts.wiki/images/&#x27;</span> + string[urlbegin+<span class="number">24</span>:urlbegin+urlend+<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">    img = requests.get(imgurl, headers=headers).content</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(name, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(img)</span><br><span class="line">        num+=<span class="number">1</span></span><br><span class="line">        print(<span class="string">&quot;已爬取&#123;&#125;张,图片名称为：&#123;&#125;，链接为：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(num,name,imgurl))</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>代码不长，但因为不太会 <a href="https://beautifulsoup.readthedocs.io/zh_CN/v4.4.0/#">BeautifulSoup</a> 而走了不少弯路。不过最终还是爬完了所有立绘</p><p>最后结果如下</p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20201230234602.png"></p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20201230234715.png"></p><hr><blockquote><p>那位小伙伴说有重复，而且想做分类</p></blockquote><p>然后他自己写了半天，然后我看不下去了。。。</p><p>然后也做了分类去重（我就稍微多了几行。。。）</p><p>代码这里就不放了，小伙伴的博客文章里有我原先那个代码的注释版<del>（注释多的有点惨不忍睹）</del></p><p>以及我修改后的代码也在他的文章的最下边<a href="https://heart-of-engine.github.io/posts/fccf.html">点我右转！</a></p><p>最后再次祝看到这篇博客的小伙伴：</p><h2 id="2021，新年快乐鸭！"><a href="#2021，新年快乐鸭！" class="headerlink" title="2021，新年快乐鸭！"></a>2021，新年快乐鸭！</h2>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的吐槽日记 - 1</title>
      <link href="22496.html"/>
      <url>22496.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>ACM新生杯已经过去了两天，明天晚上也是校队面试了，也有些想吐槽吐槽。</p><hr><h2 id="考前"><a href="#考前" class="headerlink" title="考前"></a>考前</h2><p>说实在，本来对自己并不是太看好，特别是自己提前一个月说要复习但直到最后一天才临时抱佛脚看了一小会。<br>STL 也没复习完，临时看DP也看着看着就睡着了～<br>感觉自己好颓啊,,Ծ^Ծ,,</p><p>虽然说自己考过 OI ，但我感觉自己就和初学者没什么两样。</p><p>两年没考，估计新生杯也是水过去了。而且对全英文的题感觉十分恐惧，前一天就拿着去年的题目看了看，专门花了点时间试着翻译翻译。（蒽，感觉还可）</p><p>新生杯当天（12月26）早上也是差点就睡过头了，睡觉前迷迷糊糊订了七点半的闹钟，早上闹钟响却在八点四十。急匆匆地过去差点迟到,,Ծ^Ծ,,</p><hr><h2 id="考时考后"><a href="#考时考后" class="headerlink" title="考时考后"></a>考时考后</h2><p>5个小时考完人真的好累，考的时候还因为WA还找不到问题差点心态爆炸（下午才知道是题目数据问题），本来卡在第12名多提交了1次就掉到了13（第12有奖金，第13没有），想着既然都掉出去了就再提交一次吧（没想到下午重测后就是这次提交让我爬回了第12）。这时提交时已经只剩4分钟了。就收工了。（此时排名14）</p><p>之后还发生了点小插曲，走回快到德智园的时候突然发现没有签退，又狂奔了1公里回去（还好赶上了）</p><p>回去后一直在研究自己k题为什么错了，实在找不到自己错哪了。把代码发给出题者看，才发现后台数据把k题和l题数据搞反了。一顿修正后，我的排名从14升到11又掉回12。</p><p>心情起落就像过山车，但还好奖金有了(*￣m￣)</p><hr><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>晚上表彰还有一堆奇奇怪怪的事就懒得写了，就是自己的账号和名字后台数据又乱了导致了一堆乱七八糟的事</p><p>害，反正最终也是妥善解决了</p><p>不过最终ACM给我的最终感触是，<strong>终究还是太菜了</strong></p><hr><p>明晚就要校队纳新了。进了校队也意味着一件事，至少两个暑假我都得留校训练了</p><p>不能回中学看老师和学弟学妹，不能回家，不能找小伙伴……</p><p>游戏也不能花时间了（所以原神也卸了）</p><p>加油了，<strong>菜鸡GGP</strong>！</p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/ACM.jpg" alt="年纪轻轻打什么ACM"></p>]]></content>
      
      
      <categories>
          
          <category> Diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> Diary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬一言？白嫖太香啦！</title>
      <link href="59329.html"/>
      <url>59329.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>最近上课也上到爬虫了，我想起了 <code>@GamerNoTitle</code> 做过一个爬一言的BLOG：<a href="https://bili33.top/2020/02/11/Hitokoto-Spider/">Hitokoto-Spider 一言库爬虫开发日记</a> <del>（据说这是他的第一个Python实战）</del></p><p>于是我觉得我的第一个实战也可以来搞一个（当然抄代码是不可能的）</p><p>参考了一下一言的官方开发者文档，我就敲代码了</p><p>项目地址：<a href="https://github.com/2X-ercha/Hitokoto-Spider">https://github.com/2X-ercha/Hitokoto-Spider</a></p><h1 id="利用一言官方API爬取"><a href="#利用一言官方API爬取" class="headerlink" title="利用一言官方API爬取"></a>利用一言官方API爬取</h1><p>文档中接口说明如下：</p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20201224082448.png" alt="官方接口"></p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20201224082638.png" alt="请求地址"></p><p>因为有先看了大佬的博客，知道爬下来是个json（这玩意比html好解析多了）</p><p>所以我看了看官方json的说明：</p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20201224083113.png" alt="参数说明"></p><p>有些信息是我不需要的，我就不管他了</p><p>保留一下信息：<code>&quot;id&quot;, &quot;sort&quot;, &quot;hitokoto&quot;, &quot;from&quot;, &quot;from_who&quot;, &quot;creator&quot;, &quot;created_at&quot;</code></p><p>好了，我们开始爬了</p><h2 id="利用requests库爬取数据"><a href="#利用requests库爬取数据" class="headerlink" title="利用requests库爬取数据"></a>利用requests库爬取数据</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Hitokoto_spider</span>():</span></span><br><span class="line">    ids=np.zeros(<span class="number">10000</span>,dtype=<span class="built_in">bool</span>)</span><br><span class="line">    res=r.get(<span class="string">&quot;https://v1.hitokoto.cn&quot;</span>,timeout=<span class="number">60</span>)</span><br><span class="line">    </span><br><span class="line">    data=res.json()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> ids[data[<span class="string">&quot;id&quot;</span>]]:</span><br><span class="line">        print(<span class="string">&quot;&#123;&#125;:\t&#123;&#125;&quot;</span>.<span class="built_in">format</span>(data[<span class="string">&quot;id&quot;</span>],data[<span class="string">&quot;hitokoto&quot;</span>]))    <span class="comment"># 输出爬取内容</span></span><br><span class="line">        ids[data[<span class="string">&quot;id&quot;</span>]]=<span class="literal">True</span></span><br></pre></td></tr></table></figure><p>用ids数组来判断是否抓取过（因为我知道一言的总数不多，数组大小我就只设了10000）</p><p>然后爬着爬着，就错误了？？？</p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20201221112308.png"></p><p>我又爬了一次，让他输出错误的状态码，他给我返回了513</p><p>这是啥子嘛！</p><p>于是我加入了个判断状态码，状态码一错就休息一下重新再爬</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> res.status_code == <span class="number">513</span>:</span><br><span class="line">    time.sleep(<span class="number">30</span>)                          <span class="comment"># 抓取错误时延时delay时间后重新抓取</span></span><br><span class="line">    <span class="keyword">return</span> Hitokoto_spider()</span><br></pre></td></tr></table></figure><p>然后。。。出门了一趟，回来你给我看这个？？？</p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20201221161958.png"></p><p>原来我电脑休眠了</p><p>然后我把电脑的休眠调掉，把上面的 <code>res.status_code == 513</code> 改成 <code>res.status_code != 200</code></p><p>开始爬！</p><hr><p>在他爬的时候，我加入了json文件支持</p><p>由于本人不太喜欢手动创建，又怕我不小心勿删了文件导致程序出错</p><p>所以我给了个默认创建（所以这段代码比较长）</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_config</span>():</span>  <span class="comment"># 配置文件创建和读取</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&quot;./data&quot;</span>):</span><br><span class="line">            os.mkdir(<span class="string">&quot;./data&quot;</span>)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./data/_config.json&#x27;</span>) <span class="keyword">as</span> config_js:</span><br><span class="line">            config = js.load(config_js)</span><br><span class="line">            <span class="keyword">return</span> config</span><br><span class="line">    <span class="keyword">except</span> IOError:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./data/_config.json&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> config:</span><br><span class="line">            configs = &#123;</span><br><span class="line">                <span class="string">&quot;path&quot;</span>: <span class="string">&quot;./data/Hitokoto.csv&quot;</span>,        <span class="comment"># 文件输出路径</span></span><br><span class="line">                <span class="string">&quot;times&quot;</span>: <span class="number">3000</span>,                <span class="comment"># 抓取次数</span></span><br><span class="line">                <span class="string">&quot;delay&quot;</span>: <span class="number">2</span>,                <span class="comment"># 抓取休眠延迟，针对一言的QPS设置</span></span><br><span class="line">                <span class="string">&quot;timeout&quot;</span>: <span class="number">60</span>,                <span class="comment"># 连接超时时间（单位：秒）</span></span><br><span class="line">                <span class="comment"># 读取显示</span></span><br><span class="line">                <span class="string">&quot;from&quot;</span>: <span class="literal">True</span>,                <span class="comment"># 来自什么作品</span></span><br><span class="line">                <span class="string">&quot;from_who&quot;</span>: <span class="literal">True</span>,            <span class="comment"># 来自谁</span></span><br><span class="line">                <span class="string">&quot;creator&quot;</span>: <span class="literal">False</span>,            <span class="comment"># 哪位用户提交的</span></span><br><span class="line">                <span class="string">&quot;created_at&quot;</span>: <span class="literal">False</span>            <span class="comment"># 何时提交</span></span><br><span class="line">            &#125;</span><br><span class="line">            a = js.dumps(configs, indent=<span class="number">4</span>, separators=(<span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27;:&#x27;</span>))</span><br><span class="line">            config.write(a)</span><br><span class="line">        <span class="keyword">return</span> read_config()</span><br></pre></td></tr></table></figure><p>之后看到的一些调用就变成这样子了</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cfg = read_config()</span><br><span class="line">print(cfg[<span class="string">&quot;hitokoto&quot;</span>])</span><br></pre></td></tr></table></figure><hr><p>然后要把爬下来的一言存下来</p><p>我又加了一点点代码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_csv</span>():</span></span><br><span class="line">    cfg=read_config()</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(cfg[<span class="string">&quot;path&quot;</span>],<span class="string">&quot;w+&quot;</span>,newline=<span class="string">&quot;&quot;</span>,encoding=<span class="string">&quot;utf8&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        csv_file = csv.writer(file)</span><br><span class="line">        head = [<span class="string">&quot;id&quot;</span>, <span class="string">&quot;sort&quot;</span>, <span class="string">&quot;hitokoto&quot;</span>, <span class="string">&quot;from&quot;</span>, <span class="string">&quot;from_who&quot;</span>, <span class="string">&quot;creator&quot;</span>, <span class="string">&quot;created_at&quot;</span>] <span class="comment"># 创建csv表头</span></span><br><span class="line">        csv_file.writerow(head)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">append_csv</span>(<span class="params">inputs</span>):</span></span><br><span class="line">    cfg = read_config()</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(cfg[<span class="string">&quot;path&quot;</span>],<span class="string">&quot;a+&quot;</span>,newline=<span class="string">&#x27;&#x27;</span>,encoding=<span class="string">&quot;utf8&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        csv_file = csv.writer(file)</span><br><span class="line">        data = [inputs]</span><br><span class="line">        csv_file.writerows(data)</span><br></pre></td></tr></table></figure><p>同时对爬虫的代码进行一点点修改</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Hitokoto_spider</span>():</span></span><br><span class="line">    cfg=read_config()</span><br><span class="line">    res=r.get(<span class="string">&quot;https://v1.hitokoto.cn&quot;</span>,timeout=cfg[<span class="string">&quot;timeout&quot;</span>])</span><br><span class="line">    <span class="keyword">if</span> res.status_code != <span class="number">200</span>:</span><br><span class="line">        time.sleep(cfg[<span class="string">&quot;delay&quot;</span>])                          <span class="comment"># 抓取错误时延时delay时间后重新抓取</span></span><br><span class="line">        <span class="keyword">return</span> Hitokoto_spider()</span><br><span class="line">    data=res.json()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> ids[data[<span class="string">&quot;id&quot;</span>]]:</span><br><span class="line">        print(<span class="string">&quot;&#123;&#125;:\t&#123;&#125;&quot;</span>.<span class="built_in">format</span>(data[<span class="string">&quot;id&quot;</span>],data[<span class="string">&quot;hitokoto&quot;</span>]))    <span class="comment"># 输出爬取内容</span></span><br><span class="line">        ids[data[<span class="string">&quot;id&quot;</span>]]=<span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 自动把分类码还原为分类</span></span><br><span class="line">        sorts = [<span class="string">&quot;Animation&quot;</span>, <span class="string">&quot;Comics&quot;</span>, <span class="string">&quot;Games&quot;</span>, <span class="string">&quot;Literature&quot;</span>, <span class="string">&quot;Original&quot;</span>, <span class="string">&quot;Internet&quot;</span>,</span><br><span class="line">                 <span class="string">&quot;Other&quot;</span>, <span class="string">&quot;Film and television&quot;</span>, <span class="string">&quot;Poetry&quot;</span>, <span class="string">&quot;Netease&quot;</span>, <span class="string">&quot;Philosophy&quot;</span>, <span class="string">&quot;Smart&quot;</span>]</span><br><span class="line">        x=<span class="built_in">ord</span>(data[<span class="string">&quot;type&quot;</span>])<span class="number">-97</span></span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span>&lt;=x&lt;<span class="number">12</span>: sort = sorts[x]</span><br><span class="line">        <span class="keyword">else</span>: sort = <span class="string">&quot;Animation&quot;</span></span><br><span class="line"></span><br><span class="line">        inputs = [data[<span class="string">&quot;id&quot;</span>], sort, data[<span class="string">&quot;hitokoto&quot;</span>], data[<span class="string">&quot;from&quot;</span>], data[<span class="string">&quot;from_who&quot;</span>], data[<span class="string">&quot;creator&quot;</span>], data[<span class="string">&quot;created_at&quot;</span>]]</span><br><span class="line">        append_csv(inputs)</span><br></pre></td></tr></table></figure><p>之前的爬取错误也出来了</p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/98AF804F886C8E103E053686F3C1B219.png"></p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/B5ABF194905AA6D17F6A96DFCBBC8050.png"></p><p>我原本以为是 <code>TimeoutError</code></p><p>加入了 <code>except TimeoutError</code> 后仍然发生了这样的问题</p><p>不管了，不管他什么问题，通通 except !</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Hitokoto_spider</span>():</span>  <span class="comment"># 爬取</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        cfg=read_config()</span><br><span class="line">        res=r.get(<span class="string">&quot;https://v1.hitokoto.cn&quot;</span>,timeout=cfg[<span class="string">&quot;timeout&quot;</span>])</span><br><span class="line">        <span class="keyword">if</span> res.status_code != <span class="number">200</span>:</span><br><span class="line">            time.sleep(cfg[<span class="string">&quot;delay&quot;</span>])                          <span class="comment"># 抓取错误时延时delay时间后重新抓取</span></span><br><span class="line">            <span class="keyword">return</span> Hitokoto_spider()</span><br><span class="line">        data=res.json()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> ids[data[<span class="string">&quot;id&quot;</span>]]:</span><br><span class="line">            print(<span class="string">&quot;&#123;&#125;:\t&#123;&#125;&quot;</span>.<span class="built_in">format</span>(data[<span class="string">&quot;id&quot;</span>],data[<span class="string">&quot;hitokoto&quot;</span>]))    <span class="comment"># 输出爬取内容</span></span><br><span class="line">            ids[data[<span class="string">&quot;id&quot;</span>]]=<span class="literal">True</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 自动把分类码还原为分类</span></span><br><span class="line">            sorts = [<span class="string">&quot;Animation&quot;</span>, <span class="string">&quot;Comics&quot;</span>, <span class="string">&quot;Games&quot;</span>, <span class="string">&quot;Literature&quot;</span>, <span class="string">&quot;Original&quot;</span>, <span class="string">&quot;Internet&quot;</span>,</span><br><span class="line">                     <span class="string">&quot;Other&quot;</span>, <span class="string">&quot;Film and television&quot;</span>, <span class="string">&quot;Poetry&quot;</span>, <span class="string">&quot;Netease&quot;</span>, <span class="string">&quot;Philosophy&quot;</span>, <span class="string">&quot;Smart&quot;</span>]</span><br><span class="line">            x=<span class="built_in">ord</span>(data[<span class="string">&quot;type&quot;</span>])<span class="number">-97</span></span><br><span class="line">            <span class="keyword">if</span> <span class="number">0</span>&lt;=x&lt;<span class="number">12</span>: sort = sorts[x]</span><br><span class="line">            <span class="keyword">else</span>: sort = <span class="string">&quot;Animation&quot;</span></span><br><span class="line"></span><br><span class="line">            inputs = [data[<span class="string">&quot;id&quot;</span>], sort, data[<span class="string">&quot;hitokoto&quot;</span>], data[<span class="string">&quot;from&quot;</span>], data[<span class="string">&quot;from_who&quot;</span>], data[<span class="string">&quot;creator&quot;</span>], data[<span class="string">&quot;created_at&quot;</span>]]</span><br><span class="line">            append_csv(inputs)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        time.sleep(<span class="number">60</span>)</span><br><span class="line">        Hitokoto_spider()</span><br></pre></td></tr></table></figure><h2 id="加入重复爬取"><a href="#加入重复爬取" class="headerlink" title="加入重复爬取"></a>加入重复爬取</h2><p>上面的代码只能让我单次爬取，每次爬取都会覆盖原先的文档</p><p>所以我把ids数组存了下来</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_ids</span>():</span></span><br><span class="line">    ids_file = <span class="string">&quot;./data/ids.npy&quot;</span></span><br><span class="line">    np.save(ids_file, ids)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_ids</span>():</span></span><br><span class="line">    ids_file = <span class="string">&quot;./data/ids.npy&quot;</span></span><br><span class="line">    ids=np.load(ids_file)</span><br><span class="line">    <span class="keyword">return</span> ids</span><br></pre></td></tr></table></figure><p>在每次爬取前load，在爬取结束时save就可以啦！</p><h2 id="数据整理"><a href="#数据整理" class="headerlink" title="数据整理"></a>数据整理</h2><p>因为API接口的随机性，爬到的id并不是按顺序爬到的，所以得进行排序</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sort_Hitokoto</span>():</span></span><br><span class="line">    cfg = read_config()</span><br><span class="line">    Hitokoto_data = pd.read_csv(cfg[<span class="string">&quot;path&quot;</span>])</span><br><span class="line">    Hitokoto_data = Hitokoto_data.sort_values(<span class="string">&quot;id&quot;</span>)</span><br><span class="line">    Hitokoto_data.to_csv(cfg[<span class="string">&quot;path&quot;</span>],index=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>最终的结果长这样啦！</p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20201224092203.png"></p><hr><p>这个项目还没做完，之后可能会做API和GUI，以及非官方的一言收集</p><p>官方API的随机性使得我现在的爬取基本上是爬不到的</p><p>官方一言库共4396条</p><blockquote><p>2020.12.21，30000次爬取，获取3323条</p></blockquote><blockquote><p>2020.12.22，30000次爬取，获取29条</p></blockquote><blockquote><p>2020.12.23，40000次爬取，获取0条</p></blockquote><p>慢慢爬吧</p><hr><h1 id="附：直接利用官网的具体id爬取"><a href="#附：直接利用官网的具体id爬取" class="headerlink" title="附：直接利用官网的具体id爬取"></a>附：直接利用官网的具体id爬取</h1><p>这个方法是解析网站 <a href="https://hitokoto.cn/?id=1">https://hitokoto.cn/?id=1</a> 的html来爬去</p><p>网站地址后面id接的数字对应的就是相应一言的id，范围：1-6623</p><blockquote><p>优点：避免随机，一次爬取就可爬取全部</p></blockquote><blockquote><p>缺点：只能爬到id,一言文本和作者</p></blockquote><p>直接贴代码，有兴趣可以自己复制去试试</p><p><strong>注：id不连续</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;Cookie&quot;</span>: <span class="string">&quot;arccount62298=c; arccount62019=c&quot;</span>,</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36 Edg/87.0.664.66&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;hitokoto.csv&quot;</span>,<span class="string">&quot;w+&quot;</span>,newline=<span class="string">&quot;&quot;</span>,encoding=<span class="string">&quot;utf8&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    csv_file = csv.writer(file)</span><br><span class="line">    head = [<span class="string">&quot;id&quot;</span>, <span class="string">&quot;hitokoto&quot;</span>, <span class="string">&quot;from&quot;</span>] <span class="comment"># 创建csv表头</span></span><br><span class="line">    csv_file.writerow(head)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">id</span> <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6624</span>):</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        url = <span class="string">&quot;https://hitokoto.cn/?id=&quot;</span> + <span class="built_in">str</span>(<span class="built_in">id</span>)</span><br><span class="line">        html = requests.get(url, headers = headers, timeout = <span class="number">60</span>)</span><br><span class="line">        soup = BeautifulSoup(html.text, <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line"></span><br><span class="line">        hitokoto = soup.find(<span class="built_in">id</span> = <span class="string">&quot;hitokoto_text&quot;</span>)</span><br><span class="line">        <span class="comment"># print(hitokoto.string)</span></span><br><span class="line">        author = soup.find(<span class="built_in">id</span> = <span class="string">&quot;hitokoto_author&quot;</span>)</span><br><span class="line">        <span class="comment"># print(author.string[3:])</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;hitokoto.csv&quot;</span>,<span class="string">&quot;a+&quot;</span>,newline=<span class="string">&#x27;&#x27;</span>,encoding=<span class="string">&quot;utf8&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">            csv_file = csv.writer(file)</span><br><span class="line">            data = [[<span class="built_in">id</span>,hitokoto.string,author.string[<span class="number">3</span>:]]]</span><br><span class="line">            print(<span class="string">&quot;&#123;&#125;\t&#123;&#125;\t&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">id</span>,hitokoto.string,author.string[<span class="number">3</span>:]))</span><br><span class="line">            csv_file.writerows(data)</span><br><span class="line">    <span class="keyword">except</span>:<span class="keyword">continue</span></span><br></pre></td></tr></table></figure><p>（我就是用这个方式获取到了一言库的数据总数）</p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Project </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单搭建一个廉价、私人、无限制图片大小的稳定图床</title>
      <link href="44642.html"/>
      <url>44642.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>找一个合适的图床挺难的，但又不得不必要</p><p>作为大学4年都想好好写博客的我貌似用的完github的300M免费空间（我怕我之后会传视频之类的东西），而且github的服务器在国外，速度终归是比较慢</p><p>而且平常用的是 windows ，写博客用的是 ubantu，传文件总归比较麻烦</p><p>所以找个合适的图床还是十分有必要的</p><p>但很多公共图床又具有各种图片大小的限制，它的共享性质又让我难以接受（毕竟写博客需要上传一些私货）</p><p>所以就决定搭建自己的图床啦！</p><p><strong>以下开始正题</strong></p><hr><h1 id="图床服务器选择"><a href="#图床服务器选择" class="headerlink" title="图床服务器选择"></a>图床服务器选择</h1><p>我选择的是阿里云 OSS ，大公司的服务还有传输速度都还不错，而且对象存储 OSS 的价格一年才9块不到（双12打7折）<del>所以我又冲动的买了5年</del><br>容量也是挺大的，40G 用来做图床那简直绰绰有余。至于私人、安全这些方面就不用多说了</p><p>以及我用了 PicGo 来作为本地上传的工具，这下子方便很多啦！</p><h1 id="搭建过程"><a href="#搭建过程" class="headerlink" title="搭建过程"></a>搭建过程</h1><h2 id="阿里云OSS部分"><a href="#阿里云OSS部分" class="headerlink" title="阿里云OSS部分"></a>阿里云OSS部分</h2><h3 id="购买阿里云的OSS服务"><a href="#购买阿里云的OSS服务" class="headerlink" title="购买阿里云的OSS服务"></a>购买阿里云的OSS服务</h3><p>购买阿里云OSS的网站：<a href="https://www.aliyun.com/product/oss/">https://www.aliyun.com/product/oss/</a></p><p>可以选择按流付费(默认方式)和买套餐包年包月,个人推荐使用套餐（毕竟9块一年挺划算的）</p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/picturebed1.png"></p><p>买完后：</p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/picturebed2.png"></p><h3 id="在控制台新建Bucket"><a href="#在控制台新建Bucket" class="headerlink" title="在控制台新建Bucket"></a>在控制台新建Bucket</h3><p>bucket：一个存储图片的地方。</p><p>然后我们进行配置</p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/picturebed3-1.png"><br><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/picturebed3-2.png"></p><p>记得读写权限选择公共读，然后地域如果前面你购买时选的是中国大陆通用那你国内节点随意，其他情况的话前后相同就对啦</p><p>然后在概览里面找到这个，记下来（后面配置 PicGo 时要用到的 ”确认存储区域“ ）</p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/picturebed4.png"></p><p>然后在文件管理里创建你要放图片的文件夹。比如我这里是 img/</p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/picturebed5.png"></p><p>千万千万记得在文件夹名后面加 /</p><h3 id="创建子用户并获取-AccessKey"><a href="#创建子用户并获取-AccessKey" class="headerlink" title="创建子用户并获取 AccessKey"></a>创建子用户并获取 AccessKey</h3><p>鼠标移到右上角头像处，下拉菜单中有一个 AccessKey管理，戳进去</p><p>然后建立子用户</p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/picturebed6-1.png"></p><p>控制访问台这个可选可不选，但编程访问一定要选</p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/picturebed6-2.png"></p><p>然后掏出你的<del>小本本</del>记事本，复制下你的 AccessKeyId 和 AccessKeySecret，这个特别重要（因为之后是查不到的）</p><p><strong>↑ ↑ ↑ ！！！强调<del>3次</del>！！！↑ ↑ ↑</strong></p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/picturebed6-3.png"></p><p>最后给你的子用户上使用 OSS 服务的管理权限</p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/picturebed6-4.png"><br><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/picturebed6-5.png"></p><h2 id="PicGo-配置部分"><a href="#PicGo-配置部分" class="headerlink" title="PicGo 配置部分"></a>PicGo 配置部分</h2><p>PicGo 的 github项目地址 <a href="https://github.com/Molunerfinn/PicGo">在这里</a></p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/picturebed7.png"></p><p>下面的 readme 也有说明相关的下载链接及白嫖开发说明</p><p>你也可以从 <a href="https://github.com/Molunerfinn/PicGo/releases">https://github.com/Molunerfinn/PicGo/releases</a> 找到系统对应的文件进行下载</p><p>因为国内下载速度很慢，不限速链接在 <a href="https://xjhui.lanzoux.com/iiqzehthhni">这里</a> ，蓝奏云好评</p><p>安装后长这样：</p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/picturebed8-1.png"></p><p>进入图床设置的阿里云OSS</p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/picturebed8-2.png"></p><p>然后输入你上面记下来的 <code>AccessKeyId</code> 和 <code>AccessKeySecret</code> 、 <code>Bucket名</code> 、 <code>确认存储区域</code> 、 <code>指定存储路径</code></p><p>不会的话可以参考一下我的</p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/picturebed8-3.png"></p><p>然后我们就配置完啦！试一试，走你！</p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/picturebed8-4.png"></p><p>引用时直接点图片下方的复制就行啦（记得选择是什么格式的）</p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/picturebed9.png"></p><hr><p>这篇博客的所有图片都是从自己搭的图床引用的</p><p>这里吐槽一下 PicGo 的上传，有时候会上传失败让你重新配置，多试几次就行了</p>]]></content>
      
      
      <categories>
          
          <category> Course </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Course </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>stl的正确食用方式（不定时更新）</title>
      <link href="10146.html"/>
      <url>10146.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="C-STL-（一个标准模版库）"><a href="#C-STL-（一个标准模版库）" class="headerlink" title="C++ - STL （一个标准模版库）"></a>C++ - STL （一个标准模版库）</h1><p>(不定时更新)</p><p>STL 里包含了许多我们特别常用的标准数据结构和算法的模版，比如栈(stack)，队列(queue)，映射(map)，优先队列(priority_queue)，还有向量(priority_queue)等等。</p><p>有了这样一个模板库，像我这种懒人终于不需要手打一些数据结构啦（会是会，但我就是不想打）</p><p>再着，因为下个月月底得打ACM的新生赛了，因为各种各样的事咕了好久没有复习C++了，总归得开始点知识储备</p><p>所以得充实充实自己的脑袋瓜啦<del>（啊，脑壳好疼）</del></p><hr><blockquote><p>2020/11/29 突然想起来我有带《算法设计入门经典》，里面也有一大块是讲 STL 的，我决定就按着它的顺序复习（和学习）了</p></blockquote><h2 id="复习时间表"><a href="#复习时间表" class="headerlink" title="复习时间表"></a>复习时间表</h2><p>以此时间表来观察鸽子有多鸽</p><blockquote><p>2020/11/28 栈和队列</p></blockquote><blockquote><p>2020/11/29 排序检索</p></blockquote><blockquote><p>2020/11/30 不定长数组</p></blockquote><blockquote><p>2020/12/03 集合</p></blockquote><blockquote><p>2020/12/20 映射 <del>（你看，咕咕咕了好久）</del></p></blockquote><hr><h1 id="排序与检索"><a href="#排序与检索" class="headerlink" title="排序与检索"></a>排序与检索</h1><h2 id="排序-sort"><a href="#排序-sort" class="headerlink" title="排序(sort)"></a>排序(sort)</h2><p>sort 函数默认使用数组元素默认的大小进行升序排序，只有在需要按照特殊依据进行排序时才需要传入额外的比较函数。<br>我习惯上会定义成cmp<br>原理嘛<del>~</del>其实就是快速排序(quicksort)</p><h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3><p>sort 所在的库文件是 <algorithm>，所以：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br></pre></td></tr></table></figure><h3 id="sort函数的使用"><a href="#sort函数的使用" class="headerlink" title="sort函数的使用"></a>sort函数的使用</h3><p>假设一个数组 a 的 [x,y) 部分需要排序，则：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">sort(a+x,a+y); <span class="comment">//对数组a的 [x,y) 进行升序排序，直接改变这一区间的元素顺序</span></span><br></pre></td></tr></table></figure><p>如果要降序，就需要传入比较函数了，方法和下面类似，这里不再打出</p><p>当然也可以对结构体等使用，这时就得传入比较函数来确定需要比较的函数，例如</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//关键字排序</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">scores</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> Chinese,Math;</span><br><span class="line">&#125;class1;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(class1 a,class1 b)</span></span>&#123; <span class="comment">//关键字排序规则，降序</span></span><br><span class="line">    <span class="keyword">if</span>(a.Chinese!=b.Chinese)<span class="keyword">return</span> a.Chinese&gt;b.Chinese;</span><br><span class="line">    <span class="keyword">return</span> a.Math&gt;=b.Math;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    sort(a+x,a+y,cmp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上对于任意的对象，有了cmp和重载＜号，sort()都是可以进行相关的排序的（比如后面的victor，调用的方式改成了<code>sort(v.begin(),v.end())</code>）</p><h2 id="检索"><a href="#检索" class="headerlink" title="检索"></a>检索</h2><p>lower_bound() 和 upper_bound() 所在的库文件也是 <algorithm></p><h3 id="lower-bound-应用于有序区间"><a href="#lower-bound-应用于有序区间" class="headerlink" title="lower_bound (应用于有序区间)"></a>lower_bound (应用于有序区间)</h3><p>这是二分查找（binary search）的一种版本，试图在已排序的[first,last)中寻找元素value：</p><p>如果[first,last)具有与value相等的元素(s),便返回一个迭代器，指向其中第一个元素；</p><p>如果没有这样的元素存在，便返回“假设这样的元素存在时应该出现的位置”，</p><p>也就是说，<strong>它返回一个迭代器，指向第一个“不小于value”的元素；</strong></p><p>如果value大于 [first,last) 内的任何一个元素，则返回last。</p><h3 id="upper-bound-应用于有序区间"><a href="#upper-bound-应用于有序区间" class="headerlink" title="upper_bound (应用于有序区间)"></a>upper_bound (应用于有序区间)</h3><p>算法upper_bound是二分查找（binary search）法的一个版本。它试图在已排序的[first,last)中寻找value。更明确地说，它会返回“在不破坏顺序的情况下，可插入value的最后一个合适的位置”。</p><p>由于STL规范“区间圈定”时的起头和结尾并不对称（是的，[first,last)包含first但不包含last）,所以upper_bound与lower_bound的返回值意义大有不同。如果你查找某值，而它的确出现在区间之内，则lower_bound返回的是一个指向该元素的迭代器。然而upper_bound不这么做，因为upper_bound所返回的是在不破坏排序状态的情况下，value可被插入“最后一个”合适位置。</p><p>所以，<strong>如果value存在，那么它返回的迭代器将指向value的下一位置，而非指向value本身。</strong></p><h3 id="lower-bound-和-upper-bound-的使用"><a href="#lower-bound-和-upper-bound-的使用" class="headerlink" title="lower_bound() 和 upper_bound() 的使用"></a>lower_bound() 和 upper_bound() 的使用</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> pos1=lower_bound(a+x,a+y,value);</span><br><span class="line"><span class="keyword">int</span> pos1=upper_bound(a+x,a+y,value);</span><br></pre></td></tr></table></figure><hr><h1 id="不定长数组：vector"><a href="#不定长数组：vector" class="headerlink" title="不定长数组：vector"></a>不定长数组：vector</h1><p>这玩意我是基本没用到过啦，不过紫书后面的大整数类用的就是不定长数组（也可以称之为向量）。恰如它的翻译“不定长数组”，其实就是类似于 a- [] -</p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;  //导入不定长数组的模板库</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br></pre></td></tr></table></figure><p>建立各种数据类型的不定长数组</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vectorint;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; vectordouble;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; vectorchar;</span><br></pre></td></tr></table></figure><p>balabala……当然他可以是二维/三维的，such as:</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>*&gt; a;  <span class="comment">//二维vector</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>**&gt; a;  <span class="comment">//三维vector</span></span><br></pre></td></tr></table></figure><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="vector对象的存放-删除"><a href="#vector对象的存放-删除" class="headerlink" title="vector对象的存放/删除"></a>vector对象的存放/删除</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">v.push_back(num);  <span class="comment">//在数组的最后添加一个数据</span></span><br><span class="line">v.pop_back();  <span class="comment">//删除最后一个数据</span></span><br><span class="line">v.erase(pos);  <span class="comment">//删除pos位置的数据</span></span><br><span class="line">v.erase(begin,end);  <span class="comment">//删除 [begin,end) 区间的数据</span></span><br><span class="line">v.insert(pos,elem);  <span class="comment">//在pos位置插入数据elem</span></span><br></pre></td></tr></table></figure><h3 id="vector对象的数据读取-查找"><a href="#vector对象的数据读取-查找" class="headerlink" title="vector对象的数据读取/查找"></a>vector对象的数据读取/查找</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">num=v[i];  <span class="comment">//正常就可以像数组这么用</span></span><br><span class="line">v.front();  <span class="comment">//传回第一个数据</span></span><br><span class="line">v.back();  <span class="comment">//传回最后一个数据</span></span><br><span class="line">v.at(idx);  <span class="comment">//传回索引idx所指的数据，如果idx越界，抛出out_of_range</span></span><br><span class="line"></span><br><span class="line">v.begin();  <span class="comment">//返回数组头的指针/迭代器</span></span><br><span class="line">v.end();  <span class="comment">//返回数组尾+1的指针/迭代器</span></span><br><span class="line">v.rbegin();  <span class="comment">//传回一个逆向队列的第一个数据</span></span><br><span class="line">v.rend();  <span class="comment">//传回一个逆向队列的最后一个数据的下一个位置</span></span><br></pre></td></tr></table></figure><h3 id="vector对象的大小"><a href="#vector对象的大小" class="headerlink" title="vector对象的大小"></a>vector对象的大小</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">v.size();  <span class="comment">//返回容器中实际数据的个数</span></span><br><span class="line">v.max_size();  <span class="comment">//得到vector最大可以是多大</span></span><br><span class="line">v.resize(num);  <span class="comment">//改变当前使用数据的大小，如果它比当前使用的大，者填充默认值</span></span><br><span class="line">v.capacity();  <span class="comment">//返回当前vector分配的大小</span></span><br><span class="line">v.reserve(num);  <span class="comment">//改变当前vector所分配空间的大小</span></span><br><span class="line">v.clear();  <span class="comment">//移除容器中所有数据</span></span><br><span class="line">v.empty();  <span class="comment">//判断容器是否为空</span></span><br></pre></td></tr></table></figure><h3 id="vector对象的其他函数"><a href="#vector对象的其他函数" class="headerlink" title="vector对象的其他函数"></a>vector对象的其他函数</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">v1.swap(v2);  <span class="comment">//交换两个vector（好像是这么用的，有待考证）</span></span><br><span class="line">c.assign(beg,end);  <span class="comment">//将[beg; end)区间中的数据赋值给c</span></span><br><span class="line">c.assign(n,elem);  <span class="comment">//将n个elem的拷贝赋值给c</span></span><br><span class="line">get_allocator;  <span class="comment">//使用构造函数返回一个拷贝</span></span><br><span class="line">v.~ <span class="built_in">vector</span> &lt;Elem&gt;();  <span class="comment">//销毁所有数据，释放内存    </span></span><br></pre></td></tr></table></figure><h2 id="内存管理与效率（补充）"><a href="#内存管理与效率（补充）" class="headerlink" title="内存管理与效率（补充）"></a>内存管理与效率（补充）</h2><blockquote><p> 1》<strong>使用reserve()函数提前设定容量大小，避免多次容量扩充操作导致效率低下。</strong><br> (1) size()告诉你容器中有多少元素。它没有告诉你容器为它容纳的元素分配了多少内存。 <br> (2) capacity()告诉你容器在它已经分配的内存中可以容纳多少元素。那是容器在那块内存中总共可以容纳多少元素，而不是还可以容纳多少元素。如果你想知道一个vector或string中有多少没有被占用的内存，你必须从capacity()中减去size()。如果size和capacity返回同样的值，容器中就没有剩余空间了，而下一次插入（通过insert或push_back等）会引发上面的重新分配步骤。<br> (3) resize(Container::size_type n)强制把容器改为容纳n个元素。调用resize之后，size将会返回n。如果n小于当前大小，容器尾部的元素会被销毁。如果n大于当前大小，新默认构造的元素会添加到容器尾部。如果n大于当前容量，在元素加入之前会发生重新分配。<br> (4) reserve(Container::size_type n)强制容器把它的容量改为至少n，提供的n不小于当前大小。这一般强迫进行一次重新分配，因为容量需要增加。  </p></blockquote><p>例如：</p><p>假定你想建立一个容纳1-1000值的vector<int>。没有使用reserve，你可以像这样来做：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">1000</span>; ++i) v.push_back(i);</span><br></pre></td></tr></table></figure><p>在大多数STL实现中，这段代码在循环过程中将会导致2到10次重新分配。（10这个数没什么奇怪的。记住vector在重新分配发生时一般把容量翻倍，而1000约等于210。）</p><p>把代码改为使用reserve，我们得到这个：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">v.reserve(<span class="number">1000</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">1000</span>; ++i) v.push_back(i);</span><br></pre></td></tr></table></figure><p>这在循环中不会发生重新分配。</p><blockquote><p> 2》<strong>使用“交换技巧”来修整vector过剩空间/内存</strong><br> 有一种方法来把它从曾经最大的容量减少到它现在需要的容量。这样减少容量的方法常常被称为“收缩到合适（shrink to fit）”。该方法只需一条语句：</p></blockquote><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(ivec).swap(ivec);</span><br></pre></td></tr></table></figure><p>表达式vector<int>(ivec)建立一个临时vector，它是ivec的一份拷贝：vector的拷贝构造函数做了这个工作。但是，vector的拷贝构造函数只分配拷贝的元素需要的内存，所以这个临时vector没有多余的容量。然后我们让临时vector和ivec交换数据，这时我们完成了，ivec只有临时变量的修整过的容量，而这个临时变量则持有了曾经在ivec中的没用到的过剩容量。在这里（这个语句结尾），临时vector被销毁，因此释放了以前ivec使用的内存，收缩到合适。</p><hr><h1 id="集合：set"><a href="#集合：set" class="headerlink" title="集合：set"></a>集合：set</h1><p><del>在计算与人工智能概论课划水</del></p><p><code>set</code> 就是数学上的集合——每个元素只出现一次，且从小到大排序。</p><p>和 <code>sort</code> 一样，自定义类型也可以构造 <code>set</code> ，但同样必须定义 <code>&lt;</code> 运算符</p><p>原理上 <code>set</code> 使用了二叉树，同时，对于关联容器来说，不需要做内存拷贝和内存移动。set容器内所有元素都是以节点的方式来存储，其节点结构和链表差不多，指向父节点和子节点。插入的时候只需要稍做变换，把节点的指针指向新的节点就可以了。删除的时候类似，稍做变换后把指向删除节点的指针指向其他节点也OK了。这里的一切操作就是指针换来换去，和内存移动没有关系。</p><p>另外，在set中查找是使用二分查找</p><h2 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br></pre></td></tr></table></figure><p>常见的可以直接使用的类型 set 有</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; intset;  <span class="comment">//定义一个int类型的set容器</span></span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">float</span>&gt; floatset;  <span class="comment">//定义一个float类型的set容器</span></span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">char</span>&gt; charset;  <span class="comment">//定义一个char类型的set容器</span></span><br><span class="line"><span class="built_in">set</span>&lt;<span class="built_in">string</span>&gt; strset;  <span class="comment">//定义一个string类型的set容器</span></span><br></pre></td></tr></table></figure><p><del>跟其他的容器看起来也差不多吧</del></p><h2 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h2><h3 id="set对象的存放"><a href="#set对象的存放" class="headerlink" title="set对象的存放"></a>set对象的存放</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">s.insert(key_value);  <span class="comment">//将key_value插入到set中 ，返回值是pair&lt;set&lt;int&gt;::iterator,bool&gt;，bool标志着插入是否成功，而iterator代表插入的位置，若key_value已经在set中，则iterator表示的key_value在set中的位置</span></span><br><span class="line">s.inset(first,second);  <span class="comment">//将定位器first到second之间的元素插入到set中，返回值是void</span></span><br><span class="line"></span><br><span class="line">s.erase(iterator);  <span class="comment">//删除定位器iterator指向的值</span></span><br><span class="line">s.erase(first,second);  <span class="comment">//删除定位器first和second之间的值</span></span><br><span class="line">s.erase(key_value);  <span class="comment">//删除键值key_value的值</span></span><br></pre></td></tr></table></figure><p><strong>Ps set中的删除操作是不进行任何的错误检查的，比如定位器的是否合法等等，所以用的时候自己一定要注意。</strong></p><h3 id="set对象的数据读取"><a href="#set对象的数据读取" class="headerlink" title="set对象的数据读取"></a>set对象的数据读取</h3><p>显然set容器是没办法向数组那样直接用下标查询的，查询只能靠迭代器来实现</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">s.find(value);  <span class="comment">//返回给定值value的指针，如果没找到则返回end()</span></span><br><span class="line">s.lower_bound(key_value);  <span class="comment">//返回第一个大于等于key_value的定位器</span></span><br><span class="line">s.upper_bound(key_value);  <span class="comment">//返回最后一个大于等于key_value的定位器</span></span><br><span class="line">s.count();  <span class="comment">//用来查找set中某个某个键值出现的次数</span></span><br><span class="line">s.begin();  <span class="comment">//返回set容器的第一个迭代器</span></span><br><span class="line">s.end();  <span class="comment">//返回set容器的最后一个迭代器</span></span><br><span class="line">s.rbegin();  <span class="comment">//传回一个逆向set的第一个数据</span></span><br><span class="line">s.rend();  <span class="comment">//传回一个逆向set的最后一个数据的下一个位置</span></span><br></pre></td></tr></table></figure><p><strong>Ps count()这个函数在set并不是很实用，因为一个键值在set只可能出现0或1次，这样就变成了判断某一键值是否在set出现过了</strong></p><p><strong>Ps 注意begin()和end()函数是不检查set是否为空的，使用前最好使用empty()检验一下set是否为空.</strong></p><h3 id="set对象的大小"><a href="#set对象的大小" class="headerlink" title="set对象的大小"></a>set对象的大小</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">s.empty();  <span class="comment">//判断set容器是否为空</span></span><br><span class="line">s.size();  <span class="comment">//返回当前set容器中的元素个数</span></span><br><span class="line">s.max_size();  <span class="comment">//返回set容器可能包含的元素最大个数</span></span><br><span class="line">s.clean();  <span class="comment">//删除set容器中所有的元素</span></span><br></pre></td></tr></table></figure><hr><h1 id="映射：map"><a href="#映射：map" class="headerlink" title="映射：map"></a>映射：map</h1><p>这个东西真的跟 python 的 <code>dict</code> 是差不多的（我觉得就一样！！！）</p><p>就是 key 到 value 的一个映射</p><p>简单的理解一下，其实就是数组的下标变成了非数字的各种数据类型，比如字符，字符串。</p><h2 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>: </span><br></pre></td></tr></table></figure><p>然后就跟其他的数据结构不太一样了</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">map</span> &lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; char2int_map;</span><br><span class="line"><span class="built_in">map</span> &lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; str2int_map;</span><br></pre></td></tr></table></figure><p>当然也可以</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">map</span> &lt;<span class="keyword">char</span>,<span class="keyword">char</span>&gt; char2char_map;</span><br><span class="line"><span class="built_in">map</span> &lt;<span class="keyword">char</span>,<span class="built_in">string</span>&gt; char2str_map;</span><br><span class="line"><span class="built_in">map</span> &lt;<span class="built_in">string</span>,<span class="keyword">char</span>&gt; str2char_map;</span><br></pre></td></tr></table></figure><h2 id="方法-2"><a href="#方法-2" class="headerlink" title="方法"></a>方法</h2><h3 id="map对象添加元素"><a href="#map对象添加元素" class="headerlink" title="map对象添加元素"></a>map对象添加元素</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt; map1;  </span><br><span class="line">map1.insert(<span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt;(<span class="number">1</span>,<span class="string">&quot;one&quot;</span>));</span><br><span class="line">map1.insert(<span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt;::value_ type(<span class="number">2</span>,<span class="string">&quot;two&quot;</span>));</span><br><span class="line">map1[<span class="number">3</span>]=<span class="string">&quot;three&quot;</span>;  <span class="comment">//map中最简单最常用的插入添加！</span></span><br></pre></td></tr></table></figure><h3 id="map对象的查找"><a href="#map对象的查找" class="headerlink" title="map对象的查找"></a>map对象的查找</h3><p>find()函数返回一个迭代器指向键值为key的元素，如果没找到就返回指向map尾部的迭代器。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="built_in">string</span> &gt;::iterator it;</span><br><span class="line">it=map1.find(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">if</span>(it==maplive.end())</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;No find&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Find&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><h3 id="map对象的删除"><a href="#map对象的删除" class="headerlink" title="map对象的删除"></a>map对象的删除</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span> ,<span class="built_in">string</span> &gt;::iterator it;</span><br><span class="line">it=maplive.find(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">if</span>(it==maplive.end())</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;no find&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span>  maplive.erase(it);  <span class="comment">//delete 112;</span></span><br></pre></td></tr></table></figure><h3 id="map对象的交换"><a href="#map对象的交换" class="headerlink" title="map对象的交换"></a>map对象的交换</h3><p>map中的swap不是一个容器中的元素交换，而是两个容器交换</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">map1.swap(map2);</span><br></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>map中的元素是自动按key升序排序,所以不能对map用sort函数</p><p><strong>以下列出map的其他各种方法</strong> <del>（大同小异）</del></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">m.begin();  <span class="comment">//返回指向map头部的迭代器</span></span><br><span class="line">m.clear();  <span class="comment">//删除所有元素</span></span><br><span class="line">m.count();  <span class="comment">//返回指定元素出现的次数</span></span><br><span class="line">m.empty();  <span class="comment">//如果map为空则返回true</span></span><br><span class="line">m.end();    <span class="comment">//返回指向map末尾的迭代器</span></span><br><span class="line">m.equal_range();  <span class="comment">//返回特殊条目的迭代器对</span></span><br><span class="line">m.erase();  <span class="comment">//删除一个元素</span></span><br><span class="line">m.find();   <span class="comment">//查找一个元素</span></span><br><span class="line">m.get_allocator();<span class="comment">//返回map的配置器</span></span><br><span class="line">m.insert(); <span class="comment">//插入元素</span></span><br><span class="line">m.key_comp();  <span class="comment">//返回比较元素key的函数</span></span><br><span class="line">m.lower_bound();  <span class="comment">//返回键值&gt;=给定元素的第一个位置</span></span><br><span class="line">m.max_size();  <span class="comment">//返回可以容纳的最大元素个数</span></span><br><span class="line">m.rbegin(); <span class="comment">//返回一个指向map尾部的逆向迭代器</span></span><br><span class="line">m.rend();   <span class="comment">//返回一个指向map头部的逆向迭代器</span></span><br><span class="line">m.size();   <span class="comment">//返回map中元素的个数</span></span><br><span class="line">m.swap();   <span class="comment">//交换两个map</span></span><br><span class="line">m.upper_bound();  <span class="comment">//返回键值&gt;给定元素的第一个位置</span></span><br><span class="line">m.value_comp();   <span class="comment">//返回比较元素value的函数</span></span><br></pre></td></tr></table></figure><p><strong>Ps：注意用map的时候大部分要标准化，比如大小写统一之类的</strong></p><hr><h1 id="栈、队列和优先队列"><a href="#栈、队列和优先队列" class="headerlink" title="栈、队列和优先队列"></a>栈、队列和优先队列</h1><h2 id="栈-stack"><a href="#栈-stack" class="headerlink" title="栈(stack)"></a>栈(stack)</h2><p>栈，用一个很神奇的东西描述一下——腔肠动物（有口无肝门）<del>有点恶心</del></p><p>不过也道出了栈的本质——只有一个出入口<del>（吃什么吐什么）</del></p><p>像一个桶，最底下的东西是最先放进去的，也只有在最后才能拿出来，进去的顺序是12345，出来的顺序就是54321。 </p><p>我们基本的写法是自己用数组模拟并定义相关的各种函数，但既然有了这样一个模板库，我们就方便很多了（如果你大致知道一点类就知道，其实C++已经把这些数据结构封装成了类,所以我们才可以直接调用）</p><p>以下开始正题：</p><h3 id="定义-3"><a href="#定义-3" class="headerlink" title="定义"></a>定义</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;  //导入栈的模板库</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br></pre></td></tr></table></figure><p>栈里可以存放的数据类型挺多的，例如：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">stack</span> &lt;<span class="keyword">int</span>&gt; stkInt;  <span class="comment">//一个存放int的stack容器。</span></span><br><span class="line"><span class="built_in">stack</span> &lt;<span class="keyword">float</span>&gt; stkFloat;  <span class="comment">//一个存放float的stack容器。</span></span><br><span class="line"><span class="built_in">stack</span> &lt;<span class="built_in">string</span>&gt; stkString;  <span class="comment">//一个存放string的stack容器。 </span></span><br></pre></td></tr></table></figure><p>甚至可以定义个指针类型啥的<del>（反正指针我忘记怎么打了）</del></p><h3 id="方法-3"><a href="#方法-3" class="headerlink" title="方法"></a>方法</h3><h4 id="stack对象的存放"><a href="#stack对象的存放" class="headerlink" title="stack对象的存放"></a>stack对象的存放</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">stack</span>.push(elem);  <span class="comment">//往栈头添加元素</span></span><br><span class="line"><span class="built_in">stack</span>.pop();  <span class="comment">//从栈头移除第一个元素 </span></span><br></pre></td></tr></table></figure><h4 id="stack对象的拷贝构造与赋值"><a href="#stack对象的拷贝构造与赋值" class="headerlink" title="stack对象的拷贝构造与赋值"></a>stack对象的拷贝构造与赋值</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">stack</span>(<span class="keyword">const</span> <span class="built_in">stack</span> &amp;stk); / /拷贝构造函数</span><br><span class="line"><span class="built_in">stack</span>&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> <span class="built_in">stack</span> &amp;stk);  <span class="comment">//重载等号操作符</span></span><br></pre></td></tr></table></figure><p>such as</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; stkIntA, stkIntC;</span><br><span class="line"><span class="function"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; <span class="title">stkIntB</span><span class="params">(stkIntA)</span></span>;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; stkIntD;</span><br><span class="line">stkIntD = stkIntC;</span><br></pre></td></tr></table></figure><h4 id="stack对象的数据读取"><a href="#stack对象的数据读取" class="headerlink" title="stack对象的数据读取"></a>stack对象的数据读取</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">stack</span>.top();  <span class="comment">//返回最后一个压入栈元素</span></span><br></pre></td></tr></table></figure><h4 id="stack对象的大小"><a href="#stack对象的大小" class="headerlink" title="stack对象的大小"></a>stack对象的大小</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">stack</span>.empty();  <span class="comment">//判断堆栈是否为空</span></span><br><span class="line"><span class="built_in">stack</span>.size();  <span class="comment">//返回堆栈的大小</span></span><br></pre></td></tr></table></figure><h3 id="经典例题"><a href="#经典例题" class="headerlink" title="经典例题"></a>经典例题</h3><p><a href="https://www.luogu.com.cn/problem/P1739">表达式括号匹配</a></p><p><a href="https://www.luogu.com.cn/problem/P1044">栈</a></p><p><a href="https://www.luogu.com.cn/problem/P1155">双栈排序</a></p><h2 id="队列-queue"><a href="#队列-queue" class="headerlink" title="队列(queue)"></a>队列(queue)</h2><p>这个我就不用什么奇怪的东西来形容了，这个就是有入口有出口，按顺序排队进去排队出来</p><p><del>（干正事吧，芭芭脱丝）</del></p><h3 id="定义-4"><a href="#定义-4" class="headerlink" title="定义"></a>定义</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br></pre></td></tr></table></figure><p>同样也有存各种数据类型的队列</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; queueInt;  <span class="comment">//一个存放int的queue容器。</span></span><br><span class="line"><span class="built_in">queue</span> &lt;<span class="keyword">float</span>&gt; queueFloat;  <span class="comment">//一个存放float的queue容器。</span></span><br><span class="line"><span class="built_in">queue</span> &lt;<span class="built_in">string</span>&gt; queueString;  <span class="comment">//一个存放string的queue容器。 </span></span><br></pre></td></tr></table></figure><h3 id="方法-4"><a href="#方法-4" class="headerlink" title="方法"></a>方法</h3><h4 id="queue对象的存取"><a href="#queue对象的存取" class="headerlink" title="queue对象的存取"></a>queue对象的存取</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">queue</span>.push(X);  <span class="comment">//在队尾压入新元素 ，X为要压入的元素</span></span><br><span class="line"><span class="built_in">queue</span>.pop();  <span class="comment">//删除队列首元素但不返回其值</span></span><br></pre></td></tr></table></figure><h4 id="queue对象的数据读取"><a href="#queue对象的数据读取" class="headerlink" title="queue对象的数据读取"></a>queue对象的数据读取</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">queue</span>.front();  <span class="comment">// 返回队首元素的值，但不删除该元素</span></span><br><span class="line"><span class="built_in">queue</span>.back();  <span class="comment">//返回队列尾元素的值，但不删除该元素  </span></span><br></pre></td></tr></table></figure><h4 id="queue对象的大小"><a href="#queue对象的大小" class="headerlink" title="queue对象的大小"></a>queue对象的大小</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">queue</span>.empty();  <span class="comment">//判断堆栈是否为空</span></span><br><span class="line"><span class="built_in">queue</span>.size();  <span class="comment">//返回堆栈的大小</span></span><br></pre></td></tr></table></figure><h3 id="经典例题-1"><a href="#经典例题-1" class="headerlink" title="经典例题"></a>经典例题</h3><p>广度优先算法(bfs)就是一个使用队列的例子</p><p>其他的例题嘛。。。说实在我好像没写过多少，看到再列出来吧</p><hr><blockquote><p>这里又开始咕了</p></blockquote><p>· 优先队列</p><hr>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>筛法</title>
      <link href="33729.html"/>
      <url>33729.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="闲来无事稍稍复习了一下筛法"><a href="#闲来无事稍稍复习了一下筛法" class="headerlink" title="闲来无事稍稍复习了一下筛法"></a>闲来无事稍稍复习了一下筛法</h1><p>素数这玩意大家都应该不陌生，常规的判断素数的方法应该都会。只不过，常规的方式仅仅只是判断一个数是否为素数，如果判断出0~n中所有的素数，常规方式的时间复杂度就比较高了。</p><p>所以大佬们搞出了好多大佬方法，我习惯统称为素数筛（其实应该叫<strong>筛法</strong>）。</p><p><strong>PS: 这期的代码会用 <code>C++</code> 和 <code>Python</code> 写</strong></p><hr><h2 id="先来常规方法趴"><a href="#先来常规方法趴" class="headerlink" title="先来常规方法趴"></a>先来常规方法趴</h2><p>常规方式，就是判定n是否是素数，就是循环2~n-1，判断是否整除</p><p>这里写的比较完整点，下面小于2的判断就不打了</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(n&lt;<span class="number">2</span>)<span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;%d&lt;2，不予判断&quot;</span>,n); </span><br><span class="line"><span class="keyword">bool</span> isprime=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;n;i++)</span><br><span class="line"><span class="keyword">if</span>(n%i==<span class="number">0</span>)&#123;</span><br><span class="line">isprime=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(isprime)<span class="built_in">cout</span>&lt;&lt;n&lt;&lt;<span class="string">&quot;为素数&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;n&lt;&lt;<span class="string">&quot;为合数&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line">isprime=<span class="literal">True</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="built_in">int</span>(math.sqrt(n))+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span> n%i==<span class="number">0</span>:</span><br><span class="line">        isprime=<span class="literal">False</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">if</span> isprime:print(<span class="string">&quot;&#123;&#125;为素数&quot;</span>.<span class="built_in">format</span>(n))</span><br><span class="line"><span class="keyword">else</span>:print(<span class="string">&quot;&#123;&#125;为合数&quot;</span>.<span class="built_in">format</span>(n))</span><br></pre></td></tr></table></figure><p>代码是一样的，只是我现在是在学 <code>python</code> ，所以我会打个 <code>python</code> 的版本出来（由于 <code>python</code> 本身的原因，速度会比 <code>C++</code> 慢） </p><p>当然，如果只是判断一个数，以上的常规做法就足够使用了，但如果是多个数，就需要弄出一个素数表了</p><p>（如果用上面方法进行 2 ~ N 的筛查，时间复杂度为O(n^2)</p><hr><hr><h2 id="筛法"><a href="#筛法" class="headerlink" title="筛法"></a>筛法</h2><p><strong>PS：以下代码是求 1 ~ N 的素数</strong></p><p>众所周知，合数的定义说明它有除 1 和本身外的因子</p><p>那么，合数是质数或合数的倍数了，也就可以通过筛除当前数的小于n的倍数来解决许多合数</p><p>下面讲解的三种算法中，都用了这样一个原理：</p><p><strong>如果当前的数没有被筛出，显然它不是前面任意数的倍数，那它实锤素数了，把他记进小本本</strong></p><hr><h3 id="朴素筛"><a href="#朴素筛" class="headerlink" title="朴素筛"></a>朴素筛</h3><p>为什么朴素呢，这个方法确实简单直白</p><p>时间复杂度为O(nlogn)</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> prime[<span class="number">1001</span>];</span><br><span class="line"><span class="keyword">bool</span> st[<span class="number">1001</span>]; <span class="comment">// 假设都是素数吧（true为合数）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 朴素筛</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_prime</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!st[i])prime[++prime[<span class="number">0</span>]]=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i+i;j&lt;=n;j+=i)st[j]=<span class="literal">true</span>; <span class="comment">// 不管是合数还是质数，都用来筛掉后面它的倍数</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">st[<span class="number">0</span>]=<span class="literal">true</span>,st[<span class="number">1</span>]=<span class="literal">true</span>; <span class="comment">// 先把0和1筛掉</span></span><br><span class="line">get_prime(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">prime=[]</span><br><span class="line">st=[<span class="literal">False</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">1001</span>)] <span class="comment"># 假设都是素数吧（True为合数）</span></span><br><span class="line">st[<span class="number">0</span>]=<span class="literal">True</span></span><br><span class="line">st[<span class="number">1</span>]=<span class="literal">True</span></span><br><span class="line"><span class="comment"># 先把0和1筛掉</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 朴素筛</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_prime</span>(<span class="params">N</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,N+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> st[i]==<span class="literal">False</span>:</span><br><span class="line">            prime.append(i)</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+i,N+<span class="number">1</span>,i): <span class="comment"># 不管是合数还是质数，都用来筛掉后面它的倍数</span></span><br><span class="line">            st[j]=<span class="literal">True</span></span><br><span class="line"></span><br><span class="line">get_prime(<span class="number">1000</span>)</span><br></pre></td></tr></table></figure><hr><h3 id="埃氏筛"><a href="#埃氏筛" class="headerlink" title="埃氏筛"></a>埃氏筛</h3><p>全称 ‘’<a href="https://baike.baidu.com/item/%E5%9F%83%E6%8B%89%E6%89%98%E6%96%AF%E7%89%B9%E5%B0%BC">埃拉托斯特尼</a>筛法’’，好家伙，他发现上面那个朴素筛干了一件不太好的事</p><p>明明一个合数都可以分解质因数了，为什么要合数筛合数啊，全用素数筛它不香吗？</p><p>于是许多数字不需要被筛它的(因素个数)遍了</p><p>这大大节省了好多时间啊</p><p>于是优秀的埃氏筛时间复杂度为O(nloglogn)，<del>emmm，针不戳！</del></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> prime[<span class="number">1001</span>];</span><br><span class="line"><span class="keyword">bool</span> st[<span class="number">1001</span>]; <span class="comment">// 假设都是素数吧（true为合数）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 埃氏筛</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_prime</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!st[i])&#123;</span><br><span class="line">prime[++prime[<span class="number">0</span>]]=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i+i;j&lt;=n;j+=i)st[j]=<span class="literal">true</span>; <span class="comment">// 可以用质数就把所有的合数都筛掉</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">st[<span class="number">0</span>]=<span class="literal">true</span>,st[<span class="number">1</span>]=<span class="literal">true</span>; <span class="comment">// 先把0和1筛掉</span></span><br><span class="line">get_prime(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">prime=[]</span><br><span class="line">st=[<span class="literal">False</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">1001</span>)] <span class="comment"># 假设都是素数吧（true为合数）</span></span><br><span class="line">st[<span class="number">0</span>]=<span class="literal">True</span></span><br><span class="line">st[<span class="number">1</span>]=<span class="literal">True</span></span><br><span class="line"><span class="comment"># 先把0和1筛掉</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 埃氏筛</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_prime</span>(<span class="params">N</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,N+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> st[i]==<span class="literal">False</span>:</span><br><span class="line">            prime.append(i)</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+i,N+<span class="number">1</span>,i): <span class="comment"># 可以用质数就把所有的合数都筛掉</span></span><br><span class="line">                st[j]=<span class="literal">True</span></span><br><span class="line"></span><br><span class="line">get_prime(<span class="number">1000</span>)</span><br></pre></td></tr></table></figure><p>于是程序员们发现，这，这不就把最内层的 for 放到了 if 里面？</p><p><del>啊这，这埃拉托斯特尼就这样名垂千古了？</del></p><p>不过说实在效率确实提升了挺多（已经很接近O(n)了）</p><hr><h3 id="线性筛"><a href="#线性筛" class="headerlink" title="线性筛"></a>线性筛</h3><p>这个就很 nb 了，它还有另外一个名字：”欧拉筛法” <del>（居然百度百科查不到）</del></p><p>上面两种筛法都有一个缺点，就是一个合数可能会被多个数重复筛出</p><p>例如朴素筛中，100会重复被2,4,5,10,20,25,50筛出，而在埃氏筛中，100只会被2和5筛出</p><p>而在埃氏筛中，30会被2,3,5筛出</p><p>埃氏筛只解决了一部分问题，剩余的线性筛就出来干活了</p><p>一个合数只会经过一次筛选，它的核心在于</p><p><strong>只被该合数最小的质因数筛出</strong></p><p>那么，如何实现这个算法？</p><p>假设 a 是合数 n 的最小质因数，那么 n = i * (n / i)</p><p>i 和 n / i 一定小于 n ，i 已经在 2 ~ n 的素数表里了，所以我们要做的就是在循环到 n / i 时把 n 筛出</p><p>为了更好地理解，我去爬了张图：</p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/oula.png"></p><p>从图上我们看到，第一列筛掉的是最小素因子是 2 的数，第二列筛掉的是最小素因子为 3 的数，依次类推，可以把所有的合数都筛掉。</p><p>因为是按照最小素因子筛选，每个数的最小素因数只有一个，所以可以保证每个数都只会被筛一遍。</p><p>例如， i = 6 时，第一个素数是 2 ，能整除，筛掉 12 后就break；至于第二个素数 3 ， 6 x 3 中的最小素因数肯定是前一个素数 2 ，所以它要到  i = 9 ，素数取 2 时才被筛掉。</p><p>欧拉筛的速度大概是埃氏的 3 - 4 倍，然而在小数据中却有被完爆的可能<del>（因为埃氏筛cache友好？）</del>。</p><p>线性筛的时间复杂度就十分优秀了，为O(n)</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> prime[<span class="number">1001</span>];</span><br><span class="line"><span class="keyword">bool</span> isprime[<span class="number">1001</span>]; <span class="comment">// 假设都是素数吧（true为合数）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 线性筛</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_prime</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!isprime[i])prime[++prime[<span class="number">0</span>]]=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=prime[<span class="number">0</span>]&amp;&amp;i*prime[j]&lt;=n;++j) <span class="comment">// 对于任意一个合数x，假设pj为x最小质因子，当i&lt;x/pj时，一定会被筛掉</span></span><br><span class="line">&#123;</span><br><span class="line">isprime[i*prime[j]]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span>(i%prime[j]==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line"><span class="comment">// 1.i%pj==0, pj定为i最小质因子，pj也定为pj*i最小质因子</span></span><br><span class="line">             <span class="comment">// 2.i%pj!=0, pj定小于i的所有质因子，所以pj也为pj*i最小质因子</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">isprime[<span class="number">0</span>]=<span class="literal">true</span>,isprime[<span class="number">1</span>]=<span class="literal">true</span>; <span class="comment">// 先把0和1筛掉</span></span><br><span class="line">get_prime(<span class="number">100</span>);</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">prime=[]</span><br><span class="line">st=[<span class="literal">False</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">1001</span>)] <span class="comment"># 假设都是素数吧（true为合数）</span></span><br><span class="line">st[<span class="number">0</span>]=<span class="literal">True</span></span><br><span class="line">st[<span class="number">1</span>]=<span class="literal">True</span></span><br><span class="line"><span class="comment"># 先把0和1筛掉</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 线性筛</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_prime</span>(<span class="params">N</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,N+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> st[i]==<span class="literal">False</span>:</span><br><span class="line">            prime.append(i)</span><br><span class="line">        <span class="keyword">for</span> pj <span class="keyword">in</span> prime: <span class="comment"># 对于任意一个合数x，假设pj为x最小质因子，当i&lt;x/pj时，一定会被筛掉</span></span><br><span class="line">            <span class="keyword">if</span> pj*i&gt;N:<span class="keyword">break</span></span><br><span class="line">            st[pj*i]=<span class="literal">True</span></span><br><span class="line">            <span class="keyword">if</span> i%pj==<span class="number">0</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="comment"># 1.i%pj==0, pj定为i最小质因子，pj也定为pj*i最小质因子</span></span><br><span class="line">            <span class="comment"># 2.i%pj!=0, pj定小于i的所有质因子，所以pj也为pj*i最小质因子</span></span><br><span class="line"></span><br><span class="line">get_prime(<span class="number">1000</span>)</span><br></pre></td></tr></table></figure><p>线性筛在超量数据面前的效率是非常高的</p><p>只是线性筛这个做法比较难以理解</p><hr><p>好累啊，打这一篇写了一个中午，困死了，睡了睡了</p><p><del>（在图书馆下午2点多睡觉就很迷）</del></p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
          <category> C++ &amp; Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于C++高精度运算的几种方式</title>
      <link href="48355.html"/>
      <url>48355.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="关于C-高精度运算的几种方式"><a href="#关于C-高精度运算的几种方式" class="headerlink" title="关于C++高精度运算的几种方式"></a>关于C++高精度运算的几种方式</h1><p>今天刚好写到了一题需要高精的题，查题解时看到了 <code>__int64</code> ,想来想去就决定复习一下高精度运算了<del>~</del></p><hr><h2 id="传统数组模拟加减乘除法运算（-noip-常见算法）"><a href="#传统数组模拟加减乘除法运算（-noip-常见算法）" class="headerlink" title="传统数组模拟加减乘除法运算（ noip 常见算法）"></a>传统数组模拟加减乘除法运算（ noip 常见算法）</h2><p>传统数组高精，实际上就是模拟人类在草稿纸上笔算的过程。<del>（如果你是数学大佬，那我告辞）</del></p><h3 id="高精度加法"><a href="#高精度加法" class="headerlink" title="高精度加法"></a>高精度加法</h3><p>直接附代码了（下面都是）</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> a1[<span class="number">600</span>],b1[<span class="number">600</span>];</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">600</span>],b[<span class="number">600</span>],c[<span class="number">600</span>],lena,lenb,lenc,i,x;</span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line"><span class="built_in">memset</span>(b,<span class="number">0</span>,<span class="keyword">sizeof</span>(b));</span><br><span class="line"><span class="built_in">memset</span>(c,<span class="number">0</span>,<span class="keyword">sizeof</span>(c));</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a1&gt;&gt;b1;</span><br><span class="line">lena=<span class="built_in">strlen</span>(a1);</span><br><span class="line">lenb=<span class="built_in">strlen</span>(b1);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=lena<span class="number">-1</span>;i++)</span><br><span class="line">a[lena-i]=a1[i]<span class="number">-48</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=lenb<span class="number">-1</span>;i++)</span><br><span class="line">b[lenb-i]=b1[i]<span class="number">-48</span>;</span><br><span class="line">lenc=<span class="number">1</span>;</span><br><span class="line">x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(lenc&lt;=lena||lenc&lt;=lenb)</span><br><span class="line">&#123;</span><br><span class="line">c[lenc]=a[lenc]+b[lenc]+x;</span><br><span class="line">x=c[lenc]/<span class="number">10</span>;</span><br><span class="line">c[lenc]%=<span class="number">10</span>;</span><br><span class="line">lenc++;</span><br><span class="line">&#125;</span><br><span class="line">c[lenc]=x;</span><br><span class="line"><span class="keyword">if</span>(c[lenc]==<span class="number">0</span>)</span><br><span class="line">lenc--;</span><br><span class="line"><span class="keyword">for</span>(i=lenc;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;c[i];</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="高精度减法"><a href="#高精度减法" class="headerlink" title="高精度减法"></a>高精度减法</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> n[<span class="number">100</span>],a1[<span class="number">100</span>],b1[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100</span>],b[<span class="number">100</span>],c[<span class="number">100</span>],lena,lenb,lenc,i,x;</span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line"><span class="built_in">memset</span>(b,<span class="number">0</span>,<span class="keyword">sizeof</span>(b));</span><br><span class="line"><span class="built_in">memset</span>(c,<span class="number">0</span>,<span class="keyword">sizeof</span>(c));</span><br><span class="line">gets(a1);</span><br><span class="line">gets(b1);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strlen</span>(a1)&lt;<span class="built_in">strlen</span>(b1)||(<span class="built_in">strlen</span>(a1)==<span class="built_in">strlen</span>(b1)&amp;&amp;<span class="built_in">strcmp</span>(a1,b1)&lt;<span class="number">0</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">strcpy</span>(n,a1);</span><br><span class="line"><span class="built_in">strcpy</span>(a1,b1);</span><br><span class="line"><span class="built_in">strcpy</span>(b1,n);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;-&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">lena=<span class="built_in">strlen</span>(a1);</span><br><span class="line">lenb=<span class="built_in">strlen</span>(b1);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=lena<span class="number">-1</span>;i++)</span><br><span class="line">a[lena-i]=a1[i]<span class="number">-48</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=lenb<span class="number">-1</span>;i++)</span><br><span class="line">b[lenb-i]=b1[i]<span class="number">-48</span>;</span><br><span class="line">lenc=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(lenc&lt;=lena||lenc&lt;=lenb)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[lenc]&lt;b[lenc])</span><br><span class="line">&#123;</span><br><span class="line">a[lenc]+=<span class="number">10</span>;</span><br><span class="line">a[lenc+<span class="number">1</span>]--;</span><br><span class="line">&#125;</span><br><span class="line">c[lenc]=a[lenc]-b[lenc];</span><br><span class="line">lenc++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>((c[lenc]==<span class="number">0</span>)&amp;&amp;(lenc&gt;<span class="number">1</span>))</span><br><span class="line">lenc--;</span><br><span class="line"><span class="keyword">for</span>(i=lenc;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;c[i];</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="高精度乘法"><a href="#高精度乘法" class="headerlink" title="高精度乘法"></a>高精度乘法</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> a1[<span class="number">2002</span>],b1[<span class="number">2002</span>];</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">2002</span>],b[<span class="number">2002</span>],c[<span class="number">4002</span>],lena,lenb,lenc,i,j,x;</span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line"><span class="built_in">memset</span>(b,<span class="number">0</span>,<span class="keyword">sizeof</span>(b));</span><br><span class="line"><span class="built_in">memset</span>(c,<span class="number">0</span>,<span class="keyword">sizeof</span>(c));</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a1&gt;&gt;b1;</span><br><span class="line">lena=<span class="built_in">strlen</span>(a1);</span><br><span class="line">lenb=<span class="built_in">strlen</span>(b1);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=lena<span class="number">-1</span>;i++)</span><br><span class="line">a[lena-i]=a1[i]<span class="number">-48</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=lenb<span class="number">-1</span>;i++)</span><br><span class="line">b[lenb-i]=b1[i]<span class="number">-48</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=lena;i++)</span><br><span class="line">&#123;</span><br><span class="line">x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=lenb;j++)</span><br><span class="line">&#123;</span><br><span class="line">c[i+j<span class="number">-1</span>]=a[i]*b[j]+x+c[i+j<span class="number">-1</span>];</span><br><span class="line">x=c[i+j<span class="number">-1</span>]/<span class="number">10</span>;</span><br><span class="line">c[i+j<span class="number">-1</span>]%=<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">c[i+lenb]=x;</span><br><span class="line">&#125;</span><br><span class="line">lenc=lena+lenb;</span><br><span class="line"><span class="keyword">while</span>(c[lenc]==<span class="number">0</span>&amp;&amp;lenc&gt;<span class="number">1</span>)</span><br><span class="line">lenc--;</span><br><span class="line"><span class="keyword">for</span>(i=lenc;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;c[i];</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="高精度除法"><a href="#高精度除法" class="headerlink" title="高精度除法"></a>高精度除法</h3><h4 id="高精除低精"><a href="#高精除低精" class="headerlink" title="高精除低精"></a>高精除低精</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> a1[<span class="number">100</span>],c1[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100</span>],c[<span class="number">100</span>],lena,i,x=<span class="number">0</span>,lenc,b;</span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line"><span class="built_in">memset</span>(c,<span class="number">0</span>,<span class="keyword">sizeof</span>(c));</span><br><span class="line">gets(a1);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;b;</span><br><span class="line">lena=<span class="built_in">strlen</span>(a1);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=lena<span class="number">-1</span>;i++)</span><br><span class="line">a[i+<span class="number">1</span>]=a1[i]<span class="number">-48</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=lena;i++)</span><br><span class="line">&#123;</span><br><span class="line">c[i]=(x*<span class="number">10</span>+a[i])/b;</span><br><span class="line">x=(x*<span class="number">10</span>+a[i])%b;</span><br><span class="line">&#125;</span><br><span class="line">lenc=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(c[lenc]==<span class="number">0</span>&amp;&amp;lenc&lt;lena)</span><br><span class="line">lenc++;</span><br><span class="line"><span class="keyword">for</span>(i=lenc;i&lt;=lena;i++)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;c[i];</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="高精除高精"><a href="#高精除高精" class="headerlink" title="高精除高精"></a>高精除高精</h4><p>这个复杂一点，要用到前面的好几种高精度运算</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">101</span>],b[<span class="number">101</span>],c[<span class="number">101</span>],d,i;</span><br><span class="line"></span><br><span class="line"><span class="comment">//--------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> a[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">a[<span class="number">0</span>]=s.length();</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=a[<span class="number">0</span>];i++)</span><br><span class="line">a[i]=s[a[<span class="number">0</span>]-i]<span class="number">-48</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//--------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> a[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">if</span>(a[<span class="number">0</span>]==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="number">0</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=a[<span class="number">0</span>];i&gt;<span class="number">0</span>;i--)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;a[i];</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> b[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">if</span>(a[<span class="number">0</span>]&gt;b[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(a[<span class="number">0</span>]&lt;b[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(i=a[<span class="number">0</span>];i&gt;<span class="number">0</span>;i--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]&gt;b[i])</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(a[i]&lt;b[i])</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">jian</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> b[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> flag,i;</span><br><span class="line">flag=cmp(a,b);</span><br><span class="line"><span class="keyword">if</span>(flag==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">a[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=a[<span class="number">0</span>];i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]&lt;b[i])</span><br><span class="line">&#123;</span><br><span class="line">a[i+<span class="number">1</span>]--;</span><br><span class="line">a[i]+=<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">a[i]-=b[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(a[<span class="number">0</span>]&gt;<span class="number">0</span>&amp;&amp;a[a[<span class="number">0</span>]]==<span class="number">0</span>)</span><br><span class="line">a[<span class="number">0</span>]--;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">numcpy</span><span class="params">(<span class="keyword">int</span> p[],<span class="keyword">int</span> q[],<span class="keyword">int</span> det)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=p[<span class="number">0</span>];i++)</span><br><span class="line">q[i+det<span class="number">-1</span>]=p[i];</span><br><span class="line">q[<span class="number">0</span>]=p[<span class="number">0</span>]+det<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">chugao</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> b[],<span class="keyword">int</span> c[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,tmp[<span class="number">101</span>];</span><br><span class="line">c[<span class="number">0</span>]=a[<span class="number">0</span>]-b[<span class="number">0</span>]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(i=c[<span class="number">0</span>];i&gt;<span class="number">0</span>;i--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(tmp,<span class="number">0</span>,<span class="keyword">sizeof</span>(tmp));</span><br><span class="line">numcpy(b,tmp,i);</span><br><span class="line"><span class="keyword">while</span>(cmp(a,tmp)&gt;=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">c[i]++;</span><br><span class="line">jian(a,tmp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(c[<span class="number">0</span>]&gt;<span class="number">0</span>&amp;&amp;c[c[<span class="number">0</span>]]==<span class="number">0</span>)</span><br><span class="line">c[<span class="number">0</span>]--;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line"><span class="built_in">memset</span>(b,<span class="number">0</span>,<span class="keyword">sizeof</span>(b));</span><br><span class="line"><span class="built_in">memset</span>(c,<span class="number">0</span>,<span class="keyword">sizeof</span>(c));</span><br><span class="line">init(a);</span><br><span class="line">init(b);</span><br><span class="line">chugao(a,b,c);</span><br><span class="line">print(c);</span><br><span class="line">print(a);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="高精乘方"><a href="#高精乘方" class="headerlink" title="高精乘方"></a>高精乘方</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">char</span>  a[])</span>          <span class="comment">//数字转化为字符串存储</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> t=m;</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; t;i++)&#123;</span><br><span class="line">   a[i]=t%<span class="number">10</span>+<span class="number">48</span>;</span><br><span class="line">   t/=<span class="number">10</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">char</span>  str[],<span class="keyword">int</span> l)</span> <span class="comment">//字符串翻转</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">char</span> temp;</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=l/<span class="number">2</span>;i++)</span><br><span class="line">   &#123;</span><br><span class="line">       temp=str[i];</span><br><span class="line">       str[i]=str[l-i];</span><br><span class="line">       str[l-i]=temp;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n,<span class="keyword">char</span>  result[])</span>          <span class="comment">//高精度m^n 乘法</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">char</span> a[<span class="number">20</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">   <span class="keyword">int</span>  c[<span class="number">5000</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">   <span class="keyword">int</span> la,lr;</span><br><span class="line">   <span class="keyword">if</span>(n==<span class="number">0</span> || m==<span class="number">1</span>)&#123;result[<span class="number">0</span>]=<span class="string">&#x27;1&#x27;</span>;<span class="keyword">return</span> ;&#125;</span><br><span class="line">   change(m,a);           <span class="comment">//将数字转化为字符</span></span><br><span class="line">   la=<span class="built_in">strlen</span>(a)<span class="number">-1</span>;         <span class="comment">//记录字符a 的位数</span></span><br><span class="line">   lr=la;</span><br><span class="line">   <span class="built_in">strcpy</span>(result,a);       <span class="comment">//积初始化为a*1</span></span><br><span class="line">   <span class="keyword">int</span> i,j,k,l;</span><br><span class="line">   <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=n;i++)&#123;          <span class="comment">//result*=a^(n-1)</span></span><br><span class="line">   <span class="built_in">memset</span>(c,<span class="number">0</span>,<span class="keyword">sizeof</span>(c));</span><br><span class="line">   <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;=la;j++)           <span class="comment">//大数相乘</span></span><br><span class="line">     <span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;=lr;k++)&#123;</span><br><span class="line">      c[j+k]+=(a[j]<span class="number">-48</span>)*(result[k]<span class="number">-48</span>);</span><br><span class="line">      c[j+k+<span class="number">1</span>]+=c[j+k]/<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">      c[j+k]%=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    l=k+j+<span class="number">1</span>;      <span class="comment">//记录当前可能的最大位数</span></span><br><span class="line">   <span class="keyword">while</span>(c[l]==<span class="number">0</span>)l--;    <span class="comment">//去除la+lr+1 最高几位的的0</span></span><br><span class="line">   <span class="built_in">memset</span>(result,<span class="number">0</span>,<span class="keyword">sizeof</span>(result));</span><br><span class="line">   <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;=l;j++)result[j]=c[j]+<span class="string">&#x27;0&#x27;</span>;<span class="comment">//将临时变量c 里的数字转化为字符存到result 中</span></span><br><span class="line">   lr=l;      <span class="comment">//刷新result 的字符个数</span></span><br><span class="line">  &#125;</span><br><span class="line">  reverse(result,lr);    <span class="comment">//字符串翻转，方便输出</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> m,n;</span><br><span class="line">  <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;m,&amp;n),m&amp;&amp;n)</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="keyword">char</span>  result[<span class="number">5000</span>]=&#123;<span class="number">0</span>&#125;;      <span class="comment">// 这句必须放到循环体内，WA得好苦 因为有这句</span></span><br><span class="line">      <span class="keyword">if</span>(n==<span class="number">0</span> ||m==<span class="number">1</span>) result[<span class="number">0</span>]=<span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">      mul(m,n,result);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,result);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="高精度取模"><a href="#高精度取模" class="headerlink" title="高精度取模"></a>高精度取模</h3><p>这个就十分简单了，都不用记录商</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> k=<span class="number">0</span>,a,b,i;</span><br><span class="line"><span class="keyword">bool</span> flag;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;s&gt;&gt;b;<span class="comment">//输入被除数和除数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.size();i++)<span class="comment">//从高位开始，一位一位向低位</span></span><br><span class="line">    &#123;</span><br><span class="line">        a=a*<span class="number">10</span>+s[i]-<span class="string">&#x27;0&#x27;</span>;<span class="comment">//加上被除数的这一位</span></span><br><span class="line">        a%=b;<span class="comment">//一直取余</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;a;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="当然还有大佬用的重载运算符操作"><a href="#当然还有大佬用的重载运算符操作" class="headerlink" title="当然还有大佬用的重载运算符操作"></a>当然还有大佬用的重载运算符操作</h2><p>这个东西我就真的不会了</p><p>直接上个实例吧</p><p>高精度的GCD（最大公约数）</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,l,r) for (int i=l;i&lt;=r;++i)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Mx=<span class="number">1252</span>,MOD=<span class="number">100000000</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BIGN</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> a[Mx+<span class="number">10</span>];</span><br><span class="line">BIGN()&#123;<span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span> a);&#125;</span><br><span class="line"><span class="keyword">int</span> &amp;<span class="keyword">operator</span> [](<span class="keyword">int</span> i)&#123;<span class="keyword">return</span> a[i];&#125;</span><br><span class="line"><span class="keyword">void</span> <span class="keyword">operator</span> /=(<span class="keyword">int</span> x)&#123; <span class="comment">//高精 &#x27;/=&#x27;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=Mx;i&gt;=<span class="number">1</span>;--i)</span><br><span class="line">a[i<span class="number">-1</span>]+=a[i]%x*MOD,a[i]/=x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> <span class="keyword">operator</span> -=(BIGN &amp;b)&#123; <span class="comment">//高精 &#x27;-=&#x27;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;Mx;++i)</span><br><span class="line">a[i]=a[i]-b[i]+(a[i<span class="number">-1</span>]+MOD)/MOD <span class="number">-1</span>,a[i<span class="number">-1</span>]=(a[i<span class="number">-1</span>]+MOD)%MOD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> <span class="keyword">operator</span> *=(<span class="keyword">int</span> x)&#123; <span class="comment">//高精 &#x27;*=&#x27;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;Mx;++i)</span><br><span class="line">a[i]=a[i]*x+a[i<span class="number">-1</span>]/MOD,a[i<span class="number">-1</span>]%=MOD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(BIGN &amp;b)&#123; <span class="comment">//重定义 &#x27;&lt;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=Mx;i&gt;=<span class="number">1</span>;--i)</span><br><span class="line"><span class="keyword">if</span> (a[i]!=b[i]) <span class="keyword">return</span> a[i]&lt;b[i];</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">iszero</span><span class="params">()</span></span>&#123; <span class="comment">//判0</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;Mx;++i) <span class="keyword">if</span> (a[i]!=<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> tp[<span class="number">10005</span>]=&#123;<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;0&#x27;</span>&#125;;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,tp+<span class="number">8</span>);</span><br><span class="line"><span class="keyword">int</span> len=<span class="built_in">strlen</span>(tp+<span class="number">1</span>),p=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (len<span class="number">-8</span>*p+<span class="number">1</span>&gt;<span class="number">0</span>)</span><br><span class="line"><span class="built_in">scanf</span>(tp+len<span class="number">-8</span>*p+++<span class="number">1</span>,<span class="string">&quot;%8d&quot;</span>,&amp;a[p]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> p=Mx;</span><br><span class="line"><span class="keyword">while</span> (!a[p]&amp;&amp;p&gt;<span class="number">0</span>) p--;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a[p--]);</span><br><span class="line"><span class="keyword">while</span> (p&gt;<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;%08d&quot;</span>,a[p--]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">BIGN <span class="title">gcd</span><span class="params">(BIGN x,BIGN y)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> g=<span class="number">0</span>;<span class="keyword">bool</span> x1,y1;</span><br><span class="line"><span class="keyword">while</span> (!x.iszero() &amp;&amp; !y.iszero())&#123;</span><br><span class="line">x1=!(x[<span class="number">1</span>]&amp;<span class="number">1</span>),y1=!(y[<span class="number">1</span>]&amp;<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (x1 &amp;&amp; y1)&#123;g++;x/=<span class="number">2</span>,y/=<span class="number">2</span>;&#125;<span class="keyword">else</span></span><br><span class="line"><span class="keyword">if</span> (x1 || y1)&#123;<span class="keyword">if</span> (x1) x/=<span class="number">2</span>;<span class="keyword">else</span> y/=<span class="number">2</span>;&#125;<span class="keyword">else</span></span><br><span class="line"><span class="keyword">if</span> (y&lt;x) x-=y;<span class="keyword">else</span> y-=x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (x&lt;y) x=y;</span><br><span class="line"><span class="keyword">while</span> (g--) x*=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line">BIGN a,b;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">a.read();</span><br><span class="line">b.read();</span><br><span class="line">gcd(a,b).print();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="懒人专用-int64"><a href="#懒人专用-int64" class="headerlink" title="懒人专用 __int64"></a>懒人专用 __int64</h2><p>其实是上面第一种忘得差不多了，第二种还不会</p><p>不过针对 <code>GCC</code> 和 <code>VC</code> ，这个东西是有差别的</p><p>主要是输入啦</p><p><strong>VC6.0</strong> 的 64 位整数分别叫做 <code>__int64</code> 与 <code>unsigned __int64</code> ，其范围分别是[-2^63, 2^63)与[0,2^64)，即 -9223372036854775808 ~ 9223372036854775807 与 0 ~ 18446744073709551615 (约 1800 亿亿)。对 64 位整数的运算与 32 位整数基本相同，都支持四则运算与位运算等。当进行 64 位与 32 位的混合运算时， 32 位整数会被隐式转换成 64 位整数。但是， VC 的输入输出与 <code>__int64</code> 的兼容就不是很好了，如果你写下这样一段代码：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">__int64 a;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;a;</span><br></pre></td></tr></table></figure><p>那么，在第2行会收到“ <code>error C2679: binary &#39;&gt;&gt;&#39; : no operator defined which takes a right-hand operand of type &#39;__int64&#39; (or there is no acceptable conversion)</code> ”的错误；在第3行会收到“ <code>error C2593: &#39;operator &lt;&lt;&#39; is ambiguous</code> ”的错误。那是不是就不能进行输入输出呢？当然不是，你可以使用C的写法：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%I64d&quot;</span>,&amp;a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%I64d&quot;</span>,a);</span><br></pre></td></tr></table></figure><p>就可以正确输入输出了。当使用 <code>unsigned __int64</code> 时，把 <code>&quot;I64d&quot;</code> 改为 <code>&quot;I64u&quot;</code> 就可以了。</p><p><strong>OJ</strong> 通常使用 <code>g++</code> 编译器。其 64 位扩展方式与 VC 有所不同，它们分别叫做 long long 与  unsigned long long 。处理规模与除输入输出外的使用方法同上。对于输入输出，它的扩展比VC好。既可以使用</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;a;</span><br></pre></td></tr></table></figure><p>也可以使用</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,a);</span><br></pre></td></tr></table></figure><p>使用无符号数时，将 <code>&quot;%lld&quot;</code> 改成 <code>&quot;%llu&quot;</code> 即可。<br>最后再说明两点点：</p><p>  1、作为一个特例，如果你使用的是 Dev-C++ 的 g++ 编译器，它使用的是 “%I64d” 而非 “%lld” 。</p><p>  2、注意： <code>__int64</code> 是两个短的下划线</p><hr><h2 id="最后补充一个-int128-和-uint128"><a href="#最后补充一个-int128-和-uint128" class="headerlink" title="最后补充一个 __int128 和 __uint128"></a>最后补充一个 __int128 和 __uint128</h2><h4 id="PS：这玩意只有-Linux-可以用"><a href="#PS：这玩意只有-Linux-可以用" class="headerlink" title="PS：这玩意只有 Linux 可以用"></a>PS：这玩意只有 Linux 可以用</h4><p>定义方式 <code>__int64</code> 是一样的</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">__int128 a;</span><br></pre></td></tr></table></figure><p>只是这玩意还不能用 <code>cin</code> 和 <code>cout</code> 进行读入读出（ <code>scanf</code> 和 <code>printf</code> 也不行）</p><p>所幸现在的 oj 基本上都是 linux 系统的</p><p>所以只能抄一个读入读出代码了</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> __int128 <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    __int128 x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">            f=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=x*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(__int128 x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">        x=-x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;<span class="number">9</span>)</span><br><span class="line">        print(x/<span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    __int128 a = read();</span><br><span class="line">    __int128 b = read();</span><br><span class="line">    print(a + b);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="关于高精度的算法我知道的就这些了，当然你如果学的是-python"><a href="#关于高精度的算法我知道的就这些了，当然你如果学的是-python" class="headerlink" title="关于高精度的算法我知道的就这些了，当然你如果学的是 python"></a>关于高精度的算法我知道的就这些了，当然你如果学的是 python</h3><p><del>好吧，以上东西你不需要</del></p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于我为什么搞博客</title>
      <link href="46581.html"/>
      <url>46581.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="Why"><a href="#Why" class="headerlink" title="Why"></a>Why</h1><h3 id="搞清为什么做一件事，对于我来说是十分重要的。"><a href="#搞清为什么做一件事，对于我来说是十分重要的。" class="headerlink" title="搞清为什么做一件事，对于我来说是十分重要的。"></a>搞清为什么做一件事，对于我来说是十分重要的。</h3><p>博客这个东西，对于我来说应当是遥远的记忆了。之前高一高二还在打 <strong>noip</strong> 的时候，曾在洛谷上打过几篇题解。也是那时，初次了解到了博客。</p><p>不过那时写题解只能说是一时兴起，再加上后来退赛之后，学业繁重，就没空去运维了，所以没做多少就咕咕咕了。</p><p>国内外有挺多平台是支持我们这些穷苦老百姓白嫖一定的空间去制作自己的博客的，也给了相当多样的主题。我接触过的有 <strong>CSDN 社区</strong>，<strong>博客园</strong>，<strong>阿里云的美站</strong>（这个不能白嫖），还有以前我用的<strong>洛谷</strong>，现在用的 <strong>github page</strong> 等等。许多网站都是给了特别傻瓜式的操作平台和后台文章部署。虽然这样做确实简单了许多，对于我这种完全不懂 <code>html</code> 和 <code>css </code>的蒟蒻来讲更是天堂。不过还是限制了许多想象的空间，比如自己美化主题页面，导入一些小的板块啥的就特别难受，缺了一点码代码的乐趣。当我了解到有 <a href="https://pages.github.com/">github page</a> 和 <a href="https://hexo.io/zh-cn/">hexo</a> 这种神奇的东西可以满足我的需求时，我一下子有了搭博客的想法。于是我开始找相关的教程进行学习。</p><blockquote><p>教程来自 <a href="https://blog.csdn.net/sinat_37781304">zjufangzh</a> 的 <a href="https://blog.csdn.net/sinat_37781304/article/details/82729029">hexo史上最全搭建教程</a> </p></blockquote><h4 id="PS："><a href="#PS：" class="headerlink" title="PS："></a>PS：</h4><p>关键的一个契机是我的一个朋友 @<a href="http://lijyya.site/">lijyya</a> 刚好开始搭建她的博客。于是乎我觉得我也不能落后，才开始做这件事，进而了解到 <strong>github page</strong> 。</p><h1 id="Power"><a href="#Power" class="headerlink" title="Power"></a>Power</h1><h3 id="有想法是不够的，关键是要让临时起意变成持之以恒。"><a href="#有想法是不够的，关键是要让临时起意变成持之以恒。" class="headerlink" title="有想法是不够的，关键是要让临时起意变成持之以恒。"></a>有想法是不够的，关键是要让临时起意变成持之以恒。</h3><p>所以，我<del>一气之下</del>买了 5 年的域名<del>（ 冲动是魔鬼 ）</del>。</p><p>同时我作了一点小宣传，想要让我的小伙伴们来督促督促我。</p><p><del>（你们的关注是我前进的最好动力！！！）</del></p><h1 id="Try"><a href="#Try" class="headerlink" title="Try"></a>Try</h1><p>当然搭建过程也遇到了各种各样的 <del>sb</del> 问题。开始搭建的时候用的是 windows ， windows 系统搞这种运维总会出现一些无法准确描述的问题。这种事情在度娘上也无法解决。</p><p>所以我选择求教大佬。在求教之前，我先在自己的电脑上安装了 ubuntu 和 windows 双系统，并在 ubuntu 上重新搭建我的博客。</p><p>这次终于是比较顺利了点，同时<del>不懂教程人话的</del>我向大佬 @<a href="https://bili33.top/">GamerNoTitle</a> 求教了许多问题。</p><p>这里致谢大佬在高三百忙之际还能给我一点指点，当然这时候我也不能经常性的骚扰大佬啦，很多东西还是要自己学习的。</p><p>经历了两天肝到半夜的搭建时间，终于是把博客搭得有个样了。</p><h1 id="End"><a href="#End" class="headerlink" title="End"></a>End</h1><p>虽然 <strong>hexo</strong> 写文章也是挺简单的，它内置了 <strong>markdown</strong> ，可以让我在打好一个文章后经过 <strong>markdown</strong> 的格式修饰就可直接发布。这个过程对于我来说显然轻松了很多，也不用再花时间去学习html。同时他的模板代码我是可以修改的，这又满足了我的需求（虽然我现在还不会）～～～</p><p>今后这个博客我会不断的更新，会推一些自己的日记啦，自己 <strong>ps</strong> 画的图<del>（手残）</del>，一些 <strong>C++/Python</strong> 的学习记录/题解，一些奇怪软件/插件的使用，还有以后可能会做的项目。</p><hr><h1 id="所以，这个博客，算是我大学未来四年的生活学习记录了！"><a href="#所以，这个博客，算是我大学未来四年的生活学习记录了！" class="headerlink" title="所以，这个博客，算是我大学未来四年的生活学习记录了！"></a>所以，这个博客，算是我大学未来四年的生活学习记录了！</h1><hr>]]></content>
      
      
      <categories>
          
          <category> Diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Diary </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
