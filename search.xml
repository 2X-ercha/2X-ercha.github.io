<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>用于某次py教材编写而做的精简复习（万字初稿）</title>
      <link href="63595.html"/>
      <url>63595.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>其实本来不打算把这些发上来的，但有时候做东西做着做着就被苟到了。</p><p>但是有些经历还是想记录下来。</p><p>在这里我不想吐槽，未来某年某天看到这些，我也会有所回忆，有所感念</p><p>而不再在意那些岁月的酸甜。</p><hr><p>Ps: 当然这个东西未来真的要做教学教材的素材时，这篇博文会删掉。</p><p>此文引用的图片懒得上传，就不管它了。。。</p><hr><h1 id="第二章-计算与人工智能基础"><a href="#第二章-计算与人工智能基础" class="headerlink" title="第二章 计算与人工智能基础"></a>第二章 计算与人工智能基础</h1><p>​        随着计算机、人工智能和大数据的普遍应用，各种AI程序已和我们的生活、工作和学习息息相关。人脸识别、语音识别、购物推荐、无人驾驶等 AI 应用构成了我们生活的一部分。目前市面上大部分的人工智能的代码都是用 Python 来编写。</p><p>​        10年来，Python一直是AI研究的最前沿语言。它是一种面向对象的、动态的程序设计语言。具有非常简洁而清晰的语法，适合于完成各种高层任务。它既可以用来快速开发程序脚本，也可以用来开发大规模的软件。随着 NumPy, SciPy, Matplotlib, scikit-learn 等众多程序库的开发，Python 在科学计算、 数据分析的应用越来越广泛，也是实现人工智能机器学习、神经网络、深度学习的主流编程语言。</p><p>​        本章以 Python 作为实现计算与人工智能的工具语言，通过实现一个计算与人工智能的案例来学习Python的基本语法； </p><hr><h2 id="2-1-计算与人工智能编程环境的搭建与编码规范"><a href="#2-1-计算与人工智能编程环境的搭建与编码规范" class="headerlink" title="2.1 计算与人工智能编程环境的搭建与编码规范"></a>2.1 计算与人工智能编程环境的搭建与编码规范</h2><p>本节知识点的学习目标：</p><p>1、  初识Python，了解Python语言的历史与特点</p><p>2、  了解Python的应用领域 </p><p>3、  掌握Python开放环境的搭建与配置</p><p>4、  掌握Python的编程规范</p><p>5、  掌握Python标准库、扩展库的导入</p><p>6、  掌握    spyder IDE的调试方法</p><p>7、  熟悉本章要解决的案例任务</p><hr><h3 id="2-1-1-Python简介"><a href="#2-1-1-Python简介" class="headerlink" title="2.1.1 Python简介"></a>2.1.1 Python简介</h3><p>Python 是由 Guido van Rossum 在八十年代末和九十年代初，在荷兰国家数学和计算机科学研究所设计出来的。Python的名字不是来源于蟒蛇，而是源于Guido是一个名为”Monty Python”的飞行戏团的爱好者。</p><p>Python是在ABC语言的基础上开发的，它继承了ABC语言的优点，受到了Modula-3的影响，结合了C/C++语言的用户习惯。它支持命令式编程与函数式编程两种模式，完全支持面向对象程序设计，语法简洁清晰，功能强大且易学易用，一度成为了Unix和Linux开发者所青睐的开发语言。</p><p>Python 是一门跨平台、开源、免费的，结合了解释性、编译性、互动性和面向对象的脚本语言，其关键特性如下：</p><p>•      <strong>简单易学</strong> – Python 是一种代表简单主义思想的语言。阅读一个良好的 Python 程序就感觉像是在读英语一样，尽管这个英语的要求非常严格！Python 的这种伪代码本质是它最大的优点之一。Python 有极其简单的语法， 容易上手。</p><p>•      <strong>免费开源</strong> – Python 是 FLOSS（自由/开放源码软件）之一。简单地说，你可以自由地发布这个软件的拷贝、阅读它的源代码、对它做改动、把它的一部分用于新的自由软件中。 </p><p>•      <strong>可移植可扩展性</strong>  – 由于它的开源本质，Python 已经被移植在许多平台上（经过改动使它能够工作在不同平台上）。 如果你需要你的一段关键代码运行得更快或者希望某些算法不公开，你可以把你的部分程序用 C 或 C++ 编写，然后在你的 Python 程序中使用它们。</p><p>•      <strong>解释性</strong> – Python 语言写的程序不需要编译成二进制代码。你可以直接从源代码运行程序。在计算机内部，Python 解释器把源代码转换成称为字节码的中间形式，然后再把它翻译成计算机使用的机器语言并运行。 </p><p>•      <strong>面向对象</strong> – Python 既支持面向过程的编程也支持面向对象的编程。在“面向过程”的语言中，程序是由过程或仅仅是可重用代码的函数构建起来的。在“面向对象”的语言中，程序是由数据和功能组合而成的对象构建起来的。与其他主要的语言如 C++ 和 Java 相比，Python 以一种非常强大又简单的方式实现面向对象编程。</p><p>•      <strong>丰富的库</strong> – Python 标准库确实很庞大。它可以帮助你处理各种工作，包括正则表达式、文档生成、单元测试、线程、数据库、网页浏览器、CGI、FTP、电子邮件、XML、XML-RPC、HTML、WAV 文件、密码系统、GUI（图形用户界面）、Tk 和其他与系统有关的操作。</p><p>•      <strong>规范的代码</strong> – Python 采用强制缩进的方式使得代码具有极佳的可读性。</p><p><strong>客观地说</strong>相较于C++, Java，Python的运行速度相对慢许多。这也是许多公司不使用Python作为软件开发工具语言的很重要的原因。但随着互联网，大数据与人工智能的发展，Python 在网络爬虫、大数据分析与处理，科学计算可视化，自然语言处理、游戏设计与开发等领域获得了广泛的应用。在本教材中，Python作为一个实现计算与人工智能的工具语言，主要解决如下问题：</p><p>•      在介绍计算机系统思维的用Python实现模拟冯诺依曼计算机体系结构，利用Python实现文件与文件夹的管理与操作</p><p>•      <strong>网络爬虫</strong> -学习如何在互联网上爬取免费的数据，调用request库请求网页，用beautifulsoup库来解析网页数据。学习使用Scripy爬虫框架爬取网络数据。</p><p>•      <strong>数据分析</strong>-在获取了大量数据的基础上，利用Python结合科学计算numpy库、机器学习等技术，对数据进行清洗、去重、规格化处理，实现数据的分类与预测等数据分析与处理方法 </p><p>•      <strong>自然语言处理**</strong>-** 利用Python实现文字识别，词频统计，词云生成，语音识别等自然语言处理操作<strong>。</strong></p><p>•      <strong>科学计算</strong> – 利用Pandas，NumPy，Matplotlib等众多程序库 ，用Python实现科学计算、数据表与数据库的处理，以及数据可视化的操作。 </p><p>•      <strong>人工智能</strong> – 利用百度平台，实现人工智能领域内的机器学习、神经网络、深度学习 ，学习人脸识别，图像识别和 。</p><hr><h3 id="2-1-2-Python开发环境的搭建"><a href="#2-1-2-Python开发环境的搭建" class="headerlink" title="2.1.2 Python开发环境的搭建"></a>2.1.2 Python开发环境的搭建</h3><p>常用的Python开发环境除了Python官方安装包自带的IDLE，还有Anaconda3、 PyCharm和Visual Studio Code等，本书主要通过Anaconda3 提供的Spyder和Jupyter Notebook开发环境来介绍Python的基本语法和在网络爬虫、数据分析、数据挖掘与可视化、算法设计，人工智能深度学习等方面的应用。本书的代码同样可以在其他的开发环境中运行。</p><h4 id="anaconda3环境安装搭建"><a href="#anaconda3环境安装搭建" class="headerlink" title="anaconda3环境安装搭建"></a>anaconda3环境安装搭建</h4><p>Conda 是一个开源的软件包管理系统和环境管理系统，用于安装多个版本的软件包及其依赖关系，并在它们之间轻松切换。是当下最流行的 <a href="https://baike.baidu.com/item/Python">Python</a> 环境管理工具。</p><p>Anaconda指的是一个开源的<a href="https://baike.baidu.com/item/Python">Python</a>发行版本，其包含了<a href="https://baike.baidu.com/item/conda/4500060">conda</a>、Python等180多个科学包及其依赖项。 [1] 因为包含了大量的科学包，Anaconda 的下载文件比较大（约 531 MB），如果只需要某些包，或者需要节省带宽或<a href="https://baike.baidu.com/item/%E5%AD%98%E5%82%A8%E7%A9%BA%E9%97%B4/10657950">存储空间</a>，也可以使用<strong>Miniconda</strong>这个较小的发行版（仅包含conda和 Python）。</p><p>Anaconda 官网地址：<a href="https://www.anaconda.com/">https://www.anaconda.com/</a></p><p>下载后，可以以默认的选项安装，建议在下图步骤时将<code>Add Anaconda3 to my PATH environment variable</code>勾上）</p><p>在安装结束后，你将会在windows的开始面板处找到Anaconda的文件夹</p><p>其中的<code>Jupyter Notebook</code>和<code>Spyder</code>就是我们课程中所使用的两个软件.</p><h4 id="Spyder"><a href="#Spyder" class="headerlink" title="Spyder"></a>Spyder</h4><h5 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h5><p>Spyder 是一个强大的Python科学环境。它具有综合开发工具的高级编辑、分析、调试和分析功能与科学包的数据探索、交互执行、深度检查和优美的可视化功能的独特组合。</p><h5 id="2-界面"><a href="#2-界面" class="headerlink" title="2.界面"></a>2.界面</h5><p>左侧是我们写Python代码的窗口；右上角是变量生成区，同时绘图结果会在这里；右下角是控制台，代码运行结果也在这里显示。</p><h4 id="Jupyter-Notebook"><a href="#Jupyter-Notebook" class="headerlink" title="Jupyter Notebook"></a>Jupyter Notebook</h4><p>Jupyter Notebook是基于网页的用于交互计算的应用程序。是以网页的形式打开，可以在网页页面中直接编写代码和运行代码，代码的运行结果也会直接在代码块下显示。如在编程过程中需要编写说明文档，可在同一个页面中直接编写，便于作及时的说明和解释。</p><p>Jupyter Notebook文档中包含了交互计算、说明文档、数学公式、图片以及其他富媒体形式的输入和输出， 文档的后缀名为.ipynb的JSON格式文件， 文档也可以导出为：HTML、LaTeX、PDF等格式，可以很方便与他人共享使用。</p><h5 id="Jupyter-Notebook的主要特点"><a href="#Jupyter-Notebook的主要特点" class="headerlink" title="Jupyter Notebook的主要特点"></a>Jupyter Notebook的主要特点</h5><ul><li><p>编程时具有语法高亮、缩进、tab补全的功能。</p></li><li><p>可直接通过浏览器运行代码，同时在代码块下方展示运行结果。</p></li><li><p>以富媒体格式展示计算结果。富媒体格式包括：HTML，LaTeX，PNG，SVG等。</p></li><li><p>对代码编写说明文档或语句时，支持Markdown语法。</p></li><li><p>支持使用LaTeX编写数学性说明。</p></li></ul><h5 id="Jupyter-Notebook的运行界面如下："><a href="#Jupyter-Notebook的运行界面如下：" class="headerlink" title="Jupyter Notebook的运行界面如下："></a>Jupyter Notebook的运行界面如下：</h5><p>运行后，软件将打开一个本地网页（注意运行期间不要关闭电脑打开的命令行）</p><p>用 Jupyter Notebook打开<code>.ipynb</code>文件后</p><p>文档中的每一个单元格称为一个cell,每一个cell都可以独立运行并显示结果,但前面cell的运行结果会影响到后面的cell，也就是说前面cell定义的变量，导入的库，后面的cell仍可以访问与使用，这一点要特别注意。</p><h4 id="扩展库的安装"><a href="#扩展库的安装" class="headerlink" title="扩展库的安装"></a>扩展库的安装</h4><p>这里只介绍 Anaconda 图形化界面的安装方法，另外还有命令行的安装方法自行了解</p><p>打开文件夹中的<code>Anaconda Navigator</code>，在Not installed选项卡中搜索你要安装的库即可</p><hr><h3 id="2-1-3-Python的编码规范"><a href="#2-1-3-Python的编码规范" class="headerlink" title="2.1.3 Python的编码规范"></a>2.1.3 Python的编码规范</h3><p>默认情况下，Python 3 源码文件以 <strong>UTF-8</strong> 编码，所有字符串都是 <strong>unicode</strong> 字符串。 </p><h4 id="行与缩进"><a href="#行与缩进" class="headerlink" title="行与缩进"></a>行与缩进</h4><p>Python最具特色的就是使用缩进来表示代码块，不需要使用大括号 <code>&#123;&#125;</code> 。</p><p>缩进的空格数是可变的，但是同一个代码块的语句必须包含相同的缩进空格数。如：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="literal">True</span>:</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;True&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;False&quot;</span>)</span><br></pre></td></tr></table></figure><p>以下代码最后一行语句缩进数的空格数不一致，会导致运行错误：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="literal">True</span>:</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;Answer&quot;</span>)</span><br><span class="line"> <span class="built_in">print</span> (<span class="string">&quot;True&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  <span class="built_in">print</span> (<span class="string">&quot;Answer&quot;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;False&quot;</span>)    <span class="comment"># 缩进不一致，会导致运行错误</span></span><br></pre></td></tr></table></figure><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><p>Python中的注释有单行注释和多行注释，只起一个说明的作用。</p><p>Python注释有单行注释与多行注释，一般单行注释用#开头，可写在单行代码后，也可以单列一行，置于代码前说明。</p><p>同时Python 中也提供多行注释，使用三个单引号(‘’’)或三个双引号(“””)，例如：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 第一个注释</span></span><br><span class="line"><span class="comment"># 第二个注释</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">第三注释</span></span><br><span class="line"><span class="string">第四注释</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">第五注释</span></span><br><span class="line"><span class="string">第六注释</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;Hello, Python!&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="标识符和保留字"><a href="#标识符和保留字" class="headerlink" title="标识符和保留字"></a>标识符和保留字</h4><h5 id="Python保留字"><a href="#Python保留字" class="headerlink" title="Python保留字"></a>Python保留字</h5><p>保留字即关键字，我们不能把它们用作任何标识符名称。Python 的标准库提供了一个 keyword 模，可以输出当前版本的所有关键字：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> keyword</span><br><span class="line">print(keyword.kwlist)</span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;False&#x27;</span>, <span class="string">&#x27;None&#x27;</span>, <span class="string">&#x27;True&#x27;</span>, <span class="string">&#x27;and&#x27;</span>, <span class="string">&#x27;as&#x27;</span>, <span class="string">&#x27;assert&#x27;</span>, <span class="string">&#x27;break&#x27;</span>, <span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;continue&#x27;</span>, <span class="string">&#x27;def&#x27;</span>, <span class="string">&#x27;del&#x27;</span>, <span class="string">&#x27;elif&#x27;</span>, <span class="string">&#x27;else&#x27;</span>, <span class="string">&#x27;except&#x27;</span>, <span class="string">&#x27;finally&#x27;</span>, <span class="string">&#x27;for&#x27;</span>, <span class="string">&#x27;from&#x27;</span>, <span class="string">&#x27;global&#x27;</span>, <span class="string">&#x27;if&#x27;</span>, <span class="string">&#x27;import&#x27;</span>, <span class="string">&#x27;in&#x27;</span>, <span class="string">&#x27;is&#x27;</span>, <span class="string">&#x27;lambda&#x27;</span>, <span class="string">&#x27;nonlocal&#x27;</span>, <span class="string">&#x27;not&#x27;</span>, <span class="string">&#x27;or&#x27;</span>, <span class="string">&#x27;pass&#x27;</span>, <span class="string">&#x27;raise&#x27;</span>, <span class="string">&#x27;return&#x27;</span>, <span class="string">&#x27;try&#x27;</span>, <span class="string">&#x27;while&#x27;</span>, <span class="string">&#x27;with&#x27;</span>, <span class="string">&#x27;yield&#x27;</span>]</span><br></pre></td></tr></table></figure><h4 id="续行"><a href="#续行" class="headerlink" title="续行"></a>续行</h4><p>Python 通常是一行写完一条语句，但如果语句很长，我们可以使用反斜杠()来实现多行语句，例如：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">total = item_one + \</span><br><span class="line">item_two + \</span><br><span class="line">item_three</span><br></pre></td></tr></table></figure><p>在 [], {}, 或 () 中的多行语句，不需要使用反斜杠()，例如：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">total = [<span class="string">&#x27;item_one&#x27;</span>, <span class="string">&#x27;item_two&#x27;</span>, <span class="string">&#x27;item_three&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;item_four&#x27;</span>, <span class="string">&#x27;item_five&#x27;</span>]</span><br></pre></td></tr></table></figure><hr><h3 id="2-1-4-Python标准库、扩展库（模块）的导入"><a href="#2-1-4-Python标准库、扩展库（模块）的导入" class="headerlink" title="2.1.4 Python标准库、扩展库（模块）的导入"></a>2.1.4 Python标准库、扩展库（模块）的导入</h3><h4 id="import-与-from…import"><a href="#import-与-from…import" class="headerlink" title="import 与 from…import"></a>import 与 from…import</h4><p>在 Python 用 <code>import</code> 或者 <code>from...import</code> 来导入相应的模块。</p><p>将整个模块导入，格式为： <code>import 模块名</code></p><p>将整个模块导入并设置别名，格式为：<code>import 模块名 as 别名</code></p><p>从某个模块中导入某个函数,格式为： <code>from 模块名 import 对象</code></p><p>从某个模块中导入多个函数,格式为： <code>from 模块名 import 对象一, 对象二, 对象三</code></p><p>将某个模块中的全部函数导入，格式为： <code>from 模块名 import *</code></p><h5 id="导入-math-模块"><a href="#导入-math-模块" class="headerlink" title="导入 math 模块"></a>导入 math 模块</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">x = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;输x：&quot;</span>))</span><br><span class="line">print(math.sqrt(x))<span class="comment">#输出x的开方</span></span><br></pre></td></tr></table></figure><h5 id="导入-math-模块的-sqrt-成员"><a href="#导入-math-模块的-sqrt-成员" class="headerlink" title="导入 math 模块的 sqrt 成员"></a>导入 math 模块的 sqrt 成员</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt  <span class="comment">#导入特定的成员</span></span><br><span class="line"></span><br><span class="line">x = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;输入x：&quot;</span>))</span><br><span class="line">print(sqrt(x)) <span class="comment">#因为已经导入sqrt成员，所以此处引用时不需要加math.sqrt</span></span><br></pre></td></tr></table></figure><h5 id="导入-numpy-模块并为其设置别名"><a href="#导入-numpy-模块并为其设置别名" class="headerlink" title="导入 numpy 模块并为其设置别名"></a>导入 numpy 模块并为其设置别名</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;输入x：&quot;</span>))</span><br><span class="line">print(np.sqrt(x))<span class="comment">#以 别名.对象名 的方式引用</span></span><br></pre></td></tr></table></figure><p>在后面的章节学习时，我们会导入其他的模块，如<code>matplotlib</code>,  <code>numpy</code>等等。</p><hr><h3 id="2-1-5-Python程序调试简介"><a href="#2-1-5-Python程序调试简介" class="headerlink" title="2.1.5 Python程序调试简介"></a>2.1.5 Python程序调试简介</h3><p>学会调试程序是学好python编程的最基本的技能，首先在编程过程中学会快捷键的使用</p><p>其次学会用debug可实现单步、设置断点调试程序， 通过ctrl+F5进入调试状态，ctrl+F12可进入下一步，ctrl+shift+F12可结束调试，运行到对应的语句就能够在右侧的窗口看到对应的变量和对象的值的变化，见下图*****，具体的调试过程可自行上网查询资料。</p><p>最后，程序调试的过程中可以多次使用print()函数输出程序执行过程中的中间结果，可以最直观地查看程序代码的编写是否正确，这也是初学者最常用的程序调试方法。</p><hr><h3 id="2-1-6-本章要解决的案例"><a href="#2-1-6-本章要解决的案例" class="headerlink" title="2.1.6 本章要解决的案例"></a>2.1.6 本章要解决的案例</h3><p>案例问题描述：</p><p>如图所示，世界机器人大赛比赛项目：机器人定点投篮比赛正在如火如荼地进行中，已知某机器人以14m/s 的出手速度V0,1.9m的出手高度H和40°的出手角度θ投出篮球，在不考虑空气阻力和落点有效区域，请建立坐标系并绘制蓝球的运动轨迹。（S点为蓝球离手瞬间位置，g=9.8m/s2），并计算在V0和高度H一定的情况下确定投球角度θ的范围，使其投球命中篮筐。</p><p>为解决上述问题，不管是人工还是计算，都得知道球水平和垂直方向的坐标系，假设投出铅球的时刻为0，则在t 时刻，铅球的坐标（xt,yt）如下：<br>$$<br>x_t=v_0cos\theta t<br>\<br>y_t = h+v_0sin\theta t-\frac{1}{2}gt^2<br>$$<br>有了此方程就可以计算一个时间范围内的n个坐标点，将这n个坐标点连在一起就可得到篮球的运行轨迹，当n值足够多的时候，轨迹越接近真实的轨迹。在 θ 的取值范围内，通过不断的尝试可找出投掷篮球距离最远的θ值 。</p><p>利用同样的方法，也可在V0和高度H一定的情况下，通过确定投球角度θ的范围，使机器人能百分百投球命中篮筐。</p><h3 id="2-1-6-本节小结"><a href="#2-1-6-本节小结" class="headerlink" title="2.1.6 本节小结"></a>2.1.6 本节小结</h3><hr><h3 id="2-1-7-习题"><a href="#2-1-7-习题" class="headerlink" title="2.1.7 习题"></a>2.1.7 习题</h3><hr><h2 id="2-2-简单计算问题的求解"><a href="#2-2-简单计算问题的求解" class="headerlink" title="2.2 简单计算问题的求解"></a>2.2 简单计算问题的求解</h2><p>为了在计算机内要绘制篮球在某一时间点坐标的数据，需要知道数据在计算机内是如何表示，各种数据信息是如何命名，数据是如何获取的，如何根据数据计算各种数学公式的值，且计算的结果要在屏幕上显示等等。</p><p>本节知识点的学习目标：</p><p>1、 掌握Python数据的输出</p><p>2、 掌握变量的赋值 </p><p>3、了解Python基本的数据类型及不同基本数据类型之间的转换</p><p>4、 掌握数据的输入</p><p>5、掌握算术运算符与表达式的表示</p><p>5、 掌握简单计算问题的求解，</p><p>6、掌握顺序结构程序设计的基本方法</p><p>本节案例任务：如何在屏幕上绘制篮球在某一个时间点的坐标</p><p>任务分析：</p><p>要分析如何建立球水平与垂直方向的坐标方程，进而推广到可实现求解简单的计算问题。</p><p>从计算球的横坐标的数学公式<br>$$<br>x_t=v_0cos\theta t<br>$$<br>可知，v0,t,和θ对应着抛出球的初速度，角度和某个时间点，如果能确定这3个参数的值，并通过计算<br>$$<br>cos\theta<br>$$<br>函数，则水平方向的坐标位置就确定好了，同理<br>$$<br>y_t = h+v_0sin\theta t-\frac{1}{2}gt^2<br>$$<br>的计算方法也类似，但在此公式中g的值为9.8的重力加速度，所以在开始计算之前，要想办法确定这3个参数的值，则水平和垂直方向的坐标就确定下来了。</p><p>站在计算机的角度来看，其值不能改变的数据对象称为“常量”，例如公式中重力加速度9.8，圆周率pi的值等；凡是计算机不知道的量都叫“变量”，如上述公式中的三个参系数v0,t,和θ的值，显然，求 (xt,yt) 的值还需要计算三角函数cos(θ)和sin(θ)的值，计算机中通过装载数学公式库运行库中的函数来完成操作。</p><p>计算机不知道的量即变量，要么开始计算前想办法告诉计算机，要么让计算机根据公式自己算出来。此例中v0,t,和θ的值只能告诉计算机。告诉计算机的方法有很多，最简单的方式在程序中直接写明（称为给变量赋值，简称赋值）；较复杂一点是在程序运行时，通过键盘输入，就是我们用微信或QQ一样；再复杂一点将数据事先在一个文件中，程序运行时自动从这个文件中取，这个文件可以为普通的文本文件，EXCEL文件、WORD文件、数据库文件等。</p><p>要解决上述问题，可通过以下几个步骤来完成：</p><p>1、     如何输出水平与垂直方向坐标数据</p><p>2、     如何表示水平与垂直方向坐标数据 </p><p>3、     如何解决关键数据的输入问题</p><p>4、     数学公式的Python表示问题</p><p>5、     如何建立坐标轴并输出一个坐标点</p><hr><h3 id="2-2-1-数据的输出"><a href="#2-2-1-数据的输出" class="headerlink" title="2.2.1 数据的输出"></a>2.2.1 数据的输出</h3><p>根据题面案例给定的初始化值：14m/s 的出手速度v0,1.9m的出手高度h和40°的出手角度θ,g 为9.8，假设t=1.5秒时，我们可以手动计算求出屏幕上篮球的坐标点xt=16.0869 ，yt=4.3735，（保留小数点后4位） ，若想在计算机屏幕上输出两坐标点的值，需要用到Python的输出方式 。</p><p>Python有两种输出值的方式: 表达式语句和 print() 函数。</p><p>表达式语句输出：</p><p>例如：</p><p>同时，print()函数也可以直接输出括号内的表达式结果。如：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#输出表达式</span></span><br><span class="line">print(<span class="number">1</span>+<span class="number">2</span>+<span class="number">3</span>+<span class="number">4</span>+<span class="number">5</span>)</span><br><span class="line">print(<span class="number">25</span>&gt;<span class="number">24</span>)</span><br><span class="line">print(<span class="number">15</span>==<span class="number">46</span>)</span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">15</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><p>例：Print（）函数输出</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#简单输出</span></span><br><span class="line">s=<span class="number">10</span></span><br><span class="line">print(s)   <span class="comment">#输出s的值</span></span><br><span class="line">print(<span class="string">&#x27;s&#x27;</span>)  <span class="comment">#输出字符串s</span></span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">10</span></span><br><span class="line">s</span><br></pre></td></tr></table></figure><p>print()语句默认输出换行，如果你希望运行时不直接换行，在该行结尾继续输出下一次print()的结果，可以加入end参数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#多print()单行输出</span></span><br><span class="line">print(<span class="number">1</span>+<span class="number">2</span>, end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">print(<span class="string">&quot;Python&quot;</span>)</span><br><span class="line">print(<span class="number">1</span>, end=<span class="string">&quot;+&quot;</span>)</span><br><span class="line">print(<span class="number">2</span>, end=<span class="string">&quot;=&quot;</span>)</span><br><span class="line">print(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span> Python</span><br><span class="line"><span class="number">1</span>+<span class="number">2</span>=<span class="number">3</span></span><br></pre></td></tr></table></figure><p>如果你希望输出的形式更加多样，可以使用 str.format() 函数或者Python2以上支持的%格式化来进行格式化输出值。 </p><h4 id="Python的格式化输出"><a href="#Python的格式化输出" class="headerlink" title="Python的格式化输出"></a>Python的格式化输出</h4><h5 id="方式"><a href="#方式" class="headerlink" title="%方式"></a>%方式</h5><p>这个方法沿用的是c语言的方式，在很多语言中都采用这个方式进行格式化输出</p><p>格式化字符串:</p><p>1.在%操作符的左侧放置一个需要进行格式化的字符串，这个字符串带有一个或多个嵌入的转换目标，都以%开头（例如，%d)。</p><p>2.在%操作符右侧放置一个（或多个，嵌入到元组中）对象，这些对象将会插入到左侧想让Python进行格式化字符串的一个(或多个）转换目标的位置上去。</p><p>例如：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># %方式格式化输出</span></span><br><span class="line">i, j = <span class="number">5</span>, <span class="number">10</span></span><br><span class="line">print(<span class="string">&quot;%d*%d=%2d&quot;</span> % (i, j, i*j))</span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">5</span>*<span class="number">10</span>=<span class="number">50</span></span><br></pre></td></tr></table></figure><p>这里涉及到的%d是格式控制符，如：</p><table><thead><tr><th>格式化符号</th><th>说明</th></tr></thead><tbody><tr><td>%c</td><td>转换成字符（ASCII 码值，或者长度为一的字符串）</td></tr><tr><td>%r</td><td>优先用repr()函数进行字符串转换</td></tr><tr><td>%s</td><td>优先用str()函数进行字符串转换</td></tr><tr><td>%d / %i</td><td>转成有符号十进制数</td></tr><tr><td>%u</td><td>转成无符号十进制数</td></tr><tr><td>%o</td><td>转成无符号八进制数</td></tr><tr><td>%x / %X</td><td>转成无符号十六进制数（x / X 代表转换后的十六进制字符的大小写）</td></tr><tr><td>%e / %E</td><td>转成科学计数法（e / E控制输出e / E）</td></tr><tr><td>%f / %F</td><td>转成浮点数（小数部分自然截断）</td></tr><tr><td>%g / %G</td><td>%e和%f / %E和%F 的简写</td></tr><tr><td>%%</td><td>输出% （格式化字符串里面包括百分号，那么必须使用%%）</td></tr></tbody></table><p>你可以补充参数来进行相关的补位等操作，例如：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i, j = <span class="number">5</span>, <span class="number">1</span></span><br><span class="line">print(<span class="string">&quot;%d*%d=%2d&quot;</span> % (i, j, i*j))</span><br><span class="line">t = <span class="number">1.5565656565</span></span><br><span class="line">print(<span class="string">&quot;%.5f&quot;</span> % (t))</span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">5</span>*<span class="number">1</span>= <span class="number">5</span></span><br><span class="line"><span class="number">1.5565</span></span><br></pre></td></tr></table></figure><p>可以看到等号右边的5左边多了个空格补成两位。</p><p>第三种方式是使用文件对象的 write() 方法，标准输出文件可以用 sys.stdout 引用，这里不做介绍，请感兴趣的读者查阅相关资料。</p><hr><h3 id="2-2-2-变量和赋值"><a href="#2-2-2-变量和赋值" class="headerlink" title="2.2.2 变量和赋值"></a>2.2.2 变量和赋值</h3><p>变量是用来存储程序中的各种数据，例如案例公式中的初速度用V0表示，高度用H来表示，时间用T来表示，而xt，yt分别代表某一t时刻的横坐标与纵坐标；变量有不同的数据类型，在内存中会有一片区域，变量具有唯一的标识符，且标识符遵循一定命名规则，变量可以赋值例如V0初值为14m/s，H的高度为1 m，变量可也以用来保存数学公式的计算结果</p><h4 id="1、-变量的命名规则："><a href="#1、-变量的命名规则：" class="headerlink" title="1、 变量的命名规则："></a>1、 变量的命名规则：</h4><p>•      第一个字符必须是字母表中字母或下划线 <strong>_</strong> 。</p><p>•      变量的其他的部分由字母、数字和下划线组成。</p><p>•      变量对大小写敏感。</p><p>•      变量名不能是保留字或关键字</p><h4 id="2、变量的赋值："><a href="#2、变量的赋值：" class="headerlink" title="2、变量的赋值："></a>2、变量的赋值：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#变量的赋值</span></span><br><span class="line">v0=<span class="number">1.4</span></span><br><span class="line">h=<span class="number">10</span></span><br><span class="line">g=<span class="number">9.8</span></span><br><span class="line">t=<span class="number">1</span></span><br><span class="line">print(v0,h,g,t)</span><br></pre></td></tr></table></figure><p>【输出结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.4</span> <span class="number">10</span> <span class="number">9.8</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><hr><h3 id="2-2-3-基本的数据类型"><a href="#2-2-3-基本的数据类型" class="headerlink" title="2.2.3 基本的数据类型"></a>2.2.3 基本的数据类型</h3><p>计算机利用一系列的0、1来表示数字、图形符号与语音等数据信息，不同的数据需要定义不同的数据类型来存储，数据类型也决定了如何将代表这些数据位存储到计算机内存中。Python的基本数据类型包括: 整型、浮点型，复数、字符串型，布尔型True,False和空值None等 </p><h4 id="1、-整型数据"><a href="#1、-整型数据" class="headerlink" title="1、 整型数据"></a>1、 整型数据</h4><p>Python中可以处理任意大小的整数，包括负整数，十进制整数的表示方式与数学上的写法一样，如255，0，2014等。此外Python还支持十六进制、八进制和二进制整数。</p><p>十六进制需要用0x或0X作为前缀，用0-9和a-f作为基本的16个数字，如0xffff,0X123afe等，八进制数需要用0o或0O作为前缀，用0-7作为基本的8个字符，如：0o127、0O376等，二进制数需要用0b或0B作为前缀，用0-1作为基本数字，0b1011,0B0100001等。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#整数类型</span></span><br><span class="line">print(<span class="number">255</span>)<span class="comment">#十进制整数</span></span><br><span class="line">print(<span class="number">0xff</span>) <span class="comment">#十六进制整数</span></span><br><span class="line">print(<span class="number">0o123</span>) <span class="comment">#八进制整数</span></span><br><span class="line">print(<span class="number">0b0100001</span>)<span class="comment">#二进制整数</span></span><br><span class="line">print(-<span class="number">123</span>) <span class="comment">#负整数表示</span></span><br><span class="line">print(-<span class="number">0xff</span>) <span class="comment">#负十六进制整数</span></span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">255</span></span><br><span class="line"><span class="number">255</span></span><br><span class="line"><span class="number">83</span></span><br><span class="line"><span class="number">33</span></span><br><span class="line">-<span class="number">123</span></span><br><span class="line">-<span class="number">255</span></span><br></pre></td></tr></table></figure><p>从输出结果可知，不同进制表示的整数经过print（）函数输出为十进制数值。</p><h4 id="2、浮点型"><a href="#2、浮点型" class="headerlink" title="2、浮点型"></a>2、浮点型</h4><p>在Python中，浮点型用来表示实数，一般情况下用来表示小数，浮点数可以使用普通的数学写法，如0.1234，-3.14159等，对于特别大或特别小的浮点数，使用科学计数法表示，用E或e来表示10的幂。如1.234e-1，-1.24E3代表-1240</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#浮点型</span></span><br><span class="line">print(<span class="number">0.1234</span>) <span class="comment">#普通浮点数表示</span></span><br><span class="line">print(<span class="number">1.234e-1</span>)<span class="comment">#科学计数法浮点数表示</span></span><br><span class="line">print(-<span class="number">3.1415926</span>)<span class="comment">#负浮点数表示</span></span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">0.1234</span></span><br><span class="line"><span class="number">0.1234</span></span><br><span class="line">-<span class="number">3.1415926</span></span><br></pre></td></tr></table></figure><p>整数与浮点数的输出都可进行格式化处理，例如指定整数数据的宽度，浮点数的小数点后面的位数，特殊符号的输出等，数据的格式化处理会在后面的章节中会重点介绍，在这里我们先体验见识一下。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#格式化输出整数与浮点数</span></span><br><span class="line">print(<span class="string">&quot;%8d&quot;</span> %-<span class="number">123</span>)     <span class="comment">#整数的输出宽度为8 ，不够左边补空格（默认）</span></span><br><span class="line">print(<span class="string">&quot;%8.2f&quot;</span> %-<span class="number">3.1415926</span>)  <span class="comment">#浮点数的输出宽度为8，保留2位小数，不够左边补空格</span></span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">-<span class="number">123</span></span><br><span class="line">-<span class="number">3.14</span></span><br></pre></td></tr></table></figure><p>上述代码 <code>%</code> 为格式数据的分隔符，左边为格式控制字符串，右边为要输出的数据，可以是1到多个不等，从输出结果来看，数据的宽度为数据的显示长度，如果数据的长度大于设置显示的宽度，则数据原样输出，如果数据的长度小于设置显示的宽度，默认情况下不够的左边补空格显示。</p><h4 id="3、复数：Python提供复数的表示，其中j-代表虚数单位"><a href="#3、复数：Python提供复数的表示，其中j-代表虚数单位" class="headerlink" title="3、复数：Python提供复数的表示，其中j 代表虚数单位"></a>3、复数：Python提供复数的表示，其中j 代表虚数单位</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#复数输出</span></span><br><span class="line">print(<span class="number">1</span>+<span class="number">2j</span>)</span><br><span class="line">print(<span class="number">7</span>-<span class="number">3j</span>)</span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(<span class="number">1</span>+<span class="number">2j</span>)</span><br><span class="line">(<span class="number">7</span>-<span class="number">3j</span>)</span><br></pre></td></tr></table></figure><p>复数类型的实数与虚数部分的数值都是浮点类型，可通过复数.real和复数.imag分别获得复数的实数部分与虚数部分，例如：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#复数实数与虚数获取</span></span><br><span class="line">print((<span class="number">1</span>+<span class="number">2j</span>).real)</span><br><span class="line">print((<span class="number">1</span>+<span class="number">2j</span>).imag)</span><br><span class="line">print((<span class="number">7</span>-<span class="number">3j</span>).real)</span><br><span class="line">print((<span class="number">7</span>-<span class="number">3j</span>).imag)</span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.0</span></span><br><span class="line"><span class="number">2.0</span></span><br><span class="line"><span class="number">7.0</span></span><br><span class="line">-<span class="number">3.0</span></span><br></pre></td></tr></table></figure><h4 id="4、字符串类型"><a href="#4、字符串类型" class="headerlink" title="4、字符串类型"></a>4、字符串类型</h4><p>字符串是由字符组成的序列，是用一对单引号（‘）、双引号(“)或者三引号（‘’‘）括起来的一个或多个字符。其中单引号和双引号都可以表示单行字符串，两者作用相同。单引号与双引号都可以作为字符串的一部分，一般当字符串中有单引号时，使用双引号作为界定符，反之，当双引号是字符的一部分时，用单引号作为界定符。三引号可以表示单行或多行字符串。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#字符串组成</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;hello world&#x27;</span>) <span class="comment">#显示英文字符</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;Hello guys，Welcom to Hu Nan University !&quot;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;湖南大学&quot;</span>) <span class="comment">#显示中文字符</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;let\&#x27;s go to school\n&#x27;</span>) <span class="comment">#带转义字符的字符串</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;&#x27;&#x27;重要的事情说三遍：</span></span><br><span class="line"><span class="string">符号与标点要使用英文输入法</span></span><br><span class="line"><span class="string">符号与标点要使用英文输入法</span></span><br><span class="line"><span class="string">符号与标点要使用英文输入法&#x27;&#x27;&#x27;</span>) <span class="comment">#多行字符串的显示</span></span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">hello world</span><br><span class="line">Hello guys，Welcom to Hu Nan University !</span><br><span class="line">湖南大学</span><br><span class="line">let<span class="string">&#x27;s go to school</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">重要的事情说三遍：</span></span><br><span class="line"><span class="string">符号与标点要使用英文输入法</span></span><br><span class="line"><span class="string">符号与标点要使用英文输入法</span></span><br><span class="line"><span class="string">符号与标点要使用英文输入法</span></span><br></pre></td></tr></table></figure><p>从前面的程序段语句中出现了带‘\’的特殊字符，俗称Python的转义字符，见表2-1</p><p>见表2-1 转义字符</p><table><thead><tr><th>转义字符</th><th>描述</th></tr></thead><tbody><tr><td>(在行尾时)</td><td>续行符</td></tr><tr><td>\</td><td>反斜杠符号</td></tr><tr><td>&#39;</td><td>单引号</td></tr><tr><td>&quot;</td><td>双引号</td></tr><tr><td>\a</td><td>响铃</td></tr><tr><td>\b</td><td>退格(Backspace)</td></tr><tr><td>\e</td><td>转义</td></tr><tr><td>\000</td><td>空</td></tr><tr><td>\n</td><td>换行</td></tr><tr><td>\v</td><td>纵向制表符</td></tr><tr><td>\t</td><td>横向制表符</td></tr><tr><td>\r</td><td>回车</td></tr><tr><td>\f</td><td>换页</td></tr><tr><td>\oyy</td><td>八进制数，y 代表 0~7 的字符，例如：\012 代表换行。</td></tr><tr><td>\xyy</td><td>十六进制数，以 \x 开头，yy代表的字符，例如：\x0a代表换行</td></tr><tr><td>\other</td><td>其它的字符以普通格式输出</td></tr></tbody></table><p>例如：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#转义字符的使用</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;\101 \x42 C\n&quot;</span>)</span><br><span class="line">print(<span class="string">&quot;I say:\&quot;How are you?\&quot;\n&quot;</span>)</span><br><span class="line">print(<span class="string">&quot;\\Python Program\\\n&quot;</span>)</span><br><span class="line">print(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">print(<span class="string">&quot;Python \&#x27;C\&#x27;&quot;</span>)</span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A B C</span><br><span class="line"></span><br><span class="line">I say:<span class="string">&quot;How are you?&quot;</span></span><br><span class="line"></span><br><span class="line">\Python Program\</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Python <span class="string">&#x27;C&#x27;</span></span><br></pre></td></tr></table></figure><p>其中’ ‘代表空字符，’\’输出一个（\）,’\’‘输出一个单引号（‘），’\”’输出一个（“），’\n’代表换行，本身print（）函数默认输出数据后换行，故输出字符串有多行输出。</p><p>如果程序不让转义字符生效，要显示字符串原来的意思，则可通过R或r 来定义原始字符串，例如: </p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#原始字符串</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">r&quot;\101 \x42 C\n&quot;</span>)</span><br><span class="line">print(<span class="string">R&quot;\\Python Program\\\n&quot;</span>)</span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">\<span class="number">101</span> \x42 C\n</span><br><span class="line">\\Python Program\\\n</span><br></pre></td></tr></table></figure><p>另外字符串与数字一样，是不可变对象。所谓不可变，是指不能原样修改对象的内容。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#字符类型为不可变对象</span></span><br><span class="line">a=b=<span class="string">&#x27;123&#x27;</span> <span class="comment">#字符变量a,b赋初值为123，指向同一对象</span></span><br><span class="line">print(<span class="built_in">id</span>(a)) <span class="comment">#输出字符变量a对象的内存地址。</span></span><br><span class="line">print(<span class="built_in">id</span>(b)) <span class="comment">#输出字符变量b对象的内存地址。</span></span><br><span class="line">a=<span class="string">&#x27;abc&#x27;</span>   <span class="comment">#字符变量a重新赋值</span></span><br><span class="line">print(a)   <span class="comment">#输出字符变量a的值</span></span><br><span class="line">print(<span class="built_in">id</span>(a)) <span class="comment">#输出字符变量a对象的内存地址。</span></span><br><span class="line">print(<span class="built_in">id</span>(b)) <span class="comment">#输出字符变量b对象的内存地址。</span></span><br><span class="line">print(b)   <span class="comment">#输出字符变量b的值</span></span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">2609381795696</span></span><br><span class="line"><span class="number">2609381795696</span></span><br><span class="line">abc</span><br><span class="line"><span class="number">2609286044336</span></span><br><span class="line"><span class="number">2609381795696</span></span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure><p>从代码的输出结果可知： a,b 初始化为同一对象，有相同的内存地址，但当修改a的值时，a引用了另一个空间，其地址发生了改变，b的内容地址都不变，可见对字符变量a的修改不是原地修改，这也说明了字符串是不可变对象。</p><h4 id="5、不同数据类型之间的转换"><a href="#5、不同数据类型之间的转换" class="headerlink" title="5、不同数据类型之间的转换"></a>5、不同数据类型之间的转换</h4><table><thead><tr><th>函数</th><th>解释</th></tr></thead><tbody><tr><td>int(x [,base])</td><td>将 x 转换为一个整数</td></tr><tr><td>long(x [,base])</td><td>将 x 转换为一个长整数</td></tr><tr><td>float(x)</td><td>将 x 转换到一个浮点数</td></tr><tr><td>complex(real [,imag])</td><td>创建一个复数</td></tr><tr><td>str(x)</td><td>将对象 x 转换为字符串</td></tr><tr><td>chr(x)</td><td>将一个整数转换为一个字符</td></tr><tr><td>unichr(x)</td><td>将一个整数转换为 Unicode 字符</td></tr><tr><td>ord(x)</td><td>将一个字符转换为它的整数值</td></tr><tr><td>hex(x)</td><td>将一个整数转换为一个十六进制字符串</td></tr><tr><td>oct(x)</td><td>将一个整数转换为一个八进制字符串</td></tr></tbody></table><p>例如：</p><p><code>int()</code>函数的使用</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&#x27;101010&#x27;</span></span><br><span class="line">print(<span class="built_in">type</span>(s))<span class="comment">#s是一个字符串</span></span><br><span class="line"></span><br><span class="line">print(<span class="built_in">int</span>(s))</span><br><span class="line">print(<span class="built_in">type</span>(<span class="built_in">int</span>(s)))<span class="comment">#int(s)将s转化成整数</span></span><br><span class="line"></span><br><span class="line">print(<span class="built_in">int</span>(s,<span class="number">2</span>))<span class="comment">#int(s,2)将2进制的s字符串转化成10进制</span></span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">str</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">101010</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">int</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">42</span></span><br></pre></td></tr></table></figure><p><code>float()</code>函数的使用</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&#x27;123.456&#x27;</span></span><br><span class="line">print(<span class="built_in">float</span>(s))</span><br><span class="line">print(<span class="built_in">type</span>(<span class="built_in">float</span>(s)))<span class="comment">#float(s)将s转化成浮点数</span></span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">123.456</span></span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">float</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure><p><code>str()</code>函数的使用</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">123</span></span><br><span class="line">b = <span class="number">123.456</span></span><br><span class="line">print(<span class="built_in">type</span>(a), <span class="built_in">type</span>(b))<span class="comment">#a,b分别为整数和浮点数</span></span><br><span class="line">print(<span class="built_in">str</span>(a), <span class="built_in">str</span>(b))</span><br><span class="line">print(<span class="built_in">type</span>(<span class="built_in">str</span>(a)), <span class="built_in">type</span>(<span class="built_in">str</span>(b)))<span class="comment">#str(a),str(b)分别把a,b转化成字符串</span></span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">int</span>&#x27;&gt; &lt;<span class="title">class</span> &#x27;<span class="title">float</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">123 123.456</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">str</span>&#x27;&gt; &lt;<span class="title">class</span> &#x27;<span class="title">str</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure><hr><h3 id="2-2-4-数据的输入"><a href="#2-2-4-数据的输入" class="headerlink" title="2.2.4 数据的输入"></a>2.2.4 数据的输入</h3><p>案例中时间T 的值可直接赋值获得，但更多的时侯是需要从键盘输入。变量可在程序中直接赋值，但有时候，编写程序时并不能确定变量的值，而是在程序运行过程中由用户输入，Python提供了用来从键盘输入数据的input（）函数，它一般与Python的另一常用的内置函数 <code>eval()</code>同时使用，以满足用户单个数据，多个数据，按某一格式输入数据的要求；</p><p>Python中的标准化输入由函数input（）来完成。格式如下：</p><p><code>input（[提示性语句]）</code></p><p>Python提供了 input() 内置函数从标准输入读入一行文本，默认的标准输入是键盘。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="built_in">input</span>(<span class="string">&quot;请输入：&quot;</span>);</span><br></pre></td></tr></table></figure><p>注意，input读入的是一个字符串</p><p>如果键盘读入的是123，它并不能被直接运算，需要经过int()，float()或eval()函数的转换才可变成整形，如：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;假设输入的是一个整数&quot;</span>))</span><br><span class="line">num = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&quot;假设输入的是一个小数&quot;</span>))</span><br><span class="line">num = <span class="built_in">eval</span>(<span class="built_in">input</span>(<span class="string">&quot;假设输入的是一个数字&quot;</span>))</span><br></pre></td></tr></table></figure><p><strong>多个数据的输入</strong></p><p><code>input()</code>函数支持多个数据同时输入，例如：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a,b,c = <span class="built_in">eval</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入a,b,c的值，中间以‘,’隔开: &quot;</span>))</span><br><span class="line">print(a,b,c)</span><br><span class="line">print(<span class="built_in">type</span>(a),<span class="built_in">type</span>(b),<span class="built_in">type</span>(c))</span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">请输入a,b,c的值，中间以‘,’隔开: <span class="number">7</span>,<span class="string">&#x27;sss&#x27;</span>,<span class="number">2.7</span></span><br><span class="line"><span class="number">7</span> sss <span class="number">2.7</span></span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">int</span>&#x27;&gt; &lt;<span class="title">class</span> &#x27;<span class="title">str</span>&#x27;&gt; &lt;<span class="title">class</span> &#x27;<span class="title">float</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure><p>还可以以字符串的方式读入后再分割，例如：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a,b,c = <span class="built_in">input</span>(<span class="string">&quot;请输入a,b,c的值，中间以‘ ’隔开: &quot;</span>).split()</span><br><span class="line"><span class="comment">#split()方法默认以空格作为分割符，如果你想以‘,’分割，可以写作split(&#x27;,&#x27;)</span></span><br><span class="line">print(a,b,c)</span><br><span class="line">print(<span class="built_in">type</span>(a),<span class="built_in">type</span>(b),<span class="built_in">type</span>(c))</span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">请输入a,b,c的值，中间以‘ ’隔开: <span class="number">7</span> <span class="number">8</span> <span class="number">2.5</span></span><br><span class="line"><span class="number">7</span> <span class="number">8</span> <span class="number">2.5</span></span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">str</span>&#x27;&gt; &lt;<span class="title">class</span> &#x27;<span class="title">str</span>&#x27;&gt; &lt;<span class="title">class</span> &#x27;<span class="title">str</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，用<code>split()</code>方法得到的数据都是字符串，如果要进行进一步数学运算，必须用<code>int()</code>，<code>float()</code>，<code>eval()</code>等函数转化。</p><hr><h3 id="2-2-5-运算符与表达式"><a href="#2-2-5-运算符与表达式" class="headerlink" title="2.2.5 运算符与表达式"></a>2.2.5 运算符与表达式</h3><p>案例中的某一时刻（如t=2.5）的坐标值（xt,yt）,在数学公式中，只要将各种参数值代入公式计算即可，而在计算机中可利用Python的变量、运算符、括号和各种函数一起构造的表达式来完成。</p><p><strong>运算符</strong>：乘法×符号与字母x非常类似，％运算符在计算语言另有任用，因此计算机语言的四则运算为“+-*/”。%取余数，如14%3为2即14被3除后余数为2，此外常见的运算符有前面用来赋值的赋值运算符、关系运算符，逻辑运算符、位运算符、成员运算符等，在这里先介绍解决简单问题的算术运算符，其他运算符后面的内容会一一道来，请大家找百度或跟着我们慢慢地积累吧</p><h4 id="Python算术运算符"><a href="#Python算术运算符" class="headerlink" title="Python算术运算符"></a>Python算术运算符</h4><p>以下假设变量a为10，变量b为21：</p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">+</td><td align="left">加 - 两个对象相加</td><td align="left">a + b 输出结果 31</td></tr><tr><td align="left">-</td><td align="left">减 - 得到负数或是一个数减去另一个数</td><td align="left">a - b 输出结果 -11</td></tr><tr><td align="left">*</td><td align="left">乘 - 两个数相乘或是返回一个被重复若干次的字符串</td><td align="left">a * b 输出结果 210</td></tr><tr><td align="left">/</td><td align="left">除 - x 除以 y</td><td align="left">b / a 输出结果 2.1</td></tr><tr><td align="left">%</td><td align="left">取模 - 返回除法的余数</td><td align="left">b % a 输出结果 1</td></tr><tr><td align="left">**</td><td align="left">幂 - 返回x的y次幂</td><td align="left">a**b 为10的21次方</td></tr><tr><td align="left">//</td><td align="left">取整除 - 向下取接近商的整数</td><td align="left">&gt;&gt;&gt; 9//2<br>4<br>&gt;&gt; -9//2<br>-5</td></tr></tbody></table><h4 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h4><p>表达式是由数字、变量、运算符、括号等组成的组合，最常见最基础的表达式是算术表达式</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#算术表达式</span></span><br><span class="line"><span class="keyword">import</span> math           <span class="comment">#导入math库</span></span><br><span class="line">a,b,c=<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span></span><br><span class="line">delta=b*b-<span class="number">4</span>*a*c         <span class="comment">#变量的赋值</span></span><br><span class="line">x1=(-b+math.sqrt(delta))/(<span class="number">2</span>*a)     <span class="comment">#求一元二次方程的根</span></span><br><span class="line">x2=(-b-math.sqrt(delta))/(<span class="number">2</span>*a)    <span class="comment">#求一元二次方程的根</span></span><br><span class="line">print(x1,x2)</span><br></pre></td></tr></table></figure><p>【输出结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">-<span class="number">1.0</span> -<span class="number">1.0</span></span><br></pre></td></tr></table></figure><p>程序代码中出现的sqrt(),cos()和sin()，<code>sqrt</code>是开平方的函数，而计算机的硬件本质上只能做“<strong>加减乘除</strong>”运算，像开平方这种复杂的运算，必须<strong>有人去编写代码</strong>。正如我们有“数学用表”一样，计算机就有“<strong>数学函数库</strong>”，这里面已经有很多数学函数的实现代码，如开平方就是<code>sqrt()</code>，求正弦用<code>sin()</code>, 求余弦用<code>cos()</code></p><p>当想调用函数时需在最前面写上<code>import math</code>，也可以写上<code>from math import * </code></p><p>math是mathematics（数学）的缩写，</p><p>import是导入的意思,import math 导入数学库，则数学库中的函数可以拿来直接使用而不需要我们自己去编写。</p><p>这样的函数扩展库还有很多，有兴趣的同学可以自行搜索，或到官方<a href="https://pypi.org/%E6%9F%A5%E6%89%BE%E9%9C%80%E8%A6%81%E7%9A%84%E5%BA%93%E5%8F%8A%E5%85%B6%E8%AF%B4%E6%98%8E%E3%80%82">https://pypi.org/查找需要的库及其说明。</a></p><p>一些常用的math库函数如下表：</p><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>e</td><td>自然常数e</td></tr><tr><td>pi</td><td>圆周率pi</td></tr><tr><td>degrees(x)</td><td>弧度转角度</td></tr><tr><td>radians(x)</td><td>角度转弧度</td></tr><tr><td>exp(x)</td><td>返回e的x次方</td></tr><tr><td>log(x[, base])</td><td>返回x的以base为底的对数，base默认为e</td></tr><tr><td>log10(x)</td><td>返回x的以10为底的对数</td></tr><tr><td>pow(x, y)</td><td>返回x的y次方</td></tr><tr><td>sqrt(x)</td><td>返回x的平方根</td></tr><tr><td>ceil(x)</td><td>返回不小于x的整数</td></tr><tr><td>floor(x)</td><td>返回不大于x的整数</td></tr><tr><td>trunc(x)</td><td>返回x的整数部分</td></tr><tr><td>fabs(x)</td><td>返回x的绝对值</td></tr><tr><td>sin(x)</td><td>返回x（弧度）的三角正弦值</td></tr><tr><td>asin(x)</td><td>返回x的反三角正弦值</td></tr><tr><td>cos(x)</td><td>返回x（弧度）的三角余弦值</td></tr><tr><td>acos(x)</td><td>返回x的反三角余弦值</td></tr><tr><td>tan(x)</td><td>返回x（弧度）的三角正切值</td></tr><tr><td>atan(x)</td><td>返回x的反三角正切值</td></tr><tr><td>atan2(x, y)</td><td>返回x/y的反三角正切值</td></tr><tr><td>sinh(x)</td><td>返回x的双曲正弦函数</td></tr><tr><td>asinh(x)</td><td>返回x的反双曲正弦函数</td></tr><tr><td>cosh(x)</td><td>返回x的双曲余弦函数</td></tr><tr><td>acosh(x)</td><td>返回x的反双曲余弦函数</td></tr><tr><td>tanh(x)</td><td>返回x的双曲正切函数</td></tr><tr><td>atanh(x)</td><td>返回x的反双曲正切函数</td></tr></tbody></table><p>此外表达式中除了变量、运算符和函数外，还有<strong>括号</strong>：数学中有大括号{}、中括号[]与小括号()，在计算机语言中这些符号另有重用。圆括号跟数学中圆括号一样，当“先乘除后加减”不够用即不能清晰的表明运算次序时，需要用圆括号来帮忙，如前面计算一元二次方程的根的公式，如果写是<code>x1=-b+sqrt(delta)/2*a</code>，它实质是表示*<br>$$<br>x_1=-b+\frac{\sqrt\delta}{2}<em>a<br>$$<br>则 x1=-2+0/2</em>1=-2，而不是正确答案-1。圆括号可多重嵌套但必须成对出现。</p><hr><h3 id="2-2-6-建立坐标轴完成屏幕上输出一个坐标点的任务"><a href="#2-2-6-建立坐标轴完成屏幕上输出一个坐标点的任务" class="headerlink" title="2.2.6 建立坐标轴完成屏幕上输出一个坐标点的任务"></a>2.2.6 建立坐标轴完成屏幕上输出一个坐标点的任务</h3><p><strong>案例2-3 在屏幕上绘制一个点的坐标</strong></p><p>案例描述与分析见前面内容所述，在此不再重述。</p><p>案例代码实现：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#求某一时间点的坐标数据并在屏幕上输出</span></span><br><span class="line"><span class="keyword">import</span> math         <span class="comment">#导入math库</span></span><br><span class="line">h, v0, g, θ = <span class="number">1.9</span>, <span class="number">14</span>, <span class="number">9.8</span>, <span class="number">40</span>   <span class="comment">#变量的多重赋值</span></span><br><span class="line">t=<span class="built_in">eval</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入时间t=&#x27;</span>))  <span class="comment">#为变量t赋值</span></span><br><span class="line">θ=math.radians(θ)     <span class="comment">#角度转变为弧度</span></span><br><span class="line">xt=v0*math.cos(θ)*t    <span class="comment">#横坐标</span></span><br><span class="line">yt=h+ v0*math.sin(θ)*t -<span class="number">1</span>/<span class="number">2</span>*g*t**<span class="number">2</span> <span class="comment">#纵坐标</span></span><br><span class="line">print(xt,yt)       <span class="comment">#打印显示</span></span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">-<span class="number">32.67996502096083</span></span><br><span class="line">-<span class="number">21.614455136511914</span></span><br></pre></td></tr></table></figure><hr><h3 id="2-2-7-简单计算问题求解"><a href="#2-2-7-简单计算问题求解" class="headerlink" title="2.2.7 简单计算问题求解"></a>2.2.7 简单计算问题求解</h3><p>通过前面的案例分析，我们浅试了一把Python语言，学习如何给变量赋值，如何通过键盘给变量赋值、如何显示结果、如何计算数学公式或数学表达式、如何确定变量的数据类型、如何调用Python语言提供的函数库、如何加上注释等，下面我们来试水Python编程，先来解决计算与人工智能简单的计算问题。</p><p><strong>案例2-1  银行存款本息计算法</strong></p><p>案例描述：若干美元假设是（1万美元）以固定利率存入银行账户，存5年后银行账户变为多少美金？</p><p>案例分析：由2021年最新中国银行美元存款利率可知，5年期美元的年利率为0.75% 。通过如下步骤可实现案例任务：</p><p>（1）   从键盘输入美元数，以$为美元结尾符</p><p>（2）   5年利率赋值为0.75%</p><p>（3）   根据公式计算利息=本金<em>年利率</em>年数</p><p>（4）   根据公式本息和=本金+利息</p><p>（5）   输出5年本息和</p><p>案例代码实现：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#案例2-1 银行存款计算本息和</span></span><br><span class="line">B_money = <span class="built_in">input</span>(<span class="string">&quot;请输入一个带$符号的美元存款数：&quot;</span> )   </span><br><span class="line">B_money = B_money[:-<span class="number">1</span>]                           <span class="comment">#取美元数字字符串</span></span><br><span class="line">Rate_5 = <span class="number">0.0075</span>                                 <span class="comment">#5年固定利率</span></span><br><span class="line">Lx_money = <span class="built_in">eval</span>(B_money)*Rate_5*<span class="number">5</span>                      <span class="comment">#5年利息</span></span><br><span class="line">Bx_money = <span class="built_in">eval</span>(B_money)+Lx_money                 <span class="comment">#5年本息和</span></span><br><span class="line">print(<span class="string">&quot;5年后的美元存款本息和：&#123;:.2f&#125;$&quot;</span>.<span class="built_in">format</span>(Bx_money)) <span class="comment">#输出结果</span></span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">请输入一个带$符号的美元存款数：<span class="number">10000</span>$</span><br><span class="line"><span class="number">5</span>年后的美元存款本息和：<span class="number">10375.00</span>$</span><br></pre></td></tr></table></figure><p><strong>案例2-2 表达式的计算问题</strong> </p><p>案例描述：编程求lg(3x<sup>2</sup>+x<sup>4</sup>)*ln(|cos(x)|*esin(x))的值，x从键盘输入</p><p>案例分析：本案例需要获得x的值，可以直接赋值或从键盘输入，各种数学函数的调用可通过导入math库来实现，运用运算符可构造公式表达式，最后通过print函数打印输出结果。</p><p>案例代码实现：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#求f(x)=lg(3x2+x4)*ln(|cos(x)|*esin(x))的值</span></span><br><span class="line"><span class="keyword">import</span> math<span class="comment">#导入math库</span></span><br><span class="line">x=<span class="built_in">eval</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入x=&#x27;</span>))<span class="comment">#为变量x赋值</span></span><br><span class="line">fx=math.log(<span class="number">3</span>*x**<span class="number">2</span>+x**<span class="number">4</span>,<span class="number">10</span>)*math.log(math.<span class="built_in">abs</span>(math.cos(x))*math.e*math.sin(x))</span><br><span class="line"><span class="comment">#注意math.log(x)的底数默认为e，lg(x)应该为math.log(x,10)</span></span><br><span class="line">print(fx)</span><br></pre></td></tr></table></figure><p><strong>案例2-3  顺序程序设计举例</strong></p><hr><h3 id="2-2-8-本节小结"><a href="#2-2-8-本节小结" class="headerlink" title="2.2.8 本节小结"></a>2.2.8 本节小结</h3><hr><h3 id="2-2-9-习题"><a href="#2-2-9-习题" class="headerlink" title="2.2.9 习题"></a>2.2.9 习题</h3><hr><h2 id="2-3-基本的程序设计方法"><a href="#2-3-基本的程序设计方法" class="headerlink" title="2.3 基本的程序设计方法"></a>2.3 基本的程序设计方法</h2><p>从前一章的求解简单计算问题的过程中，所编写的代码的执行过程为从上到下，依次执行的顺序结构，计算机要解决稍复杂的问题，还需要让程序具有选择判断、重复迭代的能力，这也是结构化程序设计的三种基本程序设计方法</p><p>本节知识点的学习目标：</p><p>1、 掌握if、else和elif语句的基本结构与语法</p><p>2、 掌握for、while循环语句的基本结构与用法</p><p>3、 掌握循环语句中常用的range（）函数，break、continue、pass 等</p><p>4、 掌握循环的嵌套以及条件与循环的组合</p><p>5、掌握数列问题、迭代问题、图形问题和列表迭代等循环的典型应用</p><p>本节案例任务：如何在合理范围内获得1到n个数据点</p><p>任务描述 ：</p><p>从机器人抛球的初始状态（出手速度V0，出手角度θ，抛球高度H）,根据初等物理知识可得知，球从抛出T=0到落地的时间Tmax可通过公式计算得知，在0-Tmax的范围内可以获得n个数据点，这些数据点组成了球的运动轨迹，如何通过Python的条件分支if 来保证球的运动轨迹范围，这是本节要解决的第一个问题。</p><p>任务分析：通过如下步骤可以实现上述任务：</p><p>（1）   通过前面所学的表达式的计算求解Tmax的值</p><p>（2）  设置条件分支判断时间T的取值范围</p><p>（3） 在有效的范围内输出结果</p><hr><h3 id="2-3-1-让程序具有选择判读的能力"><a href="#2-3-1-让程序具有选择判读的能力" class="headerlink" title="2.3.1  让程序具有选择判读的能力"></a>2.3.1  让程序具有选择判读的能力</h3><p>Python提供了if单分支语句、if-else二分支语句以及if-elif-else多分支语句来支持程序具有选择与判断的能力。</p><h4 id="Python比较运算符"><a href="#Python比较运算符" class="headerlink" title="Python比较运算符"></a>Python比较运算符</h4><p>以下假设变量a为10，变量b为20：</p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>==</td><td>等于 - 比较对象是否相等</td><td>(a == b) 返回 False。</td></tr><tr><td>!=</td><td>不等于 - 比较两个对象是否不相等</td><td>(a != b) 返回 True。</td></tr><tr><td>&gt;</td><td>大于 - 返回x是否大于y</td><td>(a &gt; b) 返回 False。</td></tr><tr><td>&lt;</td><td>小于 - 返回x是否小于y。所有比较运算符返回1表示真，返回0表示假。这分别与特殊的变量True和False等价。注意，这些变量名的大写。</td><td>(a &lt; b) 返回 True。</td></tr><tr><td>&gt;=</td><td>大于等于 - 返回x是否大于等于y。</td><td>(a &gt;= b) 返回 False。</td></tr><tr><td>&lt;=</td><td>小于等于 - 返回x是否小于等于y。</td><td>(a &lt;= b) 返回 True。</td></tr></tbody></table><h4 id="Python逻辑运算符"><a href="#Python逻辑运算符" class="headerlink" title="Python逻辑运算符"></a>Python逻辑运算符</h4><p>Python语言支持逻辑运算符，以下假设变量 a 为 10, b为 20:</p><table><thead><tr><th>运算符</th><th>逻辑表达式</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>and</td><td>x and y</td><td>布尔”与” - 如果 x 为 False，x and y 返回 x 的值，否则返回 y 的计算值。</td><td>(a and b) 返回 20。</td></tr><tr><td>or</td><td>x or y</td><td>布尔”或” - 如果 x 是 True，它返回 x 的值，否则它返回 y 的计算值。</td><td>(a or b) 返回 10。</td></tr><tr><td>not</td><td>not x</td><td>布尔”非” - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。</td><td>not(a and b) 返回 False</td></tr></tbody></table><h4 id="1、单分支语句-if语句"><a href="#1、单分支语句-if语句" class="headerlink" title="1、单分支语句-if语句"></a>1、单分支语句-if语句</h4><p>例1：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> a % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">   print(<span class="string">&quot;a是偶数&quot;</span>) <span class="comment">#显然这行是不输出的</span></span><br><span class="line">print(<span class="string">&quot;这行输出&quot;</span>)</span><br></pre></td></tr></table></figure><p>【 运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">这行输出</span><br></pre></td></tr></table></figure><p>例2：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> a % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">   print(<span class="string">&quot;a是偶数&quot;</span>) <span class="comment">#显然这行是输出的</span></span><br><span class="line">print(<span class="string">&quot;这行输出&quot;</span>)</span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a是偶数</span><br><span class="line">这行输出</span><br></pre></td></tr></table></figure><h4 id="2、二分支语句-if-else语句"><a href="#2、二分支语句-if-else语句" class="headerlink" title="2、二分支语句-if-else语句"></a>2、二分支语句-if-else语句</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;a=&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> a % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">print(<span class="string">&quot;a是偶数&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">print(<span class="string">&quot;a是奇数&quot;</span>)</span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="number">15</span></span><br><span class="line">a是奇数</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="number">20</span></span><br><span class="line">a是偶数</span><br></pre></td></tr></table></figure><h4 id="3、多分支语句-if-elif-else语句"><a href="#3、多分支语句-if-elif-else语句" class="headerlink" title="3、多分支语句-if-elif-else语句"></a>3、多分支语句-if-elif-else语句</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">age = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入你家狗狗的年龄: &quot;</span>))</span><br><span class="line">print(<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> age &lt;= <span class="number">0</span>:</span><br><span class="line">print(<span class="string">&quot;你是在逗我吧!&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> age == <span class="number">1</span>:</span><br><span class="line">print(<span class="string">&quot;相当于 14 岁的人。&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> age == <span class="number">2</span>:</span><br><span class="line">print(<span class="string">&quot;相当于 22 岁的人。&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">human = <span class="number">22</span> + (age -<span class="number">2</span>)*<span class="number">5</span></span><br><span class="line">print(<span class="string">&quot;对应人类年龄: &quot;</span>, human)</span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">请输入你家狗狗的年龄: <span class="number">1</span></span><br><span class="line">相当于 <span class="number">14</span> 岁的人。</span><br></pre></td></tr></table></figure><h4 id="4、分支综合案例应用"><a href="#4、分支综合案例应用" class="headerlink" title="4、分支综合案例应用"></a>4、分支综合案例应用</h4><p><strong>案例2-4：在合理的范围内输出一个坐标的数据点</strong></p><p>案例描述与分析如前所述，这里不再重述；</p><p>案例代码实现：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在合理的范围内输出一个数据点</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line">h, v0, g, θ = <span class="number">1.9</span>, <span class="number">14</span>, <span class="number">9.8</span>, <span class="number">40</span></span><br><span class="line">θ=math.radians(θ)</span><br><span class="line">Tmax=(<span class="number">2</span>*v0*math.sin(θ)+math.sqrt(<span class="number">4</span>*v0**<span class="number">2</span>*math.sin(θ)**<span class="number">2</span>+<span class="number">8</span>*g*h))/(<span class="number">2</span>*g)</span><br><span class="line">print(<span class="string">&#x27;最大时间为:&#x27;</span>,Tmax，end=’ ‘)</span><br><span class="line">t=<span class="built_in">eval</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入时间t, t的取值范围0~tmax:’))</span></span><br><span class="line"><span class="string">if t&lt;0 or t&gt;Tmax:</span></span><br><span class="line"><span class="string">print(&#x27;</span>输入错误<span class="string">&#x27;)</span></span><br><span class="line"><span class="string">else:</span></span><br><span class="line"><span class="string">xt=v0*math.cos(θ)*t       #横坐标</span></span><br><span class="line"><span class="string">yt=h+ v0*math.sin(θ)*t -1/2*g*t**2  #纵坐标</span></span><br><span class="line"><span class="string">print(xt,yt)       #打印</span></span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">最大时间为: <span class="number">2.0277594501629714</span></span><br><span class="line">请输入时间t, t的取值范围<span class="number">0</span>~tmax:<span class="number">2</span></span><br><span class="line"><span class="number">21.449244407331385</span> <span class="number">0.29805307122309443</span></span><br></pre></td></tr></table></figure><p>案例2-4代码实现了在合理的范围内输出1个数据点的任务，但如果要在屏幕上输出n 个点，则要在合理的范围内生成n个数据点，这需要程序执行一些重复迭代的操作，这也是本节案例要解决的第二个问题。 </p><p>任务分析：通过如下步骤可以实现上述任务：</p><p>（1）根据表达式的计算求解Tmax的值</p><p>（2）设置时间T的初值为0 ，时间的递增delta的初始值</p><p>（3）当T&lt;=Tmax 的范围内 ：</p><p>重复计算坐标点的（xt,yt）,</p><p>重复输出坐标点</p><p>T的值递增即T+=delta</p><p>(4) 当T&gt;Tmax后，程序执行完毕，完成任务。</p><hr><h3 id="2-3-2-让程序具有重复迭代的能力"><a href="#2-3-2-让程序具有重复迭代的能力" class="headerlink" title="2.3.2 让程序具有重复迭代的能力"></a>2.3.2 让程序具有重复迭代的能力</h3><p>让程序具有重复迭代的能力，编程语言提供了循环的概念。在循环结构中，满足某些条件，程序重复执行某一过程，直到条件不满足退出循环。</p><p>Python提供了两种类型的循环：while循环和for循环。While循环是一种条件控制循环，它通过某一条件的真假来控制循环；而for循环是一种计数控制循环，它将循环体内的语句块重复执行特定的次数。  </p><h4 id="1、while循环"><a href="#1、while循环" class="headerlink" title="1、while循环"></a>1、while循环</h4><p>Python 中 while 语句的一般形式：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">while 条件表达式：</span><br><span class="line">语句块</span><br></pre></td></tr></table></figure><p><strong>执行流程图如下：</strong></p><p>同样需要注意冒号和缩进。另外，在 Python 中没有 do..while 循环。</p><p>以下实例使用了 while循环 来计算 1 到 100 的总和：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">counter = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> counter &lt;= n:</span><br><span class="line"><span class="built_in">sum</span> = <span class="built_in">sum</span> + counter</span><br><span class="line">counter += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;1 到 %d 之和为: %d&quot;</span> % (n,<span class="built_in">sum</span>))</span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> 到 <span class="number">100</span> 之和为: <span class="number">5050</span></span><br></pre></td></tr></table></figure><h4 id="2、for循环"><a href="#2、for循环" class="headerlink" title="2、for循环"></a>2、for循环</h4><p>Python for循环可以遍历任何序列的项目，如一个列表或者一个字符串。</p><p>for循环的一般格式如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> 循环变量 <span class="keyword">in</span> 对象:</span><br><span class="line">语句块</span><br></pre></td></tr></table></figure><p>这里介绍<strong>range()函数</strong></p><p>如果你需要遍历数字序列，可以使用内置range()函数。它会生成数列，例如:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">print(i)</span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><p>你也可以使用range指定区间的值：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>,<span class="number">9</span>):</span><br><span class="line">print(i)</span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span></span><br></pre></td></tr></table></figure><p>也可以使range以指定数字开始并指定不同的增量(甚至可以是负数，有时这也叫做’步长’):</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">10</span>,<span class="number">3</span>):</span><br><span class="line">print(i)</span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure><p>负数：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(-<span class="number">10</span>,-<span class="number">100</span>,-<span class="number">30</span>):</span><br><span class="line">print(i)</span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">-<span class="number">10</span></span><br><span class="line">-<span class="number">40</span></span><br><span class="line">-<span class="number">70</span></span><br></pre></td></tr></table></figure><p>您可以结合range()和len()函数以遍历一个序列的索引,如下所示:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="string">&#x27;Huawei&#x27;</span>, <span class="string">&#x27;Baidu&#x27;</span>, <span class="string">&#x27;HNU&#x27;</span>, <span class="string">&#x27;Ali&#x27;</span>, <span class="string">&#x27;Tencent&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)): </span><br><span class="line">print(i, a[i])</span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span> Huawei</span><br><span class="line"><span class="number">1</span> Baidu</span><br><span class="line"><span class="number">2</span> HNU</span><br><span class="line"><span class="number">3</span> Ali</span><br><span class="line"><span class="number">4</span> Tencent</span><br></pre></td></tr></table></figure><p>还可以使用range()函数来创建一个列表：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">5</span>)))</span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure><p>之后在序列一节中我们会详细介绍for循环在序列中的应用</p><h4 id="3、break与continue在循环中的应用"><a href="#3、break与continue在循环中的应用" class="headerlink" title="3、break与continue在循环中的应用"></a>3、break与continue在循环中的应用</h4><h4 id="break语句"><a href="#break语句" class="headerlink" title="break语句"></a>break语句</h4><p>break用于中断当前循环的执行，提前退出循环结构。一般与if语句一起使用。对于包含else子句的while循环和for循环而言，在while或for子句中一旦执行break语句，else语句将没有机会执行。</p><p><strong>break 执行流程图：</strong></p><p>例：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="number">5</span></span><br><span class="line"><span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">n -= <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> n == <span class="number">2</span>:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">print(n)</span><br><span class="line">print(<span class="string">&#x27;循环结束。&#x27;</span>)</span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line">循环结束。</span><br></pre></td></tr></table></figure><p>可以看到，当break执行时，会跳出当前循环，使循环直接结束。</p><h4 id="continue语句"><a href="#continue语句" class="headerlink" title="continue语句"></a>continue语句</h4><p>与break不同的是，continue语句用于中止本次循环的执行，开始下一次循环</p><p><strong>continue 执行流程图：</strong></p><p>例：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="number">5</span></span><br><span class="line"><span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">n -= <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> n == <span class="number">2</span>:</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">print(n)</span><br><span class="line">print(<span class="string">&#x27;循环结束。&#x27;</span>)</span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line">循环结束。</span><br></pre></td></tr></table></figure><p>可以看到，当continue执行时，会直接进入下一次循环，而不运行该次循环中continue之后的代码。</p><h4 id="4、循环结构的嵌套"><a href="#4、循环结构的嵌套" class="headerlink" title="4、循环结构的嵌套"></a>4、循环结构的嵌套</h4><p>为了解决复杂的问题，可以使用循环的嵌套来完成，循环嵌套层数不限，但循环嵌套的内层循环与外层循环不能交叉。最常用的循环嵌套是双层循环嵌套，内层循环执行完，外循环执行一次，总的循环次数为内外层循环次数相乘获得。 </p><p><strong>Python for 循环嵌套语法：</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> 循环变量 <span class="keyword">in</span> 对象:</span><br><span class="line"><span class="keyword">for</span> 循环变量 <span class="keyword">in</span> 对象:</span><br><span class="line">语句块A</span><br><span class="line">语句块B</span><br></pre></td></tr></table></figure><p><strong>Python while 循环嵌套语法：</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> 表达式:</span><br><span class="line"><span class="keyword">while</span> 表达式:</span><br><span class="line">语句块A</span><br><span class="line">语句块B</span><br></pre></td></tr></table></figure><p>你可以在循环体内嵌入其他的循环体，如在while循环中可以嵌入for循环， 反之，你可以在for循环中嵌入while循环。</p><p>例如：使用嵌套循环输出50~100之间的素数：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i = <span class="number">50</span></span><br><span class="line"><span class="keyword">while</span>(i &lt; <span class="number">100</span>):</span><br><span class="line">j = <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span>(j &lt;= (i/j)):</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span>(i%j): <span class="keyword">break</span></span><br><span class="line">j = j + <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> (j &gt; i/j) : print(i, <span class="string">&quot;is Prime&quot;</span>)</span><br><span class="line">i = i + <span class="number">1</span></span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">53</span> <span class="keyword">is</span> Prime</span><br><span class="line"><span class="number">59</span> <span class="keyword">is</span> Prime</span><br><span class="line"><span class="number">61</span> <span class="keyword">is</span> Prime</span><br><span class="line"><span class="number">67</span> <span class="keyword">is</span> Prime</span><br><span class="line"><span class="number">71</span> <span class="keyword">is</span> Prime</span><br><span class="line"><span class="number">73</span> <span class="keyword">is</span> Prime</span><br><span class="line"><span class="number">79</span> <span class="keyword">is</span> Prime</span><br><span class="line"><span class="number">83</span> <span class="keyword">is</span> Prime</span><br><span class="line"><span class="number">89</span> <span class="keyword">is</span> Prime</span><br><span class="line"><span class="number">97</span> <span class="keyword">is</span> Prime</span><br></pre></td></tr></table></figure><h4 id="5、循环综合实例"><a href="#5、循环综合实例" class="headerlink" title="5、循环综合实例"></a>5、循环综合实例</h4><p><strong>案例2-5  屏幕上打印九九乘法表</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,i+<span class="number">1</span>):</span><br><span class="line">        print(<span class="string">&quot;&#123;&#125;*&#123;&#125;=&#123;:2d&#125;&quot;</span>.<span class="built_in">format</span>(j, i, i*j), end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">    print()</span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>*<span class="number">1</span>= <span class="number">1</span> </span><br><span class="line"><span class="number">1</span>*<span class="number">2</span>= <span class="number">2</span> <span class="number">2</span>*<span class="number">2</span>= <span class="number">4</span> </span><br><span class="line"><span class="number">1</span>*<span class="number">3</span>= <span class="number">3</span> <span class="number">2</span>*<span class="number">3</span>= <span class="number">6</span> <span class="number">3</span>*<span class="number">3</span>= <span class="number">9</span> </span><br><span class="line"><span class="number">1</span>*<span class="number">4</span>= <span class="number">4</span> <span class="number">2</span>*<span class="number">4</span>= <span class="number">8</span> <span class="number">3</span>*<span class="number">4</span>=<span class="number">12</span> <span class="number">4</span>*<span class="number">4</span>=<span class="number">16</span> </span><br><span class="line"><span class="number">1</span>*<span class="number">5</span>= <span class="number">5</span> <span class="number">2</span>*<span class="number">5</span>=<span class="number">10</span> <span class="number">3</span>*<span class="number">5</span>=<span class="number">15</span> <span class="number">4</span>*<span class="number">5</span>=<span class="number">20</span> <span class="number">5</span>*<span class="number">5</span>=<span class="number">25</span> </span><br><span class="line"><span class="number">1</span>*<span class="number">6</span>= <span class="number">6</span> <span class="number">2</span>*<span class="number">6</span>=<span class="number">12</span> <span class="number">3</span>*<span class="number">6</span>=<span class="number">18</span> <span class="number">4</span>*<span class="number">6</span>=<span class="number">24</span> <span class="number">5</span>*<span class="number">6</span>=<span class="number">30</span> <span class="number">6</span>*<span class="number">6</span>=<span class="number">36</span> </span><br><span class="line"><span class="number">1</span>*<span class="number">7</span>= <span class="number">7</span> <span class="number">2</span>*<span class="number">7</span>=<span class="number">14</span> <span class="number">3</span>*<span class="number">7</span>=<span class="number">21</span> <span class="number">4</span>*<span class="number">7</span>=<span class="number">28</span> <span class="number">5</span>*<span class="number">7</span>=<span class="number">35</span> <span class="number">6</span>*<span class="number">7</span>=<span class="number">42</span> <span class="number">7</span>*<span class="number">7</span>=<span class="number">49</span> </span><br><span class="line"><span class="number">1</span>*<span class="number">8</span>= <span class="number">8</span> <span class="number">2</span>*<span class="number">8</span>=<span class="number">16</span> <span class="number">3</span>*<span class="number">8</span>=<span class="number">24</span> <span class="number">4</span>*<span class="number">8</span>=<span class="number">32</span> <span class="number">5</span>*<span class="number">8</span>=<span class="number">40</span> <span class="number">6</span>*<span class="number">8</span>=<span class="number">48</span> <span class="number">7</span>*<span class="number">8</span>=<span class="number">56</span> <span class="number">8</span>*<span class="number">8</span>=<span class="number">64</span> </span><br><span class="line"><span class="number">1</span>*<span class="number">9</span>= <span class="number">9</span> <span class="number">2</span>*<span class="number">9</span>=<span class="number">18</span> <span class="number">3</span>*<span class="number">9</span>=<span class="number">27</span> <span class="number">4</span>*<span class="number">9</span>=<span class="number">36</span> <span class="number">5</span>*<span class="number">9</span>=<span class="number">45</span> <span class="number">6</span>*<span class="number">9</span>=<span class="number">54</span> <span class="number">7</span>*<span class="number">9</span>=<span class="number">63</span> <span class="number">8</span>*<span class="number">9</span>=<span class="number">72</span> <span class="number">9</span>*<span class="number">9</span>=<span class="number">81</span> </span><br></pre></td></tr></table></figure><p><strong>案例2-6  求cos(x) 的值，直到最后一项绝对值小于1e-7（即10<sup>-7</sup> ）为止（注：，x为弧度值）</strong></p> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> radians</span><br><span class="line">x = <span class="built_in">eval</span>(<span class="built_in">input</span>(<span class="string">&quot;输入x的值(0~90)：&quot;</span>))</span><br><span class="line">x = radians(x)</span><br><span class="line">an, cosx = <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">jc, i = <span class="number">1</span>, <span class="number">2</span></span><br><span class="line">flag = -<span class="number">1</span></span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">abs</span>(an) &gt;= <span class="number">1e-7</span>):</span><br><span class="line">    jc = jc * (i-<span class="number">1</span>) * i;</span><br><span class="line">    an = flag * <span class="number">1</span> / jc * x ** i</span><br><span class="line">    i += <span class="number">2</span></span><br><span class="line">    flag = -flag</span><br><span class="line">    cosx += an</span><br><span class="line">print(cosx)</span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">输入x的值(<span class="number">0</span>~<span class="number">90</span>)：<span class="number">60</span></span><br><span class="line"><span class="number">0.5000000000217777</span></span><br></pre></td></tr></table></figure><h3 id="2-3-3-在屏幕上绘制篮球N个坐标点的轨迹的任务"><a href="#2-3-3-在屏幕上绘制篮球N个坐标点的轨迹的任务" class="headerlink" title="2.3.3 在屏幕上绘制篮球N个坐标点的轨迹的任务"></a>2.3.3 在屏幕上绘制篮球N个坐标点的轨迹的任务</h3><p>案例描述分析见前2.3.1</p><p>案例代码实现：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">h, v0, g, θ = <span class="number">1.9</span>, <span class="number">14</span>, <span class="number">9.8</span>, <span class="number">40</span></span><br><span class="line">θ=math.radians(θ)</span><br><span class="line">tmax=(<span class="number">2</span>*v0*math.sin(θ)+math.sqrt(<span class="number">4</span>*v0**<span class="number">2</span>*math.sin(θ)**<span class="number">2</span>+<span class="number">8</span>*g*h))/(<span class="number">2</span>*g)</span><br><span class="line">t,delta=<span class="number">0</span>,<span class="number">0.1</span></span><br><span class="line"><span class="keyword">while</span> t&lt;tmax:</span><br><span class="line">xt=v0*math.cos(θ)*t </span><br><span class="line">yt=h+ v0*math.sin(θ)*t -<span class="number">1</span>/<span class="number">2</span>*g*t**<span class="number">2</span></span><br><span class="line">plt.plot(xt,yt,<span class="string">&#x27;ro&#x27;</span>)         </span><br><span class="line">t=t+delta  </span><br><span class="line">plt.grid(<span class="literal">True</span>)         </span><br><span class="line">plt.axis([<span class="number">0</span>,<span class="number">30</span>,<span class="number">0</span>,<span class="number">3</span>])         </span><br><span class="line">plt.show()  </span><br></pre></td></tr></table></figure><hr><h3 id="2-3-4-小结"><a href="#2-3-4-小结" class="headerlink" title="2.3.4 小结"></a>2.3.4 小结</h3><hr><h3 id="2-3-5-习题"><a href="#2-3-5-习题" class="headerlink" title="2.3.5 习题"></a>2.3.5 习题</h3><hr><h2 id="2-4-程序内置的数据结构"><a href="#2-4-程序内置的数据结构" class="headerlink" title="2.4 程序内置的数据结构"></a>2.4 程序内置的数据结构</h2><p>在2.3节中案例通过分支与循环已经实现了在合理的范围内输出N个点的任务，接下来我们要完成在屏幕上绘制球的运动轨迹的任务，先将N个数据点保存到数据容器中，通过对数据容器的访问，导入提供数据绘图功能的第三方库matplotlib,其子库pyplot字库可实现在屏幕上可视化程序的运行结果。</p><p>本节知识点的学习目标：</p><p>1、  掌握序列数据容器：字符串基本语法与操作</p><p>2、  掌握序列数据容器：列表基本语法与操作</p><p>3、  了解序列数据容器：元组基本语法与操作</p><p>4、  了解映射数据容器：集合的基本语法与操作</p><p>5、  掌握映射数据容器：字典的基本语法与操作</p><p>6、  掌握字符串的典型应用</p><p>7、  掌握与列表与字典有关的工程问题的典型应用</p><p>本节案例任务：如何在坐标轴内可视化球的运动轨迹 </p><p>任务描述：</p><p>从机器人抛球的初始状态（出手速度V0，出手角度θ，抛球高度H）,根据初等物理知识可得知，球从抛出T=0到落地的时间Tmax可通过公式计算得知，在0-Tmax的范围内可以获得n个数据点，将这n个数据点保存到数据容器-列表中，并通过导入数据可视化库建立坐标轴并在坐标轴内绘制球的运动轨迹</p><p>通过如下步骤可以实现上述任务：</p><p>（1）导入math库和可视化库matplotlib.pyplot</p><p>（2）公式计算Tmax的值</p><p>（3）建立xt,yt 两个空列表 xt=[ ],yt=[ ],初始化T=0</p><p>（4）当T&lt;=Tmax：</p><p>​    计算每一个T的横坐标与纵坐标</p><p>添加横坐标与纵坐标到xt[],yt[]列表中</p><p>（5）调用可视化函数生成坐标轴并绘制显示球的轨迹</p><hr><h3 id="2-4-1-不同数据容器简介："><a href="#2-4-1-不同数据容器简介：" class="headerlink" title="2.4.1  不同数据容器简介："></a>2.4.1  不同数据容器简介：</h3><p>从前面几章学习的程序设计知识可知，程序设计需要多个数据进行运算与操作时，数据的表示与存储是通过定义变量来实现，例如：假设要求2个数的最大值，3个数的最大值，可以定义3个变量来存储数据，通过比较可得到结果。但是，假如要求100个，1000个甚至更多的数据的最大值,在程序中手动定义那么多的变量显然是不合适的。因此：Python程序设计语言提供了可存储大量数据的数据容器-列表、元组、集合与字典。</p><p>列表、元组和集合都可以用来存储大量的数值数据，也可以存储字符数据。列表、元组中的数据是有序的，多个字符组成的字符串也是有序的 ，序列中的每个元素被分配了一个序列号，即元素的位置，也称索引，故它们具有许多相同的属性与操作方法。</p><p>与列表类似，集合也可以存储多个数据，不同于列表的是：集合中的元素是彼此不能相同并且不按照任何特定的顺序存放。集合的这种属性对应于数学中集合的三大特性：确定性、互异性和无序性. </p><p>在许多的应用中需要通过关键字来查找信息，例如：通过学生的学号来查找学生的信息，通过公民的身份证号码查找公民的个人信息。在编程术语中，根据一个信息查找另一个信息的方式构成了“键值对“的”映射“关系，Python语言的字典就是一种映射数据容器。</p><p>关于可变与不可变数据容器简介</p><hr><h3 id="2-4-2-序列的基本操作"><a href="#2-4-2-序列的基本操作" class="headerlink" title="2.4.2 序列的基本操作"></a>2.4.2 序列的基本操作</h3><p>所谓序列，指的是一块可存放多个值的连续内存空间，这些值按一定顺序排列，可通过每个值所在位置的编号（称为索引）访问它们。</p><p>为了更形象的认识序列，可以将它看做是一个学校的教学楼，那么教学楼的每个教室就如同序列存储数据的一个个内存空间，每个教室所特有的房间号就相当于索引值。也就是说，通过房间号（索引）我们可以找到教学楼（序列）中的每个教室（内存空间）。</p><p>在 Python 中，序列类型包括字符串、列表、元组、集合和字典，这些序列支持以下几种通用的操作，但比较特殊的是，集合和字典不支持索引、切片、相加和相乘操作。</p><p>字符串也是一种常见的序列，它也可以直接通过索引访问字符串内的字符。</p><h4 id="1、序列索引"><a href="#1、序列索引" class="headerlink" title="1、序列索引"></a>1、序列索引</h4><p>序列中，每个元素都有属于自己的编号（索引）。从起始元素开始，索引值从 0 开始递增</p><p>除此之外，Python 还支持索引值是负数，此类索引是从右向左计数，换句话说，从最后一个元素开始计数，从索引值 -1 开始</p><p>注意，在使用负值作为列序中各元素的索引值时，是从 -1 开始，而不是从 0 开始。</p><p>无论是采用正索引值，还是负索引值，都可以访问序列中的任何元素。以字符串为例，访问“Python语言中文网”的首元素和尾元素，可以使用如下的代码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">##字符串下标访问</span></span><br><span class="line">str1=<span class="string">&quot;Python语言中文网&quot;</span></span><br><span class="line">print(<span class="built_in">len</span>(str1))      <span class="comment">#输出字符长度</span></span><br><span class="line">print(str1[<span class="number">0</span>],<span class="string">&quot;==&quot;</span>,str1[-<span class="number">11</span>]) <span class="comment">#首字符下标访问</span></span><br><span class="line">print(str1[<span class="number">10</span>],<span class="string">&quot;==&quot;</span>,str1[-<span class="number">1</span>]) <span class="comment">#尾字符下标访问</span></span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">11</span></span><br><span class="line">p == p</span><br><span class="line">网 == 网</span><br></pre></td></tr></table></figure><h4 id="2、序列切片"><a href="#2、序列切片" class="headerlink" title="2、序列切片"></a>2、序列切片</h4><p>切片操作是访问序列中元素的另一种方法，它可以访问一定范围内的元素，通过切片操作，可以生成一个新的序列<br>序列实现切片操作的语法格式如下：</p><p><code>sname[start : end : step]</code></p><p>其中，各个参数的含义分别是：</p><ul><li><p>sname：表示序列的名称；</p></li><li><p>start：表示切片的开始索引位置（包括该位置），此参数也可以不指定，会默认为 0，也就是从序列的开头进行切片；</p></li><li><p>end：表示切片的结束索引位置（不包括该位置），如果不指定，则默认为序列的长度；</p></li><li><p>step：表示在切片过程中，隔几个存储位置（包含当前位置）取一次元素，也就是说，如果 step 的值大于 1，则在进行切片去序列元素时，会“跳跃式”的取元素。如果省略设置 step 的值，则最后一个冒号就可以省略。</p></li></ul><p>例如：对字符串“Python语言中文网”进行切片：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#字符串的切片访问</span></span><br><span class="line">str1=<span class="string">&quot;Python语言中文网&quot;</span></span><br><span class="line">print(str1[:<span class="number">2</span>]) <span class="comment">#取索引区间为[0,2]之间（不包括索引2处的字符）的字符串</span></span><br><span class="line">print(str1[::<span class="number">2</span>]) <span class="comment">#隔 1 个字符取一个字符，区间是整个字符串</span></span><br><span class="line">print(str1[:]) <span class="comment">#取整个字符串，此时 [] 中只需一个冒号即可</span></span><br><span class="line">print(str1[<span class="number">2</span>:<span class="number">5</span>]）<span class="comment"># 取字符串的索引为[2：4] 的字符</span></span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">py</span><br><span class="line">pto语中网</span><br><span class="line">Python语言中文网</span><br><span class="line">tho</span><br></pre></td></tr></table></figure><h4 id="3、序列相加"><a href="#3、序列相加" class="headerlink" title="3、序列相加"></a>3、序列相加</h4><p>Python中，支持两种类型相同的序列使用“+”运算符做相加操作，它会将两个序列进行连接，但不会去除重复的元素。</p><p>这里所说的“类型相同”，指的是“+”运算符的两侧序列要么都是列表类型，要么都是元组类型，要么都是字符串。</p><p>例如：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a, b = <span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;456&#x27;</span><span class="comment"># a,b均为字符串</span></span><br><span class="line">print(a+b)</span><br><span class="line"></span><br><span class="line">l1, l2 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], [<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>]   <span class="comment"># l1,l2为列表</span></span><br><span class="line">print(l1+l2)</span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">123456</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure><h4 id="4、序列相乘"><a href="#4、序列相乘" class="headerlink" title="4、序列相乘"></a>4、序列相乘</h4><p>Python 中，使用数字 n 乘以一个序列会生成新的序列，其内容为原来序列被重复 n 次的结果。例如：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span>=<span class="string">&quot;Python语言中文网&quot;</span></span><br><span class="line">print(<span class="built_in">str</span>*<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Python语言中文网Python语言中文网Python语言中文网</span><br></pre></td></tr></table></figure><p>比较特殊的是，列表类型在进行乘法运算时，还可以实现初始化指定长度列表的功能。例如如下的代码，将创建一个长度为 5 的列表，列表中的每个元素都是 None，表示什么都没有。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#列表的创建用 []，后续讲解列表时会详细介绍</span></span><br><span class="line"><span class="built_in">list</span> = [<span class="literal">None</span>]*<span class="number">5</span></span><br><span class="line">print(<span class="built_in">list</span>)</span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>]</span><br></pre></td></tr></table></figure><h4 id="5、检查元素是否存在序列中"><a href="#5、检查元素是否存在序列中" class="headerlink" title="5、检查元素是否存在序列中"></a>5、检查元素是否存在序列中</h4><p>Python 中，可以使用 in 关键字检查某元素是否为序列的成员，其语法格式为：</p><p><code>value in sequence</code></p><p>其中，<code>value</code> 表示要检查的元素，<code>sequence</code> 表示指定的序列。</p><p>例如，检查字符‘c’是否包含在字符串“c.biancheng.net”中，可以执行如下代码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span>=<span class="string">&quot;c.biancheng.net&quot;</span></span><br><span class="line">print(<span class="string">&#x27;c&#x27;</span> <span class="keyword">in</span> <span class="built_in">str</span>)</span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><p>和 in 关键字用法相同，但功能恰好相反的，还有 not in 关键字，它用来检查某个元素是否不包含在指定的序列中，比如说：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span>=<span class="string">&quot;c.biancheng.net&quot;</span></span><br><span class="line">print(<span class="string">&#x27;c&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">str</span>)</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><h4 id="6、和序列相关的内置函数"><a href="#6、和序列相关的内置函数" class="headerlink" title="6、和序列相关的内置函数"></a>6、和序列相关的内置函数</h4><p>Python提供了几个内置函数（表 * 所示），可用于实现与序列相关的一些常用操作。</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>len()</td><td>计算序列的长度，即返回序列中包含多少个元素。</td></tr><tr><td>max()</td><td>找出序列中的最大元素。注意，对序列使用sum()函数时，做加和操作的必须都是数字，不能是字符或字符串，否则该函数将抛出异常，因为解释器无法判定是要做连接操作(＋运算符可以连接两个序列)，还是做加和操作。</td></tr><tr><td>min()</td><td>找出序列中的最小元素。</td></tr><tr><td>list()</td><td>将序列转换为列表。</td></tr><tr><td>str()</td><td>将序列转换为字符串。</td></tr><tr><td>sum()</td><td>计算元素和。</td></tr><tr><td>sorted()</td><td>对元素进行排序。</td></tr><tr><td>reversed()</td><td>反向序列中的元素。</td></tr><tr><td>enumerate()</td><td>将序列组合为一个索引序列，多用在for循环中。</td></tr></tbody></table><p>例如：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span>=<span class="string">&quot;c.biancheng.net&quot;</span></span><br><span class="line"><span class="comment">#找出最大的字符</span></span><br><span class="line">print(<span class="built_in">max</span>(<span class="built_in">str</span>))</span><br><span class="line"><span class="comment">#找出最小的字符</span></span><br><span class="line">print(<span class="built_in">min</span>(<span class="built_in">str</span>))</span><br><span class="line"><span class="comment">#对字符串中的元素进行排序</span></span><br><span class="line">print(<span class="built_in">sorted</span>(<span class="built_in">str</span>))</span><br></pre></td></tr></table></figure><p>【运行结果】：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t</span><br><span class="line">.</span><br><span class="line">[<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;t&#x27;</span>]</span><br></pre></td></tr></table></figure><hr><h3 id="2-4-3-字符串"><a href="#2-4-3-字符串" class="headerlink" title="2.4.3 字符串"></a>2.4.3 字符串</h3><p>在2.2.1 基本的数据类型中我们学习了字符类型的基本表示，字符串（sting）通过任意字符组成的序列数据，序列中的数据可能是一个字母、数值、符号或者标点符号，是用来记录文本信息的有序集合。本节重点介绍字符的基本操作和方法。</p><h4 id="1、字符串的基本操作"><a href="#1、字符串的基本操作" class="headerlink" title="1、字符串的基本操作"></a>1、字符串的基本操作</h4><h5 id="（1）字符串的访问、连接与复制"><a href="#（1）字符串的访问、连接与复制" class="headerlink" title="（1）字符串的访问、连接与复制"></a>（1）字符串的访问、连接与复制</h5><p>一个字符串就是一个序列，因此可以将序列的一些基本操作应用在字符串上。</p><p>字符串包含两种序号体现：正向递增序号和反向递减序号，如果字符串长度为L，正向递增以最左侧字符序号为0，向右依次递增，最右侧字符序号为L-1;反向递减序号以最右侧字符序号为-1，向左依次递减，最左侧字符序号为-L。这两种索引方式可以在一个字符表示中使用。</p><p>Python字符串也提供区间访问方式：采用[start : end : step]格式，表示字符串中从start到end（不包含end）的子字符串，其中start和end为字符串的索引序号，可以混合使用正向递增序号和方向递减序号。如果表示中start或end缺失，则表示字符串把开始或者结束索引值设为默认值, step表示在字符访问过程中，隔几个存储位置（包含当前位置）取一次元素。step可省略，省略后默认值为1，具体的实例可参照序列的基本操作中，这里不再重复。</p><p>字符串以Unicode方式编码存储，因此中文与英文字符都算一个字符。</p><p>此外：使用+和*可实现字符串的拼接与复制，例如定义<code>str1=’Hello’+’ ‘+’HuNanUniversity’</code> , <code>str2=‘*’*5</code>，则str1的值为<code>Hello HuNanUniversity</code>，str2的值为<code>*****</code>。另外，使用增强赋值运算符<code>+=</code>和<code>*=</code>也是可以的。</p><p>使用<code>in/not in</code>运算符可以判断一个字符串是否是另一个字符串的子串，例如表达式<code> ‘th’ in ‘Python’</code>将返回<code>True</code>.</p><h5 id="（2）字符串的内置函数"><a href="#（2）字符串的内置函数" class="headerlink" title="（2）字符串的内置函数"></a>（2）字符串的内置函数</h5><p>Python提供了一些内置函数，有6个函数与字符串处理有关，例如：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#字符串内置函数</span></span><br><span class="line">str1=<span class="string">&quot;Python语言中文网&quot;</span></span><br><span class="line">print(<span class="built_in">len</span>(str1)) <span class="comment">#len(x)  #返回x的长度</span></span><br><span class="line">print(<span class="built_in">str</span>(<span class="number">3.1415926</span>))   <span class="comment">#str(x)返回x对应的字符串形式</span></span><br><span class="line">print(<span class="built_in">chr</span>(<span class="number">65</span>))      <span class="comment">#chr(x)返回Unicode编码X对应的单字符</span></span><br><span class="line">print(<span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>))      <span class="comment">#ord(x)返回单字符表示的Unicode编码</span></span><br><span class="line">print(<span class="built_in">hex</span>(<span class="number">100</span>))     <span class="comment">#hex(x) 返回整数X对应的16进制的小写形式字符串</span></span><br><span class="line">print(<span class="built_in">oct</span>(<span class="number">100</span>))     <span class="comment">#oct(x) 返回整数X对应的8进制的小写形式字符串</span></span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">11</span></span><br><span class="line"><span class="number">3.1415926</span></span><br><span class="line">A</span><br><span class="line"><span class="number">65</span></span><br><span class="line"><span class="number">0x64</span></span><br><span class="line"><span class="number">0o144</span></span><br></pre></td></tr></table></figure><h5 id="（3）字符串的增删改"><a href="#（3）字符串的增删改" class="headerlink" title="（3）字符串的增删改"></a>（3）字符串的增删改</h5><p>我们已经知道可以用 s=’ ‘的方式来表示一个空的字符串，用 ‘abc’+’def’可得到连接后的字符串‘abcdef’,如果想修改一个字符串的内容时该如何操作呢？</p><p>同时我们清楚，字符串是不可变的对象，即不可以直接修改字符串的内容。所以需要通过字符串切片的方式将不同的字符串连接起来，从而形成新的字符串。例如若想将字符串 str1中的‘Python’修改为’C’,如果采用直接赋值的方式： str1[0:5]=’C’,Python会报错，正确的操作方式为：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#字符串的修改</span></span><br><span class="line">str1=<span class="string">&quot;Python语言中文网&quot;</span></span><br><span class="line">str2=<span class="string">&#x27;C&#x27;</span>+str1[<span class="number">6</span>:]</span><br><span class="line">print(str2)</span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">C语言中文网</span><br></pre></td></tr></table></figure><p>若要删除str1字符串中的“语言”字符，正确的操作方式为：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#字符串的删除 </span></span><br><span class="line">str1=<span class="string">&quot;Python语言中文网&quot;</span></span><br><span class="line">str2=str1[<span class="number">0</span>:<span class="number">6</span>]+str1[<span class="number">8</span>:]</span><br><span class="line">print(str2)</span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Python中文网</span><br></pre></td></tr></table></figure><h4 id="2、字符串的函数与方法"><a href="#2、字符串的函数与方法" class="headerlink" title="2、字符串的函数与方法"></a>2、字符串的函数与方法</h4><p>在Python解释器中，所有的数据类型都采用面向对象的方式实现，封装为一个类。字符串也是一个类，它具有类似<code>对象.方法()</code> 形式的字符串处理函数，在面向对象中，这些函数被称为“方法”，字符串共有43个内置方法，鉴于部分方法不常用，限于篇幅，这里仅介绍其中的18个方法，见表</p><table><thead><tr><th><strong>字符串方法</strong></th><th><strong>功能</strong></th></tr></thead><tbody><tr><td>s.upper()</td><td>返回字符串s的副本，全部字符大写</td></tr><tr><td>s.lower()</td><td>返回字符串s的副本，全部字符小写</td></tr><tr><td>s.islower()</td><td>如果 s 中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是小写，则返回 True，否则返回 False</td></tr><tr><td>s.isdigit()</td><td>如果 s只包含数字则返回 True 否则返回 False.</td></tr><tr><td>s.isalpha()</td><td>如果 s 至少有一个字符并且所有字符都是字母则返回 True,否则返回 False</td></tr><tr><td>s.isnumeric()</td><td>如果 s 中只包含数字字符，则返回 True，否则返回 False</td></tr><tr><td>s.find(substr,[start：[end]])</td><td>返回  substr串在s串中的第一个字符的下标， start和 end表示查找的范围，没有找到返回-1</td></tr><tr><td>s.index(substr,[start：[end]])</td><td>用法同s.find（）相同,substr不在返回则会报异常</td></tr><tr><td>s.count(str,[start=0,end=len(s))])</td><td>返回  str 在 s 里面出现的次数，如果 start 或者 end 指定则返回指定范围内 str 出现的次数</td></tr><tr><td>s.replace(oldstr,newstr,[count]),</td><td>用newstr替换oldstr,，count为替换次数</td></tr><tr><td>s.split([sep,[maxsplit])</td><td>以sep为分隔符，把字符串s拆分为一个列表，默认的以空格作为分隔符</td></tr><tr><td>s.strip([chars]) <br>s.lstrip()<br> s.rstrip()</td><td>删除s前后[chars]字符串,默认是删除首尾空格  删除s左边前后[chars]字符串,默认是删除左边空格  删除s右边前后[chars]字符串,默认是删除右边空格</td></tr><tr><td>s.join(seq)</td><td>把seq代表的序列组合成字符串，用s将序列各元素连接起来</td></tr><tr><td>s.format()</td><td>格式化字符串</td></tr><tr><td>s.center(width)</td><td>返回一个原字符串居中,并使用空格填充至长度 width 的新字符串</td></tr><tr><td>s.zfill(width)</td><td>返回长度为 width 的字符串，原字符串 s 右对齐，前面填充0</td></tr></tbody></table><p>表格中对字符串方法的功能和参数做了简单的说明，各个参数的具体用法，具体的使用请查阅相关手册，这里仅给出少数的例子，请读者在应用中逐步实践。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#字符串的函数与方法</span></span><br><span class="line"></span><br><span class="line">str3=<span class="string">&quot;Python.biancheng.net&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#找出子串在str3中的位置  </span></span><br><span class="line"></span><br><span class="line">print(str3.find(<span class="string">&#x27;bian&#x27;</span>)) <span class="comment">#在整字符串中查找子串在字符串中的位置</span></span><br><span class="line">print(str3.find(<span class="string">&#x27;bian&#x27;</span>,<span class="number">6</span>,<span class="built_in">len</span>(str3)))<span class="comment">#从字符串下标为6的位置开始查找</span></span><br><span class="line">print(str3.find(<span class="string">&#x27;bian&#x27;</span>,<span class="number">10</span>)) <span class="comment">#从字符串下标为10的位置开始查找，没找到返回-1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#统计某一字串在字符串中出现的次数</span></span><br><span class="line">print(str3.count(<span class="string">&#x27;e&#x27;</span>)) </span><br><span class="line"></span><br><span class="line"><span class="comment">#字符串的替换 </span></span><br><span class="line"></span><br><span class="line">print(str3.replace(<span class="string">&#x27;Python&#x27;</span>,<span class="string">&#x27;c&#x27;</span>))</span><br><span class="line">print(str3)<span class="comment">#原字符串不改变</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#字符串切割，生成列表</span></span><br><span class="line"></span><br><span class="line">print(str3.split(<span class="string">&#x27;.&#x27;</span>))</span><br><span class="line">print(str3)<span class="comment">#原字符串不改变</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#删除字符串中某一字符</span></span><br><span class="line"></span><br><span class="line">print(str3.strip(<span class="string">&#x27; &#x27;</span>))<span class="comment">#去掉首尾空格</span></span><br><span class="line">print(str3)<span class="comment">#原字符串不改变</span></span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line">-<span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">c.biancheng.net</span><br><span class="line">Python.biancheng.net</span><br><span class="line">[<span class="string">&#x27;Python&#x27;</span>, <span class="string">&#x27;biancheng&#x27;</span>, <span class="string">&#x27;net&#x27;</span>]</span><br><span class="line">Python.biancheng.net</span><br><span class="line">Python.biancheng.net</span><br><span class="line">Python.biancheng.net</span><br></pre></td></tr></table></figure><h4 id="3、字符串的格式化"><a href="#3、字符串的格式化" class="headerlink" title="3、字符串的格式化"></a>3、字符串的格式化</h4><h5 id="format方式"><a href="#format方式" class="headerlink" title="format方式"></a>format方式</h5><p>这个方法是Python独有的，但也更推荐使用str.format()函数进行格式化。例如：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#format方式格式化输出</span></span><br><span class="line">i, j = <span class="number">5</span>, <span class="number">10</span></span><br><span class="line">print(<span class="string">&quot;&#123;&#125;*&#123;&#125;=&#123;:2d&#125;&quot;</span>.<span class="built_in">format</span>(i,j,i*j))</span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">5</span>*<span class="number">10</span>=<span class="number">50</span></span><br></pre></td></tr></table></figure><p>format的优秀之处在于，它不再需要指定变量的输出类型<code>%d</code>, <code>%f</code>等等，只需要使用<code>&#123;&#125;</code>占位</p><p>当然如果要特定位数还是需要指定类型的</p><p>format本身还能支持左右对齐等操作，这里不进行介绍，请同学们自行查阅资料尝试。</p><p>format还支持变量的复用，如果你想在一句话中重复输出10次s变量，就无需像使用%方式那样需要在右侧括号处打十次s</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ss=<span class="string">&quot;@xxx&quot;</span></span><br><span class="line">print(<span class="string">&quot;你不要再%s啦，%s很忙的，天天在评论区%s，%s会生气的啦&quot;</span> % (ss,ss,ss,ss))</span><br></pre></td></tr></table></figure><p>而format方法则可有效避免重复书写变量</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ss=<span class="string">&quot;@xxx&quot;</span></span><br><span class="line">print(<span class="string">&quot;你不要再&#123;0&#125;啦，&#123;0&#125;很忙的，天天在评论区&#123;0&#125;，&#123;0&#125;会生气的啦&quot;</span>.<span class="built_in">format</span>(ss))</span><br></pre></td></tr></table></figure><p>同时format也可以指定<code>&#123;&#125;</code>输出的是第几个变量，如上文的<code>&#123;0&#125;</code>指定输出了第一个变量<code>ss</code></p><p>在索引后接上<code>:</code>一样可以对该位置变量做格式化控制，如：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">&#x27;小明&#x27;</span></span><br><span class="line">alipay = <span class="string">&#x27;5426.53&#x27;</span></span><br><span class="line">print(<span class="string">&quot;&#123;1&#125;的支付宝中有&#123;0:.1f&#125;元&quot;</span>.<span class="built_in">format</span>(alipay,name))</span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">小明的支付宝有<span class="number">5426.5</span>元</span><br></pre></td></tr></table></figure><h4 id="4、-字符串的操作实例"><a href="#4、-字符串的操作实例" class="headerlink" title="4、 字符串的操作实例"></a>4、 字符串的操作实例</h4><p><strong>案例2-8 进制转换：二进制整数转换成十进制整数的程序</strong></p><p>案例描述：不使用Python转换函数int(“ “,base=10,2,8,16)，实现二进制转换成十进制的程序</p><p>案例分析： 二进制或其他进制整数转换成十进制整数的方法为按权展开相加可得。</p><p>二进制的权为2，表示数的数码为0，1；八进制权为8，表示数的数码为0，1，2，3，4，5，6，7；十六进制权为16，表示数的数码为：0，1，2，3，4，5，6，7，8，9，A,B,C,D,E,F。例如：（1011011）2 = (1<em>26+0</em>25+1<em>24+1</em>23+0<em>22+1</em>21+1*20) =( 91)10</p><p>通过以下步骤可实现上述任务：</p><p>（1）设置输入语句，输入0、1 组成的二进制字符串</p><p>（2） 求字符串的长度</p><p>（3）依次读取字符序列的每个字符，如果为1，则累加该项的权</p><p>（4） 输出结果</p><p>案例实现：（代码清单）</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 字符串案例2-8 二进制整数转换成十进制整数</span></span><br><span class="line">b_num=<span class="built_in">input</span>(<span class="string">&quot;请输入二进制数：&quot;</span>)</span><br><span class="line">dec_num=<span class="number">0</span>  <span class="comment">#十进制数变量</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(b_num)):</span><br><span class="line"><span class="keyword">if</span> b_num[i]==<span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">dec_num+=<span class="number">2</span>**(<span class="built_in">len</span>(b_num)-<span class="number">1</span>-i)</span><br><span class="line">print(<span class="string">&quot;输出十进制数为：%d&quot;</span> %(dec_num))</span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">请输入二进制数：<span class="number">1011011</span></span><br><span class="line">输出十进制数为：<span class="number">91</span></span><br></pre></td></tr></table></figure><p>请读者不妨一试：如果要实现八/十六进制整数转换成十进制整数，该如何修改程序？对于十六进制整数要转换成十进制整数，待我们学完字典后，可以选择另一种方法来完成。</p><p><strong>案例2-9 密码加密</strong> </p><p>案例描述： 某用户在存储自己的密码时（密码由大小写英文字母和数字组成），为了不被别人知晓，将其按下列规则加密：</p><p>数字字符0用9替换，1用8替换，2用7替换，3用6替换，4用5替换，5用4替换，6用3替换，7用2替换，8用1替换</p><p>英文字母a用z替换，b用y替换，c用x替换，d用w替换，e用v替换，f用u替换，g用n替换,以此类推</p><p>英文字母A用Z替换，B用Y替换，C用X替换，D用W替换，E用V替换，F用U替换，G用N替换,以此类推</p><p>输入用户的密码，输出其加密后的密码</p><p>例如：输入0012xyzM&gt;</p><p>输出9987cbaN</p><p>案例分析：</p><p>本案例输入的字符串中包含大小写英文字符和数字字符，要用ord()和chr()函数的方式来完成，ord(x)的功能：返回单字符表示的Unicode编码 ；chr(x)的功能：返回Unicode编码X对应的单字符。 </p><p>通过以下步骤可实现上述任务：</p><p>（1）设置输入语句，输入包含大小写和数字字符组成的要加密的密码，俗称原码</p><p>（2） 求原码字符串的长度，确定了加密循环的次数</p><p>（3）依次读取字符序列的每个字符，通过多分支语句按3种方式加密 </p><p>（4） 输出加密后的结果</p><p>案例实现：（代码清单）</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#字符案例2-9 字符加密</span></span><br><span class="line"></span><br><span class="line">Y_word=<span class="built_in">input</span>(<span class="string">&quot;请输入原码：&quot;</span>)</span><br><span class="line">M_word=<span class="string">&#x27; &#x27;</span> <span class="comment">#初始化密码变量为空字符</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(Y_word)):</span><br><span class="line"><span class="keyword">if</span> <span class="number">0</span>&lt;=<span class="built_in">ord</span>(Y_word[i])-<span class="built_in">ord</span>(<span class="string">&#x27;0&#x27;</span>)&lt;=<span class="number">9</span>:</span><br><span class="line">M_word+=<span class="built_in">str</span>(<span class="number">9</span>-<span class="built_in">int</span>(Y_word[i]))</span><br><span class="line"><span class="keyword">elif</span> <span class="string">&#x27;a&#x27;</span>&lt;=Y_word[i]&lt;=<span class="string">&#x27;z&#x27;</span>:</span><br><span class="line">M_word+=<span class="built_in">chr</span>(<span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>)+<span class="built_in">ord</span>(<span class="string">&#x27;z&#x27;</span>)-<span class="built_in">ord</span>(Y_word[i]))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">M_word+=<span class="built_in">chr</span>(<span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>)+<span class="built_in">ord</span>(<span class="string">&#x27;Z&#x27;</span>)-<span class="built_in">ord</span>(Y_word[i]))</span><br><span class="line">print(<span class="string">&quot;请输出密码：%s&quot;</span> %M_word)</span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">请输入原码：0012xyzM</span><br><span class="line">请输出密码：9987cbaN</span><br></pre></td></tr></table></figure><p>请读者不妨想一想：还有其他的方式来实现字符串的加密吗？待我们学完列表后，可以试着用列表来完成加密过程。</p><hr><h3 id="2-4-4-列表"><a href="#2-4-4-列表" class="headerlink" title="2.4.4 列表"></a>2.4.4 列表</h3><p>列表(list)是包含0个或多个对象引用的有序序列，属于序列类型。从形式上看，列表会将所有元素都放在一对中括号[ ]里面，相邻元素之间用逗号,分隔，如下所示：</p><p><code>[element1, element2, element3, ..., elementn]</code></p><p>格式中，element1 ~ elementn 表示列表中的元素，个数没有限制，只要是 Python 支持的数据类型就可以。其长度与内容也是可变的，可自由地对列表中的元素进行增加、删除或替换</p><p>从内容上看，列表可以存储整数、小数、字符串、列表、元组等任何类型的数据，并且同一个列表中元素的类型也可以不同，使用非常灵活。例如：</p><p><code>[&quot;http://c.biancheng.net/Python/&quot;, 1, [2,3,4] , 3.0]</code></p><p>可以看到，列表中同时包含字符串、整数、列表、浮点数这些数据类型。</p><p>注意，在使用列表时，虽然可以将不同类型的数据放入到同一个列表中，但通常情况下不这么做，同一列表中只放入同一类型的数据，这样可以提高程序的可读性。</p><p>另外，在其它 Python 教程中，经常用 list 代指列表，这是因为列表的数据类型就是 list，通过 type() 函数就可以知道，例如：</p><p><code>&gt;&gt;&gt; type( [&quot;http://c.biancheng.net/Python/&quot;, 1, [2,3,4] , 3.0] )</code></p><p><code>&lt;class &#39;list&#39;&gt;</code></p><p>可以看到，它的数据类型为 list，就表示它是一个列表。</p><p>此外，列表除了可用[ ]来表示，还可以通过list()函数将元组或字符串转化而成 </p><h4 id="1、列表的创建"><a href="#1、列表的创建" class="headerlink" title="1、列表的创建"></a>1、列表的创建</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print( [<span class="number">231</span>, <span class="number">3.14</span>, <span class="string">&#x27;ab&#x27;</span>, <span class="number">0</span>]) <span class="comment"># 直接用[ ]定义列表</span></span><br><span class="line"></span><br><span class="line">print(<span class="built_in">list</span>(<span class="string">&#x27;欢迎来到美丽的星城长沙&#x27;</span>) ) <span class="comment">#将字符串转化成列表</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">list</span>((<span class="number">123</span>,[<span class="number">456</span>,<span class="string">&#x27;a&#x27;</span>],<span class="string">&#x27;abc&#x27;</span>))) <span class="comment">#将元组转化成列表</span></span><br></pre></td></tr></table></figure><p>【运行结果】：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="number">231</span>, <span class="number">3.14</span>, <span class="string">&#x27;ab&#x27;</span>, <span class="number">0</span>]</span><br><span class="line">[<span class="string">&#x27;欢&#x27;</span>, <span class="string">&#x27;迎&#x27;</span>, <span class="string">&#x27;来&#x27;</span>, <span class="string">&#x27;到&#x27;</span>, <span class="string">&#x27;美&#x27;</span>, <span class="string">&#x27;丽&#x27;</span>, <span class="string">&#x27;的&#x27;</span>, <span class="string">&#x27;星&#x27;</span>, <span class="string">&#x27;城&#x27;</span>, <span class="string">&#x27;长&#x27;</span>, <span class="string">&#x27;沙&#x27;</span>]</span><br><span class="line">[<span class="number">123</span>, [<span class="number">456</span>, <span class="string">&#x27;a&#x27;</span>], <span class="string">&#x27;abc&#x27;</span>]</span><br></pre></td></tr></table></figure><p>由于列表是序列类型，序列数据的索引、切片，相加、相乘、成员关系操作符（in）,长度计算函数（len()）、求最大最小值函数max(),min()等序列函数都支持。</p><h4 id="2、列表的访问："><a href="#2、列表的访问：" class="headerlink" title="2、列表的访问："></a>2、列表的访问：</h4><p>使用下标索引来访问列表中的值，同样你也可以使用方括号的形式截取字符，如下所示：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="string">&#x27;physics&#x27;</span>, <span class="string">&#x27;chemistry&#x27;</span>, <span class="number">1997</span>, <span class="number">2000</span>]</span><br><span class="line">list2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span> ]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;list1[0]: &quot;</span>, list1[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;list2[1:5]: &quot;</span>, list2[<span class="number">1</span>:<span class="number">5</span>]</span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">list1[0]:  physics</span><br><span class="line">list2[1:5]:  [2, 3, 4, 5]</span><br></pre></td></tr></table></figure><p>同样，列表也支持负数索引</p><h4 id="3、列表的拼接和复制"><a href="#3、列表的拼接和复制" class="headerlink" title="3、列表的拼接和复制"></a>3、列表的拼接和复制</h4><p>列表对 + 和 * 的操作符与字符串相似。+ 号用于组合列表，* 号用于重复列表。</p><p>如下所示：</p><table><thead><tr><th align="left">Python 表达式</th><th align="left">结果</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">len([1, 2, 3])</td><td align="left">3</td><td align="left">长度</td></tr><tr><td align="left">[1, 2, 3] + [4, 5, 6]</td><td align="left">[1, 2, 3, 4, 5, 6]</td><td align="left">组合</td></tr><tr><td align="left">[‘Hi!’] * 4</td><td align="left">[‘Hi!’, ‘Hi!’, ‘Hi!’, ‘Hi!’]</td><td align="left">重复</td></tr></tbody></table><h4 id="4、列表的遍历"><a href="#4、列表的遍历" class="headerlink" title="4、列表的遍历"></a>4、列表的遍历</h4><p>列表可以采用下标进行索引遍历，也可以采用in操作进行索引，例如：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">78</span>, <span class="number">65</span>, <span class="number">89</span>, <span class="number">26</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">print(a[i])</span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">78</span></span><br><span class="line"><span class="number">65</span></span><br><span class="line"><span class="number">89</span></span><br><span class="line"><span class="number">26</span></span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">78</span>, <span class="number">65</span>, <span class="number">89</span>, <span class="number">26</span>]</span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> a:</span><br><span class="line">print(num)</span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">78</span></span><br><span class="line"><span class="number">65</span></span><br><span class="line"><span class="number">89</span></span><br><span class="line"><span class="number">26</span></span><br></pre></td></tr></table></figure><h4 id="5、列表的in-not-in运算符"><a href="#5、列表的in-not-in运算符" class="headerlink" title="5、列表的in/not in运算符"></a>5、列表的in/not in运算符</h4><table><thead><tr><th align="left">Python 表达式</th><th align="left">结果</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">if 3 in [1, 2, 3]: print(True)</td><td align="left">True</td><td align="left">元素是否存在于列表中</td></tr><tr><td align="left">for x in [1, 2, 3]: print(x)</td><td align="left">1 2 3</td><td align="left">迭代</td></tr><tr><td align="left">if 3 not in [1, 2]: print(True)</td><td align="left">True</td><td align="left">元素是否不存在于列表中</td></tr></tbody></table><h4 id="6、列表的切片"><a href="#6、列表的切片" class="headerlink" title="6、列表的切片"></a>6、列表的切片</h4><p>正值索引</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">nums = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>, <span class="number">60</span>, <span class="number">70</span>, <span class="number">80</span>, <span class="number">90</span>]</span><br><span class="line">print(nums[<span class="number">0</span>:<span class="number">4</span>])</span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>]</span><br></pre></td></tr></table></figure><p>负值索引</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="string">&#x27;Huawei&#x27;</span>, <span class="string">&#x27;HNU&#x27;</span>, <span class="string">&quot;Zhihu&quot;</span>, <span class="string">&quot;Ali&quot;</span>, <span class="string">&quot;Wiki&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取第二位</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;list[1]: &quot;</span>, <span class="built_in">list</span>[<span class="number">1</span>])</span><br><span class="line"><span class="comment"># 从第二位开始（包含）截取到倒数第二位（不包含）</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;list[1:-2]: &quot;</span>, <span class="built_in">list</span>[<span class="number">1</span>:-<span class="number">2</span>])</span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span>[<span class="number">1</span>]:  HNU</span><br><span class="line"><span class="built_in">list</span>[<span class="number">1</span>:-<span class="number">2</span>]:  [<span class="string">&#x27;HNU&#x27;</span>, <span class="string">&#x27;Zhihu&#x27;</span>]</span><br></pre></td></tr></table></figure><h4 id="7、列表的推导式（列表解析）"><a href="#7、列表的推导式（列表解析）" class="headerlink" title="7、列表的推导式（列表解析）"></a>7、列表的推导式（列表解析）</h4><p>列表推导式（又称列表解析式）提供了一种简明扼要的方法来创建列表。</p><p>它的结构是在一个中括号里包含一个表达式，然后是一个for语句，然后是 0 个或多个 for 或者 if 语句。那个表达式可以是任意的，意思是你可以在列表中放入任意类型的对象。返回结果将是一个新的列表，在这个以 if 和 for 语句为上下文的表达式运行完成之后产生。</p><p>列表推导式的执行顺序：各语句之间是嵌套关系，左边第二个语句是最外层，依次往右进一层，左边第一条语句是最后一层。</p><p>例如：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span> = [x*x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line">print(<span class="built_in">list</span>)</span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>, <span class="number">100</span>]</span><br></pre></td></tr></table></figure><p>进行嵌套后</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[x*y <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>) <span class="keyword">if</span> x &gt; <span class="number">2</span> <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">4</span>) <span class="keyword">if</span> y &lt; <span class="number">3</span>]</span><br></pre></td></tr></table></figure><p>他的执行顺序是:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>)</span><br><span class="line"><span class="keyword">if</span> x &gt; <span class="number">2</span></span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">4</span>)</span><br><span class="line"><span class="keyword">if</span> y &lt; <span class="number">3</span></span><br><span class="line">x*y</span><br></pre></td></tr></table></figure><h4 id="8、列表的增删查改排序与统计等操作"><a href="#8、列表的增删查改排序与统计等操作" class="headerlink" title="8、列表的增删查改排序与统计等操作"></a>8、列表的增删查改排序与统计等操作</h4><p><strong>向列表中增加元素</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l = []</span><br><span class="line">l.append(<span class="number">1</span>)</span><br><span class="line">l.append(<span class="string">&#x27;string&#x27;</span>)</span><br><span class="line">print(l)</span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="string">&#x27;string&#x27;</span>]</span><br></pre></td></tr></table></figure><p><strong>删除列表中的元素</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="string">&#x27;Huawei&#x27;</span>, <span class="string">&#x27;HNU&#x27;</span>, <span class="number">1997</span>, <span class="number">2000</span>]</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;原始列表 : &quot;</span>, <span class="built_in">list</span>)</span><br><span class="line"><span class="keyword">del</span> <span class="built_in">list</span>[<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;删除第三个元素 : &quot;</span>, <span class="built_in">list</span>)</span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">原始列表 :  [<span class="string">&#x27;Huawei&#x27;</span>, <span class="string">&#x27;HNU&#x27;</span>, <span class="number">1997</span>, <span class="number">2000</span>]</span><br><span class="line">删除第三个元素 :  [<span class="string">&#x27;Huawei&#x27;</span>, <span class="string">&#x27;HNU&#x27;</span>, <span class="number">2000</span>]</span><br></pre></td></tr></table></figure><p><strong>查找列表中的元素位置</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="string">&#x27;Huawei&#x27;</span>, <span class="string">&#x27;HNU&#x27;</span>, <span class="number">1997</span>, <span class="number">2000</span>]</span><br><span class="line">print(<span class="built_in">list</span>.index(<span class="number">1997</span>))</span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><p><strong>对列表中某一位置元素进行修改</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="string">&#x27;Huawei&#x27;</span>, <span class="string">&#x27;HNU&#x27;</span>, <span class="number">1997</span>, <span class="number">2000</span>]</span><br><span class="line"><span class="built_in">list</span>[<span class="number">2</span>] = <span class="number">1998</span></span><br><span class="line">print(<span class="built_in">list</span>)</span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;Huawei&#x27;</span>, <span class="string">&#x27;HNU&#x27;</span>, <span class="number">1998</span>, <span class="number">2000</span>]</span><br></pre></td></tr></table></figure><p><strong>统计列表中某个元素出现次数</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">print(<span class="built_in">list</span>.count(<span class="number">1</span>), <span class="built_in">list</span>.count(<span class="number">3</span>))</span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>列表的排序</strong></p><p>sort方法（改变原序列）</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="number">45</span>, <span class="number">78</span>, <span class="number">98</span>, <span class="number">12</span>]</span><br><span class="line"><span class="built_in">list</span>.sort()</span><br><span class="line">print(<span class="built_in">list</span>)</span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="number">12</span>, <span class="number">45</span>, <span class="number">78</span>, <span class="number">98</span>]</span><br></pre></td></tr></table></figure><p>sorted函数（不改变原序列）</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="number">45</span>, <span class="number">78</span>, <span class="number">98</span>, <span class="number">12</span>]</span><br><span class="line">new_list = <span class="built_in">sorted</span>(<span class="built_in">list</span>)</span><br><span class="line">print(<span class="built_in">list</span>)</span><br><span class="line">print(new_list)</span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="number">45</span>, <span class="number">78</span>, <span class="number">98</span>, <span class="number">12</span>]</span><br><span class="line">[<span class="number">12</span>, <span class="number">45</span>, <span class="number">78</span>, <span class="number">98</span>]</span><br></pre></td></tr></table></figure><h4 id="9、多维列表（嵌套列表）"><a href="#9、多维列表（嵌套列表）" class="headerlink" title="9、多维列表（嵌套列表）"></a>9、多维列表（嵌套列表）</h4><p>使用嵌套列表即在列表里创建其它列表，例如：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">n = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">x = [a, n]</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line">print(x[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">print(x[<span class="number">0</span>][<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]]</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="string">&#x27;b&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="10、列表函数方法"><a href="#10、列表函数方法" class="headerlink" title="10、列表函数方法"></a>10、列表函数方法</h4><p>Python包含以下函数:</p><table><thead><tr><th align="left">序号</th><th align="left">函数</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">len(list)列表元素个数</td></tr><tr><td align="left">2</td><td align="left">max(list) 返回列表元素最大值</td></tr><tr><td align="left">3</td><td align="left">min(list) 返回列表元素最小值</td></tr><tr><td align="left">4</td><td align="left">list(seq)将元组转换为列表</td></tr></tbody></table><p>Python包含以下方法:</p><table><thead><tr><th align="left">序号</th><th align="left">方法</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">list.append(obj) 在列表末尾添加新的对象</td></tr><tr><td align="left">2</td><td align="left">list.count(obj)统计某个元素在列表中出现的次数</td></tr><tr><td align="left">3</td><td align="left">list.extend(seq)在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）</td></tr><tr><td align="left">4</td><td align="left">list.index(obj) 从列表中找出某个值第一个匹配项的索引位置</td></tr><tr><td align="left">5</td><td align="left">list.insert(index, obj) 将对象插入列表</td></tr><tr><td align="left">6</td><td align="left">list.pop([index=-1])移除列表中的一个元素（默认最后一个元素），并且返回该元素的值</td></tr><tr><td align="left">7</td><td align="left">list.remove(obj)移除列表中某个值的第一个匹配项</td></tr><tr><td align="left">8</td><td align="left">list.reverse()反向列表中元素</td></tr><tr><td align="left">9</td><td align="left">list.sort( key=None, reverse=False)对原列表进行排序</td></tr><tr><td align="left">10</td><td align="left">list.clear() 清空列表</td></tr><tr><td align="left">11</td><td align="left">list.copy() 复制列表</td></tr></tbody></table><h4 id="11、列表综合案例"><a href="#11、列表综合案例" class="headerlink" title="11、列表综合案例"></a>11、列表综合案例</h4><p><strong>案例2-10 for循环与列表解决查找暴力搜索问题</strong></p><p><strong>案例2-11 “密码问题”</strong></p><p>问题描述：编号为1、2、3、…、N的N个人按顺时针方向围坐一圈，每人持有一个密码（正整数）。从指定</p><p>编号为1的人开始，按顺时针方向自1开始顺序报数，报到指定数M时停止报数，报M的人出列，并将</p><p>他的密码作为新的M值，从他在顺时针方向的下一个人开始，重新从1报数，依此类推，直至所有的</p><p>人全部出列为止。请设计一个程序求出出列的顺序，其中N≤30，M及密码值从键盘输入。</p><p><strong>案例2-12 用列表解决本节案例任务：实现绘制N个坐标点的篮球飞行轨迹</strong></p><hr><h3 id="2-4-5-元组"><a href="#2-4-5-元组" class="headerlink" title="2.4.5  元组"></a>2.4.5  元组</h3><p>元组（tuple）是Python中的另一种内置的存储有序数据容器。与列表类似，可存储不同类型的数据，如字符数据、数值数据、甚至元组，然而，元组是不可改变的数据容器，创建后不能作任何的修改操作。因此，元组的主要作用是用来存放那些在程序的执行过程中不能被破坏的数据。</p><h4 id="1、元组的创建"><a href="#1、元组的创建" class="headerlink" title="1、元组的创建"></a>1、元组的创建</h4><p>Python 的元组与列表类似，不同之处在于元组的元素不能修改。</p><p>元组使用小括号 <code>()</code>，列表使用方括号 <code>[]</code>。</p><p>元组创建很简单，只需要在括号中添加元素，并使用逗号隔开即可。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tup1 = (<span class="string">&#x27;Huawei&#x27;</span>, <span class="string">&#x27;HNU&#x27;</span>, <span class="number">1997</span>, <span class="number">2000</span>)</span><br><span class="line">tup2 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> )</span><br><span class="line">tup3 = <span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>   <span class="comment">#  不需要括号也可以</span></span><br><span class="line">print(<span class="built_in">type</span>(tup3))</span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">tuple</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure><p>创建空元组</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tup1 = ()</span><br></pre></td></tr></table></figure><p>元组中只包含一个元素时，需要在元素后面添加逗号，否则括号会被当作运算符使用：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tup1 = (<span class="number">50</span>)</span><br><span class="line">print(<span class="built_in">type</span>(tup1))     <span class="comment"># 不加逗号，类型为整型</span></span><br><span class="line"></span><br><span class="line">tup1 = (<span class="number">50</span>,)</span><br><span class="line">print(<span class="built_in">type</span>(tup1))     <span class="comment"># 加上逗号，类型为元组</span></span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">int</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">tuple</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2、元组的基本操作"><a href="#2、元组的基本操作" class="headerlink" title="2、元组的基本操作"></a>2、元组的基本操作</h4><h5 id="访问元组"><a href="#访问元组" class="headerlink" title="访问元组"></a>访问元组</h5><p>元组可以使用下标索引来访问元组中的值，如下实例:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tup1 = (<span class="string">&#x27;Huawei&#x27;</span>, <span class="string">&#x27;HNU&#x27;</span>, <span class="number">1997</span>, <span class="number">2000</span>)</span><br><span class="line">tup2 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span> )</span><br><span class="line">print(<span class="string">&quot;tup1[0]: &quot;</span>, tup1[<span class="number">0</span>])</span><br><span class="line">print(<span class="string">&quot;tup2[1:5]: &quot;</span>, tup2[<span class="number">1</span>:<span class="number">5</span>])</span><br></pre></td></tr></table></figure><p>以上实例输出结果：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tup1[<span class="number">0</span>]:  Huawei</span><br><span class="line">tup2[<span class="number">1</span>:<span class="number">5</span>]:  (<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><h5 id="修改元组"><a href="#修改元组" class="headerlink" title="修改元组"></a>修改元组</h5><p>元组中的元素值是不允许修改的，但我们可以对元组进行连接组合，如下实例:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tup1 = (<span class="number">12</span>, <span class="number">34.56</span>) </span><br><span class="line">tup2 = (<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;xyz&#x27;</span>)  </span><br><span class="line"><span class="comment"># 以下修改元组元素操作是非法的。 </span></span><br><span class="line"><span class="comment"># tup1[0] = 100  </span></span><br><span class="line"><span class="comment"># 创建一个新的元组 </span></span><br><span class="line">tup3 = tup1 + tup2 </span><br><span class="line"><span class="built_in">print</span> (tup3)</span><br></pre></td></tr></table></figure><p>以上实例输出结果：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(<span class="number">12</span>, <span class="number">34.56</span>, <span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;xyz&#x27;</span>)</span><br></pre></td></tr></table></figure><h5 id="删除元组"><a href="#删除元组" class="headerlink" title="删除元组"></a>删除元组</h5><p>元组中的元素值是不允许删除的，但我们可以使用del语句来删除整个元组，如下实例:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tup = (<span class="string">&#x27;Huawei&#x27;</span>, <span class="string">&#x27;HNU&#x27;</span>, <span class="number">1997</span>, <span class="number">2000</span>)</span><br><span class="line"><span class="built_in">print</span> (tup)</span><br><span class="line"><span class="keyword">del</span> tup</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;删除后的元组 tup : &quot;</span>)</span><br><span class="line"><span class="built_in">print</span> (tup)</span><br></pre></td></tr></table></figure><p>以上实例元组被删除后，输出变量会有异常信息，输出如下所示：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">删除后的元组 tup : </span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;test.py&quot;</span>, line <span class="number">8</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="built_in">print</span> (tup)</span><br><span class="line">NameError: name <span class="string">&#x27;tup&#x27;</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br></pre></td></tr></table></figure><h5 id="元组运算符"><a href="#元组运算符" class="headerlink" title="元组运算符"></a>元组运算符</h5><p>与字符串一样，元组之间可以使用 + 号和 * 号进行运算。这就意味着他们可以组合和复制，运算后会生成一个新的元组。</p><table><thead><tr><th align="left">Python 表达式</th><th align="left">结果</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">len((1, 2, 3))</td><td align="left">3</td><td align="left">计算元素个数</td></tr><tr><td align="left">(1, 2, 3) + (4, 5, 6)</td><td align="left">(1, 2, 3, 4, 5, 6)</td><td align="left">连接</td></tr><tr><td align="left">(‘Hi!’,) * 4</td><td align="left">(‘Hi!’, ‘Hi!’, ‘Hi!’, ‘Hi!’)</td><td align="left">复制</td></tr><tr><td align="left">3 in (1, 2, 3)</td><td align="left">True</td><td align="left">元素是否存在</td></tr><tr><td align="left">for x in (1, 2, 3): print (x,)</td><td align="left">1 2 3</td><td align="left">迭代</td></tr></tbody></table><h5 id="元组切片"><a href="#元组切片" class="headerlink" title="元组切片"></a>元组切片</h5><p>元组作为一种序列，也是可以进行序列切片操作的，如</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tup = (<span class="number">123</span>, <span class="number">456</span>, <span class="number">789</span>, <span class="string">&#x27;Python&#x27;</span>)</span><br><span class="line">print(tup[<span class="number">1</span>:<span class="number">3</span>])</span><br><span class="line">print(tup[-<span class="number">2</span>:])</span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(<span class="number">456</span>, <span class="number">789</span>)</span><br><span class="line">(<span class="number">789</span>, <span class="string">&#x27;Python&#x27;</span>)</span><br></pre></td></tr></table></figure><h5 id="元组内置函数"><a href="#元组内置函数" class="headerlink" title="元组内置函数"></a>元组内置函数</h5><p>Python元组包含了以下内置函数</p><table><thead><tr><th>序号</th><th>方法及描述</th><th>实例</th></tr></thead><tbody><tr><td>1</td><td>len(tuple) 计算元组元素个数。</td><td>tuple1 = (‘Huawei’, ‘HNU’, ‘Ali’)<br>print(len(tuple1)) <br>【结果】3</td></tr><tr><td>2</td><td>max(tuple) 返回元组中元素最大值。</td><td>tuple2 = (‘5’, ‘4’, ‘8’) <br>print(max(tuple2)) <br>【结果】’8’</td></tr><tr><td>3</td><td>min(tuple) 返回元组中元素最小值。</td><td>tuple2 = (‘5’, ‘4’, ‘8’)<br>print(min(tuple2)) <br>【结果】’4’</td></tr><tr><td>4</td><td>tuple(iterable) 将可迭代系列转换为元组。</td><td>list1= [‘Huawei’, ‘Ali’, ‘HNU’, ‘Baidu’]<br>tuple1=tuple(list1)<br>print(tuple1) <br>【结果】(‘Huawei’, ‘Ali’, ‘HNU’, ‘Baidu’)`</td></tr></tbody></table><h4 id="3、元组与列表比较"><a href="#3、元组与列表比较" class="headerlink" title="3、元组与列表比较"></a>3、元组与列表比较</h4><ul><li>元组和列表都属于序列。</li><li>列表属于可变序列，它的元素可以随时修改或者删除，而元组属于不可变序列，其中的元素是不能修改的，除非整体重新赋值。</li><li>列表可以使用多种方法实现添加和修改列表元素，而元组没有办法，因为不能想元组中添加或修改元素，同样也不能删除元素</li><li>列表可以使用切片方法访问和修改列表中的元素，元组也支持切片，但是它只支持通过切片访问元组中的元素，不支持修改</li><li>元组比列表中的访问和处理速度更快，所以如果只需要对其中的元素进行访问，而不进行任何修改，建议使用元组。</li><li>列表不能作为字典类型中的键，而元组是可以的。</li></ul><hr><h3 id="2-4-6-集合"><a href="#2-4-6-集合" class="headerlink" title="2.4.6 集合"></a>2.4.6 集合</h3><p>与列表、元组相比，集合（set）是无序可变的数据容器，所有的元素放在一对“{ }”中，元素之间用逗号隔开，同一个集合内的元素都是唯一的，不允许重复。</p><h4 id="1、集合简介"><a href="#1、集合简介" class="headerlink" title="1、集合简介"></a>1、集合简介</h4><p>集合（set）是一个无序的不重复元素序列。</p><p>可以使用大括号 <code>&#123;&#125;</code> 或者 <code>set()</code> 函数创建集合，注意：创建一个空集合必须用 <code>set()</code> 而不是 <code>&#123;&#125;</code>，因为 <code>&#123;&#125;</code> 是用来创建一个空字典。</p><h4 id="2、集合的基本运算"><a href="#2、集合的基本运算" class="headerlink" title="2、集合的基本运算"></a>2、集合的基本运算</h4><h5 id="集合的创建"><a href="#集合的创建" class="headerlink" title="集合的创建"></a>集合的创建</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">set1 = &#123;value1,value2,...&#125;</span><br></pre></td></tr></table></figure><p>以现有的序列进行创建</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">set1 = <span class="built_in">set</span>(<span class="string">&#x27;abcdefg&#x27;</span>)</span><br></pre></td></tr></table></figure><p>创建一个空集合</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">set1 = <span class="built_in">set</span>()</span><br></pre></td></tr></table></figure><h5 id="集合的去重功能"><a href="#集合的去重功能" class="headerlink" title="集合的去重功能"></a>集合的去重功能</h5><p>在前面列表的求并集差集时，我们已初步接触过集合的去重功能，如：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">set1 = <span class="built_in">set</span>(<span class="string">&#x27;caaaaaaaab&#x27;</span>)</span><br><span class="line">print(set1)</span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><p>可以看到，重复的<code>a</code>被剔除，同时剩下的元素以字典序排列。</p><h5 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h5><p>语法格式如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">s.add( x )</span><br></pre></td></tr></table></figure><p>将元素 x 添加到集合 s 中，如果元素已存在，则不进行任何操作。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">set1 = <span class="built_in">set</span>((<span class="string">&quot;Huawei&quot;</span>, <span class="string">&quot;HNU&quot;</span>, <span class="string">&quot;Ali&quot;</span>))</span><br><span class="line">set1.add(<span class="string">&quot;Facebook&quot;</span>)</span><br><span class="line">print(set1)</span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;Ali&#x27;</span>, <span class="string">&#x27;Facebook&#x27;</span>, <span class="string">&#x27;Huawei&#x27;</span>, <span class="string">&#x27;HNU&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><p>还有一个方法，也可以添加元素，且参数可以是列表，元组，字典等，语法格式如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">s.update( x )</span><br></pre></td></tr></table></figure><p>x 可以有多个，用逗号分开。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">set1 = <span class="built_in">set</span>((<span class="string">&quot;Huawei&quot;</span>, <span class="string">&quot;HNU&quot;</span>, <span class="string">&quot;Ali&quot;</span>))</span><br><span class="line">set1.update(&#123;<span class="number">1</span>,<span class="number">3</span>&#125;)</span><br><span class="line">print(set1)</span><br><span class="line"></span><br><span class="line">set1.update([<span class="number">1</span>,<span class="number">4</span>],[<span class="number">5</span>,<span class="number">6</span>]) </span><br><span class="line">print(set1)</span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="string">&#x27;Huawei&#x27;</span>, <span class="string">&#x27;Ali&#x27;</span>, <span class="string">&#x27;HNU&#x27;</span>&#125;</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="string">&#x27;Huawei&#x27;</span>, <span class="string">&#x27;Ali&#x27;</span>, <span class="string">&#x27;HNU&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><h5 id="移除元素"><a href="#移除元素" class="headerlink" title="移除元素"></a>移除元素</h5><p>语法格式如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">s.remove( x )</span><br></pre></td></tr></table></figure><p>将元素 x 从集合 s 中移除，如果元素不存在，则会发生错误。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">set1 = <span class="built_in">set</span>((<span class="string">&quot;Huawei&quot;</span>, <span class="string">&quot;HNU&quot;</span>, <span class="string">&quot;Ali&quot;</span>))</span><br><span class="line">set1.remove(<span class="string">&quot;Ali&quot;</span>)</span><br><span class="line">print(set1)</span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;Huawei&#x27;</span>, <span class="string">&#x27;HNU&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><p>如果移除一个不存在的元素</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">set1 = <span class="built_in">set</span>((<span class="string">&quot;Huawei&quot;</span>, <span class="string">&quot;HNU&quot;</span>, <span class="string">&quot;Ali&quot;</span>))</span><br><span class="line">set1.remove(<span class="string">&quot;Facebook&quot;</span>)  <span class="comment"># 不存在会发生错误</span></span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line"> File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, **<span class="keyword">in</span>** &lt;module&gt;</span><br><span class="line">KeyError: <span class="string">&#x27;Facebook&#x27;</span></span><br></pre></td></tr></table></figure><p>此外还有一个方法也是移除集合中的元素，且如果元素不存在，不会发生错误。格式如下所示：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s.discard( x )</span><br></pre></td></tr></table></figure><p>例如</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">set1 = <span class="built_in">set</span>((<span class="string">&quot;Huawei&quot;</span>, <span class="string">&quot;HNU&quot;</span>, <span class="string">&quot;Ali&quot;</span>))</span><br><span class="line">set1.discard(<span class="string">&quot;Facebook&quot;</span>) <span class="comment"># 不存在不会发生错误</span></span><br><span class="line">print(set1)</span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;Ali&#x27;</span>, <span class="string">&#x27;Huawei&#x27;</span>, <span class="string">&#x27;HNU&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><p>我们也可以设置随机删除集合中的一个元素，语法格式如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s.pop() </span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">set1 = <span class="built_in">set</span>((<span class="string">&quot;Huawei&quot;</span>, <span class="string">&quot;HNU&quot;</span>, <span class="string">&quot;Ali&quot;</span>, <span class="string">&quot;Facebook&quot;</span>))</span><br><span class="line">x = set1.pop()</span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">HNU</span><br></pre></td></tr></table></figure><p>多次执行测试结果都不一样。</p><p>set 集合的 pop 方法会对集合进行无序的排列，然后将这个无序排列集合的左面第一个元素进行删除。</p><h4 id="3、集合的常用方法"><a href="#3、集合的常用方法" class="headerlink" title="3、集合的常用方法"></a>3、集合的常用方法</h4><hr><h3 id="2-4-7-字典"><a href="#2-4-7-字典" class="headerlink" title="2.4.7 字典"></a>2.4.7 字典</h3><p>不同于字符串、列表、元组和集合等序列数据容器，Python字典所存储的数据元素之间与顺序无关。它是一种映射类型的数据容器，所谓映射类型的数据结构，存在一对一的映射关系，例如：每个居民都有唯一的身份证号码，表示为身份证：身份证号码，也存在多对一的映射关系，例如多个学生有相同的成绩，表示为学生学号：成绩，一对多的关系不能称为映射。</p><h4 id="1、字典的概念与特性"><a href="#1、字典的概念与特性" class="headerlink" title="1、字典的概念与特性"></a>1、字典的概念与特性</h4><p>Python字典中的每个数据元素包含“键”和“值”，这两部分以冒号分隔，表示一种对应关系（键：值），英文为（key:value）。不同元素之间以逗号隔开,所有元素放在一对大括号里面。格式如下表示：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = &#123;key1 : value1, key2 : value2，…… &#125;</span><br></pre></td></tr></table></figure><p>字典元素中的“键”可以是Python中的不可变类型，例如整数，浮点数、字符串、元组等类型，但不可以是列表、集合和字典或其他可变类型，而且包含了列表元素的元组也不能作为字典的“键”，字典的键（key）是唯一的，不能重复，而值（value）是可以重复的。</p><h4 id="2、字典的创建"><a href="#2、字典的创建" class="headerlink" title="2、字典的创建"></a>2、字典的创建</h4><p>字典可以用若干<code>&quot;键: 值&quot;</code>元素放在一对大括号中进行创建，也可以使用<code>dict</code>类的不同形式或字典推导式</p><p>以键值对定义字典，例如：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;&#125;<span class="comment">#创建空字典</span></span><br><span class="line">dict2 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Hunan University&#x27;</span>, <span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;http://www.hnu.edu.cn/&#x27;</span>, <span class="string">&#x27;create_time&#x27;</span>: <span class="number">1903</span>&#125;</span><br><span class="line">print(dict1)</span><br><span class="line">print(dict2)</span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#125;</span><br><span class="line">&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Hunan University&#x27;</span>, <span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;http://www.hnu.edu.cn/&#x27;</span>, <span class="string">&#x27;create_time&#x27;</span>: <span class="number">1903</span>&#125;</span><br></pre></td></tr></table></figure><p>以其他序列作为字典的“键”进行创建（“值”为空 ），例如：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1 = <span class="built_in">dict</span>.fromkeys([<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;url&#x27;</span>, <span class="string">&#x27;create_time&#x27;</span>])<span class="comment">#以列表的值作为字典的键来创建字典</span></span><br><span class="line">print(dict1)</span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;name&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;url&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;create_time&#x27;</span>: <span class="literal">None</span>&#125;</span><br></pre></td></tr></table></figure><p>使用字典推导式创建字典，例如：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;ch: <span class="built_in">ord</span>(ch) <span class="keyword">for</span> ch <span class="keyword">in</span> <span class="string">&quot;Hunan University&quot;</span>&#125;</span><br><span class="line">print(dict1)</span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;H&#x27;</span>: <span class="number">72</span>, <span class="string">&#x27;u&#x27;</span>: <span class="number">117</span>, <span class="string">&#x27;n&#x27;</span>: <span class="number">110</span>, <span class="string">&#x27;a&#x27;</span>: <span class="number">97</span>, <span class="string">&#x27; &#x27;</span>: <span class="number">32</span>, <span class="string">&#x27;U&#x27;</span>: <span class="number">85</span>, <span class="string">&#x27;i&#x27;</span>: <span class="number">105</span>, <span class="string">&#x27;v&#x27;</span>: <span class="number">118</span>, <span class="string">&#x27;e&#x27;</span>: <span class="number">101</span>, <span class="string">&#x27;r&#x27;</span>: <span class="number">114</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">115</span>, <span class="string">&#x27;t&#x27;</span>: <span class="number">116</span>, <span class="string">&#x27;y&#x27;</span>: <span class="number">121</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="3、字典元素的访问"><a href="#3、字典元素的访问" class="headerlink" title="3、字典元素的访问"></a>3、字典元素的访问</h4><p>字典支持下标操作，把“键”作为下标可以返回对应的”值“，如果字典中不包含这个“键”会抛出异常。例如：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Hunan University&#x27;</span>, <span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;http://www.hnu.edu.cn/&#x27;</span>, <span class="string">&#x27;create_time&#x27;</span>: <span class="number">1903</span>&#125;</span><br><span class="line">print(dict1[<span class="string">&#x27;name&#x27;</span>])</span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Hunan University</span><br></pre></td></tr></table></figure><p>字典的<code>get()</code>方法用于获取指定的“键”对应的“值”，如果指定的”键“不存在，<code>get()</code>方法会返回控制或指定的值。例如：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Hunan University&#x27;</span>, <span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;http://www.hnu.edu.cn/&#x27;</span>, <span class="string">&#x27;create_time&#x27;</span>: <span class="number">1903</span>&#125;</span><br><span class="line">print(dict1.get(<span class="string">&#x27;name&#x27;</span>))</span><br><span class="line">print(dict1.get(<span class="string">&#x27;address&#x27;</span>, <span class="string">&#x27;不存在这个键&#x27;</span>))</span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Hunan University</span><br><span class="line">不存在这个键</span><br></pre></td></tr></table></figure><p>字典对象支持元素迭代，可以将其转换为列表或元组，也可以用 for 循环遍历其中的元素，默认情况下是遍历字典的“键”，如果需要遍历字典中的元素，则必须使用字典对象的<code>items()</code>方法明确说明；如果需要遍历字典中的“值”，则必须使用字典对象的<code>values()</code>方法明确说明。当我们在使用<code>len()</code>, <code>max()</code>, <code>min()</code>, <code>sum()</code>, <code>sorted()</code>, <code>enumerate()</code>, <code>map()</code>等内置函数以及<code>in</code>成员操作符时也遵循同样的约定。例如：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Hunan University&#x27;</span>, <span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;http://www.hnu.edu.cn/&#x27;</span>, <span class="string">&#x27;create_time&#x27;</span>: <span class="number">1903</span>&#125;</span><br><span class="line"><span class="comment">#把所有的“键”转换为列表</span></span><br><span class="line">print(<span class="built_in">list</span>(dict1))</span><br><span class="line">print(<span class="built_in">list</span>(dict1.keys()))</span><br><span class="line"><span class="comment">#把所有的“值”转换成列表</span></span><br><span class="line">print(<span class="built_in">list</span>(dict1.values()))</span><br><span class="line"><span class="comment">#把所有的元素转换成列表</span></span><br><span class="line">print(<span class="built_in">list</span>(dict1.items()))</span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;url&#x27;</span>, <span class="string">&#x27;create_time&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;url&#x27;</span>, <span class="string">&#x27;create_time&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;Hunan University&#x27;</span>, <span class="string">&#x27;http://www.hnu.edu.cn/&#x27;</span>, <span class="number">1903</span>]</span><br><span class="line">[(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;Hunan University&#x27;</span>), (<span class="string">&#x27;url&#x27;</span>, <span class="string">&#x27;http://www.hnu.edu.cn/&#x27;</span>), (<span class="string">&#x27;create_time&#x27;</span>, <span class="number">1903</span>)]</span><br></pre></td></tr></table></figure><p>用for循环遍历字典，例如：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Hunan University&#x27;</span>, <span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;http://www.hnu.edu.cn/&#x27;</span>, <span class="string">&#x27;create_time&#x27;</span>: <span class="number">1903</span>&#125;</span><br><span class="line"><span class="comment">#遍历所有的“键”</span></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> dict1:</span><br><span class="line">    print(key, end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">print()</span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> dict1.keys():</span><br><span class="line">    print(key, end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">print(<span class="string">&quot;\n--------&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#遍历所有的“值”</span></span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> dict1.values():</span><br><span class="line">    print(value, end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">print(<span class="string">&quot;\n--------&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#遍历所有的元素</span></span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> dict1.items():</span><br><span class="line">    print(key, value)</span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name url create_time </span><br><span class="line">name url create_time </span><br><span class="line">--------</span><br><span class="line">Hunan University http://www.hnu.edu.cn/ <span class="number">1903</span> </span><br><span class="line">--------</span><br><span class="line">name Hunan University</span><br><span class="line">url http://www.hnu.edu.cn/</span><br><span class="line">create_time <span class="number">1903</span></span><br></pre></td></tr></table></figure><h4 id="4、字符元素的增、删和改操作"><a href="#4、字符元素的增、删和改操作" class="headerlink" title="4、字符元素的增、删和改操作"></a>4、字符元素的增、删和改操作</h4><p>字典可以以“键”的方式进行修改赋值。若该”键“存在，则修改该”键“对应的”值“；若该”键“不存在，则想字典中添加新的键值对。例如：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Hunan University&#x27;</span>, <span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;http://www.hnu.edu.cn/&#x27;</span>, <span class="string">&#x27;create_time&#x27;</span>: <span class="number">1903</span>&#125;</span><br><span class="line">dict1[<span class="string">&quot;type&quot;</span>] = <span class="string">&quot;985&quot;</span><span class="comment">#新增键值对</span></span><br><span class="line">print(dict1)</span><br><span class="line">dict1[<span class="string">&quot;type&quot;</span>] = <span class="string">&quot;985,211&quot;</span><span class="comment">#修改键“type”的值</span></span><br><span class="line">print(dict1)</span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Hunan University&#x27;</span>, <span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;http://www.hnu.edu.cn/&#x27;</span>, <span class="string">&#x27;create_time&#x27;</span>: <span class="number">1903</span>, <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;985&#x27;</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Hunan University&#x27;</span>, <span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;http://www.hnu.edu.cn/&#x27;</span>, <span class="string">&#x27;create_time&#x27;</span>: <span class="number">1903</span>, <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;985,211&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><p>使用字典对象的<code>upload()</code>方法可以将另一个字典的元素一次性全部添加到当前字典中，如果两个字典中存在相同的“键”，则以另一个字典的“值”为准对当前字典进行更新。例如：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;HNU&#x27;</span>, <span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;http://www.hnu.edu.cn/&#x27;</span>, <span class="string">&#x27;create_time&#x27;</span>: <span class="number">1903</span>&#125;</span><br><span class="line">dict2 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Hunan University&#x27;</span>, <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;985,211&#x27;</span>&#125;</span><br><span class="line">dict1.update(dict2)</span><br><span class="line">print(dict1)</span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Hunan University&#x27;</span>, <span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;http://www.hnu.edu.cn/&#x27;</span>, <span class="string">&#x27;create_time&#x27;</span>: <span class="number">1903</span>, <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;985,211&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><p>使用字典对象的<code>pop()</code>方法可以删除字典指定的“键”对应的元素，同时返回对应的值。而<code>popitem()</code>方法删除字典最后一个元素并返回一个包含“键”和“值”的元组。例如：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Hunan University&#x27;</span>, <span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;http://www.hnu.edu.cn/&#x27;</span>, <span class="string">&#x27;create_time&#x27;</span>: <span class="number">1903</span>&#125;</span><br><span class="line">print(dict1.pop(<span class="string">&#x27;create_time&#x27;</span>)) <span class="comment">#删除键&#x27;create_time&#x27;并返回其值</span></span><br><span class="line"></span><br><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Hunan University&#x27;</span>, <span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;http://www.hnu.edu.cn/&#x27;</span>, <span class="string">&#x27;create_time&#x27;</span>: <span class="number">1903</span>&#125;</span><br><span class="line">print(dict1.popitem())<span class="comment">#删除最后一个元素并返回其键值对的元组形式</span></span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1903</span></span><br><span class="line">(<span class="string">&#x27;create_time&#x27;</span>, <span class="number">1903</span>)</span><br></pre></td></tr></table></figure><p>另外，也可以用<code>del</code>函数删除指定的“键”对应的元素。例如：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Hunan University&#x27;</span>, <span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;http://www.hnu.edu.cn/&#x27;</span>, <span class="string">&#x27;create_time&#x27;</span>: <span class="number">1903</span>&#125;</span><br><span class="line"><span class="keyword">del</span> dict1[<span class="string">&#x27;url&#x27;</span>]</span><br><span class="line">print(dict1)</span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Hunan University&#x27;</span>, <span class="string">&#x27;create_time&#x27;</span>: <span class="number">1903</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="5、字典与列表的嵌套"><a href="#5、字典与列表的嵌套" class="headerlink" title="5、字典与列表的嵌套"></a>5、字典与列表的嵌套</h4><p>在字典中，我们允许以列表作为字典的“键”或“值”，并以多层下标的方式调用。例如：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">class1 = &#123;<span class="string">&#x27;names&#x27;</span>: [<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;王五&#x27;</span>], <span class="string">&#x27;scores&#x27;</span>: [<span class="number">95</span>, <span class="number">98</span>, <span class="number">75</span>]&#125;</span><br><span class="line">print(class1[<span class="string">&#x27;names&#x27;</span>])</span><br><span class="line">print(class1[<span class="string">&#x27;scores&#x27;</span>][<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;王五&#x27;</span>]</span><br><span class="line"><span class="number">98</span></span><br></pre></td></tr></table></figure><p>也允许在列表中嵌入字典。例如：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">class1 = [&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">95</span>&#125;, &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">98</span>&#125;, &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;王五&#x27;</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">75</span>&#125;]</span><br><span class="line">print(class1[<span class="number">0</span>])</span><br><span class="line">print(class1[<span class="number">1</span>][<span class="string">&#x27;name&#x27;</span>])</span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">95</span>&#125;</span><br><span class="line">李四</span><br></pre></td></tr></table></figure><h4 id="6、字典应用综合案例"><a href="#6、字典应用综合案例" class="headerlink" title="6、字典应用综合案例"></a>6、字典应用综合案例</h4><p><strong>案例2-12 进制转换</strong></p><p><strong>案例2-13 词频统计</strong> </p><p><strong>案例2-14</strong> </p><hr><h3 id="2-4-9-小结"><a href="#2-4-9-小结" class="headerlink" title="2.4.9 小结"></a>2.4.9 小结</h3><hr><h3 id="2-4-10-习题"><a href="#2-4-10-习题" class="headerlink" title="2.4.10 习题"></a>2.4.10 习题</h3><hr><h2 id="2-5-模块化程序构造：函数"><a href="#2-5-模块化程序构造：函数" class="headerlink" title="2.5 模块化程序构造：函数"></a>2.5 模块化程序构造：函数</h2><p>本节知识点的学习目标：</p><p>1、 掌握函数的基本概念  </p><p>2、 掌握函数不同参数的使用方法  </p><p>3、 掌握lambda 函数的使用</p><p>4、 理解递归函数的执行过程</p><p>5、 理解变量的作用域</p><p>6、 掌握用函数实现模块化程序设计方法</p><p>本节案例任务：如何绘制不同条件下的球的运动轨迹-Python函数与模块化编程</p><p>本关任务：完成代码的复用，封装性，实现模块化程序设计方法</p><p>案例任务：根据不同的高度初速度和不同的角度绘制铅球的飞行轨迹</p><p>案例分析：</p><h3 id="2-5-1-函数的基本概念"><a href="#2-5-1-函数的基本概念" class="headerlink" title="2.5.1 函数的基本概念"></a>2.5.1 函数的基本概念</h3><p>在Python中，函数的含义不是数学上的函数值与表达式之间的对应关系，而是一种运算或处理过程，是一段具有特定功能的、可重用的语句组，用函数名来表示并通过函数名来进行功能调用。函数也可以看作一段具有名字的子程序，可以在需要的地方调用执行，从而避免编写大段的重复代码。</p><p>每次使用函数时，可以提供一些不同的参数作为输入，来实现不同的数据处理；函数执行后，可以反馈一个或多个变量以表示函数处理的结果。</p><p>函数能够完成特定的功能，用户在使用函数时并不需要了解函数内部实现相应功能的原理，只需了解函数的调用输出方式。严格地说，函数是一种功能抽象。</p><p>使用函数是为了降低编程难度和代码重用。利用函数，我们可以将复杂的大问题分解成一系列简单的小问题并逐步解决。函数可以在一个程序中使用，也可以用于多个程序。当需要修改时，只需修改相应的函数即可，其他调用到函数的地方也会做相应的更新，这样也降低了代码的维护难度。</p><h4 id="内置函数与自定义函数"><a href="#内置函数与自定义函数" class="headerlink" title="内置函数与自定义函数"></a>内置函数与自定义函数</h4><p>在Python中，有些函数为用户自行编写的，称为自定义函数；还有一部分函数和方法是Python安装包自带的，包括Python内置的函数（例如<code>abs()</code>，<code>eval()</code>等）和Python标准库中的函数（例如<code>math</code>库的<code>sqrt()</code>等）</p><p>下表列出了我们在Python中较为常用的内置函数：</p><table><thead><tr><th>函数名</th><th>用途</th></tr></thead><tbody><tr><td>all()</td><td>全部值为真，返回True</td></tr><tr><td>any()</td><td>任意一个值为真，返回True</td></tr><tr><td>abs(x)</td><td>绝对值</td></tr><tr><td>divmod(x,y)</td><td>两个数字相除，取商和余的元组</td></tr><tr><td>len()</td><td>list长度</td></tr><tr><td>max(iterable)</td><td>返回参数中最大值</td></tr><tr><td>min(iterable)</td><td>返回参数中最小值</td></tr><tr><td>pow(x,y)</td><td>返回x的y次方的值</td></tr><tr><td>range(x,y)</td><td>生成一个数值序列</td></tr><tr><td>round(x,y)</td><td>获取指定位数的小数</td></tr><tr><td>sum(iterable)</td><td>返回集合中数字的总和</td></tr><tr><td>bool()</td><td>转换为布尔类型</td></tr><tr><td>bin(int)</td><td>十进制转换为二进制</td></tr><tr><td>oct(int)</td><td>十进制转换为八进制</td></tr><tr><td>hex(int)</td><td>十进制转换为十六进制</td></tr><tr><td>float(int/str)</td><td>将数字转换为浮点数</td></tr><tr><td>int(str)</td><td>将数字转换为整数</td></tr><tr><td>str(int)</td><td>转换为字符串</td></tr><tr><td>bytes(str,code)</td><td>接收一个字符串，与所要编码的格式，返回一个字节流类型。</td></tr><tr><td>iter(iterable)</td><td>返回一个迭代器</td></tr><tr><td>dict(iterable)</td><td>转换为数据字典</td></tr><tr><td>list(iterable)</td><td>转换为列表类型</td></tr><tr><td>tuple(iterable)</td><td>转换为元组类型</td></tr><tr><td>set(iterable)</td><td>创建一个无序不重复元素的集合</td></tr><tr><td>complex()</td><td>创建一个复数</td></tr><tr><td>enumerate()</td><td>返回一个枚举对象</td></tr><tr><td>ord(str)</td><td>返回ASCII对应的十进制整数</td></tr><tr><td>chr(int)</td><td>返回整数对应的ASCII字符</td></tr><tr><td>ascii()</td><td>判断参数是否ascii编码，如果不是，输出字节码</td></tr><tr><td>map(func,*iterable)</td><td>处理序列中的每个元素，得到的结果是一个‘list’,该‘list’元素个数及位置与原来一样。</td></tr><tr><td>lambda()</td><td></td></tr><tr><td>reduce()</td><td>处理一个序列，然后把序列进行合并操作</td></tr><tr><td>reversed(sequence)</td><td>生成一个反转序列的迭代器</td></tr><tr><td>sorted()</td><td>对一个集合进行排序,返回排序后的list</td></tr><tr><td>zip()</td><td>拉链形式，将对象中的多个可迭代序列输出成一一对应的元组</td></tr><tr><td>next()</td><td>接受一个迭代器，返回迭代器中的值</td></tr><tr><td>id()</td><td>返回一个对象的唯一标识值。</td></tr><tr><td>help()</td><td>调用系统内置的帮助系统</td></tr><tr><td>type()</td><td>返回一个对象的数据类型</td></tr><tr><td>input()</td><td>获取用户输入信息</td></tr><tr><td>open()</td><td>打开文件</td></tr><tr><td>print()</td><td>打印函数</td></tr><tr><td>format()</td><td>字符串格式化</td></tr><tr><td>eval()</td><td>1、将字符串中数据结构提取出来   2、将字符串中数据运算计算出结果</td></tr></tbody></table><p>而用户自定义的函数包括函数名，函数参数与实现函数功能的语句块等，一般形式为：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 函数名(<span class="params">[形式参数表]</span>):</span></span><br><span class="line">    函数体（语句块）</span><br></pre></td></tr></table></figure><p>例如：定义一个实现平面直角坐标系中求两点距离的函数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dis</span>(<span class="params">x1, y1, x2, y2</span>):</span></span><br><span class="line">    <span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line">    <span class="keyword">return</span> sqrt((x1-x2)**<span class="number">2</span>+(y1-y2)**<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>该函数接受4个参数：<code>x1,y1</code>和<code>x2,y2</code>，返回两点的距离。</p><p>一样需要注意的是，函数和判断循环一样严格缩进。</p><p>如果你想要先定义一个函数，但还未想好函数体，可以这样写：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 函数名():</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>使用<code>pass</code>语句以确保函数在运行程序或调用函数时不会报错。</p><h4 id="函数的调用及其返回值"><a href="#函数的调用及其返回值" class="headerlink" title="函数的调用及其返回值"></a>函数的调用及其返回值</h4><h5 id="1-函数的调用"><a href="#1-函数的调用" class="headerlink" title="1.函数的调用"></a>1.函数的调用</h5><p>我们定义函数之后，在我们需要函数的地方以如下方式调用：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">函数名(实际参数表)</span><br></pre></td></tr></table></figure><p>调用函数时，和形式参数对应的参数因为有实际值，所以称之为实际参数，简称”实参“。当有多个实参时，实参之间以<code>,</code>分隔。例如：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dis</span>(<span class="params">x1, y1, x2, y2</span>):</span></span><br><span class="line">    <span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line">    <span class="keyword">return</span> sqrt((x1-x2)**<span class="number">2</span>+(y1-y2)**<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">d = dis(<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">print(d)</span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.4142135623730951</span></span><br></pre></td></tr></table></figure><p>如果调用的是无参数函数，则调用形式为：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">函数名()</span><br></pre></td></tr></table></figure><p>例如：输入直角三角形的两条直角边长度，求第三条边（勾股定理）</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Pythagoras_theorem</span>():</span></span><br><span class="line">    a,b = <span class="built_in">eval</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入两条直角边长度: &#x27;</span>))</span><br><span class="line">    <span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line">    <span class="keyword">return</span> sqrt(a*a+b*b)</span><br><span class="line"></span><br><span class="line">c = Pythagoras_theorem()</span><br><span class="line">print(c)</span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">请输入两条直角边长度: <span class="number">3</span>,<span class="number">4</span></span><br><span class="line"><span class="number">5.0</span></span><br></pre></td></tr></table></figure><h5 id="2-函数的返回值"><a href="#2-函数的返回值" class="headerlink" title="2.函数的返回值"></a>2.函数的返回值</h5><p><code>return</code>语句用来退出程序并将程序返回到函数被调用的位置继续执行。<code>return</code>语句可以同时将0个、1个或多个函数运算后的结果返回给函数被调用处的变量，例如：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#交换a,b</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">swap</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="keyword">return</span> b,a</span><br><span class="line"></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line">a,b = swap(a, b)</span><br><span class="line">print(a,b)</span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">2</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>如果你输出返回单个变量的函数的类型，会得到对应返回的单变量的数据类型</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dis</span>(<span class="params">x1, y1, x2, y2</span>):</span></span><br><span class="line">    <span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line">    <span class="keyword">return</span> sqrt((x1-x2)**<span class="number">2</span>+(y1-y2)**<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="built_in">type</span>(dis(<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>)))</span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">float</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure><p>而当函数有多个返回值时，返回的是一个元组</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">swap</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="keyword">return</span> b, a</span><br><span class="line"></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line">print(<span class="built_in">type</span>(swap(a, b)))</span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">tuple</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure><p>一个函数一旦运行了return语句，即意味着这个函数结束运算，函数内return语句以下的语句块将不被运行。</p><hr><h3 id="2-5-2-函数的不同参数调用"><a href="#2-5-2-函数的不同参数调用" class="headerlink" title="2.5.2 函数的不同参数调用"></a>2.5.2 函数的不同参数调用</h3><p>我们在使用Python函数时，经常需要传入一些参数来进行函数的运算，从而得到对应的结果。而Python中的函数参数又可以具体分类为以下四种：位置参数，默认参数，关键参数和可变参数。</p><h4 id="位置参数"><a href="#位置参数" class="headerlink" title="位置参数"></a>位置参数</h4><p>位置参数是函数最基本的参数，指调用函数传递参数时没有任何多余的说明，多个实参会依次按顺序传递给对应的形参。这时实参和形参是按顺序一一对应的，否则会抛出异常。例如：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    print(a, b, a+b)</span><br><span class="line"></span><br><span class="line">function(<span class="number">8</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">8</span> <span class="number">5</span> <span class="number">13</span></span><br></pre></td></tr></table></figure><p>可以看到形式参数a对应的是传入的第一个实际参数8，形式参数b对应的是传入的第二个实际参数5。</p><h4 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h4><p>在函数定义的时候，我们可以将一些形式参数设置默认值，这样的参数就是默认参数。在调用函数时，如果不为已经设置了默认值的形参传递实参则使用设置的默认值，如果传递了实参则使用传递的实参。例如：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span>(<span class="params">a, b=<span class="number">100</span></span>):</span></span><br><span class="line">    print(a, b, a+b)</span><br><span class="line"></span><br><span class="line">function(<span class="number">8</span>)</span><br><span class="line">function(<span class="number">8</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">8</span> <span class="number">100</span> <span class="number">108</span></span><br><span class="line"><span class="number">8</span> <span class="number">5</span> <span class="number">13</span></span><br></pre></td></tr></table></figure><p>同时需要注意的是，在定义函数形参时，任何带默认值的形参右侧都不能再有不带默认值的位置参数。例如：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span>(<span class="params">a=<span class="number">100</span>, b</span>):</span><span class="comment">#定义是非法的，会抛出错误</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h4 id="关键参数"><a href="#关键参数" class="headerlink" title="关键参数"></a>关键参数</h4><p>关键参数是指，在调用参数时明确指定给哪个形参传递实参，这时实参的顺序可以与形参不对应，而不影响传递的最终结果。例如：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span>(<span class="params">a,b</span>):</span></span><br><span class="line">    print(a, b, a+b)</span><br><span class="line"></span><br><span class="line">function(b=<span class="number">5</span>, a=<span class="number">8</span>)</span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">8</span> <span class="number">5</span> <span class="number">13</span></span><br></pre></td></tr></table></figure><h4 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h4><p>定义函数时需要定义函数的参数个数，通常情况下这些参数个数表示了函数可调用的参数个数上限。但是有时在定义函数时无法得知参数个数的情况，在Python中使用<code>*args</code>和<code>*kwargs</code>可以定义可变参数。</p><h5 id="1，-args-方式传入"><a href="#1，-args-方式传入" class="headerlink" title="1，*args 方式传入"></a>1，*args 方式传入</h5><p>在形参前面加一个星号<code>*</code>，表示可以接收多个<strong>位置参数</strong>并把它们放到一个元组中。例如：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span>(<span class="params">a,b,*args</span>):</span></span><br><span class="line">    print(a,b)</span><br><span class="line">    print(args)</span><br><span class="line">    </span><br><span class="line">function(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line">(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><h5 id="2，-kwargs-方式传入"><a href="#2，-kwargs-方式传入" class="headerlink" title="2，**kwargs 方式传入"></a>2，**kwargs 方式传入</h5><p>在形参前面加两个星号<code>**</code>，表示可以接受多个<strong>关键参数</strong>并把它们房贷一个字典中。例如：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span>(<span class="params">a,b,**kwargs</span>):</span></span><br><span class="line">    print(a,b)</span><br><span class="line">    print(kwargs)</span><br><span class="line">    </span><br><span class="line">function(<span class="number">1</span>, <span class="number">2</span>, x=<span class="number">3</span>, y=<span class="number">4</span>, z=<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line">&#123;<span class="string">&#x27;x&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;y&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;z&#x27;</span>: <span class="number">5</span>&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="2-5-3-lambda函数—匿名函数"><a href="#2-5-3-lambda函数—匿名函数" class="headerlink" title="2.5.3 lambda函数—匿名函数"></a>2.5.3 lambda函数—匿名函数</h3><p>Python允许使用<code>lambda</code>语句创建匿名函数，也就是说函数没有具体的名称。当需要定义一个功能简单但不经常使用的函数来运行代码时，就可以使用<code>lambda</code>定义匿名函数，从而省去定义函数的过程。对于一些抽象的、不会再其他地方重复使用的函数，给函数命名也是一件麻烦的事（需要避免函数重名），而使用<code>lambda</code>语句则不需要考虑函数命名的问题。</p><p>在<code>lambda</code>语句中，冒号前是函数的参数，多个参数则以逗号隔开；冒号后是返回值而不需要写<code>return</code>语句。<code>lambda</code>语句的基本形式如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ans = <span class="keyword">lambda</span> 参数表 : 返回值</span><br></pre></td></tr></table></figure><p><code>lambda</code>语句有个十分明显的缺点：只能使用一个表达式。多个表达式的函数仍然需要用<code>def</code>定义。</p><p>下面以关键字排序为例：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l=[&#123;<span class="string">&quot;age&quot;</span>: <span class="number">20</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;张三&quot;</span>&#125;, &#123;<span class="string">&quot;age&quot;</span>: <span class="number">25</span>,<span class="string">&quot;name&quot;</span>: <span class="string">&quot;李四&quot;</span>&#125;, &#123;<span class="string">&quot;age&quot;</span>: <span class="number">10</span>,<span class="string">&quot;name&quot;</span>: <span class="string">&quot;王五&quot;</span>&#125;]</span><br><span class="line">l=<span class="built_in">sorted</span>(l, key=<span class="keyword">lambda</span> x: x[<span class="string">&quot;age&quot;</span>])</span><br><span class="line">print(l)</span><br></pre></td></tr></table></figure><p>如果不用Lambda表达式，而要写成常规的函数，那么需要这么写：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">comp</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x[<span class="string">&quot;age&quot;</span>]</span><br><span class="line">l=[&#123;<span class="string">&quot;age&quot;</span>: <span class="number">20</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;张三&quot;</span>&#125;, &#123;<span class="string">&quot;age&quot;</span>: <span class="number">25</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;李四&quot;</span>&#125;, &#123;<span class="string">&quot;age&quot;</span>: <span class="number">10</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;王五&quot;</span>&#125;]</span><br><span class="line">l=<span class="built_in">sorted</span>(l, key=comp)</span><br><span class="line">print(l)</span><br></pre></td></tr></table></figure><p>以上用匿名函数和常规函数分别实现了对列表内各项对年龄进行关键字排序，可以看到，使用<code>lambda</code>语句使代码显得更加简洁。</p><p>此外，匿名函数也是一个函数对象，也可以把匿名函数赋值给一个变量，再利用变量来调用该函数：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = <span class="keyword">lambda</span> x: x*x</span><br><span class="line">print(f(<span class="number">5</span>))</span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">25</span></span><br></pre></td></tr></table></figure><p>同样，也可以把匿名函数作为返回值返回，比如：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span>: x*x+y*y</span><br></pre></td></tr></table></figure><hr><h3 id="2-5-4-变量的作用域"><a href="#2-5-4-变量的作用域" class="headerlink" title="2.5.4 变量的作用域"></a>2.5.4 变量的作用域</h3><h4 id="1、作用域介绍"><a href="#1、作用域介绍" class="headerlink" title="1、作用域介绍"></a>1、作用域介绍</h4><p>变量的作用域是指在程序中能够对改变量进行读取修改的范围。根据作用域不同，可以将变量分为以下四种：</p><ul><li><p>L：local，局部作用域，即函数中定义的变量；</p></li><li><p>E：enclosing，嵌套的父级函数的局部作用域，即包含此函数的上级函数的局部作用域，但不是全局的；</p></li><li><p>G：global，全局变量，就是模块级别定义的变量； </p></li><li><p>B：built-in，系统固定模块里面的变量。 </p></li></ul><p>当然，local和enclosing是相对的，enclosing变量相对上层来说也是local。</p><p>当不同作用域的变量同名时，优先级由近及远，从函数最内层逐渐向外，即：作用域局部&gt;外层作用域&gt;当前模块中的全局&gt;Python内置作用域，也就是LEGB。例如：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="built_in">int</span>(<span class="number">2.9</span>) <span class="comment"># int built-in</span></span><br><span class="line">g_count = <span class="number">0</span> <span class="comment"># global</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span>():</span></span><br><span class="line">o_count = <span class="number">1</span> <span class="comment"># enclosing</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inner</span>():</span></span><br><span class="line">i_count = <span class="number">2</span> <span class="comment"># local</span></span><br></pre></td></tr></table></figure><h4 id="2、作用域产生"><a href="#2、作用域产生" class="headerlink" title="2、作用域产生"></a>2、作用域产生</h4><p>在Python中，只有模块（module），类（class）以及函数（def、lambda）才会引入新的作用域，其它的代码块（如if、try、for等）是不会引入新的作用域的，如下代码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="literal">True</span>:</span><br><span class="line">x = <span class="number">1</span></span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>if并没有引入一个新的作用域，x仍处在当前作用域中，后面代码可以直接使用。</p><p>而调用下一作用域的变量时，运行则会出错，例如：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>():</span></span><br><span class="line">x2 = <span class="number">2</span></span><br><span class="line">print(x2)</span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">NameError: name <span class="string">&#x27;x2&#x27;</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br></pre></td></tr></table></figure><p>def、class、lambda是可以引入新作用域的。</p><h4 id="3、局部作用域变量的修改"><a href="#3、局部作用域变量的修改" class="headerlink" title="3、局部作用域变量的修改"></a>3、局部作用域变量的修改</h4><p>一个不在局部作用域里的变量默认是只读的，如果试图为其绑定一个新的值，Python认为是在当前的局部作用域里创建一个新的变量，也就是说在当前局部作用域中，如果直接使用外部作用域的变量，那么这个变量是只读的，不能修改，如：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">count = <span class="number">10</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span>():</span></span><br><span class="line">print(count)</span><br><span class="line">count = <span class="number">100</span></span><br><span class="line">print(count)</span><br><span class="line">outer()</span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">UnboundLocalError: local variable <span class="string">&#x27;count&#x27;</span> referenced before assignment</span><br></pre></td></tr></table></figure><p>这里第一个print中，使用到了外部作用域的count，这样后面count就指外部作用域中的count了，再修改就会报错。 如果没使用过这个变量，而直接赋值，会认为是新定义的变量，此时会覆盖外部作用域中变量，如：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">count = <span class="number">10</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span>():</span></span><br><span class="line">count = <span class="number">100</span></span><br><span class="line">print(count)</span><br><span class="line">print(count)</span><br><span class="line">outer()</span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">100</span></span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure><p>内部作用域中直接声明了count=100，此后在函数内使用的count都是内部作用域的count，同时外部的count变量并不被改变。也就是说，函数内外各有一个独立的count变量。</p><h4 id="4、全局变量和外部作用域变量的修改"><a href="#4、全局变量和外部作用域变量的修改" class="headerlink" title="4、全局变量和外部作用域变量的修改"></a>4、全局变量和外部作用域变量的修改</h4><h5 id="global关键字"><a href="#global关键字" class="headerlink" title="global关键字"></a>global关键字</h5><p>当内部作用域想修改外部作用域的变量时，就要用到global和nonlocal关键字了，当修改的变量是在全局作用域（global作用域）上的，就要使用global先声明一下，例如：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">count = <span class="number">10</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span>():</span></span><br><span class="line"><span class="keyword">global</span> count</span><br><span class="line">print(count)</span><br><span class="line">count = <span class="number">100</span></span><br><span class="line">print(count)</span><br><span class="line">outer()</span><br><span class="line">print(count)</span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">100</span></span><br><span class="line"><span class="number">100</span></span><br></pre></td></tr></table></figure><h5 id="nonlocal关键字"><a href="#nonlocal关键字" class="headerlink" title="nonlocal关键字"></a>nonlocal关键字</h5><p>global关键字声明的变量必须在全局作用域上，不能嵌套作用域上，当需要修改嵌套作用域（enclosing作用域，外层非全局作用域）中的变量时，这时就需要使用nonlocal关键字，例如：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span>():</span></span><br><span class="line">count = <span class="number">10</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inner</span>():</span></span><br><span class="line"><span class="keyword">nonlocal</span> count</span><br><span class="line">count = <span class="number">20</span></span><br><span class="line">print(count)</span><br><span class="line">inner()</span><br><span class="line">print(count)</span><br><span class="line">outer()</span><br></pre></td></tr></table></figure><p>【运行结果】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">20</span></span><br><span class="line"><span class="number">20</span></span><br></pre></td></tr></table></figure><hr><h3 id="2-5-5-同一机器人投篮，不同角度与初速度，绘制多条篮球运动轨迹图像的任务"><a href="#2-5-5-同一机器人投篮，不同角度与初速度，绘制多条篮球运动轨迹图像的任务" class="headerlink" title="2.5.5 同一机器人投篮，不同角度与初速度，绘制多条篮球运动轨迹图像的任务"></a>2.5.5 同一机器人投篮，不同角度与初速度，绘制多条篮球运动轨迹图像的任务</h3><p><strong>案例 以不同角度与初速度绘制多条篮球运动轨迹</strong></p><p>案例描述与分析见前面内容所述，在此不再重述。</p><p>案例代码实现：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shot_trace</span>(<span class="params">v0, theta</span>):</span>                      <span class="comment"># 运用函数将计算坐标点任务模块化</span></span><br><span class="line">    theta = math.radians(theta)                 <span class="comment"># 将角度改成弧度制</span></span><br><span class="line">    tmax = (v0 * math.sin(theta) + math.sqrt(v0 ** <span class="number">2</span> * math.sin(theta) ** <span class="number">2</span> + <span class="number">2</span> * g * h)) / g</span><br><span class="line">                                                <span class="comment"># 计算篮球抛出后滞空时间</span></span><br><span class="line">    t = np.linspace(<span class="number">0</span>, tmax)                    <span class="comment"># 将总时间平均划分，linspace函数默认分割成50等分，产生50个时间点</span></span><br><span class="line">    xt = v0*math.cos(theta) * t</span><br><span class="line">    yt = h + v0 * math.sin(theta) * t - <span class="number">1</span> / <span class="number">2</span> * g * t ** <span class="number">2</span></span><br><span class="line">                                                <span class="comment"># 对每个时间点计算对应的x值和y值</span></span><br><span class="line">    <span class="keyword">return</span> xt, yt                               <span class="comment"># 返回xt和yt</span></span><br><span class="line"></span><br><span class="line">h, g = <span class="number">1.9</span>, <span class="number">9.8</span>                                 <span class="comment"># 定义常量：机器人的身高h和g</span></span><br><span class="line">v0_list = [<span class="number">13</span>, <span class="number">14</span>]                              <span class="comment"># 篮球抛出初速度大小取值</span></span><br><span class="line">theta_list = [<span class="number">40</span>, <span class="number">50</span>, <span class="number">30</span>]                       <span class="comment"># 篮球抛出角度取值</span></span><br><span class="line">legend_list = []                                <span class="comment"># 用于存储每组的参数，便于绘制图例</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> v0 <span class="keyword">in</span> v0_list:</span><br><span class="line">    <span class="keyword">for</span> theta <span class="keyword">in</span> theta_list:</span><br><span class="line">        xt, yt = shot_trace(v0, theta)          <span class="comment"># 引用函数并传入参数初速度和角度，得到xt,yt的数组对象</span></span><br><span class="line">        plt.plot(xt, yt, <span class="string">&#x27;-&#x27;</span>)                   <span class="comment"># 根据xt,yt数组绘图，以实线（-）连接坐标点</span></span><br><span class="line">        legend_list.append((v0, theta))         <span class="comment"># 将参数存储</span></span><br><span class="line"></span><br><span class="line">plt.grid(<span class="literal">True</span>)                                  <span class="comment"># 启用坐标网格线</span></span><br><span class="line">plt.axis([<span class="number">0</span>, <span class="number">30</span>, <span class="number">0</span>, <span class="number">8</span>])                         <span class="comment"># 定义x轴范围为[0, 30]，y轴范围为[0, 8]</span></span><br><span class="line">plt.legend(legend_list)                         <span class="comment"># 绘制图例</span></span><br><span class="line">plt.show()                                      <span class="comment"># 在窗口中展示绘制结果</span></span><br></pre></td></tr></table></figure><h3 id="2-5-6-同一机器人，不同角度范围解决定点投篮问题"><a href="#2-5-6-同一机器人，不同角度范围解决定点投篮问题" class="headerlink" title="2.5.6 同一机器人，不同角度范围解决定点投篮问题"></a>2.5.6 同一机器人，不同角度范围解决定点投篮问题</h3><p>案例描述：<br>以上我们求得机器人固定速度和角度投篮的曲线。但对于实现精准投篮尚有不足。现在我们来想想，如果知道篮筐的坐标点和投篮的出球速度，是否能求出投篮的角度？<br>已知机器人投篮出球速度为10m/s，出手位置高度1.9m，篮筐中心和机器人水平距离相差7.25m（三分线），离地3.05m，直径0.45m。求机器人的出手投球角度范围并据此绘制曲线。<br>提示，篮球不可以从下往上穿过篮筐</p><p>案例代码实现：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shot_trace</span>(<span class="params">v0, theta, delta_h</span>):</span>             <span class="comment"># 运用函数将计算坐标点任务模块化</span></span><br><span class="line">    tmax = (v0 * math.sin(theta) + math.sqrt(v0 ** <span class="number">2</span> * math.sin(theta) ** <span class="number">2</span> - <span class="number">2</span> * g * delta_h)) / g</span><br><span class="line">                                                <span class="comment"># 计算篮球抛出后滞空时间</span></span><br><span class="line">    t = np.linspace(<span class="number">0</span>, tmax)                    <span class="comment"># 将总时间平均划分，linspace函数默认分割成50等分，产生50个时间点</span></span><br><span class="line">    xt = v0*math.cos(theta) * t</span><br><span class="line">    yt = h + v0 * math.sin(theta) * t - <span class="number">1</span> / <span class="number">2</span> * g * t ** <span class="number">2</span></span><br><span class="line">                                                <span class="comment"># 对每个时间点计算对应的x值和y值</span></span><br><span class="line">    <span class="keyword">return</span> xt, yt                               <span class="comment"># 返回xt和yt</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">seek_theta</span>(<span class="params">v0, delta_h, x, r</span>):</span>              <span class="comment"># 运用函数将寻找角度范围任务模块化</span></span><br><span class="line">    theta_range = []                            <span class="comment"># 存储合适的角度</span></span><br><span class="line">    <span class="keyword">for</span> theta <span class="keyword">in</span> np.arange(<span class="number">0</span>, <span class="number">90</span>, <span class="number">0.01</span>):        <span class="comment"># 每0.01°测验</span></span><br><span class="line">        theta = math.radians(theta)             <span class="comment"># 将角度改成弧度制</span></span><br><span class="line">        <span class="keyword">if</span> v0 ** <span class="number">2</span> * math.sin(theta) ** <span class="number">2</span> - <span class="number">2</span> * g * delta_h &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">continue</span>                            <span class="comment"># 如果该角度无法到达指定高度，则二次函数无解，直接尝试下一个角度</span></span><br><span class="line">        t = (v0 * math.sin(theta) + math.sqrt(v0 ** <span class="number">2</span> * math.sin(theta) ** <span class="number">2</span> - <span class="number">2</span> * g * delta_h)) / g</span><br><span class="line">                                                <span class="comment"># 计算到达篮筐所需时间</span></span><br><span class="line">        <span class="keyword">if</span> x - r &lt;= v0 * math.cos(theta) * t &lt;= x + r:</span><br><span class="line">            theta_range.append(theta)           <span class="comment"># 如果可以命中篮筐，则存储改角度</span></span><br><span class="line">    <span class="keyword">return</span> theta_range                          <span class="comment"># 返回可进球的角度范围</span></span><br><span class="line"></span><br><span class="line">v0, h, x, H, r, g = <span class="number">10</span>, <span class="number">1.9</span>, <span class="number">7.25</span>, <span class="number">3.05</span>, <span class="number">0.45</span> / <span class="number">2</span>, <span class="number">9.8</span></span><br><span class="line"><span class="comment"># 已知机器人投篮出球速度为10m/s，出手位置高度1.9m，篮筐中心和机器人水平距离相差7.25m（三分线），离地3.05m，直径0.45m。</span></span><br><span class="line"></span><br><span class="line">theta_range = seek_theta(v0, H - h, x, r)       <span class="comment"># 引用函数求角度范围</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> theta <span class="keyword">in</span> theta_range:                       <span class="comment"># 遍历可用角度并绘图</span></span><br><span class="line">    xt, yt = shot_trace(v0, theta, H-h)         <span class="comment"># 引用函数并传入参数初速度和角度，得到xt,yt的数组对象</span></span><br><span class="line">    plt.plot(xt, yt, <span class="string">&#x27;r-&#x27;</span>)                      <span class="comment"># 根据xt,yt数组绘图，以实线（红色-）连接坐标点</span></span><br><span class="line"></span><br><span class="line">plt.grid(<span class="literal">True</span>)                                  <span class="comment"># 启用坐标网格线</span></span><br><span class="line">plt.axis([<span class="number">0</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">7</span>])                          <span class="comment"># 定义x轴范围为[0, 8]，y轴范围为[0, 7]</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h3 id="2-5-7-本节小结"><a href="#2-5-7-本节小结" class="headerlink" title="2.5.7 本节小结"></a>2.5.7 本节小结</h3><h3 id="2-5-8-习题"><a href="#2-5-8-习题" class="headerlink" title="2.5.8 习题"></a>2.5.8 习题</h3>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人哔哔: 我的butterfly魔改记录</title>
      <link href="10567.html"/>
      <url>10567.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>其实butterfly确实是hexo主题里为数不多的<b style="color:red">优雅</b><del>（花里胡哨）</del>的主题了</p><p>但看了<a href="https://zfe.space/">@冰卡诺老师</a>和<a href="https://akilar.top/">@Aki店长</a>的博客后，十分感慨：<b style="color:cyan">人与人的butterfly不能一概而论</b></p><p>所以，学习<del>（白嫖）</del>着他们的教程，我也开始走上魔改bf之路</p><hr><blockquote><p>但店长说的好：<b style="color:cyan">魔改一时爽，升级火葬场</b></p></blockquote><p>记录魔改历程也是为了以后主题更新能找到回家的路（毕竟主题更新相当于把大部分魔改推倒重来）</p><p>所以也记录和备份我修改/添加过的文件，方便查询</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root</span><br><span class="line">├─source</span><br><span class="line">│   ├─_data</span><br><span class="line">│   │   └─slider.yml</span><br><span class="line">└─themes</span><br><span class="line">    └─butterfly</span><br><span class="line">        ├─layout</span><br><span class="line">        │   ├─includes</span><br><span class="line">        │   │   ├─post</span><br><span class="line">        │   │   │   └─post-copyright.pug</span><br><span class="line">        │   │   ├─page</span><br><span class="line">        │   │   │   └─flink.pug</span><br><span class="line">        │   ├─index.pug</span><br><span class="line">        │   └─sliderbar.pug</span><br><span class="line">        └─source</span><br><span class="line">            ├─css</span><br><span class="line">            │   ├─_layout</span><br><span class="line">            │   │   ├─categoryBar.styl</span><br><span class="line">            │   │   ├─swiperstyle.styl</span><br><span class="line">            │   │   └─post.styl</span><br><span class="line">            │   ├─_page</span><br><span class="line">            │   │   └─flink.styl</span><br><span class="line">            │   ├─commentsbar.css</span><br><span class="line">            │   ├─index.styl</span><br><span class="line">            │   └─add.css</span><br><span class="line">            └─js</span><br><span class="line">                ├─swiper_init.js</span><br><span class="line">                └─kernel.js</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1 id="主题源码修改部分"><a href="#主题源码修改部分" class="headerlink" title="主题源码修改部分"></a>主题源码修改部分</h1><h2 id="留言板动态弹出信封样式"><a href="#留言板动态弹出信封样式" class="headerlink" title="留言板动态弹出信封样式"></a>留言板动态弹出信封样式</h2><blockquote><p>参考教程：店长的<a href="https://akilar.top/posts/e2d3c450/">Envelope Style Comments Bar</a></p></blockquote><p>新增的主题源码：<br><code>[root]\themes\butterfly\source\css\commentsbar.css</code></p><hr><h2 id="友链样式魔改"><a href="#友链样式魔改" class="headerlink" title="友链样式魔改"></a>友链样式魔改</h2><blockquote><p>参考教程：店长的<a href="https://akilar.top/posts/57291286/">Friend Link Card Beautify</a></p></blockquote><p>修改的主题源码：<br><code>[root]\themes\butterfly\layout\includes\page\flink.pug</code><br><code>[root]\themes\butterfly\source\css\_page\flink.styl</code></p><hr><h2 id="首页磁贴"><a href="#首页磁贴" class="headerlink" title="首页磁贴"></a>首页磁贴</h2><blockquote><p>参考教程：店长的<a href="https://akilar.top/posts/a9131002/">Categories Magnet</a></p></blockquote><p>修改的主题源码：<br><code>[root]\themes\butterfly\layout\index.pug</code></p><p>新增的主题源码：<br><code>[root]\themes\butterfly\source\css\_layout\categoryBar.styl</code></p><hr><h2 id="首页置顶轮播图"><a href="#首页置顶轮播图" class="headerlink" title="首页置顶轮播图"></a>首页置顶轮播图</h2><blockquote><p>参考教程：店长的<a href="https://akilar.top/posts/8e1264d1/">Slider Bar</a></p></blockquote><p>新增的主题源码：<br><code>[root]\themes\butterfly\layout\includes\sliderbar.pug</code><br><code>[root]\themes\butterfly\source\js\swiper_init.js</code><br><code>[root]\themes\butterfly\source\css\_layout\swiperstyle.styl</code></p><p>修改的主题源码：<br><code>[root]\themes\butterfly\source\css\index.styl</code></p><p>新增配置文件：<br><code>[root]\source\_data\slider.yml</code></p><hr><h2 id="版权信息美化"><a href="#版权信息美化" class="headerlink" title="版权信息美化"></a>版权信息美化</h2><blockquote><p>参考教程：Nesxc的<a href="https://www.nesxc.com/post/hexocc.html">butterfly版权美化教程</a></p></blockquote><p>修改的主题源码：<br><code>[root]\themes\butterfly\layout\includes\post\post-copyright.pug</code><br><code>[root]\themes\butterfly\source\css\_layout\post.styl</code></p><h2 id="拒绝IE-从我做起"><a href="#拒绝IE-从我做起" class="headerlink" title="拒绝IE,从我做起"></a>拒绝IE,从我做起</h2><blockquote><p>参考教程: Nesxc的<a href="https://www.nesxc.com/post/noie.html">Butterfly检测IE内核跳转教程</a></p></blockquote><p>新增的主题源码：<br><code>[root]\themes\butterfly\source\js\kernel.js</code><br><code>[root]\themes\butterfly\source\kernel.html</code></p><hr><h1 id="非主题源码修改区"><a href="#非主题源码修改区" class="headerlink" title="非主题源码修改区"></a>非主题源码修改区</h1><h2 id="双栏卡片主页文章"><a href="#双栏卡片主页文章" class="headerlink" title="双栏卡片主页文章"></a>双栏卡片主页文章</h2><blockquote><p>参考教程：冰老师的<a href="https://zfe.space/post/52914.html">教程：基于Butterfly主题的双栏卡片主页文章css样式</a></p></blockquote><p>(我这里直接在主题配置文件引入冰老师的css，所以不涉及其他修改)</p><hr><h2 id="字体样式修改"><a href="#字体样式修改" class="headerlink" title="字体样式修改"></a>字体样式修改</h2><blockquote><p>参考教程：店长的<a href="https://akilar.top/posts/ebf20e02/">Custom Beautify</a></p></blockquote><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@font-face</span>&#123;</span><br><span class="line">    <span class="attribute">font-family</span>:<span class="string">&#x27;aqqxs&#x27;</span> ;  <span class="comment">/* 字体名自定义即可 */</span></span><br><span class="line">    <span class="attribute">src</span>:<span class="built_in">url</span>(<span class="string">&#x27;https://cdn.jsdelivr.net/gh/2x-ercha/cdn-for-try/fonts/FXAiQingQiXiangSuo.ttf&#x27;</span>); <span class="comment">/* 字体文件路径 */</span></span><br><span class="line">    <span class="attribute">font-display</span> : swap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span>,<span class="selector-tag">h2</span>,<span class="selector-tag">h3</span>,<span class="selector-tag">h4</span>,<span class="selector-tag">h5</span>,<span class="selector-tag">h6</span>,</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-id">#site-name</span>,<span class="selector-tag">span</span><span class="selector-id">#subtitle</span>,<span class="selector-tag">a</span><span class="selector-class">.site-page</span>,</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.title</span>,</span><br><span class="line"><span class="selector-id">#aside-content</span>,</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.article-sort-item-title</span>,</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.article-title</span>,</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.categoryBar-list-link</span>,</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.blog-slider__title</span>,</span><br><span class="line"><span class="selector-class">.article-sort-title</span>,</span><br><span class="line"><span class="selector-class">.tag-cloud-title</span>,</span><br><span class="line"><span class="selector-class">.category-title</span>,</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.category-list-link</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&#x27;aqqxs&#x27;</span>, sans-serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="版权字体微调"><a href="#版权字体微调" class="headerlink" title="版权字体微调"></a>版权字体微调</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.post-copyright</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&#x27;aqqxs&#x27;</span>, sans-serif;</span><br><span class="line">    <span class="attribute">font-size</span>: large</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="首页磁铁字体微调"><a href="#首页磁铁字体微调" class="headerlink" title="首页磁铁字体微调"></a>首页磁铁字体微调</h2><p>其实就是用阴影给分类的标题上了描边</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-class">.categoryBar-list-link</span> &#123;</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">#000000</span>1a <span class="number">1px</span> <span class="number">0</span> <span class="number">0</span>, <span class="number">#000000</span> <span class="number">0</span> <span class="number">1px</span> <span class="number">0</span>, <span class="number">#000000</span> -<span class="number">1px</span> <span class="number">0</span> <span class="number">0</span>, <span class="number">#000000</span>00 <span class="number">0</span> -<span class="number">1px</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="鼠标样式及页脚半透明"><a href="#鼠标样式及页脚半透明" class="headerlink" title="鼠标样式及页脚半透明"></a>鼠标样式及页脚半透明</h2><blockquote><p>参考文章：小康的<a href="https://www.antmoe.com/posts/a811d614/index.html">Hexo 博客之 butterfly 主题优雅魔改系列</a></p></blockquote><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 鼠标样式 */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">cursor</span>: <span class="built_in">url</span>(<span class="string">https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/img/default.cur</span>),</span><br><span class="line">        default;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span>,</span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">cursor</span>: <span class="built_in">url</span>(<span class="string">https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/img/pointer.cur</span>),</span><br><span class="line">        default;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 页脚半透明 */</span></span><br><span class="line"><span class="selector-id">#footer</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,.<span class="number">15</span>);</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">border-top-right-radius</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">border-top-left-radius</span>: <span class="number">20px</span>;</span><br><span class="line">    backdrop-<span class="attribute">filter</span>: <span class="built_in">saturate</span>(<span class="number">100%</span>) <span class="built_in">blur</span>(<span class="number">5px</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#footer</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,.<span class="number">15</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#footer</span> <span class="selector-id">#footer-wrap</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">var</span>(--font-color);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#footer</span> <span class="selector-id">#footer-wrap</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">var</span>(--font-color);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="Twikoo评论框高度"><a href="#Twikoo评论框高度" class="headerlink" title="Twikoo评论框高度"></a>Twikoo评论框高度</h2><p>根据店长的建议修改成了这样：</p><blockquote><ul><li>首先只需要设置最小高度即可，不需要再加一条高度（虽然文本框是超出转换为滚动条的，但是还是要符合开发逻辑才行啊）。</li><li>然后加一条在聚焦状态下的样式，隐藏图片。这样手机端输入的时候不会被背景图片影响文字输入。</li></ul></blockquote><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.tk-input</span><span class="selector-attr">[data-v-619b4c52]</span></span><br><span class="line">  <span class="selector-class">.el-textarea__inner</span>&#123;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">210px</span> <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.el-textarea__inner</span><span class="selector-pseudo">:focus</span>&#123;</span><br><span class="line">      <span class="attribute">background-image</span>: none <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="卡片背景透明度颜色重写"><a href="#卡片背景透明度颜色重写" class="headerlink" title="卡片背景透明度颜色重写"></a>卡片背景透明度颜色重写</h2><p><strong>PS: 这个其实准备重新弄了</strong></p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  <span class="comment">/* --card-bg: #fff; */</span></span><br><span class="line">  --card-bg: <span class="number">#ffefef</span>d9;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> &#123;</span><br><span class="line">  <span class="comment">/* --card-bg: #121212; */</span></span><br><span class="line">  --card-bg: <span class="number">#121212</span>88;</span><br><span class="line">  --btn-hover-<span class="attribute">color</span>: <span class="number">#787878</span>;</span><br><span class="line">  --btn-bg: <span class="number">#1f1f1f</span>;</span><br><span class="line">  --btn-hover-<span class="attribute">color</span>: <span class="number">#ff3f3f</span>;</span><br><span class="line">  --btn-bg: <span class="number">#a153ff</span>;</span><br><span class="line">  <span class="comment">/* --font-color: rgba(255,255,255,0.7); */</span></span><br><span class="line">  <span class="comment">/* --hr-border: rgba(255,255,255,0.4); */</span></span><br><span class="line">  --<span class="attribute">font</span>-<span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>);</span><br><span class="line">  --hr-<span class="attribute">border</span>: <span class="built_in">rgb</span>(<span class="number">161</span>, <span class="number">83</span>, <span class="number">255</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="另外这里给店长打个广告"><a href="#另外这里给店长打个广告" class="headerlink" title="另外这里给店长打个广告"></a>另外这里给店长打个广告</h1><p><strong>butterfly魔改售后服务中心</strong><del>（其实就是店长自己的群）</del></p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src=https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/akicandyroom.jpg alt='🧊Akilarの糖果屋' style='max-height:500px'>]]></content>
      
      
      <categories>
          
          <category> 贰猹随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Course </tag>
            
            <tag> Diary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html入门学习（〇）</title>
      <link href="9661.html"/>
      <url>9661.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>其实这篇时间应该放在一之前的。但我又不太想违背写正确的发布时间。那就随意一下吧~~~</p><p>这里用来记录我学习前端知识的参考和练习的网站，也方便日后的查找。</p><hr><h3 id="菜鸟教程"><a href="#菜鸟教程" class="headerlink" title="菜鸟教程"></a>菜鸟教程</h3><p><a href="https://www.runoob.com/html/html-tutorial.html">菜鸟教程-HTML 教程</a></p><h3 id="educoder的新用途"><a href="#educoder的新用途" class="headerlink" title="educoder的新用途"></a>educoder的新用途</h3><p><a href="https://www.educoder.net/paths/844">Web应用开发——HTML/CSS</a></p><p><a href="https://www.educoder.net/paths/40">JavaScript在线实战：从入门到精通</a></p><hr><p>以后有看到就继续加上去</p><p>同时魔改博客的时候也在实践中学习css和js喽！</p>]]></content>
      
      
      <categories>
          
          <category> 前端入门学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html入门学习（一）</title>
      <link href="10752.html"/>
      <url>10752.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p><strong>卧槽，大年三十我在干嘛。<del>我在水文章（bushi)</del> 我在学新知识</strong></p><hr><p>我其实也不怎么知道我学前端知识干啥。可能只是想有更广的知识面吧，反正<strong>立下了大一下的自学前端知识（<code>html,css,js</code>三件套）的flag</strong></p><p>趁着春节这周ACM不用训练，时间较好安排，不妨开始<code>html</code>喽</p><hr><p>我就不在这里重复说html是什么，做什么的。这里只是作为笔记的整理，适合翻阅查看而已。以下开始正题：</p><hr><h2 id="基本内容"><a href="#基本内容" class="headerlink" title="基本内容"></a>基本内容</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>基础格式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;!DOCTYPE html&gt;</code> 声明这是个html文档（虽然我觉得文件后缀名就能判断出来）</p><p><code>&lt;html&gt;&lt;/html&gt;</code> html的开头结尾</p><p><code>&lt;head&gt;&lt;/head&gt;</code>必要的声明，比如标题，编码方式，还有此文档外部引入的css等等，都在这里声明（此部分不会在网页中显示）</p><p><code>&lt;body&gt;&lt;/body&gt;</code>文档的主体部分</p><p>所以文章的整个基本结构应该是</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">html</span><br><span class="line">- head</span><br><span class="line">- body</span><br></pre></td></tr></table></figure><hr><h2 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h2><p>比较可能会在md里面打的：</p><p><b style="color: red;">常用红色加粗文本</b><br/><code>&lt;b style=&quot;color: red;&quot;&gt;常用红色加粗文本&lt;/b&gt;</code><br><b style="color: orange;">常用橙色加粗文本</b><br/><code>&lt;b style=&quot;color: orange;&quot;&gt;常用橙色加粗文本&lt;/b&gt;</code><br><b style="color: yellow;">常用黄色加粗文本</b><br/><code>&lt;b style=&quot;color: yellow;&quot;&gt;常用黄色加粗文本&lt;/b&gt;</code><br><b style="color: green;">常用绿色加粗文本</b><br/><code>&lt;b style=&quot;color: green;&quot;&gt;常用绿色加粗文本&lt;/b&gt;</code><br><b style="color: cyan;">常用青色加粗文本</b><br/><code>&lt;b style=&quot;color: cyan;&quot;&gt;常用青色加粗文本&lt;/b&gt;</code><br><b style="color: blue;">常用蓝色加粗文本</b><br/><code>&lt;b style=&quot;color: blue;&quot;&gt;常用蓝色加粗文本&lt;/b&gt;</code><br><b style="color: purple;">常用紫色加粗文本</b><br/><code>&lt;b style=&quot;color: purple;&quot;&gt;常用紫色加粗文本&lt;/b&gt;</code><br><strong style="color: violet;">还有strong加粗</strong><br/><code>&lt;strong style=&quot;color: violet;&quot;&gt;还有strong加粗&lt;/strong&gt;</code></p><hr><h2 id="其他常用"><a href="#其他常用" class="headerlink" title="其他常用"></a>其他常用</h2><p><b style="color: white;">b标签是加粗</b><br><strong style="color: cornsilk;">strong标签也是加粗</strong><br><big style="color: red;">big标签是放大</big><br><small style="color: blueviolet;">small标签是缩小</small><br><em style="color: pink;">em是斜体</em><br><i style="color: cornsilk;">i也是斜体</i><br><sup style="color: cyan;">sup上标</sup>正常<sub style="color: cyan;">sub下标</sub><br><ins style="color: orange;">ins标签插入字（下划线）</ins><br><del style="color: violet;">del标签删除字</del></p><hr><h2 id="代码？"><a href="#代码？" class="headerlink" title="代码？"></a>代码？</h2><p>对以下东西比较迷惑</p><p><dfn>定义项目</dfn><br><br><code>一段电脑代码 print("Hello World")</code><br><br><samp>计算机样本</samp><br><br><kbd>键盘输入</kbd><br><br><var>变量</var></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--对以下东西比较迷惑--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dfn</span>&gt;</span>定义项目<span class="tag">&lt;/<span class="name">dfn</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">code</span>&gt;</span>一段电脑代码 print(&quot;Hello World&quot;)<span class="tag">&lt;/<span class="name">code</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">samp</span>&gt;</span>计算机样本<span class="tag">&lt;/<span class="name">samp</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span>键盘输入<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">var</span>&gt;</span>变量<span class="tag">&lt;/<span class="name">var</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--迷惑结束--&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p><abbr title="abbr标签缩写，可以隐藏内容呀">鼠标移到我上边看内容</abbr><br/><code>&lt;abbr title=&quot;abbr标签缩写，可以隐藏内容呀&quot;&gt;鼠标移到我上边看内容&lt;/abbr&gt;</code></p><p><code>&lt;address&gt; </code>标签定义文档作者/所有者的联系信息。<br>如果<code>&lt;address&gt;</code> 元素位于<code>&lt;body&gt;</code>元素内部，则它表示该文档作者/所有者的联系信息。<br>如果<code>&lt;address&gt;</code>元素位于<code> &lt;article&gt;</code> 元素内部，则它表示该文章作者/所有者的联系信息。<br><code>&lt;address&gt;</code> 元素的文本通常呈现为斜体。大多数浏览器会在该元素的前后添加换行。<br>如</p><address>Written by <a href="mailto:noionion@outlook.com">noionion</a>.<br/> Visit us at:<br/><a href="https://noionion.top/">noionion.top</a><br/>HNU univsity Changsha Hunan<br/>Chine</address><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;address&gt;</span><br><span class="line">Written by &lt;a href&#x3D;&quot;mailto:noionion@outlook.com&quot;&gt;noionion&lt;&#x2F;a&gt;.&lt;br&#x2F;&gt; </span><br><span class="line">Visit us at:&lt;br&#x2F;&gt;</span><br><span class="line">&lt;a href&#x3D;&quot;https:&#x2F;&#x2F;noionion.top&#x2F;&quot;&gt;noionion.top&lt;&#x2F;a&gt;&lt;br&#x2F;&gt;</span><br><span class="line">HNU univsity Changsha Hunan&lt;br&#x2F;&gt;</span><br><span class="line">Chine</span><br><span class="line">&lt;&#x2F;address&gt;</span><br></pre></td></tr></table></figure><p>该段落文字从左到右显示。<br/><br><bdo dir="rtl">该段落文字从右到左显示。</bdo><br/><code>&lt;bdo dir=&quot;rtl&quot;&gt;该段落文字从右到左显示。&lt;/bdo&gt;</code></p><blockquote cite="http://www.worldwildlife.org/who/index.html">长文本引用blockquote<br/> 定义引用cite<br/>和md的引用是一样的</blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">blockquote</span> <span class="attr">cite</span>=<span class="string">&quot;http://www.worldwildlife.org/who/index.html&quot;</span>&gt;</span></span><br><span class="line">长文本引用blockquote<span class="tag">&lt;<span class="name">br</span>/&gt;</span> 定义引用cite<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">和md的引用是一样的</span><br><span class="line"><span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&lt;q style=”color: lightblue;”;”&gt;短文本引用q（有点类似于加个双引号？）</q><br/><br/><code>&lt;q style=&quot;color: lightblue;&quot;;&quot;&gt;短文本引用q（有点类似于加个双引号？）&lt;/q&gt;&lt;br/&gt;</code></p><p><cite>使用cite标签来定义作品的标题</cite>&lt;br&gt;<code>&lt;cite&gt;使用cite标签来定义作品的标题&lt;/cite&gt;</code></p><hr><p>暂时写到这里（剩下的还没学啦）</p>]]></content>
      
      
      <categories>
          
          <category> 前端入门学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>butterfly-css-for-hpptalk: 给HPP的说说页魔改主题（适用于Butterfly）</title>
      <link href="14413.html"/>
      <url>14413.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="butterfly-css-for-hpptalk"><a href="#butterfly-css-for-hpptalk" class="headerlink" title="butterfly-css-for-hpptalk"></a>butterfly-css-for-hpptalk</h1><p>一个提供适配Butterfly主题的HexoPlusPlus-talk的css仓库</p><p>github: <a href="https://github.com/2X-ercha/butterfly-css-for-hpptalk">https://github.com/2X-ercha/butterfly-css-for-hpptalk</a></p><hr><h2 id="Bfnoion"><a href="#Bfnoion" class="headerlink" title="Bfnoion"></a>Bfnoion</h2><p>引用地址：<a href="https://cdn.jsdelivr.net/gh/2x-ercha/butterfly-css-for-hpptalk/Butterfly_1.css">https://cdn.jsdelivr.net/gh/2x-ercha/butterfly-css-for-hpptalk/Butterfly_1.css</a></p><p>已对bf主题色适配（已支持魔改颜色后的bf）</p><h3 id="效果图："><a href="#效果图：" class="headerlink" title="效果图："></a>效果图：</h3><h4 id="（未配上作者魔改后的bf前的效果）"><a href="#（未配上作者魔改后的bf前的效果）" class="headerlink" title="（未配上作者魔改后的bf前的效果）"></a>（未配上作者魔改后的bf前的效果）</h4><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/2X-ercha/picture-bed@master/1612706582000.png" alt="light_normal"></p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/2X-ercha/picture-bed@master/1612706593000.png" alt="dark_normal"></p><h4 id="（配上作者魔改后的bf后的效果）"><a href="#（配上作者魔改后的bf后的效果）" class="headerlink" title="（配上作者魔改后的bf后的效果）"></a>（配上作者魔改后的bf后的效果）</h4><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/2X-ercha/picture-bed@master/1612707007000.png" alt="light_revision"></p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/2X-ercha/picture-bed@master/1612707030000.png" alt="dark_revision"></p><hr><h2 id="第二个"><a href="#第二个" class="headerlink" title="第二个"></a>第二个</h2><p>还没出。。。（咕咕咕）</p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic/image/baitian/file_6574840.webp"></p>]]></content>
      
      
      <categories>
          
          <category> 前端入门学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Project </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HPP专用测试文章</title>
      <link href="17660.html"/>
      <url>17660.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>最近博主上手了<a href="https://github.com/ChenYFan">@ChenYFan</a>开发的hexo后台系统<a href="https://github.com/HexoPlusPlus/HexoPlusPlus">HexoPlusPlus</a>，<del>然后成为了HPP测试版的小白鼠</del></p><p>又不想在测试过程中拿去修改其他的文章，所以单开一页专门测试</p><p>以下为日常测试内容</p><hr><h2 id="试一试新建"><a href="#试一试新建" class="headerlink" title="试一试新建"></a>试一试新建</h2><h2 id="试一试更改"><a href="#试一试更改" class="headerlink" title="试一试更改"></a>试一试更改</h2><h2 id="试一试图片上传"><a href="#试一试图片上传" class="headerlink" title="试一试图片上传"></a>试一试图片上传</h2><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/2X-ercha/picture-bed@master/1612602820000.png"></p><h2 id="试一试手机端"><a href="#试一试手机端" class="headerlink" title="试一试手机端"></a>试一试手机端</h2><p>输入法：中文/English</p><h2 id="试一试表情"><a href="#试一试表情" class="headerlink" title="试一试表情"></a>试一试表情</h2><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Dreamy-TZK/iemotion-pic@latest/img/QQ/0.gif"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Dreamy-TZK/iemotion-pic@latest/img/bilibili_tv_gif/doge.gif"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic/image/bilibili2233/[2233%E5%A8%98_%E5%8D%96%E8%90%8C].png"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic/image/Menhera-chan/1.jpg"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic/image/Tsuri-me-ju_mimi/10753776_key@2x.png"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic/image/Mafumafu/199749454.png"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic/image/Snow-Miku/3583066@2x.png"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic/image/Sweetie-Bunny/12311678.png"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic/image/aodamiao/01.gif"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic/image/Heybox/expression_cube.png"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic/image/baitian/file_6574832.webp"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic/image/weisuomeng/1.jpg"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Dreamy-TZK/iemotion-pic@latest/img/%E7%BD%97%E5%B0%8F%E9%BB%91/%E4%BD%A0%E5%A5%BD%E5%91%80.png"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Dreamy-TZK/iemotion-pic@latest/img/%E9%82%A3%E5%85%94/%E3%80%82%E3%80%82%E3%80%82.png"></p><hr><p><a href="mailto:&#72;&#101;&#x78;&#x6f;&#80;&#x6c;&#117;&#115;&#x50;&#x6c;&#x75;&#x73;&#x40;&#49;&#x2e;&#x30;&#46;&#55;">&#72;&#101;&#x78;&#x6f;&#80;&#x6c;&#117;&#115;&#x50;&#x6c;&#x75;&#x73;&#x40;&#49;&#x2e;&#x30;&#46;&#55;</a>测试结束，没有bug</p>]]></content>
      
      
      <categories>
          
          <category> 用于测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Course </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HNU:ACM校队预选寒假训练1.25-1.31-div3-杂题-题解</title>
      <link href="49783.html"/>
      <url>49783.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>题解仅供参考</p><p><a href="https://vjudge.net/contest/419530">编程练习专题（各种杂题）</a></p><p>题外话：我得重新整个实用的大数板子了</p><hr><h1 id="A"><a href="#A" class="headerlink" title="A"></a>A</h1><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>就是个裸的辗转相除法，没什么坑，int就能过</p><h1 id="B"><a href="#B" class="headerlink" title="B"></a>B</h1><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>就是求一堆数里的素数（这题貌似用最简单的判断素数方法就能过）</p><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>可以对前1e7个数用筛法判断存表（不过这题确实没必要）</p><h1 id="C"><a href="#C" class="headerlink" title="C"></a>C</h1><h2 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a>题目大意</h2><p>求1-n的奇数平方和</p><h2 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h2><p>法一：用公式解决（注意<code>n(n+1)(n+2)</code>会超长整数范围）</p><p>法二：预处理打表（核心代码如下）</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> pow2[<span class="number">100001</span>];</span><br><span class="line">pow2[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">100000</span>;i+=<span class="number">2</span>)&#123;</span><br><span class="line">    pow2[i]=i*i+pow2[i<span class="number">-2</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h2><p>打表被老师嘲讽了</p><h1 id="D"><a href="#D" class="headerlink" title="D"></a>D</h1><h2 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h2><p>这题挺坑的，还要在出发点相遇（题目没讲清楚吧）</p><p>具体的解法是，假设输入的数是<code>a/b c/d</code></p><p>化简 a/b 和 c/d 得到新的 a,b,c,d，答案为 lcm(a,c)/gcd(b,d)</p><p>注意分母为1的情况</p><h1 id="E"><a href="#E" class="headerlink" title="E"></a>E</h1><h2 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h2><p>这题是个纯数学题，看平均分后有多少刀是重复的</p><p>即 a+b-gcd(a,b)</p><h1 id="F"><a href="#F" class="headerlink" title="F"></a>F</h1><h2 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a>题目大意</h2><p>求最大质因数是第几个素数</p><h2 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a>题解</h2><p>显然用埃氏筛轻松解决</p><h1 id="G"><a href="#G" class="headerlink" title="G"></a>G</h1><h2 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a>题解</h2><p>显然 c 是 b 的倍数且满足 gcd(a,c)==b 即可</p><p>循环 c 累加 b，找到最小的 c 后直接 break </p><h1 id="H"><a href="#H" class="headerlink" title="H"></a>H</h1><h2 id="题解-6"><a href="#题解-6" class="headerlink" title="题解"></a>题解</h2><p>根据题目可知，一共有三种形式的小数需要我们去转换成分数，分别为:</p><ul><li><p>有限小数：形如 0.2,0.33</p></li><li><p>纯循环小数：形如 0.333333333…</p></li><li><p>非纯循环小数：形如 0.32477777… ，0.24367676767…</p></li></ul><p>显然，无限不循环小数不可能转换为分数（中学知识），而对于上面两种循环小数，我们不妨分情况来讨论。</p><p><strong>1、纯循环小数</strong></p><p>0.33333… * 10 = 3.33333…</p><p>(10 - 1) * 0.33333… = 3</p><p>即 9 * 0.33333… = 3</p><p>所以 0.33333… = 3/9 = 1/3</p><p>再举一个例子</p><p>0.474747… * 100 = 47.474747…</p><p>(100 - 1) * 0.474747… = 47</p><p>即 99 * 0.474747… = 47</p><p>所以 0.474747… = 47/99</p><p>由上述两个例子我们可以发现，纯循环小数化成分数过后其分子就为所循环单元化成的数，分母则全由9组成，位数和循环数的位数相同。</p><p><strong>2、非纯循环小数</strong></p><p>0.4777777… * 10 = 4.7777…</p><p>0.477777… * 100 = 47.77777…</p><p>(100 - 10) * 0.4777777… = 43</p><p>所以 0.4777777… = 43/90</p><p>再举一个例子</p><p>0.323565656… * 1000 = 323.56565656…</p><p>0.323565656… * 100000= 32356.565656…</p><p>(10000 - 1000) * 0.32356565656… = 32033</p><p>所以 0.32356565656… = 32033/99000</p><p>由上述两个例子我们可以发现，非纯循环小数化成分数过后其分子为 非循环部分与第一个循环部分 组成的数减去非循环部分的数，分母则为9与0组成的数，9的位数和循环部分数的位数相同，0的位数则和非循环部分数的位数相同</p><p><strong>PS：对于有限小数，不妨看作是非纯循环小数的一种特例子，即0.3 = 0.30000000</strong></p><h1 id="I"><a href="#I" class="headerlink" title="I"></a>I</h1><h2 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a>题目大意</h2><p>输出[1,2,…,n]的第i个子序列</p><p>自序列的顺序按字典序排序</p><h2 id="题解-7"><a href="#题解-7" class="headerlink" title="题解"></a>题解</h2><p>这题就很有意思了</p><p>对 n=1 而言，子序列为</p><p>[1]</p><p>对 n=2 而言，子序列为</p><p>[1],[1,2]</p><p>[2],[2,1]</p><p>对 n=3 而言，子序列为</p><p>[1],[1,2],[1,2,3],[1,3],[1,3,2]</p><p>[2],[2,1],[2,1,3],[2,3],[2,3,1]</p><p>[3],[3,1],[3,1,2],[3,2],[3,2,1]</p><p>……</p><p>显然可以发现，长度为 n 的序列的子序列 S(n) 满足这样一个关系式：<code>S(n)=n*(S(n-1)+1)</code></p><p>如果按上面的写的话，将 S(n) 个数分为 n 组，每组有 S(n-1)+1 个</p><p>那么第 i 个子序列的开头就很明显了，为 <code>x1=i/(S(n-1)+1)+1</code></p><p>假如 n=3,i=9 ,求出的第9个子序列的第一个数为 <code>x1=2</code></p><p>接下来对第 x1 行处理，去除第一个数，新的序列为</p><p>[1],[1,3]</p><p>[3],[3,1]</p><p>即为序列 [1,3] 的子序列</p><p>所求即为第 <code>i%(S(n-1)+1)-1</code> 个子序列</p><p>以此类推</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> s[<span class="number">21</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">bool</span> t[<span class="number">21</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    s[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=<span class="number">20</span>;i++)</span><br><span class="line">        s[i]=i*(s[i<span class="number">-1</span>]+<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> m;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%d %lld&quot;</span>,&amp;n,&amp;m))&#123;</span><br><span class="line">        <span class="built_in">memset</span>(t,<span class="literal">false</span>,<span class="keyword">sizeof</span>(t));</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> k,num=n;</span><br><span class="line">        <span class="keyword">while</span>(m&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            m--;</span><br><span class="line">            k=m/(s[--num]+<span class="number">1</span>);</span><br><span class="line">            m=m%(s[num]+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">int</span> number=<span class="number">0</span>,i;</span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!t[i])number++;</span><br><span class="line">                <span class="keyword">if</span>(number==k+<span class="number">1</span>)<span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,i);</span><br><span class="line">            t[i]=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(m&gt;<span class="number">0</span>)<span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="J"><a href="#J" class="headerlink" title="J"></a>J</h1><h2 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a>题目大意</h2><p>其实就是最大上升子序列和</p><h2 id="题解-8"><a href="#题解-8" class="headerlink" title="题解"></a>题解</h2><p>DP题一道,dp[i]记录从1-i的最大子序列和，不断维护最大值即可，核心代码如下</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> maxx=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> maxs=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i;j++)</span><br><span class="line">        <span class="keyword">if</span>(num[i]&gt;num[j])</span><br><span class="line">            maxs=max(maxs,dp[j]);</span><br><span class="line">    dp[i]=maxs+num[i];</span><br><span class="line">    maxx=max(maxx,dp[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="K"><a href="#K" class="headerlink" title="K"></a>K</h1><h2 id="题解-9"><a href="#题解-9" class="headerlink" title="题解"></a>题解</h2><p>01背包问题，不过这题反向记录不被录取的最小概率会比较好算</p><p>dp[i]记录的是 i 万美元下不被录取的最小概率，核心代码如下</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> i,j;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10005</span>;i++)</span><br><span class="line">dp[i]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld %lf&quot;</span>,&amp;a[i],&amp;b[i]);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line"><span class="keyword">for</span>(j=n;j&gt;=a[i];j--)</span><br><span class="line">dp[j]=min(dp[j],dp[j-a[i]]*(<span class="number">1</span>-b[i]))</span><br></pre></td></tr></table></figure><h1 id="L"><a href="#L" class="headerlink" title="L"></a>L</h1><h2 id="题解-10"><a href="#题解-10" class="headerlink" title="题解"></a>题解</h2><p>数塔（数字三角形）什么的已经很老套了，这里就不讲了（不过递归会超时）</p><h1 id="M"><a href="#M" class="headerlink" title="M"></a>M</h1><h2 id="题目大意-5"><a href="#题目大意-5" class="headerlink" title="题目大意"></a>题目大意</h2><p>求 N！ 的位数</p><h2 id="题解-11"><a href="#题解-11" class="headerlink" title="题解"></a>题解</h2><p>求位数我们其实比较容易想到的是 log10(i)+1</p><p>log10(N!) = log10(1<em>2</em>L*N) = log10(1) + log10(2) + L + log10(N)</p><p>最后对和取整+1即为答案</p><h1 id="N"><a href="#N" class="headerlink" title="N"></a>N</h1><h2 id="题目大意-6"><a href="#题目大意-6" class="headerlink" title="题目大意"></a>题目大意</h2><p>就是个大数加法板子。。。</p><h2 id="题解-12"><a href="#题解-12" class="headerlink" title="题解"></a>题解</h2><p>略（基本上每个板子都能过吧）</p><h1 id="O"><a href="#O" class="headerlink" title="O"></a>O</h1><h2 id="题目大意-7"><a href="#题目大意-7" class="headerlink" title="题目大意"></a>题目大意</h2><p>大数累乘求 N!</p><h2 id="题解-13"><a href="#题解-13" class="headerlink" title="题解"></a>题解</h2><p><code>10000!</code>足足有近36000位，所以考虑了下压位处理</p><p>这题卡了空间没卡时间，打表反而会 MLE，每次运算求解就可</p><p>核心代码如下：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line">a[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    <span class="keyword">int</span> k=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">10000</span>;j++)&#123;</span><br><span class="line">        a[j]=i*a[j]+k;</span><br><span class="line">        k=a[j]/<span class="number">10000</span>;</span><br><span class="line">        a[j]%=<span class="number">10000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">10000</span>; ; i--)</span><br><span class="line">    <span class="keyword">if</span>(a[i] != <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a[i]);</span><br><span class="line">i--;</span><br><span class="line"><span class="keyword">for</span>( ; i != <span class="number">-1</span>; i--)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%04d&quot;</span>,a[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong>PS:注意 0! =1</strong></p><h1 id="P"><a href="#P" class="headerlink" title="P"></a>P</h1><h2 id="题目大意-8"><a href="#题目大意-8" class="headerlink" title="题目大意"></a>题目大意</h2><p>求每组大数和</p><h2 id="题解-14"><a href="#题解-14" class="headerlink" title="题解"></a>题解</h2><p>还是个大数板子题，不过注意这题有个单独的数据 <code>0</code> 比较恶心</p><h1 id="Q"><a href="#Q" class="headerlink" title="Q"></a>Q</h1><h2 id="题目大意-9"><a href="#题目大意-9" class="headerlink" title="题目大意"></a>题目大意</h2><p>求 R 的 n 次方根</p><h2 id="题解-15"><a href="#题解-15" class="headerlink" title="题解"></a>题解</h2><p>对整数部分和小数部分分别运算，注意最后输出格式（小数的乘法确实难搞）</p><h1 id="R"><a href="#R" class="headerlink" title="R"></a>R</h1><h2 id="题目大意-10"><a href="#题目大意-10" class="headerlink" title="题目大意"></a>题目大意</h2><p>求区间内的菲波那契数的个数</p><h2 id="题解-16"><a href="#题解-16" class="headerlink" title="题解"></a>题解</h2><p>这题我采用的是先打表后查找的方式，菲波那契数的第500项位数就超过100位了</p><p>（然后大数比较我写错了，找BUG找了半天）</p><p>普通查找即可（不需要二分就可以过）</p><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> fb[<span class="number">1006</span>][<span class="number">504</span>] =&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> a1[<span class="number">504</span>],b1[<span class="number">504</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">min_fb_a1</span><span class="params">(<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">200</span>; ; i--)</span><br><span class="line">        <span class="keyword">if</span>(fb[m][i] != <span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">for</span>(j = <span class="number">200</span>; ; j--)</span><br><span class="line">        <span class="keyword">if</span>(a1[j] != <span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span>(i&lt;j)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(i&gt;j)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>( ; i != <span class="number">-1</span>; i--)</span><br><span class="line">        <span class="keyword">if</span>(fb[m][i] &lt; a1[i])</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(fb[m][i] &gt; a1[i])</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">min_deng_fb_b1</span><span class="params">(<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">200</span>; ; i--)</span><br><span class="line">        <span class="keyword">if</span>(fb[m][i] != <span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">for</span>(j = <span class="number">200</span>; ; j--)</span><br><span class="line">        <span class="keyword">if</span>(b1[j] != <span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span>(i&lt;j)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(i&gt;j)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>( ; i != <span class="number">-1</span>; i--)</span><br><span class="line">        <span class="keyword">if</span>(fb[m][i] &lt; b1[i])</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(fb[m][i] &gt; b1[i])</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, k;</span><br><span class="line">    <span class="built_in">string</span> a,b;</span><br><span class="line">    fb[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    fb[<span class="number">2</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">3</span>; i &lt;= <span class="number">500</span>; i++)&#123;</span><br><span class="line">        k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt;= <span class="number">200</span>; j++)&#123;</span><br><span class="line">            fb[i][j] = fb[i<span class="number">-1</span>][j]+fb[i<span class="number">-2</span>][j]+k;</span><br><span class="line">            k = fb[i][j]/<span class="number">10</span>;</span><br><span class="line">            fb[i][j] = fb[i][j]%<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a==<span class="string">&quot;0&quot;</span>&amp;&amp;b==<span class="string">&quot;0&quot;</span>)<span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">memset</span>(a1,<span class="number">0</span>,<span class="keyword">sizeof</span>(a1));</span><br><span class="line">        <span class="built_in">memset</span>(b1,<span class="number">0</span>,<span class="keyword">sizeof</span>(b1));</span><br><span class="line">        <span class="keyword">for</span>(i=a.length()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)a1[a.length()<span class="number">-1</span>-i]=<span class="keyword">int</span>(a[i])<span class="number">-48</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=b.length()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)b1[b.length()<span class="number">-1</span>-i]=<span class="keyword">int</span>(b[i])<span class="number">-48</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> start,end;</span><br><span class="line">        <span class="keyword">for</span>(start=<span class="number">1</span>;start&lt;=<span class="number">500</span>;start++)</span><br><span class="line">            <span class="keyword">if</span>(!min_fb_a1(start))<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span>(start!=<span class="number">1</span>)start--;</span><br><span class="line">        <span class="keyword">for</span>(end=start;end&lt;=<span class="number">500</span>;end++)</span><br><span class="line">            <span class="keyword">if</span>(!min_deng_fb_b1(end))<span class="keyword">break</span>;</span><br><span class="line">        end--;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,end-start);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="S"><a href="#S" class="headerlink" title="S"></a>S</h1><h2 id="题解-17"><a href="#题解-17" class="headerlink" title="题解"></a>题解</h2><p>继续我的大数打表行为emmm</p><h1 id="T"><a href="#T" class="headerlink" title="T"></a>T</h1><h2 id="题解-18"><a href="#题解-18" class="headerlink" title="题解"></a>题解</h2><p>跟大数加法没太大区别，只不过变成头尾补0了</p><h1 id="U"><a href="#U" class="headerlink" title="U"></a>U</h1><h2 id="题解-19"><a href="#题解-19" class="headerlink" title="题解"></a>题解</h2><p>这题我的解法跟别人可能不太一样。。。我直接让组合出的数做为下标存到布尔数组里，再枚举数组值为 true 的下标（暴力不需要考虑重复）</p><p>太丢脸了就不放代码了</p><h1 id="V"><a href="#V" class="headerlink" title="V"></a>V</h1><h2 id="题目大意-11"><a href="#题目大意-11" class="headerlink" title="题目大意"></a>题目大意</h2><p>已知树的前根中根遍历，求后根遍历</p><h2 id="题解-20"><a href="#题解-20" class="headerlink" title="题解"></a>题解</h2><p>这题也是老题了，熟悉这三种遍历方式的自然知道怎么判断树的根节点（不需要构建树）</p><h1 id="W"><a href="#W" class="headerlink" title="W"></a>W</h1><h2 id="题目大意-12"><a href="#题目大意-12" class="headerlink" title="题目大意"></a>题目大意</h2><ul><li><p>1，2是友谊数</p></li><li><p>如果 a,b （可相同）是友谊数，那么 ab+a+b 也是友谊数</p></li></ul><p>求 n 是不是友谊数</p><h2 id="题解-21"><a href="#题解-21" class="headerlink" title="题解"></a>题解</h2><p>这是道数学题。可以发现公式</p><p>n+1 = ab+a+b+1 = (a+1)(b+1)</p><p>又因为所有友谊数都是由 1,2 衍生，可以知道 n+1 可以表示成 pow(2,x)*pow(3,y) 的形式</p><p>判断 n 是否满足上述结构即可</p>]]></content>
      
      
      <categories>
          
          <category> C++学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何实现校园疫情防控自动打卡</title>
      <link href="7431.html"/>
      <url>7431.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><div class="note warning simple"><p><strong>免责声明</strong> 本教程仅提供参考学习使用，若读者参考本教程编写脚本后违反相关法律法规造成损失，将由读者自行承担，教程所有者不承担一切责任！</p></div><div class="note warning simple"><p><strong>请在法律循序范围内自行参考制作自己的打卡脚本，当发生发烧等异常现象是仍需如实填报</strong></p></div><p><strong>此教程针对有爬虫基础的同学编写</strong></p><p>本来是想开源的，但考虑到前阵子的健康码APP事件，以及自动打卡扩散出去实际上是影响疫情防控的行为，<del>还有水一篇博文的需要</del></p><p>就决定写教程了（本教程分几次写完，时间不定）</p><p>理论上来说，只要是能用网页进入打卡页面的打卡网站，都可以参考本教程实现。身在湖大，就用湖大的疫情防控打卡<strong>举个栗子</strong>了</p><hr><h2 id="教程分三步"><a href="#教程分三步" class="headerlink" title="教程分三步"></a>教程分三步</h2><p>打卡-微信提醒-自动化</p><h2 id="你需要"><a href="#你需要" class="headerlink" title="你需要"></a>你需要</h2><ul><li>一个Github账号</li><li>微信</li></ul><p>教程开始！</p><hr><h1 id="用Python实现打卡功能"><a href="#用Python实现打卡功能" class="headerlink" title="用Python实现打卡功能"></a>用Python实现打卡功能</h1><p>最开始想的是用模拟浏览器的方式进行点击处理，但未免过于复杂。后来从大佬那了解到只要知道登录和打卡时网页发送了什么数据给后台(post)就可</p><p>打开<a href="https://fangkong.hnu.edu.cn/app/#/login">湖大的打卡界面</a>，进行登录，康康网页发送了些什么</p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20210124220537.png"></p><p>找到右侧的login文件并查看它的请求内容，显然，Code是我们的账号，Password是我们的密码，VerCode是验证码，那Token又是什么东西呢？</p><p>回到登录页，刷新验证码，网络会得到两个传输文件</p><p>可以看到，它向 <a href="https://fangkong.hnu.edu.cn/api/v1/account/getimgvcode">https://fangkong.hnu.edu.cn/api/v1/account/getimgvcode</a> 这个网址get了一下，然后得到了响应，显然响应得到的token就是了</p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20210124221019.png"></p><p>通过检索网页html可以得到，这个验证码的地址格式为</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;https://fangkong.hnu.edu.cn/imagevcode?token=&quot;</span> + token</span><br></pre></td></tr></table></figure><p>所以第一步要登录所发送的数据就剩验证码内容了</p><h2 id="step-1-爬取验证码并解析"><a href="#step-1-爬取验证码并解析" class="headerlink" title="step 1: 爬取验证码并解析"></a>step 1: 爬取验证码并解析</h2><p>爬取验证码的操作就和爬图片没什么区别,只是前面先加了一步爬取token的操作（这里的请求头不做严格要求）</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">token_json = requests.get(<span class="string">&quot;https://fangkong.hnu.edu.cn/api/v1/account/getimgvcode&quot;</span>, headers=headers_1)</span><br></pre></td></tr></table></figure><p>对爬取的数据解码成字典并取出token</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">data = json.loads(token_json.text)</span><br><span class="line">token = data[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;Token&quot;</span>]</span><br></pre></td></tr></table></figure><p>爬验证码并保存</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">img_url = <span class="string">&quot;https://fangkong.hnu.edu.cn/imagevcode?token=&quot;</span> + token</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;img.jpg&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> img:</span><br><span class="line">    img.write(requests.get(img_url).content)</span><br></pre></td></tr></table></figure><p>为了自动化方便一些，这里采用在线调用接口的方式进行（接口来自于百度飞桨OCR识别）</p><blockquote><p><strong>这里安利一篇教程（来自大二学长）</strong>：<a href="https://zhuanlan.zhihu.com/p/342405677">使用Python快速实现图片文字识别（30行代码）</a></p></blockquote><p>直接放代码（我也是直接<code>ctrl</code>+<code>c</code>和<code>ctrl</code>+<code>v</code>过来的）</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;img.jpg&quot;</span>,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    img = base64.b64encode(f.read())</span><br><span class="line">data = <span class="string">&#x27;&#123;&quot;image&quot;:&quot;%s&quot;&#125;&#x27;</span>%<span class="built_in">str</span>(img)[<span class="number">2</span>:]</span><br><span class="line"></span><br><span class="line">response = requests.post(<span class="string">&#x27;https://www.paddlepaddle.org.cn/paddlehub-api/image_classification/chinese_ocr_db_crnn_mobile&#x27;</span>, headers=headers_1, data=data)</span><br><span class="line">result = response.json()[<span class="string">&#x27;result&#x27;</span>][<span class="number">0</span>][<span class="string">&quot;data&quot;</span>][<span class="number">0</span>][<span class="string">&quot;text&quot;</span>]</span><br></pre></td></tr></table></figure><p>result就是我们的验证码内容了（识别率还挺高的）</p><h2 id="step-2-登录"><a href="#step-2-登录" class="headerlink" title="step 2: 登录"></a>step 2: 登录</h2><p>登录需要发送的信息在上文已经说明了，是一个JSON字符串 <strong>(注意键值对都是字符串（除了null）)</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&quot;Code&quot;</span>:<span class="string">&quot;2020****0131&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Password&quot;</span>:<span class="string">&quot;**********&quot;</span>,</span><br><span class="line">    <span class="string">&quot;WechatUserinfoCode&quot;</span>:null, <span class="comment"># 非必要</span></span><br><span class="line">    <span class="string">&quot;VerCode&quot;</span>:result,</span><br><span class="line">    <span class="string">&quot;Token&quot;</span>:token</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我们可以向网页发送请求了！</p><p>为了保持会话（服务器才知道你登录和提交打卡信息用的是一个号），这里<strong>建立一个临时会话</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">session = requests.Session()</span><br></pre></td></tr></table></figure><p>然后复制粘贴再打引号你的请求头 <strong>(注意一定要login文件的headers,和上面爬验证码和解析验证码用的headers_1不同，这里记为headers_2)</strong></p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20210124223843.png"></p><p>然后post你的账号密码验证码（注意url也是login文件的请求地址，记得对data做json字符串处理）</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">response = session.post(<span class="string">&quot;https://fangkong.hnu.edu.cn/api/v1/account/login&quot;</span>, headers=headers_2, data=json.dumps(data))</span><br></pre></td></tr></table></figure><p>如果得到的<code>response.json()[&quot;code&quot;]</code>不为0，那么验证码错误，需要重新登录（百度的OCR也有一定概率出错的）</p><p>至此，登录部分就完成啦！</p><h2 id="step-3-打卡"><a href="#step-3-打卡" class="headerlink" title="step 3: 打卡"></a>step 3: 打卡</h2><p>我们试着打卡一次，得到的请求如下（因为今天已经打卡过了，我也不记得打卡时网络传输的文件是啥，我只能找一下昨天的截图</p><p>唉，找不到</p><p>大概就这些数据吧</p><blockquote><p>已经更新成<code>1/29</code>的新版本了</p></blockquote><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">data = &#123;</span><br><span class="line">  <span class="string">&quot;RealProvince&quot;</span>:<span class="string">&quot;湖南省&quot;</span>,</span><br><span class="line">  <span class="string">&quot;RealCity&quot;</span>:<span class="string">&quot;长沙市&quot;</span>,</span><br><span class="line">  <span class="string">&quot;RealCounty&quot;</span>:<span class="string">&quot;岳麓区&quot;</span>,</span><br><span class="line">  <span class="string">&quot;RealAddress&quot;</span>:<span class="string">&quot;麓山南路湖南大学德智园学生公寓x-xxx&quot;</span>,</span><br><span class="line">  <span class="comment"># 以下0表示否，1表示是</span></span><br><span class="line">  <span class="string">&quot;IsNormalTemperature&quot;</span>:<span class="string">&quot;1&quot;</span>,  <span class="comment"># 是否体温正常（现版本必填）</span></span><br><span class="line">  <span class="string">&quot;IsInCampus&quot;</span>:<span class="string">&quot;0&quot;</span>,    <span class="comment"># 是否在校（现版本必填）</span></span><br><span class="line">  <span class="comment"># 以下省略“本人及亲属”</span></span><br><span class="line">  <span class="string">&quot;IsUnusual&quot;</span>:<span class="string">&quot;0&quot;</span>,    <span class="comment"># 是否有不良反应（现版本必填）</span></span><br><span class="line">  <span class="string">&quot;UnusualInfo&quot;</span>:<span class="string">&quot;&quot;</span>,   <span class="comment"># 不良反应情况</span></span><br><span class="line">  <span class="string">&quot;IsTouch&quot;</span>:<span class="string">&quot;0&quot;</span>,      <span class="comment"># 是否接触（现版本必填）</span></span><br><span class="line">  <span class="string">&quot;IsInsulated&quot;</span>:<span class="string">&quot;0&quot;</span>,  <span class="comment"># 是否隔离</span></span><br><span class="line">  <span class="string">&quot;IsSuspected&quot;</span>:<span class="string">&quot;0&quot;</span>,  <span class="comment"># 是否疑似</span></span><br><span class="line">  <span class="string">&quot;IsDiagnosis&quot;</span>:<span class="string">&quot;0&quot;</span>,  <span class="comment"># 是否确诊</span></span><br><span class="line">  <span class="string">&quot;dailyinfo&quot;</span>:&#123;</span><br><span class="line">    <span class="string">&quot;IsVia&quot;</span>:<span class="string">&quot;0&quot;</span>,      <span class="comment"># 是否从中高风险地区返回（现版本必填）</span></span><br><span class="line">    <span class="string">&quot;DateTrip&quot;</span>:<span class="string">&quot;&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和上面一样post数据即可 <strong>（注意是<code>session.post()</code>而不是<code>requests.post()</code>）</strong></p><p>提交的url为<a href="https://fangkong.hnu.edu.cn/api/v1/clockinlog/add%EF%BC%8C">https://fangkong.hnu.edu.cn/api/v1/clockinlog/add，</a> 请求头和登录时的请求头headers_2一样即可。</p><p>如果你要查看结果</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">msg = response.json()[<span class="string">&quot;msg&quot;</span>]</span><br><span class="line">print(msg)</span><br></pre></td></tr></table></figure><p>即可，如果打卡成功返回的信息即为<code>成功</code></p><p>至此，你已经可以实现一键打卡了！</p><hr><h1 id="微信提醒"><a href="#微信提醒" class="headerlink" title="微信提醒"></a>微信提醒</h1><p>这里安利一个应用 <a href="http://sc.ftqq.com/3.version">server酱</a> 。你可以向指定的网页发送一个get/post请求来达到微信推送的目的。</p><p>server酱的登录就需要开头说到的github账号了。如果你没有github的账号，可以点此去注册一个 <a href="https://github.com/">https://github.com</a></p><p>登录后根据官网上的提示绑定微信号，获取你的SCKEY。然后在你代码你需要的地方嵌入请求即可</p><p>例如，我在打卡成功后嵌入这样一段代码（其中sckey就是server提供的SCKEY字符串，msg是上文打卡时返回的信息）：</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">requests.get(<span class="string">&quot;http://sc.ftqq.com/&quot;</span>+ sckey +<span class="string">&quot;.send?text=打卡成功啦！&amp;desp=&quot;</span> + msg)</span><br></pre></td></tr></table></figure><p>打卡成功会给我发送如下消息：</p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/1.jpg" alt="打卡消息通知"><br><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/2.jpg" alt="打卡成功"><br><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/3.jpg" alt="今天已经打卡过了"></p><hr><h1 id="利用github-action实现自动化"><a href="#利用github-action实现自动化" class="headerlink" title="利用github action实现自动化"></a>利用github action实现自动化</h1><p>github账号实现微信提醒其实只是次要部分，其真正的用途实际上是实现自动化打卡</p><p>毕竟你不太可能24小时开着电脑，也不太可能白嫖服务器 <del>(如果能的话麻烦告诉我，我也要！)</del></p><h2 id="step-1-设置TOKEN-如果之前已经设置过，请跳过此步"><a href="#step-1-设置TOKEN-如果之前已经设置过，请跳过此步" class="headerlink" title="step 1:设置TOKEN (如果之前已经设置过，请跳过此步)"></a>step 1:设置TOKEN (如果之前已经设置过，请跳过此步)</h2><p>鼠标放在右上角，选择 <code>setting</code> <del>(这边直接偷走小康的图，懒得自己截图上传了)</del></p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/blogimg/picbed@latest/2020/05/14/a81f88e80fd7105d7cc3e1844970e8bd.png"></p><p>点击 <code>Developer settings</code>。</p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/blogimg/picbed@latest/2020/05/14/66df62fbc0d51403fcdc8223c4b6ce52.png"></p><p>选择 <code>Personal access tokens</code>，添加一个新的 TOKEN。</p><p>这个 TOKEN 主要使用来启动 actions 和上传结果用的。</p><p>设置名字为 <code>GITHUB_TOKEN</code> , 然后勾选 <code>repo</code> , <code>admin:repo_hook</code> , <code>workflow</code> 等选项，最后点击 <code>Generate token</code> 即可。</p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/blogimg/picbed@latest/2020/05/15/23ee2808dce8dab17e06107d1ddaf5d6.png"></p><p>名字请务必使用 <code>GITHUB_TOKEN</code> 。</p><h2 id="step-2-编写action配置文件"><a href="#step-2-编写action配置文件" class="headerlink" title="step 2: 编写action配置文件"></a>step 2: 编写action配置文件</h2><p>github会自动对 <code>.github/workflows/</code> 目录下的 <code>xxx.yml</code> 自动运行。例如我的目录结构为：</p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20210128085105.png"></p><p>其中的 <code>AutoClockIn.py</code> 就是打卡的程序代码</p><p>yml代码说明：</p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20210128085719.png"></p><blockquote><p><strong>1</strong> 为自动运行的时间，遵循 <code>UTF-0</code> 时间，+8h 后才是北京时间。如果想自行设定其他时间可以百度<code>cron表达式在线转换</code>,然后删除年和秒的部分。</p></blockquote><blockquote><p><strong>2</strong> 为手动运行的时间，点仓库那个<code>star</code>(<code>unstar</code>要多点一次)就可以手动运行啦！</p></blockquote><p>其他的代码注释应该看得懂，看不懂照着打就是了。</p><h2 id="step-3-创建仓库"><a href="#step-3-创建仓库" class="headerlink" title="step 3: 创建仓库"></a>step 3: 创建仓库</h2><p>这里建议创建个私有仓库（<strong>公开被白嫖后出事你是负责任的</strong>，免责声明可能都救不了你）</p><p>（而且<strong>公开的话意味着你的账号密码公开</strong>，除非你像我一样采用了密钥处理） <del>(什么，你想学？我这里不讲这个东西)</del></p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20210128091623.png"></p><p>熟悉git操作的我就不多说了</p><p>不熟悉也没关系，我们手动创建也可</p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20210128094701.png"></p><p>然后建立你的py文件并把打卡代码复制上去</p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20210128094908.png"></p><p>创建文件夹类似 <code>/github</code> ，同样的，我们创建yml文件并复制粘贴代码</p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20210128095424.png"></p><p><strong>这里再次强调文件目录结构要和上面截图的一样！！！</strong></p><p>全部保存完后可以启动试试啦！</p><h2 id="step-4-启动action"><a href="#step-4-启动action" class="headerlink" title="step 4: 启动action"></a>step 4: 启动action</h2><p>为了保证自动的正常进行，手动启动调试是一个好习惯</p><p>点击仓库右上角的 <code>star</code> 按钮，然后点击 <code>actions</code></p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20210128100003.png"></p><p>成功的话应该是这样的（因为我已经打卡好多天了，所以记录挺多的）</p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20210128100249.png"></p><hr><div class="note warning simple"><p>最后再次强调，当发生发烧等异常现象是仍需如实填报！！！</p></div><hr><h1 id="完结撒花！"><a href="#完结撒花！" class="headerlink" title="完结撒花！"></a>完结撒花！</h1>]]></content>
      
      
      <categories>
          
          <category> 实用项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Project </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Twikoo-Magic: 一个适用于Twikoo评论系统和HexoPlusPlus的表情仓库</title>
      <link href="4712.html"/>
      <url>4712.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="Twikoo-Magic"><a href="#Twikoo-Magic" class="headerlink" title="Twikoo-Magic"></a>Twikoo-Magic</h1><p>github仓库地址：<a href="https://github.com/2X-ercha/Twikoo-Magic">https://github.com/2X-ercha/Twikoo-Magic</a></p><h3 id="更新说明"><a href="#更新说明" class="headerlink" title="更新说明"></a>更新说明</h3><h4 id="2021-1-15"><a href="#2021-1-15" class="headerlink" title="2021/1/15"></a>2021/1/15</h4><blockquote><p><strong>基于2021/1/14 <a href="https://twikoo.js.org/">Twikoo</a> 更新<code>1.1.0-beta</code>，所有表情都将以缩写形式（如:[ text ]:）输出。1/14之前本仓库有部分表情text缺失及重复, 导致无法正常使用表情</strong><br><strong>1/14后的所有表情json列表已全部更新，已适配<code>Twikoo@1.1.0-beta</code>及此后的版本</strong><br><strong>此前版本所造成的不便作者深感抱歉</strong></p></blockquote><h4 id="2021-2-4"><a href="#2021-2-4" class="headerlink" title="2021/2/4"></a>2021/2/4</h4><blockquote><p>对<a href="https://github.com/ChenYFan">@ChenYFan</a>开发的hexo后台系统<a href="https://github.com/HexoPlusPlus/HexoPlusPlus">HexoPlusPlus</a>也可以直接适配</p></blockquote><h4 id="2021-3-16"><a href="#2021-3-16" class="headerlink" title="2021/3/16"></a>2021/3/16</h4><blockquote><p>小康的表情速查站点jsd源失效（小康github号被封了），将逐步搬迁一部分表情包加入Twikoo-Magic</p></blockquote><h3 id="oss镜像站"><a href="#oss镜像站" class="headerlink" title="oss镜像站"></a>oss镜像站</h3><p>备用的json位于文件夹Class_oss中，图床采用阿里云oss，国内访问速度较快（不过使用了镜像站的json的话记得自己改一下表情组的名字，同时<strong>不要滥用备用站点！！！</strong></p><p><strong>访问量</strong>（自2021.1.6 00:00:00）</p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://count.getloli.com/get/@2X-ercha@Twikoo-Magic?theme=gelbooru"></p><h3 id="白嫖提示"><a href="#白嫖提示" class="headerlink" title="白嫖提示"></a>白嫖提示</h3><blockquote><p>建议白嫖的各位大大们去<a href="https://github.com/2X-ercha/Twikoo-Magic/issues/1">issue#1</a>留言 <del>(不妨给本仓库点个star？)</del></p></blockquote><blockquote><p>本仓库不适配 Valine，如果想找到可以直接用于 valine.json 的表情仓库，建议右转<a href="https://github.com/GamerNoTitle/Valine-Magic">Valine-Magic</a></p></blockquote><blockquote><p>同样适配 Twikoo 的表情仓库还有<a href="https://emotion.xiaokang.me/">小康的表情速查</a>，<strong>在此感谢小康采用了我的oss镜像源！</strong></p></blockquote><h3 id="Twikoo-HexoPlusPlus"><a href="#Twikoo-HexoPlusPlus" class="headerlink" title="Twikoo | HexoPlusPlus"></a>Twikoo | HexoPlusPlus</h3><p>如果采用主站，请直接点击<strong>表情速览</strong>的文字链接；采用oss站点请点击文字链接下方的 <code>oss</code> 链接 </p><p>请注意：如果你想添加多个分类，请记得在每个分类(除了最后一个）的最后一个表情后面加个<code>,</code>否则Twikoo无法识别。</p><p>列表位于对应链接的json文件中。</p><p>复制的时候不要将头尾的 <code>&#123;&#125;</code> 复制进去呀！</p><p>如果你有新的表情包想要加入，你可以提出issue，或者直接发到<a href="mailto:noionion@outlook.com">noionion@outlook.com</a>，并注上你的ID和表情包名字（中文英文都需要）</p><h3 id="表情分类"><a href="#表情分类" class="headerlink" title="表情分类"></a>表情分类</h3><p>为方便阅读，这里提供的json均未压缩。</p><p><strong>表情速览</strong></p><table><thead><tr><th align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://valinecdn.bili33.top/bilibiliHotKey/7.jpg"></th><th align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://valinecdn.bili33.top/bilibilitv/[tv_doge].png"></th><th align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://valinecdn.bili33.top/bilibili2233/[2233%E5%A8%98_%E7%AC%AC%E4%B8%80].png"></th></tr></thead><tbody><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/bilibiliHotKey">哔哩哔哩热词系列</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/bilibilitv">哔哩哔哩小电视系列</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/bilibili2233">哔哩哔哩2233娘系列</a></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/bilibiliHotKey">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/bilibilitv">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/bilibili2233">oss</a></td></tr><tr><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://valinecdn.bili33.top/alu/%E4%B8%AD%E6%9E%AA.png"></td><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src='https://valinecdn.bili33.top/Menhera-chan/5.jpg' width=120 height=102></img></td><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://valinecdn.bili33.top/HONKAI3-Daily/14.gif"></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/alu">阿鲁alu系列</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/Menhera-chan">メンヘラちゃん(Menhera-chan)系列表情包</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/HONKAI3-Daily">HONKAI崩坏3 日常篇</a></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/alu">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/Menhera-chan">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/HONKAI3-Daily">oss</a></td></tr><tr><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://valinecdn.bili33.top/HONKAI3-Star/3.gif"></td><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://valinecdn.bili33.top/HONKAI3-Crayon/16.gif"></td><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://valinecdn.bili33.top/HONKAI3-Pure/13.gif"></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/HONKAI3-Star">HONKAI崩坏3 观星篇</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/HONKAI3-Crayon">HONKAI崩坏3 蜡笔日常篇</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/HONKAI3-Pure">HONKAI崩坏3 纯色日常篇</a></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/HONKAI3-Star">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/HONKAI3-Crayon">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/HONKAI3-Pure">oss</a></td></tr><tr><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src='https://valinecdn.bili33.top/HONKAI3-Stan/4f921b8ad8c16f3d2c73e3c04c5735ca9b41187b.gif' width=104 height=74.4></td><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src='https://valinecdn.bili33.top/HONKAI3-AIChan/d65b36ccae610bc4479209cd6e62bb91b0f76188.jpg' width=125 height=111></img></td><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src='https://valinecdn.bili33.top/HONKAI3-Durandal-Search/f1b9a456587638e488d93ccaa95dde59aef3af01.gif' height=100 width=100></img></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/HONKAI3-Stan">HONKAI崩坏3 史丹</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/HONKAI3-AIChan">HONKAI崩坏3 爱酱</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/HONKAI3-Durandal-Search">HONKAI崩坏3 目标！幽兰黛尔</a></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/HONKAI3-Stan">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/HONKAI3-AIChan">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/HONKAI3-Durandal-Search">oss</a></td></tr><tr><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src='https://valinecdn.bili33.top/HONKAI3-MEI/bf68423446465d396d3cbd8856882b5e9fb1c0c7.gif' width=120 height=120></td><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src='https://valinecdn.bili33.top/HONKAI3-NEWYEAR-2019/dc1a2b2032fad29373fe8460d4ad89ca848355a9.jpg' width=120 height=120></td><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://valinecdn.bili33.top/Tsuri-me-ju_mimi/10753793_key@2x.png"></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/HONKAI3-MEI">HONKAI崩坏3 芽衣的剑道修行</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/HONKAI3-NEWYEAR-2019">HONKAI崩坏3 2019新年</a></td><td align="center"><a href="https://github.com/2X-ercha/Twikoo-Magic/tree/master/Classification/Tsuri-me-ju_mimi">つり目獣耳スタンプ(Sticker of the slant eyes &amp; cat girl)</a></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/HONKAI3-MEI">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/HONKAI3-NEWYEAR-2019">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/Tsuri-me-ju_mimi">oss</a></td></tr><tr><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://valinecdn.bili33.top/Arcaea/184064198.png" style="zoom:50%;" /></td><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://valinecdn.bili33.top/Mafumafu/199749477.png" style="zoom:50%;" /></td><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://valinecdn.bili33.top/weibo/d_jiyan.png"></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/Arcaea">Arcaea</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/MafuMafu">動く！まふまふスタンプ（ねこ）Mafumafu Animation sticker (cat)</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/weibo">微博原生表情包</a></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/Arcaea">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/MafuMafu">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/weibo">oss</a></td></tr><tr><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://valinecdn.bili33.top/Tieba-New/image_emoticon25.png"></td><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://valinecdn.bili33.top/Snow-Miku/3583066@2x.png" style="zoom:50%;" /></td><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://valinecdn.bili33.top/Sweetie-Bunny/12311679.png" style="zoom:50%;" /></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/Tieba-New">百度贴吧原生表情包</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/Snow-Miku">Snow Miku雪初音表情包（LINE）</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/Sweetie-Bunny">うさみみ少女（SWEETIE BUNNY）</a></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/Tieba-New">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/Snow-Miku">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/Sweetie-Bunny">oss</a></td></tr><tr><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://valinecdn.bili33.top/Little-Bad/我们一起做坏坏的事.jpg" style="zoom:50%;" /></td><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://valinecdn.bili33.top/Yurui-Neko/029.png" style="zoom:50%;" /></td><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://valinecdn.bili33.top/Cute-Emoji/010.png" style="zoom:50%;" /></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/Little-Bad">小坏坏表情包</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/Yurui-Neko">Yurui-Neko</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/Cute-Emoji">Cute-Emoji</a></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/Little-Bad">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/Yurui-Neko">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/Cute-Emoji">oss</a></td></tr><tr><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://valinecdn.bili33.top/Set667/032.png" style="zoom:50%;" /></td><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://valinecdn.bili33.top/Marup/038.png" style="zoom:50%;" /></td><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://valinecdn.bili33.top/Convenience-Store-Notes2/010.png" style="zoom:50%;" /></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/Set667">Set667</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/Marup">Marup</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/Convenience-Store-Notes2">Convenience Store Notes2</a></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/Set667">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/Marup">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/Convenience-Store-Notes2">oss</a></td></tr><tr><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://valinecdn.bili33.top/Coolapk/coolapk_emotion_71.png"></td><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://valinecdn.bili33.top/aodamiao/01.gif"></td><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://valinecdn.bili33.top/lengtu/04.gif"></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/Coolapk">Coolapk酷安</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/aodamiao">aodamiao嗷大喵</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/lengtu">lengtu冷兔</a></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/Coolapk">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/aodamiao">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/lengtu">oss</a></td></tr><tr><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://valinecdn.bili33.top/QQ/tuosai.gif"></td><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://valinecdn.bili33.top/dingtalk/emotion_107.png"></td><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://valinecdn.bili33.top/Heybox/expression_heziji_22.png" style="zoom:33%;" /><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://valinecdn.bili33.top/Heybox/expression_cube_wa.png"></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/QQ">QQ官方表情</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/dingtalk">钉钉官方表情</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/Heybox">小黑盒表情包（包括盒娘和方块）</a></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/QQ">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/dingtalk">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/Heybox">oss</a></td></tr><tr><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://valinecdn.bili33.top/Majotabi/367516718.png"></td><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/cpddo/emotion/xiaochou/19.webp" style="zoom:50%;" /></td><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/cpddo/emotion/yuanshen/11.jpg" style="zoom:50%;" /></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/Majotabi">魔女之旅Majotabi（官方）</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/xiaochou">小丑</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/Genshin">原神</a></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/Majotabi">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/xiaochou">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/Genshin">oss</a></td></tr><tr><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/cpddo/emotion/baitian/file_6574887.webp" style="zoom: 33%;" /></td><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/cpddo/emotion/teletubbies/26.jpg" style="zoom:33%;" /></td><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/cpddo/emotion/tom_jerry/5.jpg" style="zoom:67%;" /></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/baitian">柏田</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/teletubbies">天线宝宝</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/tom_jerry">猫和老鼠</a></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/baitian">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/teletubbies">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/tom_jerry">oss</a></td></tr><tr><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/cpddo/emotion/ali/042.gif"  /></td><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/cpddo/emotion/xiaobiaoqing/11.jpg" style="zoom:150%;" /></td><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/cpddo/emotion/tusiji/0011.gif" style="zoom:150%;" /></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/ali">阿狸</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/weisuomeng">猥琐萌</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/tusiji">兔斯基</a></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/ali">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/weisuomeng">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/tusiji">oss</a></td></tr><tr><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Arknights_longmen/longmen_01.jpg"></td><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Arknights_two/two_01.jpg"></td><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Arknights_three/three_01.jpg"></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/Arknights_longmen">明日方舟-龙门小憩</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/Arknights_two">明日方舟-第二弹</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/Arknights_three">明日方舟-第三弹</a></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/Arknights_longmen">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/Arknights_two">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/Arknights_three">oss</a></td></tr><tr><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Arknights_four/four_01.jpg"></td><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Arknights_five/five_01.jpg"></td><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Arknights_working/working_01.jpg"></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/Arknights_four">明日方舟-第四弹</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/Arknights_five">明日方舟-第五弹</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/Arknights_working">明日方舟-工作中</a></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/Arknights_four">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/Arknights_five">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/Arknights_working">oss</a></td></tr><tr><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Arknights_tea-drinking/tea-drinking_01.jpg"></td><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Arknights_keyhole_report/keyhole_report_01.jpg"></td><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Arknights_theater/theater_01.jpg"></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/Arknights_tea-drinking">明日方舟-饮茶中</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/Arknights_keyhole_report">明日方舟-秘闻</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/Arknights_theater">明日方舟-小剧场</a></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/Arknights_tea-drinking">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/Arknights_keyhole_report">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/Arknights_theater">oss</a></td></tr><tr><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Arknights_interesting_news/interesting_news_01.jpg"></td><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Arknights_bustle/bustle_01.jpg"></td><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Arknights_rest/rest_01.jpg"></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/Arknights_interesting_news">明日方舟-趣闻</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/Arknights_bustle">明日方舟-喧闹</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/Arknights_rest">明日方舟-休憩中</a></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/Arknights_interesting_news">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/Arknights_bustle">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/Arknights_rest">oss</a></td></tr><tr><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Arknights_chen/chen_01.jpg"></td><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Arknights_rabbit/rabbit_01.jpg"></td><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Arknights_anecdote/anecdote_01.jpg"></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/Arknights_chen">明日方舟-都是陈</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/Arknights_rabbit">明日方舟-都是兔</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/Arknights_anecdote">明日方舟-逸话</a></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/Arknights_chen">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/Arknights_rabbit">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/Arknights_anecdote">oss</a></td></tr><tr><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Arknights_aridity/aridity_01.jpg"></td><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Arknights_conformity/conformity_01.jpg"></td><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Arknights_phantom/phantom_01.jpg"></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/Arknights_aridity">明日方舟-荒芜</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/Arknights_conformity">明日方舟-整合</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/Arknights_phantom">明日方舟-魅影</a></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/Arknights_aridity">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/Arknights_conformity">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/Arknights_phantom">oss</a></td></tr><tr><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Arknights_coffeehouse/coffeehouse_01.jpg"></td><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/huaji/huaji(1).gif"></td><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/smallshake/null-23175f4710329ce8.jpg" style="zoom:80%;" /></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/Arknights_coffeehouse">明日方舟-咖啡屋</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/huaji">滑稽</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/smallshake">小鲨鱼</a></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/Arknights_coffeehouse">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/huaji">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/smallshake">oss</a></td></tr><tr><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/bilibili_tv_gif/doge.gif"></td><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/%E7%BD%97%E5%B0%8F%E9%BB%91/%E4%BD%A0%E5%A5%BD%E5%91%80.png"></td><td align="center"><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/%E9%82%A3%E5%85%94/%E3%80%82%E3%80%82%E3%80%82.png"></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/bilibili_tv_gif">bilibili动态小电视</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/%E7%BD%97%E5%B0%8F%E9%BB%91">罗小黑</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/%E9%82%A3%E5%85%94">那年那兔那些事儿</a></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/bilibili_tv_gif">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/%E7%BD%97%E5%B0%8F%E9%BB%91">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/%E9%82%A3%E5%85%94">oss</a></td></tr></tbody></table><h3 id="免责声明"><a href="#免责声明" class="headerlink" title="免责声明"></a>免责声明</h3><p>本仓库内所有图片均来源于网络，仅供学习交流使用。若用户违反相关法律法规造成损失，将由用户自行承担，本仓库所有者和PR提交者不承担一切责任！</p>]]></content>
      
      
      <categories>
          
          <category> 实用项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Project </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新年前爬个明日方舟的立绘</title>
      <link href="53760.html"/>
      <url>53760.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>新年前随手写的爬虫，2021新年快乐呀！</p><hr><p>今天有个朋友跟我说，他想爬一下明日方舟的人物立绘</p><p>虽然没玩过明日方舟，但自己也去看了看图，好家伙，画得针不戳</p><p>emmm，那我试着爬一爬吧</p><p><strong>（本代码太水所以就不挂 GitHub 了啦,代码在下面）</strong></p><hr><p>先看看朋友给的图片的链接：<code>http://prts.wiki/images/6/65/%E7%AB%8B%E7%BB%98_%E5%87%AF%E5%B0%94%E5%B8%8C_2.png</code></p><p>按照这格式，我觉得只能访问主站了…… <a href="http://prts.wiki/">http://prts.wiki</a></p><p>主站长这样<del>（玩方舟的小伙伴别吐槽我）</del></p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20201230232636.png"></p><p>然后我在左侧菜单里面翻找了半天（啊啊啊，立绘在哪里啊！！！）</p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/NotFoundNEKKO/BQBTwT@1.0/真叫人质壁分离.jpg" width="300" height="300"><p>。。。我眼瞎，右上角大大的搜索框我看不见。。。</p><hr><p>搜索立绘，然后选了选范围为多媒体，然后最下面把单页最大显示数量调成500</p><p>唉，刚好一页（我不用从好多页网页爬图了，开心！）</p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20201230233429.png"></p><p>现在就得开始爬图了</p><hr><p>F12 看一下网页源代码</p><p>蒽？这个链接貌似有点不对</p><p>给的是 <code>/images/thumb/6/65/%E7%AB%8B%E7%BB%98_%E5%87%AF%E5%B0%94%E5%B8%8C_2.png</code> ，我要的是这个 <code>http://prts.wiki/images/6/65/%E7%AB%8B%E7%BB%98_%E5%87%AF%E5%B0%94%E5%B8%8C_2.png</code> 嘛！</p><p>比对一下，后面的都一样（那后期字符串剪一剪就差不多啦）</p><hr><p>因为之前也爬过图片，所以自己感觉总体来说难度不大（我发现我还是比较善于用字符串find）</p><p>我就直接上代码了</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://prts.wiki/index.php?title=%E7%89%B9%E6%AE%8A:%E6%90%9C%E7%B4%A2&amp;limit=500&amp;offset=0&amp;profile=images&amp;search=%E7%AB%8B%E7%BB%98&quot;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;Cookie&quot;</span>: <span class="string">&quot;arccount62298=c; arccount62019=c&quot;</span>,</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36 Edg/87.0.664.66&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">html = requests.get(url, headers=headers)</span><br><span class="line">html.encoding = html.apparent_encoding</span><br><span class="line">soup = BeautifulSoup(html.text, <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span> = soup.find_all(class_ = <span class="string">&quot;searchResultImage&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    os.mkdir(<span class="string">&quot;./Arknights&quot;</span>)  <span class="comment">##  创建文件夹</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">os.chdir(<span class="string">&quot;./Arknights&quot;</span>)</span><br><span class="line">num=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">    string = <span class="built_in">str</span>(s)</span><br><span class="line"></span><br><span class="line">    namebegin = string.find(<span class="string">&#x27;title=&quot;文件&#x27;</span>)</span><br><span class="line">    nameend = string[namebegin:].find(<span class="string">&#x27;png&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    name = string[namebegin+<span class="number">10</span>:namebegin+nameend+<span class="number">3</span>]</span><br><span class="line">    name = name.replace(<span class="string">&quot; &quot;</span>,<span class="string">&quot;_&quot;</span>)</span><br><span class="line"></span><br><span class="line">    urlbegin = string.find(<span class="string">&#x27;data-src=&quot;/images/thumb/&#x27;</span>)</span><br><span class="line">    urlend = string[urlbegin:].find(<span class="string">&#x27;png&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    imgurl = <span class="string">&#x27;http://prts.wiki/images/&#x27;</span> + string[urlbegin+<span class="number">24</span>:urlbegin+urlend+<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">    img = requests.get(imgurl, headers=headers).content</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(name, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(img)</span><br><span class="line">        num+=<span class="number">1</span></span><br><span class="line">        print(<span class="string">&quot;已爬取&#123;&#125;张,图片名称为：&#123;&#125;，链接为：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(num,name,imgurl))</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>代码不长，但因为不太会 <a href="https://beautifulsoup.readthedocs.io/zh_CN/v4.4.0/#">BeautifulSoup</a> 而走了不少弯路。不过最终还是爬完了所有立绘</p><p>最后结果如下</p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20201230234602.png"></p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20201230234715.png"></p><hr><blockquote><p>那位小伙伴说有重复，而且想做分类</p></blockquote><p>然后他自己写了半天，然后我看不下去了。。。</p><p>然后也做了分类去重（我就稍微多了几行。。。）</p><p>代码这里就不放了，小伙伴的博客文章里有我原先那个代码的注释版<del>（注释多的有点惨不忍睹）</del></p><p>以及我修改后的代码也在他的文章的最下边<a href="https://heart-of-engine.github.io/posts/fccf.html">点我右转！</a></p><p>最后再次祝看到这篇博客的小伙伴：</p><h2 id="2021，新年快乐鸭！"><a href="#2021，新年快乐鸭！" class="headerlink" title="2021，新年快乐鸭！"></a>2021，新年快乐鸭！</h2>]]></content>
      
      
      <categories>
          
          <category> 爬虫试水 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人哔哔: ACM新生杯的前前后后</title>
      <link href="22496.html"/>
      <url>22496.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>ACM新生杯已经过去了两天，明天晚上也是校队面试了，也有些想吐槽吐槽。</p><hr><h2 id="考前"><a href="#考前" class="headerlink" title="考前"></a>考前</h2><p>说实在，本来对自己并不是太看好，特别是自己提前一个月说要复习但直到最后一天才临时抱佛脚看了一小会。<br>STL 也没复习完，临时看DP也看着看着就睡着了～<br>感觉自己好颓啊,,Ծ^Ծ,,</p><p>虽然说自己考过 OI ，但我感觉自己就和初学者没什么两样。</p><p>两年没考，估计新生杯也是水过去了。而且对全英文的题感觉十分恐惧，前一天就拿着去年的题目看了看，专门花了点时间试着翻译翻译。（蒽，感觉还可）</p><p>新生杯当天（12月26）早上也是差点就睡过头了，睡觉前迷迷糊糊订了七点半的闹钟，早上闹钟响却在八点四十。急匆匆地过去差点迟到,,Ծ^Ծ,,</p><hr><h2 id="考时考后"><a href="#考时考后" class="headerlink" title="考时考后"></a>考时考后</h2><p>5个小时考完人真的好累，考的时候还因为WA还找不到问题差点心态爆炸（下午才知道是题目数据问题），本来卡在第12名多提交了1次就掉到了13（第12有奖金，第13没有），想着既然都掉出去了就再提交一次吧（没想到下午重测后就是这次提交让我爬回了第12）。这时提交时已经只剩4分钟了。就收工了。（此时排名14）</p><p>之后还发生了点小插曲，走回快到德智园的时候突然发现没有签退，又狂奔了1公里回去（还好赶上了）</p><p>回去后一直在研究自己k题为什么错了，实在找不到自己错哪了。把代码发给出题者看，才发现后台数据把k题和l题数据搞反了。一顿修正后，我的排名从14升到11又掉回12。</p><p>心情起落就像过山车，但还好奖金有了(*￣m￣)</p><hr><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>晚上表彰还有一堆奇奇怪怪的事就懒得写了，就是自己的账号和名字后台数据又乱了导致了一堆乱七八糟的事</p><p>害，反正最终也是妥善解决了</p><p>不过最终ACM给我的最终感触是，<strong>终究还是太菜了</strong></p><hr><p>明晚就要校队纳新了。进了校队也意味着一件事，至少两个暑假我都得留校训练了</p><p>不能回中学看老师和学弟学妹，不能回家，不能找小伙伴……</p><p>游戏也不能花时间了（所以原神也卸了）</p><p>加油了，<strong>菜鸡GGP</strong>！</p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/ACM.jpg" alt="年纪轻轻打什么ACM"></p>]]></content>
      
      
      <categories>
          
          <category> 贰猹随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> Diary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬一言？白嫖太香啦！</title>
      <link href="59329.html"/>
      <url>59329.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>最近上课也上到爬虫了，我想起了 <code>@GamerNoTitle</code> 做过一个爬一言的BLOG：<a href="https://bili33.top/2020/02/11/Hitokoto-Spider/">Hitokoto-Spider 一言库爬虫开发日记</a> <del>（据说这是他的第一个Python实战）</del></p><p>于是我觉得我的第一个实战也可以来搞一个（当然抄代码是不可能的）</p><p>参考了一下一言的官方开发者文档，我就敲代码了</p><p>项目地址：<a href="https://github.com/2X-ercha/Hitokoto-Spider">https://github.com/2X-ercha/Hitokoto-Spider</a></p><h1 id="利用一言官方API爬取"><a href="#利用一言官方API爬取" class="headerlink" title="利用一言官方API爬取"></a>利用一言官方API爬取</h1><p>文档中接口说明如下：</p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20201224082448.png" alt="官方接口"></p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20201224082638.png" alt="请求地址"></p><p>因为有先看了大佬的博客，知道爬下来是个json（这玩意比html好解析多了）</p><p>所以我看了看官方json的说明：</p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20201224083113.png" alt="参数说明"></p><p>有些信息是我不需要的，我就不管他了</p><p>保留一下信息：<code>&quot;id&quot;, &quot;sort&quot;, &quot;hitokoto&quot;, &quot;from&quot;, &quot;from_who&quot;, &quot;creator&quot;, &quot;created_at&quot;</code></p><p>好了，我们开始爬了</p><h2 id="利用requests库爬取数据"><a href="#利用requests库爬取数据" class="headerlink" title="利用requests库爬取数据"></a>利用requests库爬取数据</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Hitokoto_spider</span>():</span></span><br><span class="line">    ids=np.zeros(<span class="number">10000</span>,dtype=<span class="built_in">bool</span>)</span><br><span class="line">    res=r.get(<span class="string">&quot;https://v1.hitokoto.cn&quot;</span>,timeout=<span class="number">60</span>)</span><br><span class="line">    </span><br><span class="line">    data=res.json()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> ids[data[<span class="string">&quot;id&quot;</span>]]:</span><br><span class="line">        print(<span class="string">&quot;&#123;&#125;:\t&#123;&#125;&quot;</span>.<span class="built_in">format</span>(data[<span class="string">&quot;id&quot;</span>],data[<span class="string">&quot;hitokoto&quot;</span>]))    <span class="comment"># 输出爬取内容</span></span><br><span class="line">        ids[data[<span class="string">&quot;id&quot;</span>]]=<span class="literal">True</span></span><br></pre></td></tr></table></figure><p>用ids数组来判断是否抓取过（因为我知道一言的总数不多，数组大小我就只设了10000）</p><p>然后爬着爬着，就错误了？？？</p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20201221112308.png"></p><p>我又爬了一次，让他输出错误的状态码，他给我返回了513</p><p>这是啥子嘛！</p><p>于是我加入了个判断状态码，状态码一错就休息一下重新再爬</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> res.status_code == <span class="number">513</span>:</span><br><span class="line">    time.sleep(<span class="number">30</span>)                          <span class="comment"># 抓取错误时延时delay时间后重新抓取</span></span><br><span class="line">    <span class="keyword">return</span> Hitokoto_spider()</span><br></pre></td></tr></table></figure><p>然后。。。出门了一趟，回来你给我看这个？？？</p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20201221161958.png"></p><p>原来我电脑休眠了</p><p>然后我把电脑的休眠调掉，把上面的 <code>res.status_code == 513</code> 改成 <code>res.status_code != 200</code></p><p>开始爬！</p><hr><p>在他爬的时候，我加入了json文件支持</p><p>由于本人不太喜欢手动创建，又怕我不小心勿删了文件导致程序出错</p><p>所以我给了个默认创建（所以这段代码比较长）</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_config</span>():</span>  <span class="comment"># 配置文件创建和读取</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&quot;./data&quot;</span>):</span><br><span class="line">            os.mkdir(<span class="string">&quot;./data&quot;</span>)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./data/_config.json&#x27;</span>) <span class="keyword">as</span> config_js:</span><br><span class="line">            config = js.load(config_js)</span><br><span class="line">            <span class="keyword">return</span> config</span><br><span class="line">    <span class="keyword">except</span> IOError:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./data/_config.json&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> config:</span><br><span class="line">            configs = &#123;</span><br><span class="line">                <span class="string">&quot;path&quot;</span>: <span class="string">&quot;./data/Hitokoto.csv&quot;</span>,        <span class="comment"># 文件输出路径</span></span><br><span class="line">                <span class="string">&quot;times&quot;</span>: <span class="number">3000</span>,                <span class="comment"># 抓取次数</span></span><br><span class="line">                <span class="string">&quot;delay&quot;</span>: <span class="number">2</span>,                <span class="comment"># 抓取休眠延迟，针对一言的QPS设置</span></span><br><span class="line">                <span class="string">&quot;timeout&quot;</span>: <span class="number">60</span>,                <span class="comment"># 连接超时时间（单位：秒）</span></span><br><span class="line">                <span class="comment"># 读取显示</span></span><br><span class="line">                <span class="string">&quot;from&quot;</span>: <span class="literal">True</span>,                <span class="comment"># 来自什么作品</span></span><br><span class="line">                <span class="string">&quot;from_who&quot;</span>: <span class="literal">True</span>,            <span class="comment"># 来自谁</span></span><br><span class="line">                <span class="string">&quot;creator&quot;</span>: <span class="literal">False</span>,            <span class="comment"># 哪位用户提交的</span></span><br><span class="line">                <span class="string">&quot;created_at&quot;</span>: <span class="literal">False</span>            <span class="comment"># 何时提交</span></span><br><span class="line">            &#125;</span><br><span class="line">            a = js.dumps(configs, indent=<span class="number">4</span>, separators=(<span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27;:&#x27;</span>))</span><br><span class="line">            config.write(a)</span><br><span class="line">        <span class="keyword">return</span> read_config()</span><br></pre></td></tr></table></figure><p>之后看到的一些调用就变成这样子了</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cfg = read_config()</span><br><span class="line">print(cfg[<span class="string">&quot;hitokoto&quot;</span>])</span><br></pre></td></tr></table></figure><hr><p>然后要把爬下来的一言存下来</p><p>我又加了一点点代码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_csv</span>():</span></span><br><span class="line">    cfg=read_config()</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(cfg[<span class="string">&quot;path&quot;</span>],<span class="string">&quot;w+&quot;</span>,newline=<span class="string">&quot;&quot;</span>,encoding=<span class="string">&quot;utf8&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        csv_file = csv.writer(file)</span><br><span class="line">        head = [<span class="string">&quot;id&quot;</span>, <span class="string">&quot;sort&quot;</span>, <span class="string">&quot;hitokoto&quot;</span>, <span class="string">&quot;from&quot;</span>, <span class="string">&quot;from_who&quot;</span>, <span class="string">&quot;creator&quot;</span>, <span class="string">&quot;created_at&quot;</span>] <span class="comment"># 创建csv表头</span></span><br><span class="line">        csv_file.writerow(head)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">append_csv</span>(<span class="params">inputs</span>):</span></span><br><span class="line">    cfg = read_config()</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(cfg[<span class="string">&quot;path&quot;</span>],<span class="string">&quot;a+&quot;</span>,newline=<span class="string">&#x27;&#x27;</span>,encoding=<span class="string">&quot;utf8&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        csv_file = csv.writer(file)</span><br><span class="line">        data = [inputs]</span><br><span class="line">        csv_file.writerows(data)</span><br></pre></td></tr></table></figure><p>同时对爬虫的代码进行一点点修改</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Hitokoto_spider</span>():</span></span><br><span class="line">    cfg=read_config()</span><br><span class="line">    res=r.get(<span class="string">&quot;https://v1.hitokoto.cn&quot;</span>,timeout=cfg[<span class="string">&quot;timeout&quot;</span>])</span><br><span class="line">    <span class="keyword">if</span> res.status_code != <span class="number">200</span>:</span><br><span class="line">        time.sleep(cfg[<span class="string">&quot;delay&quot;</span>])                          <span class="comment"># 抓取错误时延时delay时间后重新抓取</span></span><br><span class="line">        <span class="keyword">return</span> Hitokoto_spider()</span><br><span class="line">    data=res.json()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> ids[data[<span class="string">&quot;id&quot;</span>]]:</span><br><span class="line">        print(<span class="string">&quot;&#123;&#125;:\t&#123;&#125;&quot;</span>.<span class="built_in">format</span>(data[<span class="string">&quot;id&quot;</span>],data[<span class="string">&quot;hitokoto&quot;</span>]))    <span class="comment"># 输出爬取内容</span></span><br><span class="line">        ids[data[<span class="string">&quot;id&quot;</span>]]=<span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 自动把分类码还原为分类</span></span><br><span class="line">        sorts = [<span class="string">&quot;Animation&quot;</span>, <span class="string">&quot;Comics&quot;</span>, <span class="string">&quot;Games&quot;</span>, <span class="string">&quot;Literature&quot;</span>, <span class="string">&quot;Original&quot;</span>, <span class="string">&quot;Internet&quot;</span>,</span><br><span class="line">                 <span class="string">&quot;Other&quot;</span>, <span class="string">&quot;Film and television&quot;</span>, <span class="string">&quot;Poetry&quot;</span>, <span class="string">&quot;Netease&quot;</span>, <span class="string">&quot;Philosophy&quot;</span>, <span class="string">&quot;Smart&quot;</span>]</span><br><span class="line">        x=<span class="built_in">ord</span>(data[<span class="string">&quot;type&quot;</span>])-<span class="number">97</span></span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span>&lt;=x&lt;<span class="number">12</span>: sort = sorts[x]</span><br><span class="line">        <span class="keyword">else</span>: sort = <span class="string">&quot;Animation&quot;</span></span><br><span class="line"></span><br><span class="line">        inputs = [data[<span class="string">&quot;id&quot;</span>], sort, data[<span class="string">&quot;hitokoto&quot;</span>], data[<span class="string">&quot;from&quot;</span>], data[<span class="string">&quot;from_who&quot;</span>], data[<span class="string">&quot;creator&quot;</span>], data[<span class="string">&quot;created_at&quot;</span>]]</span><br><span class="line">        append_csv(inputs)</span><br></pre></td></tr></table></figure><p>之前的爬取错误也出来了</p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/98AF804F886C8E103E053686F3C1B219.png"></p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/B5ABF194905AA6D17F6A96DFCBBC8050.png"></p><p>我原本以为是 <code>TimeoutError</code></p><p>加入了 <code>except TimeoutError</code> 后仍然发生了这样的问题</p><p>不管了，不管他什么问题，通通 except !</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Hitokoto_spider</span>():</span>  <span class="comment"># 爬取</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        cfg=read_config()</span><br><span class="line">        res=r.get(<span class="string">&quot;https://v1.hitokoto.cn&quot;</span>,timeout=cfg[<span class="string">&quot;timeout&quot;</span>])</span><br><span class="line">        <span class="keyword">if</span> res.status_code != <span class="number">200</span>:</span><br><span class="line">            time.sleep(cfg[<span class="string">&quot;delay&quot;</span>])                          <span class="comment"># 抓取错误时延时delay时间后重新抓取</span></span><br><span class="line">            <span class="keyword">return</span> Hitokoto_spider()</span><br><span class="line">        data=res.json()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> ids[data[<span class="string">&quot;id&quot;</span>]]:</span><br><span class="line">            print(<span class="string">&quot;&#123;&#125;:\t&#123;&#125;&quot;</span>.<span class="built_in">format</span>(data[<span class="string">&quot;id&quot;</span>],data[<span class="string">&quot;hitokoto&quot;</span>]))    <span class="comment"># 输出爬取内容</span></span><br><span class="line">            ids[data[<span class="string">&quot;id&quot;</span>]]=<span class="literal">True</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 自动把分类码还原为分类</span></span><br><span class="line">            sorts = [<span class="string">&quot;Animation&quot;</span>, <span class="string">&quot;Comics&quot;</span>, <span class="string">&quot;Games&quot;</span>, <span class="string">&quot;Literature&quot;</span>, <span class="string">&quot;Original&quot;</span>, <span class="string">&quot;Internet&quot;</span>,</span><br><span class="line">                     <span class="string">&quot;Other&quot;</span>, <span class="string">&quot;Film and television&quot;</span>, <span class="string">&quot;Poetry&quot;</span>, <span class="string">&quot;Netease&quot;</span>, <span class="string">&quot;Philosophy&quot;</span>, <span class="string">&quot;Smart&quot;</span>]</span><br><span class="line">            x=<span class="built_in">ord</span>(data[<span class="string">&quot;type&quot;</span>])-<span class="number">97</span></span><br><span class="line">            <span class="keyword">if</span> <span class="number">0</span>&lt;=x&lt;<span class="number">12</span>: sort = sorts[x]</span><br><span class="line">            <span class="keyword">else</span>: sort = <span class="string">&quot;Animation&quot;</span></span><br><span class="line"></span><br><span class="line">            inputs = [data[<span class="string">&quot;id&quot;</span>], sort, data[<span class="string">&quot;hitokoto&quot;</span>], data[<span class="string">&quot;from&quot;</span>], data[<span class="string">&quot;from_who&quot;</span>], data[<span class="string">&quot;creator&quot;</span>], data[<span class="string">&quot;created_at&quot;</span>]]</span><br><span class="line">            append_csv(inputs)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        time.sleep(<span class="number">60</span>)</span><br><span class="line">        Hitokoto_spider()</span><br></pre></td></tr></table></figure><h2 id="加入重复爬取"><a href="#加入重复爬取" class="headerlink" title="加入重复爬取"></a>加入重复爬取</h2><p>上面的代码只能让我单次爬取，每次爬取都会覆盖原先的文档</p><p>所以我把ids数组存了下来</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_ids</span>():</span></span><br><span class="line">    ids_file = <span class="string">&quot;./data/ids.npy&quot;</span></span><br><span class="line">    np.save(ids_file, ids)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_ids</span>():</span></span><br><span class="line">    ids_file = <span class="string">&quot;./data/ids.npy&quot;</span></span><br><span class="line">    ids=np.load(ids_file)</span><br><span class="line">    <span class="keyword">return</span> ids</span><br></pre></td></tr></table></figure><p>在每次爬取前load，在爬取结束时save就可以啦！</p><h2 id="数据整理"><a href="#数据整理" class="headerlink" title="数据整理"></a>数据整理</h2><p>因为API接口的随机性，爬到的id并不是按顺序爬到的，所以得进行排序</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sort_Hitokoto</span>():</span></span><br><span class="line">    cfg = read_config()</span><br><span class="line">    Hitokoto_data = pd.read_csv(cfg[<span class="string">&quot;path&quot;</span>])</span><br><span class="line">    Hitokoto_data = Hitokoto_data.sort_values(<span class="string">&quot;id&quot;</span>)</span><br><span class="line">    Hitokoto_data.to_csv(cfg[<span class="string">&quot;path&quot;</span>],index=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>最终的结果长这样啦！</p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20201224092203.png"></p><hr><p>这个项目还没做完，之后可能会做API和GUI，以及非官方的一言收集</p><p>官方API的随机性使得我现在的爬取基本上是爬不到的</p><p>官方一言库共4396条</p><blockquote><p>2020.12.21，30000次爬取，获取3323条</p></blockquote><blockquote><p>2020.12.22，30000次爬取，获取29条</p></blockquote><blockquote><p>2020.12.23，40000次爬取，获取0条</p></blockquote><p>慢慢爬吧</p><hr><h1 id="附：直接利用官网的具体id爬取"><a href="#附：直接利用官网的具体id爬取" class="headerlink" title="附：直接利用官网的具体id爬取"></a>附：直接利用官网的具体id爬取</h1><p>这个方法是解析网站 <a href="https://hitokoto.cn/?id=1">https://hitokoto.cn/?id=1</a> 的html来爬去</p><p>网站地址后面id接的数字对应的就是相应一言的id，范围：1-6623</p><blockquote><p>优点：避免随机，一次爬取就可爬取全部</p></blockquote><blockquote><p>缺点：只能爬到id,一言文本和作者</p></blockquote><p>直接贴代码，有兴趣可以自己复制去试试</p><p><strong>注：id不连续</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;Cookie&quot;</span>: <span class="string">&quot;arccount62298=c; arccount62019=c&quot;</span>,</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36 Edg/87.0.664.66&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;hitokoto.csv&quot;</span>,<span class="string">&quot;w+&quot;</span>,newline=<span class="string">&quot;&quot;</span>,encoding=<span class="string">&quot;utf8&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    csv_file = csv.writer(file)</span><br><span class="line">    head = [<span class="string">&quot;id&quot;</span>, <span class="string">&quot;hitokoto&quot;</span>, <span class="string">&quot;from&quot;</span>] <span class="comment"># 创建csv表头</span></span><br><span class="line">    csv_file.writerow(head)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">id</span> <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6624</span>):</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        url = <span class="string">&quot;https://hitokoto.cn/?id=&quot;</span> + <span class="built_in">str</span>(<span class="built_in">id</span>)</span><br><span class="line">        html = requests.get(url, headers = headers, timeout = <span class="number">60</span>)</span><br><span class="line">        soup = BeautifulSoup(html.text, <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line"></span><br><span class="line">        hitokoto = soup.find(<span class="built_in">id</span> = <span class="string">&quot;hitokoto_text&quot;</span>)</span><br><span class="line">        <span class="comment"># print(hitokoto.string)</span></span><br><span class="line">        author = soup.find(<span class="built_in">id</span> = <span class="string">&quot;hitokoto_author&quot;</span>)</span><br><span class="line">        <span class="comment"># print(author.string[3:])</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;hitokoto.csv&quot;</span>,<span class="string">&quot;a+&quot;</span>,newline=<span class="string">&#x27;&#x27;</span>,encoding=<span class="string">&quot;utf8&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">            csv_file = csv.writer(file)</span><br><span class="line">            data = [[<span class="built_in">id</span>,hitokoto.string,author.string[<span class="number">3</span>:]]]</span><br><span class="line">            print(<span class="string">&quot;&#123;&#125;\t&#123;&#125;\t&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">id</span>,hitokoto.string,author.string[<span class="number">3</span>:]))</span><br><span class="line">            csv_file.writerows(data)</span><br><span class="line">    <span class="keyword">except</span>:<span class="keyword">continue</span></span><br></pre></td></tr></table></figure><p>（我就是用这个方式获取到了一言库的数据总数）</p>]]></content>
      
      
      <categories>
          
          <category> 爬虫试水 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Project </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单搭建一个廉价、私人、无限制图片大小的稳定图床</title>
      <link href="44642.html"/>
      <url>44642.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>找一个合适的图床挺难的，但又不得不必要</p><p>作为大学4年都想好好写博客的我貌似用的完github的300M免费空间（我怕我之后会传视频之类的东西），而且github的服务器在国外，速度终归是比较慢</p><p>而且平常用的是 windows ，写博客用的是 ubantu，传文件总归比较麻烦</p><p>所以找个合适的图床还是十分有必要的</p><p>但很多公共图床又具有各种图片大小的限制，它的共享性质又让我难以接受（毕竟写博客需要上传一些私货）</p><p>所以就决定搭建自己的图床啦！</p><p><strong>以下开始正题</strong></p><hr><h1 id="图床服务器选择"><a href="#图床服务器选择" class="headerlink" title="图床服务器选择"></a>图床服务器选择</h1><p>我选择的是阿里云 OSS ，大公司的服务还有传输速度都还不错，而且对象存储 OSS 的价格一年才9块不到（双12打7折）<del>所以我又冲动的买了5年</del><br>容量也是挺大的，40G 用来做图床那简直绰绰有余。至于私人、安全这些方面就不用多说了</p><p>以及我用了 PicGo 来作为本地上传的工具，这下子方便很多啦！</p><h1 id="搭建过程"><a href="#搭建过程" class="headerlink" title="搭建过程"></a>搭建过程</h1><h2 id="阿里云OSS部分"><a href="#阿里云OSS部分" class="headerlink" title="阿里云OSS部分"></a>阿里云OSS部分</h2><h3 id="购买阿里云的OSS服务"><a href="#购买阿里云的OSS服务" class="headerlink" title="购买阿里云的OSS服务"></a>购买阿里云的OSS服务</h3><p>购买阿里云OSS的网站：<a href="https://www.aliyun.com/product/oss/">https://www.aliyun.com/product/oss/</a></p><p>可以选择按流付费(默认方式)和买套餐包年包月,个人推荐使用套餐（毕竟9块一年挺划算的）</p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/picturebed1.png"></p><p>买完后：</p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/picturebed2.png"></p><h3 id="在控制台新建Bucket"><a href="#在控制台新建Bucket" class="headerlink" title="在控制台新建Bucket"></a>在控制台新建Bucket</h3><p>bucket：一个存储图片的地方。</p><p>然后我们进行配置</p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/picturebed3-1.png"><br><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/picturebed3-2.png"></p><p>记得读写权限选择公共读，然后地域如果前面你购买时选的是中国大陆通用那你国内节点随意，其他情况的话前后相同就对啦</p><p>然后在概览里面找到这个，记下来（后面配置 PicGo 时要用到的 ”确认存储区域“ ）</p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/picturebed4.png"></p><p>然后在文件管理里创建你要放图片的文件夹。比如我这里是 img/</p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/picturebed5.png"></p><p>千万千万记得在文件夹名后面加 /</p><h3 id="创建子用户并获取-AccessKey"><a href="#创建子用户并获取-AccessKey" class="headerlink" title="创建子用户并获取 AccessKey"></a>创建子用户并获取 AccessKey</h3><p>鼠标移到右上角头像处，下拉菜单中有一个 AccessKey管理，戳进去</p><p>然后建立子用户</p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/picturebed6-1.png"></p><p>控制访问台这个可选可不选，但编程访问一定要选</p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/picturebed6-2.png"></p><p>然后掏出你的<del>小本本</del>记事本，复制下你的 AccessKeyId 和 AccessKeySecret，这个特别重要（因为之后是查不到的）</p><p><strong>↑ ↑ ↑ ！！！强调<del>3次</del>！！！↑ ↑ ↑</strong></p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/picturebed6-3.png"></p><p>最后给你的子用户上使用 OSS 服务的管理权限</p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/picturebed6-4.png"><br><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/picturebed6-5.png"></p><h2 id="PicGo-配置部分"><a href="#PicGo-配置部分" class="headerlink" title="PicGo 配置部分"></a>PicGo 配置部分</h2><p>PicGo 的 github项目地址 <a href="https://github.com/Molunerfinn/PicGo">在这里</a></p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/picturebed7.png"></p><p>下面的 readme 也有说明相关的下载链接及白嫖开发说明</p><p>你也可以从 <a href="https://github.com/Molunerfinn/PicGo/releases">https://github.com/Molunerfinn/PicGo/releases</a> 找到系统对应的文件进行下载</p><p>因为国内下载速度很慢，不限速链接在 <a href="https://xjhui.lanzoux.com/iiqzehthhni">这里</a> ，蓝奏云好评</p><p>安装后长这样：</p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/picturebed8-1.png"></p><p>进入图床设置的阿里云OSS</p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/picturebed8-2.png"></p><p>然后输入你上面记下来的 <code>AccessKeyId</code> 和 <code>AccessKeySecret</code> 、 <code>Bucket名</code> 、 <code>确认存储区域</code> 、 <code>指定存储路径</code></p><p>不会的话可以参考一下我的</p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/picturebed8-3.png"></p><p>然后我们就配置完啦！试一试，走你！</p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/picturebed8-4.png"></p><p>引用时直接点图片下方的复制就行啦（记得选择是什么格式的）</p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/picturebed9.png"></p><hr><p>这篇博客的所有图片都是从自己搭的图床引用的</p><p>这里吐槽一下 PicGo 的上传，有时候会上传失败让你重新配置，多试几次就行了</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Course </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>stl的正确食用方式（不定时更新）</title>
      <link href="10146.html"/>
      <url>10146.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="C-STL-（一个标准模版库）"><a href="#C-STL-（一个标准模版库）" class="headerlink" title="C++ - STL （一个标准模版库）"></a>C++ - STL （一个标准模版库）</h1><p>(不定时更新)</p><p>STL 里包含了许多我们特别常用的标准数据结构和算法的模版，比如栈(stack)，队列(queue)，映射(map)，优先队列(priority_queue)，还有向量(priority_queue)等等。</p><p>有了这样一个模板库，像我这种懒人终于不需要手打一些数据结构啦（会是会，但我就是不想打）</p><p>再着，因为下个月月底得打ACM的新生赛了，因为各种各样的事咕了好久没有复习C++了，总归得开始点知识储备</p><p>所以得充实充实自己的脑袋瓜啦<del>（啊，脑壳好疼）</del></p><hr><blockquote><p>2020/11/29 突然想起来我有带《算法设计入门经典》，里面也有一大块是讲 STL 的，我决定就按着它的顺序复习（和学习）了</p></blockquote><h2 id="复习时间表"><a href="#复习时间表" class="headerlink" title="复习时间表"></a>复习时间表</h2><p>以此时间表来观察鸽子有多鸽</p><blockquote><p>2020/11/28 栈和队列</p></blockquote><blockquote><p>2020/11/29 排序检索</p></blockquote><blockquote><p>2020/11/30 不定长数组</p></blockquote><blockquote><p>2020/12/03 集合</p></blockquote><blockquote><p>2020/12/20 映射 <del>（你看，咕咕咕了好久）</del></p></blockquote><hr><h1 id="排序与检索"><a href="#排序与检索" class="headerlink" title="排序与检索"></a>排序与检索</h1><h2 id="排序-sort"><a href="#排序-sort" class="headerlink" title="排序(sort)"></a>排序(sort)</h2><p>sort 函数默认使用数组元素默认的大小进行升序排序，只有在需要按照特殊依据进行排序时才需要传入额外的比较函数。<br>我习惯上会定义成cmp<br>原理嘛~~~其实就是快速排序(quicksort)</p><h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3><p>sort 所在的库文件是 <algorithm>，所以：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br></pre></td></tr></table></figure><h3 id="sort函数的使用"><a href="#sort函数的使用" class="headerlink" title="sort函数的使用"></a>sort函数的使用</h3><p>假设一个数组 a 的 [x,y) 部分需要排序，则：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">sort(a+x,a+y); <span class="comment">//对数组a的 [x,y) 进行升序排序，直接改变这一区间的元素顺序</span></span><br></pre></td></tr></table></figure><p>如果要降序，就需要传入比较函数了，方法和下面类似，这里不再打出</p><p>当然也可以对结构体等使用，这时就得传入比较函数来确定需要比较的函数，例如</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//关键字排序</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">scores</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> Chinese,Math;</span><br><span class="line">&#125;class1;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(class1 a,class1 b)</span></span>&#123; <span class="comment">//关键字排序规则，降序</span></span><br><span class="line">    <span class="keyword">if</span>(a.Chinese!=b.Chinese)<span class="keyword">return</span> a.Chinese&gt;b.Chinese;</span><br><span class="line">    <span class="keyword">return</span> a.Math&gt;=b.Math;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    sort(a+x,a+y,cmp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上对于任意的对象，有了cmp和重载＜号，sort()都是可以进行相关的排序的（比如后面的victor，调用的方式改成了<code>sort(v.begin(),v.end())</code>）</p><h2 id="检索"><a href="#检索" class="headerlink" title="检索"></a>检索</h2><p>lower_bound() 和 upper_bound() 所在的库文件也是 <algorithm></p><h3 id="lower-bound-应用于有序区间"><a href="#lower-bound-应用于有序区间" class="headerlink" title="lower_bound (应用于有序区间)"></a>lower_bound (应用于有序区间)</h3><p>这是二分查找（binary search）的一种版本，试图在已排序的[first,last)中寻找元素value：</p><p>如果[first,last)具有与value相等的元素(s),便返回一个迭代器，指向其中第一个元素；</p><p>如果没有这样的元素存在，便返回“假设这样的元素存在时应该出现的位置”，</p><p>也就是说，<strong>它返回一个迭代器，指向第一个“不小于value”的元素；</strong></p><p>如果value大于 [first,last) 内的任何一个元素，则返回last。</p><h3 id="upper-bound-应用于有序区间"><a href="#upper-bound-应用于有序区间" class="headerlink" title="upper_bound (应用于有序区间)"></a>upper_bound (应用于有序区间)</h3><p>算法upper_bound是二分查找（binary search）法的一个版本。它试图在已排序的[first,last)中寻找value。更明确地说，它会返回“在不破坏顺序的情况下，可插入value的最后一个合适的位置”。</p><p>由于STL规范“区间圈定”时的起头和结尾并不对称（是的，[first,last)包含first但不包含last）,所以upper_bound与lower_bound的返回值意义大有不同。如果你查找某值，而它的确出现在区间之内，则lower_bound返回的是一个指向该元素的迭代器。然而upper_bound不这么做，因为upper_bound所返回的是在不破坏排序状态的情况下，value可被插入“最后一个”合适位置。</p><p>所以，<strong>如果value存在，那么它返回的迭代器将指向value的下一位置，而非指向value本身。</strong></p><h3 id="lower-bound-和-upper-bound-的使用"><a href="#lower-bound-和-upper-bound-的使用" class="headerlink" title="lower_bound() 和 upper_bound() 的使用"></a>lower_bound() 和 upper_bound() 的使用</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> pos1=lower_bound(a+x,a+y,value);</span><br><span class="line"><span class="keyword">int</span> pos1=upper_bound(a+x,a+y,value);</span><br></pre></td></tr></table></figure><hr><h1 id="不定长数组：vector"><a href="#不定长数组：vector" class="headerlink" title="不定长数组：vector"></a>不定长数组：vector</h1><p>这玩意我是基本没用到过啦，不过紫书后面的大整数类用的就是不定长数组（也可以称之为向量）。恰如它的翻译“不定长数组”，其实就是类似于 a- [] -</p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;  //导入不定长数组的模板库</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br></pre></td></tr></table></figure><p>建立各种数据类型的不定长数组</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vectorint;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; vectordouble;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; vectorchar;</span><br></pre></td></tr></table></figure><p>balabala……当然他可以是二维/三维的，such as:</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>*&gt; a;  <span class="comment">//二维vector</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>**&gt; a;  <span class="comment">//三维vector</span></span><br></pre></td></tr></table></figure><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="vector对象的存放-删除"><a href="#vector对象的存放-删除" class="headerlink" title="vector对象的存放/删除"></a>vector对象的存放/删除</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">v.push_back(num);  <span class="comment">//在数组的最后添加一个数据</span></span><br><span class="line">v.pop_back();  <span class="comment">//删除最后一个数据</span></span><br><span class="line">v.erase(pos);  <span class="comment">//删除pos位置的数据</span></span><br><span class="line">v.erase(begin,end);  <span class="comment">//删除 [begin,end) 区间的数据</span></span><br><span class="line">v.insert(pos,elem);  <span class="comment">//在pos位置插入数据elem</span></span><br></pre></td></tr></table></figure><h3 id="vector对象的数据读取-查找"><a href="#vector对象的数据读取-查找" class="headerlink" title="vector对象的数据读取/查找"></a>vector对象的数据读取/查找</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">num=v[i];  <span class="comment">//正常就可以像数组这么用</span></span><br><span class="line">v.front();  <span class="comment">//传回第一个数据</span></span><br><span class="line">v.back();  <span class="comment">//传回最后一个数据</span></span><br><span class="line">v.at(idx);  <span class="comment">//传回索引idx所指的数据，如果idx越界，抛出out_of_range</span></span><br><span class="line"></span><br><span class="line">v.begin();  <span class="comment">//返回数组头的指针/迭代器</span></span><br><span class="line">v.end();  <span class="comment">//返回数组尾+1的指针/迭代器</span></span><br><span class="line">v.rbegin();  <span class="comment">//传回一个逆向队列的第一个数据</span></span><br><span class="line">v.rend();  <span class="comment">//传回一个逆向队列的最后一个数据的下一个位置</span></span><br></pre></td></tr></table></figure><h3 id="vector对象的大小"><a href="#vector对象的大小" class="headerlink" title="vector对象的大小"></a>vector对象的大小</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">v.size();  <span class="comment">//返回容器中实际数据的个数</span></span><br><span class="line">v.max_size();  <span class="comment">//得到vector最大可以是多大</span></span><br><span class="line">v.resize(num);  <span class="comment">//改变当前使用数据的大小，如果它比当前使用的大，者填充默认值</span></span><br><span class="line">v.capacity();  <span class="comment">//返回当前vector分配的大小</span></span><br><span class="line">v.reserve(num);  <span class="comment">//改变当前vector所分配空间的大小</span></span><br><span class="line">v.clear();  <span class="comment">//移除容器中所有数据</span></span><br><span class="line">v.empty();  <span class="comment">//判断容器是否为空</span></span><br></pre></td></tr></table></figure><h3 id="vector对象的其他函数"><a href="#vector对象的其他函数" class="headerlink" title="vector对象的其他函数"></a>vector对象的其他函数</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">v1.swap(v2);  <span class="comment">//交换两个vector（好像是这么用的，有待考证）</span></span><br><span class="line">c.assign(beg,end);  <span class="comment">//将[beg; end)区间中的数据赋值给c</span></span><br><span class="line">c.assign(n,elem);  <span class="comment">//将n个elem的拷贝赋值给c</span></span><br><span class="line">get_allocator;  <span class="comment">//使用构造函数返回一个拷贝</span></span><br><span class="line">v.~ <span class="built_in">vector</span> &lt;Elem&gt;();  <span class="comment">//销毁所有数据，释放内存    </span></span><br></pre></td></tr></table></figure><h2 id="内存管理与效率（补充）"><a href="#内存管理与效率（补充）" class="headerlink" title="内存管理与效率（补充）"></a>内存管理与效率（补充）</h2><blockquote><p> 1》<strong>使用reserve()函数提前设定容量大小，避免多次容量扩充操作导致效率低下。</strong><br> (1) size()告诉你容器中有多少元素。它没有告诉你容器为它容纳的元素分配了多少内存。 <br> (2) capacity()告诉你容器在它已经分配的内存中可以容纳多少元素。那是容器在那块内存中总共可以容纳多少元素，而不是还可以容纳多少元素。如果你想知道一个vector或string中有多少没有被占用的内存，你必须从capacity()中减去size()。如果size和capacity返回同样的值，容器中就没有剩余空间了，而下一次插入（通过insert或push_back等）会引发上面的重新分配步骤。<br> (3) resize(Container::size_type n)强制把容器改为容纳n个元素。调用resize之后，size将会返回n。如果n小于当前大小，容器尾部的元素会被销毁。如果n大于当前大小，新默认构造的元素会添加到容器尾部。如果n大于当前容量，在元素加入之前会发生重新分配。<br> (4) reserve(Container::size_type n)强制容器把它的容量改为至少n，提供的n不小于当前大小。这一般强迫进行一次重新分配，因为容量需要增加。  </p></blockquote><p>例如：</p><p>假定你想建立一个容纳1-1000值的vector<int>。没有使用reserve，你可以像这样来做：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">1000</span>; ++i) v.push_back(i);</span><br></pre></td></tr></table></figure><p>在大多数STL实现中，这段代码在循环过程中将会导致2到10次重新分配。（10这个数没什么奇怪的。记住vector在重新分配发生时一般把容量翻倍，而1000约等于210。）</p><p>把代码改为使用reserve，我们得到这个：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">v.reserve(<span class="number">1000</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">1000</span>; ++i) v.push_back(i);</span><br></pre></td></tr></table></figure><p>这在循环中不会发生重新分配。</p><blockquote><p> 2》<strong>使用“交换技巧”来修整vector过剩空间/内存</strong><br> 有一种方法来把它从曾经最大的容量减少到它现在需要的容量。这样减少容量的方法常常被称为“收缩到合适（shrink to fit）”。该方法只需一条语句：</p></blockquote><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(ivec).swap(ivec);</span><br></pre></td></tr></table></figure><p>表达式vector<int>(ivec)建立一个临时vector，它是ivec的一份拷贝：vector的拷贝构造函数做了这个工作。但是，vector的拷贝构造函数只分配拷贝的元素需要的内存，所以这个临时vector没有多余的容量。然后我们让临时vector和ivec交换数据，这时我们完成了，ivec只有临时变量的修整过的容量，而这个临时变量则持有了曾经在ivec中的没用到的过剩容量。在这里（这个语句结尾），临时vector被销毁，因此释放了以前ivec使用的内存，收缩到合适。</p><hr><h1 id="集合：set"><a href="#集合：set" class="headerlink" title="集合：set"></a>集合：set</h1><p><del>在计算与人工智能概论课划水</del></p><p><code>set</code> 就是数学上的集合——每个元素只出现一次，且从小到大排序。</p><p>和 <code>sort</code> 一样，自定义类型也可以构造 <code>set</code> ，但同样必须定义 <code>&lt;</code> 运算符</p><p>原理上 <code>set</code> 使用了二叉树，同时，对于关联容器来说，不需要做内存拷贝和内存移动。set容器内所有元素都是以节点的方式来存储，其节点结构和链表差不多，指向父节点和子节点。插入的时候只需要稍做变换，把节点的指针指向新的节点就可以了。删除的时候类似，稍做变换后把指向删除节点的指针指向其他节点也OK了。这里的一切操作就是指针换来换去，和内存移动没有关系。</p><p>另外，在set中查找是使用二分查找</p><h2 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br></pre></td></tr></table></figure><p>常见的可以直接使用的类型 set 有</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; intset;  <span class="comment">//定义一个int类型的set容器</span></span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">float</span>&gt; floatset;  <span class="comment">//定义一个float类型的set容器</span></span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">char</span>&gt; charset;  <span class="comment">//定义一个char类型的set容器</span></span><br><span class="line"><span class="built_in">set</span>&lt;<span class="built_in">string</span>&gt; strset;  <span class="comment">//定义一个string类型的set容器</span></span><br></pre></td></tr></table></figure><p><del>跟其他的容器看起来也差不多吧</del></p><h2 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h2><h3 id="set对象的存放"><a href="#set对象的存放" class="headerlink" title="set对象的存放"></a>set对象的存放</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">s.insert(key_value);  <span class="comment">//将key_value插入到set中 ，返回值是pair&lt;set&lt;int&gt;::iterator,bool&gt;，bool标志着插入是否成功，而iterator代表插入的位置，若key_value已经在set中，则iterator表示的key_value在set中的位置</span></span><br><span class="line">s.inset(first,second);  <span class="comment">//将定位器first到second之间的元素插入到set中，返回值是void</span></span><br><span class="line"></span><br><span class="line">s.erase(iterator);  <span class="comment">//删除定位器iterator指向的值</span></span><br><span class="line">s.erase(first,second);  <span class="comment">//删除定位器first和second之间的值</span></span><br><span class="line">s.erase(key_value);  <span class="comment">//删除键值key_value的值</span></span><br></pre></td></tr></table></figure><p><strong>Ps set中的删除操作是不进行任何的错误检查的，比如定位器的是否合法等等，所以用的时候自己一定要注意。</strong></p><h3 id="set对象的数据读取"><a href="#set对象的数据读取" class="headerlink" title="set对象的数据读取"></a>set对象的数据读取</h3><p>显然set容器是没办法向数组那样直接用下标查询的，查询只能靠迭代器来实现</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">s.find(value);  <span class="comment">//返回给定值value的指针，如果没找到则返回end()</span></span><br><span class="line">s.lower_bound(key_value);  <span class="comment">//返回第一个大于等于key_value的定位器</span></span><br><span class="line">s.upper_bound(key_value);  <span class="comment">//返回最后一个大于等于key_value的定位器</span></span><br><span class="line">s.count();  <span class="comment">//用来查找set中某个某个键值出现的次数</span></span><br><span class="line">s.begin();  <span class="comment">//返回set容器的第一个迭代器</span></span><br><span class="line">s.end();  <span class="comment">//返回set容器的最后一个迭代器</span></span><br><span class="line">s.rbegin();  <span class="comment">//传回一个逆向set的第一个数据</span></span><br><span class="line">s.rend();  <span class="comment">//传回一个逆向set的最后一个数据的下一个位置</span></span><br></pre></td></tr></table></figure><p><strong>Ps count()这个函数在set并不是很实用，因为一个键值在set只可能出现0或1次，这样就变成了判断某一键值是否在set出现过了</strong></p><p><strong>Ps 注意begin()和end()函数是不检查set是否为空的，使用前最好使用empty()检验一下set是否为空.</strong></p><h3 id="set对象的大小"><a href="#set对象的大小" class="headerlink" title="set对象的大小"></a>set对象的大小</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">s.empty();  <span class="comment">//判断set容器是否为空</span></span><br><span class="line">s.size();  <span class="comment">//返回当前set容器中的元素个数</span></span><br><span class="line">s.max_size();  <span class="comment">//返回set容器可能包含的元素最大个数</span></span><br><span class="line">s.clean();  <span class="comment">//删除set容器中所有的元素</span></span><br></pre></td></tr></table></figure><hr><h1 id="映射：map"><a href="#映射：map" class="headerlink" title="映射：map"></a>映射：map</h1><p>这个东西真的跟 python 的 <code>dict</code> 是差不多的（我觉得就一样！！！）</p><p>就是 key 到 value 的一个映射</p><p>简单的理解一下，其实就是数组的下标变成了非数字的各种数据类型，比如字符，字符串。</p><h2 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>: </span><br></pre></td></tr></table></figure><p>然后就跟其他的数据结构不太一样了</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">map</span> &lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; char2int_map;</span><br><span class="line"><span class="built_in">map</span> &lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; str2int_map;</span><br></pre></td></tr></table></figure><p>当然也可以</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">map</span> &lt;<span class="keyword">char</span>,<span class="keyword">char</span>&gt; char2char_map;</span><br><span class="line"><span class="built_in">map</span> &lt;<span class="keyword">char</span>,<span class="built_in">string</span>&gt; char2str_map;</span><br><span class="line"><span class="built_in">map</span> &lt;<span class="built_in">string</span>,<span class="keyword">char</span>&gt; str2char_map;</span><br></pre></td></tr></table></figure><h2 id="方法-2"><a href="#方法-2" class="headerlink" title="方法"></a>方法</h2><h3 id="map对象添加元素"><a href="#map对象添加元素" class="headerlink" title="map对象添加元素"></a>map对象添加元素</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt; map1;  </span><br><span class="line">map1.insert(<span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt;(<span class="number">1</span>,<span class="string">&quot;one&quot;</span>));</span><br><span class="line">map1.insert(<span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt;::value_ type(<span class="number">2</span>,<span class="string">&quot;two&quot;</span>));</span><br><span class="line">map1[<span class="number">3</span>]=<span class="string">&quot;three&quot;</span>;  <span class="comment">//map中最简单最常用的插入添加！</span></span><br></pre></td></tr></table></figure><h3 id="map对象的查找"><a href="#map对象的查找" class="headerlink" title="map对象的查找"></a>map对象的查找</h3><p>find()函数返回一个迭代器指向键值为key的元素，如果没找到就返回指向map尾部的迭代器。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="built_in">string</span> &gt;::iterator it;</span><br><span class="line">it=map1.find(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">if</span>(it==maplive.end())</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;No find&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Find&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><h3 id="map对象的删除"><a href="#map对象的删除" class="headerlink" title="map对象的删除"></a>map对象的删除</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span> ,<span class="built_in">string</span> &gt;::iterator it;</span><br><span class="line">it=maplive.find(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">if</span>(it==maplive.end())</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;no find&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span>  maplive.erase(it);  <span class="comment">//delete 112;</span></span><br></pre></td></tr></table></figure><h3 id="map对象的交换"><a href="#map对象的交换" class="headerlink" title="map对象的交换"></a>map对象的交换</h3><p>map中的swap不是一个容器中的元素交换，而是两个容器交换</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">map1.swap(map2);</span><br></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>map中的元素是自动按key升序排序,所以不能对map用sort函数</p><p><strong>以下列出map的其他各种方法</strong> <del>（大同小异）</del></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">m.begin();  <span class="comment">//返回指向map头部的迭代器</span></span><br><span class="line">m.clear();  <span class="comment">//删除所有元素</span></span><br><span class="line">m.count();  <span class="comment">//返回指定元素出现的次数</span></span><br><span class="line">m.empty();  <span class="comment">//如果map为空则返回true</span></span><br><span class="line">m.end();    <span class="comment">//返回指向map末尾的迭代器</span></span><br><span class="line">m.equal_range();  <span class="comment">//返回特殊条目的迭代器对</span></span><br><span class="line">m.erase();  <span class="comment">//删除一个元素</span></span><br><span class="line">m.find();   <span class="comment">//查找一个元素</span></span><br><span class="line">m.get_allocator();<span class="comment">//返回map的配置器</span></span><br><span class="line">m.insert(); <span class="comment">//插入元素</span></span><br><span class="line">m.key_comp();  <span class="comment">//返回比较元素key的函数</span></span><br><span class="line">m.lower_bound();  <span class="comment">//返回键值&gt;=给定元素的第一个位置</span></span><br><span class="line">m.max_size();  <span class="comment">//返回可以容纳的最大元素个数</span></span><br><span class="line">m.rbegin(); <span class="comment">//返回一个指向map尾部的逆向迭代器</span></span><br><span class="line">m.rend();   <span class="comment">//返回一个指向map头部的逆向迭代器</span></span><br><span class="line">m.size();   <span class="comment">//返回map中元素的个数</span></span><br><span class="line">m.swap();   <span class="comment">//交换两个map</span></span><br><span class="line">m.upper_bound();  <span class="comment">//返回键值&gt;给定元素的第一个位置</span></span><br><span class="line">m.value_comp();   <span class="comment">//返回比较元素value的函数</span></span><br></pre></td></tr></table></figure><p><strong>Ps：注意用map的时候大部分要标准化，比如大小写统一之类的</strong></p><hr><h1 id="栈、队列和优先队列"><a href="#栈、队列和优先队列" class="headerlink" title="栈、队列和优先队列"></a>栈、队列和优先队列</h1><h2 id="栈-stack"><a href="#栈-stack" class="headerlink" title="栈(stack)"></a>栈(stack)</h2><p>栈，用一个很神奇的东西描述一下——腔肠动物（有口无肝门）<del>有点恶心</del></p><p>不过也道出了栈的本质——只有一个出入口<del>（吃什么吐什么）</del></p><p>像一个桶，最底下的东西是最先放进去的，也只有在最后才能拿出来，进去的顺序是12345，出来的顺序就是54321。 </p><p>我们基本的写法是自己用数组模拟并定义相关的各种函数，但既然有了这样一个模板库，我们就方便很多了（如果你大致知道一点类就知道，其实C++已经把这些数据结构封装成了类,所以我们才可以直接调用）</p><p>以下开始正题：</p><h3 id="定义-3"><a href="#定义-3" class="headerlink" title="定义"></a>定义</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;  //导入栈的模板库</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br></pre></td></tr></table></figure><p>栈里可以存放的数据类型挺多的，例如：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">stack</span> &lt;<span class="keyword">int</span>&gt; stkInt;  <span class="comment">//一个存放int的stack容器。</span></span><br><span class="line"><span class="built_in">stack</span> &lt;<span class="keyword">float</span>&gt; stkFloat;  <span class="comment">//一个存放float的stack容器。</span></span><br><span class="line"><span class="built_in">stack</span> &lt;<span class="built_in">string</span>&gt; stkString;  <span class="comment">//一个存放string的stack容器。 </span></span><br></pre></td></tr></table></figure><p>甚至可以定义个指针类型啥的<del>（反正指针我忘记怎么打了）</del></p><h3 id="方法-3"><a href="#方法-3" class="headerlink" title="方法"></a>方法</h3><h4 id="stack对象的存放"><a href="#stack对象的存放" class="headerlink" title="stack对象的存放"></a>stack对象的存放</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">stack</span>.push(elem);  <span class="comment">//往栈头添加元素</span></span><br><span class="line"><span class="built_in">stack</span>.pop();  <span class="comment">//从栈头移除第一个元素 </span></span><br></pre></td></tr></table></figure><h4 id="stack对象的拷贝构造与赋值"><a href="#stack对象的拷贝构造与赋值" class="headerlink" title="stack对象的拷贝构造与赋值"></a>stack对象的拷贝构造与赋值</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">stack</span>(<span class="keyword">const</span> <span class="built_in">stack</span> &amp;stk); / /拷贝构造函数</span><br><span class="line"><span class="built_in">stack</span>&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> <span class="built_in">stack</span> &amp;stk);  <span class="comment">//重载等号操作符</span></span><br></pre></td></tr></table></figure><p>such as</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; stkIntA, stkIntC;</span><br><span class="line"><span class="function"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; <span class="title">stkIntB</span><span class="params">(stkIntA)</span></span>;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; stkIntD;</span><br><span class="line">stkIntD = stkIntC;</span><br></pre></td></tr></table></figure><h4 id="stack对象的数据读取"><a href="#stack对象的数据读取" class="headerlink" title="stack对象的数据读取"></a>stack对象的数据读取</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">stack</span>.top();  <span class="comment">//返回最后一个压入栈元素</span></span><br></pre></td></tr></table></figure><h4 id="stack对象的大小"><a href="#stack对象的大小" class="headerlink" title="stack对象的大小"></a>stack对象的大小</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">stack</span>.empty();  <span class="comment">//判断堆栈是否为空</span></span><br><span class="line"><span class="built_in">stack</span>.size();  <span class="comment">//返回堆栈的大小</span></span><br></pre></td></tr></table></figure><h3 id="经典例题"><a href="#经典例题" class="headerlink" title="经典例题"></a>经典例题</h3><p><a href="https://www.luogu.com.cn/problem/P1739">表达式括号匹配</a></p><p><a href="https://www.luogu.com.cn/problem/P1044">栈</a></p><p><a href="https://www.luogu.com.cn/problem/P1155">双栈排序</a></p><h2 id="队列-queue"><a href="#队列-queue" class="headerlink" title="队列(queue)"></a>队列(queue)</h2><p>这个我就不用什么奇怪的东西来形容了，这个就是有入口有出口，按顺序排队进去排队出来</p><p><del>（干正事吧，芭芭脱丝）</del></p><h3 id="定义-4"><a href="#定义-4" class="headerlink" title="定义"></a>定义</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br></pre></td></tr></table></figure><p>同样也有存各种数据类型的队列</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; queueInt;  <span class="comment">//一个存放int的queue容器。</span></span><br><span class="line"><span class="built_in">queue</span> &lt;<span class="keyword">float</span>&gt; queueFloat;  <span class="comment">//一个存放float的queue容器。</span></span><br><span class="line"><span class="built_in">queue</span> &lt;<span class="built_in">string</span>&gt; queueString;  <span class="comment">//一个存放string的queue容器。 </span></span><br></pre></td></tr></table></figure><h3 id="方法-4"><a href="#方法-4" class="headerlink" title="方法"></a>方法</h3><h4 id="queue对象的存取"><a href="#queue对象的存取" class="headerlink" title="queue对象的存取"></a>queue对象的存取</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">queue</span>.push(X);  <span class="comment">//在队尾压入新元素 ，X为要压入的元素</span></span><br><span class="line"><span class="built_in">queue</span>.pop();  <span class="comment">//删除队列首元素但不返回其值</span></span><br></pre></td></tr></table></figure><h4 id="queue对象的数据读取"><a href="#queue对象的数据读取" class="headerlink" title="queue对象的数据读取"></a>queue对象的数据读取</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">queue</span>.front();  <span class="comment">// 返回队首元素的值，但不删除该元素</span></span><br><span class="line"><span class="built_in">queue</span>.back();  <span class="comment">//返回队列尾元素的值，但不删除该元素  </span></span><br></pre></td></tr></table></figure><h4 id="queue对象的大小"><a href="#queue对象的大小" class="headerlink" title="queue对象的大小"></a>queue对象的大小</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">queue</span>.empty();  <span class="comment">//判断堆栈是否为空</span></span><br><span class="line"><span class="built_in">queue</span>.size();  <span class="comment">//返回堆栈的大小</span></span><br></pre></td></tr></table></figure><h3 id="经典例题-1"><a href="#经典例题-1" class="headerlink" title="经典例题"></a>经典例题</h3><p>广度优先算法(bfs)就是一个使用队列的例子</p><p>其他的例题嘛。。。说实在我好像没写过多少，看到再列出来吧</p><hr><blockquote><p>这里又开始咕了</p></blockquote><p>· 优先队列</p><hr>]]></content>
      
      
      <categories>
          
          <category> C++学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>筛法</title>
      <link href="33729.html"/>
      <url>33729.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="闲来无事稍稍复习了一下筛法"><a href="#闲来无事稍稍复习了一下筛法" class="headerlink" title="闲来无事稍稍复习了一下筛法"></a>闲来无事稍稍复习了一下筛法</h1><p>素数这玩意大家都应该不陌生，常规的判断素数的方法应该都会。只不过，常规的方式仅仅只是判断一个数是否为素数，如果判断出0~n中所有的素数，常规方式的时间复杂度就比较高了。</p><p>所以大佬们搞出了好多大佬方法，我习惯统称为素数筛（其实应该叫<strong>筛法</strong>）。</p><p><strong>PS: 这期的代码会用 <code>C++</code> 和 <code>Python</code> 写</strong></p><hr><h2 id="先来常规方法趴"><a href="#先来常规方法趴" class="headerlink" title="先来常规方法趴"></a>先来常规方法趴</h2><p>常规方式，就是判定n是否是素数，就是循环2~n-1，判断是否整除</p><p>这里写的比较完整点，下面小于2的判断就不打了</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(n&lt;<span class="number">2</span>)<span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;%d&lt;2，不予判断&quot;</span>,n); </span><br><span class="line"><span class="keyword">bool</span> isprime=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;n;i++)</span><br><span class="line"><span class="keyword">if</span>(n%i==<span class="number">0</span>)&#123;</span><br><span class="line">isprime=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(isprime)<span class="built_in">cout</span>&lt;&lt;n&lt;&lt;<span class="string">&quot;为素数&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;n&lt;&lt;<span class="string">&quot;为合数&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line">isprime=<span class="literal">True</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="built_in">int</span>(math.sqrt(n))+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span> n%i==<span class="number">0</span>:</span><br><span class="line">        isprime=<span class="literal">False</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">if</span> isprime:print(<span class="string">&quot;&#123;&#125;为素数&quot;</span>.<span class="built_in">format</span>(n))</span><br><span class="line"><span class="keyword">else</span>:print(<span class="string">&quot;&#123;&#125;为合数&quot;</span>.<span class="built_in">format</span>(n))</span><br></pre></td></tr></table></figure><p>代码是一样的，只是我现在是在学 <code>python</code> ，所以我会打个 <code>python</code> 的版本出来（由于 <code>python</code> 本身的原因，速度会比 <code>C++</code> 慢） </p><p>当然，如果只是判断一个数，以上的常规做法就足够使用了，但如果是多个数，就需要弄出一个素数表了</p><p>（如果用上面方法进行 2 ~ N 的筛查，时间复杂度为O(n^2)</p><hr><hr><h2 id="筛法"><a href="#筛法" class="headerlink" title="筛法"></a>筛法</h2><p><strong>PS：以下代码是求 1 ~ N 的素数</strong></p><p>众所周知，合数的定义说明它有除 1 和本身外的因子</p><p>那么，合数是质数或合数的倍数了，也就可以通过筛除当前数的小于n的倍数来解决许多合数</p><p>下面讲解的三种算法中，都用了这样一个原理：</p><p><strong>如果当前的数没有被筛出，显然它不是前面任意数的倍数，那它实锤素数了，把他记进小本本</strong></p><hr><h3 id="朴素筛"><a href="#朴素筛" class="headerlink" title="朴素筛"></a>朴素筛</h3><p>为什么朴素呢，这个方法确实简单直白</p><p>时间复杂度为O(nlogn)</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> prime[<span class="number">1001</span>];</span><br><span class="line"><span class="keyword">bool</span> st[<span class="number">1001</span>]; <span class="comment">// 假设都是素数吧（true为合数）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 朴素筛</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_prime</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!st[i])prime[++prime[<span class="number">0</span>]]=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i+i;j&lt;=n;j+=i)st[j]=<span class="literal">true</span>; <span class="comment">// 不管是合数还是质数，都用来筛掉后面它的倍数</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">st[<span class="number">0</span>]=<span class="literal">true</span>,st[<span class="number">1</span>]=<span class="literal">true</span>; <span class="comment">// 先把0和1筛掉</span></span><br><span class="line">get_prime(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">prime=[]</span><br><span class="line">st=[<span class="literal">False</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">1001</span>)] <span class="comment"># 假设都是素数吧（True为合数）</span></span><br><span class="line">st[<span class="number">0</span>]=<span class="literal">True</span></span><br><span class="line">st[<span class="number">1</span>]=<span class="literal">True</span></span><br><span class="line"><span class="comment"># 先把0和1筛掉</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 朴素筛</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_prime</span>(<span class="params">N</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,N+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> st[i]==<span class="literal">False</span>:</span><br><span class="line">            prime.append(i)</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+i,N+<span class="number">1</span>,i): <span class="comment"># 不管是合数还是质数，都用来筛掉后面它的倍数</span></span><br><span class="line">            st[j]=<span class="literal">True</span></span><br><span class="line"></span><br><span class="line">get_prime(<span class="number">1000</span>)</span><br></pre></td></tr></table></figure><hr><h3 id="埃氏筛"><a href="#埃氏筛" class="headerlink" title="埃氏筛"></a>埃氏筛</h3><p>全称 ‘’<a href="https://baike.baidu.com/item/%E5%9F%83%E6%8B%89%E6%89%98%E6%96%AF%E7%89%B9%E5%B0%BC">埃拉托斯特尼</a>筛法’’，好家伙，他发现上面那个朴素筛干了一件不太好的事</p><p>明明一个合数都可以分解质因数了，为什么要合数筛合数啊，全用素数筛它不香吗？</p><p>于是许多数字不需要被筛它的(因素个数)遍了</p><p>这大大节省了好多时间啊</p><p>于是优秀的埃氏筛时间复杂度为O(nloglogn)，<del>emmm，针不戳！</del></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> prime[<span class="number">1001</span>];</span><br><span class="line"><span class="keyword">bool</span> st[<span class="number">1001</span>]; <span class="comment">// 假设都是素数吧（true为合数）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 埃氏筛</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_prime</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!st[i])&#123;</span><br><span class="line">prime[++prime[<span class="number">0</span>]]=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i+i;j&lt;=n;j+=i)st[j]=<span class="literal">true</span>; <span class="comment">// 可以用质数就把所有的合数都筛掉</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">st[<span class="number">0</span>]=<span class="literal">true</span>,st[<span class="number">1</span>]=<span class="literal">true</span>; <span class="comment">// 先把0和1筛掉</span></span><br><span class="line">get_prime(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">prime=[]</span><br><span class="line">st=[<span class="literal">False</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">1001</span>)] <span class="comment"># 假设都是素数吧（true为合数）</span></span><br><span class="line">st[<span class="number">0</span>]=<span class="literal">True</span></span><br><span class="line">st[<span class="number">1</span>]=<span class="literal">True</span></span><br><span class="line"><span class="comment"># 先把0和1筛掉</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 埃氏筛</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_prime</span>(<span class="params">N</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,N+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> st[i]==<span class="literal">False</span>:</span><br><span class="line">            prime.append(i)</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+i,N+<span class="number">1</span>,i): <span class="comment"># 可以用质数就把所有的合数都筛掉</span></span><br><span class="line">                st[j]=<span class="literal">True</span></span><br><span class="line"></span><br><span class="line">get_prime(<span class="number">1000</span>)</span><br></pre></td></tr></table></figure><p>于是程序员们发现，这，这不就把最内层的 for 放到了 if 里面？</p><p><del>啊这，这埃拉托斯特尼就这样名垂千古了？</del></p><p>不过说实在效率确实提升了挺多（已经很接近O(n)了）</p><hr><h3 id="线性筛"><a href="#线性筛" class="headerlink" title="线性筛"></a>线性筛</h3><p>这个就很 nb 了，它还有另外一个名字：”欧拉筛法” <del>（居然百度百科查不到）</del></p><p>上面两种筛法都有一个缺点，就是一个合数可能会被多个数重复筛出</p><p>例如朴素筛中，100会重复被2,4,5,10,20,25,50筛出，而在埃氏筛中，100只会被2和5筛出</p><p>而在埃氏筛中，30会被2,3,5筛出</p><p>埃氏筛只解决了一部分问题，剩余的线性筛就出来干活了</p><p>一个合数只会经过一次筛选，它的核心在于</p><p><strong>只被该合数最小的质因数筛出</strong></p><p>那么，如何实现这个算法？</p><p>假设 a 是合数 n 的最小质因数，那么 n = i * (n / i)</p><p>i 和 n / i 一定小于 n ，i 已经在 2 ~ n 的素数表里了，所以我们要做的就是在循环到 n / i 时把 n 筛出</p><p>为了更好地理解，我去爬了张图：</p><p><img src= "https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/loading.gif" data-lazy-src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/oula.png"></p><p>从图上我们看到，第一列筛掉的是最小素因子是 2 的数，第二列筛掉的是最小素因子为 3 的数，依次类推，可以把所有的合数都筛掉。</p><p>因为是按照最小素因子筛选，每个数的最小素因数只有一个，所以可以保证每个数都只会被筛一遍。</p><p>例如， i = 6 时，第一个素数是 2 ，能整除，筛掉 12 后就break；至于第二个素数 3 ， 6 x 3 中的最小素因数肯定是前一个素数 2 ，所以它要到  i = 9 ，素数取 2 时才被筛掉。</p><p>欧拉筛的速度大概是埃氏的 3 - 4 倍，然而在小数据中却有被完爆的可能<del>（因为埃氏筛cache友好？）</del>。</p><p>线性筛的时间复杂度就十分优秀了，为O(n)</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> prime[<span class="number">1001</span>];</span><br><span class="line"><span class="keyword">bool</span> isprime[<span class="number">1001</span>]; <span class="comment">// 假设都是素数吧（true为合数）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 线性筛</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_prime</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!isprime[i])prime[++prime[<span class="number">0</span>]]=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=prime[<span class="number">0</span>]&amp;&amp;i*prime[j]&lt;=n;++j) <span class="comment">// 对于任意一个合数x，假设pj为x最小质因子，当i&lt;x/pj时，一定会被筛掉</span></span><br><span class="line">&#123;</span><br><span class="line">isprime[i*prime[j]]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span>(i%prime[j]==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line"><span class="comment">// 1.i%pj==0, pj定为i最小质因子，pj也定为pj*i最小质因子</span></span><br><span class="line">             <span class="comment">// 2.i%pj!=0, pj定小于i的所有质因子，所以pj也为pj*i最小质因子</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">isprime[<span class="number">0</span>]=<span class="literal">true</span>,isprime[<span class="number">1</span>]=<span class="literal">true</span>; <span class="comment">// 先把0和1筛掉</span></span><br><span class="line">get_prime(<span class="number">100</span>);</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">prime=[]</span><br><span class="line">st=[<span class="literal">False</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">1001</span>)] <span class="comment"># 假设都是素数吧（true为合数）</span></span><br><span class="line">st[<span class="number">0</span>]=<span class="literal">True</span></span><br><span class="line">st[<span class="number">1</span>]=<span class="literal">True</span></span><br><span class="line"><span class="comment"># 先把0和1筛掉</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 线性筛</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_prime</span>(<span class="params">N</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,N+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> st[i]==<span class="literal">False</span>:</span><br><span class="line">            prime.append(i)</span><br><span class="line">        <span class="keyword">for</span> pj <span class="keyword">in</span> prime: <span class="comment"># 对于任意一个合数x，假设pj为x最小质因子，当i&lt;x/pj时，一定会被筛掉</span></span><br><span class="line">            <span class="keyword">if</span> pj*i&gt;N:<span class="keyword">break</span></span><br><span class="line">            st[pj*i]=<span class="literal">True</span></span><br><span class="line">            <span class="keyword">if</span> i%pj==<span class="number">0</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="comment"># 1.i%pj==0, pj定为i最小质因子，pj也定为pj*i最小质因子</span></span><br><span class="line">            <span class="comment"># 2.i%pj!=0, pj定小于i的所有质因子，所以pj也为pj*i最小质因子</span></span><br><span class="line"></span><br><span class="line">get_prime(<span class="number">1000</span>)</span><br></pre></td></tr></table></figure><p>线性筛在超量数据面前的效率是非常高的</p><p>只是线性筛这个做法比较难以理解</p><hr><p>好累啊，打这一篇写了一个中午，困死了，睡了睡了</p><p><del>（在图书馆下午2点多睡觉就很迷）</del></p>]]></content>
      
      
      <categories>
          
          <category> C++学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于C++高精度运算的几种方式</title>
      <link href="48355.html"/>
      <url>48355.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="关于C-高精度运算的几种方式"><a href="#关于C-高精度运算的几种方式" class="headerlink" title="关于C++高精度运算的几种方式"></a>关于C++高精度运算的几种方式</h1><p>今天刚好写到了一题需要高精的题，查题解时看到了 <code>__int64</code> ,想来想去就决定复习一下高精度运算了~~~</p><hr><h2 id="传统数组模拟加减乘除法运算（-noip-常见算法）"><a href="#传统数组模拟加减乘除法运算（-noip-常见算法）" class="headerlink" title="传统数组模拟加减乘除法运算（ noip 常见算法）"></a>传统数组模拟加减乘除法运算（ noip 常见算法）</h2><p>传统数组高精，实际上就是模拟人类在草稿纸上笔算的过程。<del>（如果你是数学大佬，那我告辞）</del></p><h3 id="高精度加法"><a href="#高精度加法" class="headerlink" title="高精度加法"></a>高精度加法</h3><p>直接附代码了（下面都是）</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> a1[<span class="number">600</span>],b1[<span class="number">600</span>];</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">600</span>],b[<span class="number">600</span>],c[<span class="number">600</span>],lena,lenb,lenc,i,x;</span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line"><span class="built_in">memset</span>(b,<span class="number">0</span>,<span class="keyword">sizeof</span>(b));</span><br><span class="line"><span class="built_in">memset</span>(c,<span class="number">0</span>,<span class="keyword">sizeof</span>(c));</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a1&gt;&gt;b1;</span><br><span class="line">lena=<span class="built_in">strlen</span>(a1);</span><br><span class="line">lenb=<span class="built_in">strlen</span>(b1);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=lena<span class="number">-1</span>;i++)</span><br><span class="line">a[lena-i]=a1[i]<span class="number">-48</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=lenb<span class="number">-1</span>;i++)</span><br><span class="line">b[lenb-i]=b1[i]<span class="number">-48</span>;</span><br><span class="line">lenc=<span class="number">1</span>;</span><br><span class="line">x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(lenc&lt;=lena||lenc&lt;=lenb)</span><br><span class="line">&#123;</span><br><span class="line">c[lenc]=a[lenc]+b[lenc]+x;</span><br><span class="line">x=c[lenc]/<span class="number">10</span>;</span><br><span class="line">c[lenc]%=<span class="number">10</span>;</span><br><span class="line">lenc++;</span><br><span class="line">&#125;</span><br><span class="line">c[lenc]=x;</span><br><span class="line"><span class="keyword">if</span>(c[lenc]==<span class="number">0</span>)</span><br><span class="line">lenc--;</span><br><span class="line"><span class="keyword">for</span>(i=lenc;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;c[i];</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="高精度减法"><a href="#高精度减法" class="headerlink" title="高精度减法"></a>高精度减法</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> n[<span class="number">100</span>],a1[<span class="number">100</span>],b1[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100</span>],b[<span class="number">100</span>],c[<span class="number">100</span>],lena,lenb,lenc,i,x;</span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line"><span class="built_in">memset</span>(b,<span class="number">0</span>,<span class="keyword">sizeof</span>(b));</span><br><span class="line"><span class="built_in">memset</span>(c,<span class="number">0</span>,<span class="keyword">sizeof</span>(c));</span><br><span class="line">gets(a1);</span><br><span class="line">gets(b1);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strlen</span>(a1)&lt;<span class="built_in">strlen</span>(b1)||(<span class="built_in">strlen</span>(a1)==<span class="built_in">strlen</span>(b1)&amp;&amp;<span class="built_in">strcmp</span>(a1,b1)&lt;<span class="number">0</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">strcpy</span>(n,a1);</span><br><span class="line"><span class="built_in">strcpy</span>(a1,b1);</span><br><span class="line"><span class="built_in">strcpy</span>(b1,n);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;-&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">lena=<span class="built_in">strlen</span>(a1);</span><br><span class="line">lenb=<span class="built_in">strlen</span>(b1);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=lena<span class="number">-1</span>;i++)</span><br><span class="line">a[lena-i]=a1[i]<span class="number">-48</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=lenb<span class="number">-1</span>;i++)</span><br><span class="line">b[lenb-i]=b1[i]<span class="number">-48</span>;</span><br><span class="line">lenc=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(lenc&lt;=lena||lenc&lt;=lenb)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[lenc]&lt;b[lenc])</span><br><span class="line">&#123;</span><br><span class="line">a[lenc]+=<span class="number">10</span>;</span><br><span class="line">a[lenc+<span class="number">1</span>]--;</span><br><span class="line">&#125;</span><br><span class="line">c[lenc]=a[lenc]-b[lenc];</span><br><span class="line">lenc++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>((c[lenc]==<span class="number">0</span>)&amp;&amp;(lenc&gt;<span class="number">1</span>))</span><br><span class="line">lenc--;</span><br><span class="line"><span class="keyword">for</span>(i=lenc;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;c[i];</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="高精度乘法"><a href="#高精度乘法" class="headerlink" title="高精度乘法"></a>高精度乘法</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> a1[<span class="number">2002</span>],b1[<span class="number">2002</span>];</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">2002</span>],b[<span class="number">2002</span>],c[<span class="number">4002</span>],lena,lenb,lenc,i,j,x;</span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line"><span class="built_in">memset</span>(b,<span class="number">0</span>,<span class="keyword">sizeof</span>(b));</span><br><span class="line"><span class="built_in">memset</span>(c,<span class="number">0</span>,<span class="keyword">sizeof</span>(c));</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a1&gt;&gt;b1;</span><br><span class="line">lena=<span class="built_in">strlen</span>(a1);</span><br><span class="line">lenb=<span class="built_in">strlen</span>(b1);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=lena<span class="number">-1</span>;i++)</span><br><span class="line">a[lena-i]=a1[i]<span class="number">-48</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=lenb<span class="number">-1</span>;i++)</span><br><span class="line">b[lenb-i]=b1[i]<span class="number">-48</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=lena;i++)</span><br><span class="line">&#123;</span><br><span class="line">x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=lenb;j++)</span><br><span class="line">&#123;</span><br><span class="line">c[i+j<span class="number">-1</span>]=a[i]*b[j]+x+c[i+j<span class="number">-1</span>];</span><br><span class="line">x=c[i+j<span class="number">-1</span>]/<span class="number">10</span>;</span><br><span class="line">c[i+j<span class="number">-1</span>]%=<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">c[i+lenb]=x;</span><br><span class="line">&#125;</span><br><span class="line">lenc=lena+lenb;</span><br><span class="line"><span class="keyword">while</span>(c[lenc]==<span class="number">0</span>&amp;&amp;lenc&gt;<span class="number">1</span>)</span><br><span class="line">lenc--;</span><br><span class="line"><span class="keyword">for</span>(i=lenc;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;c[i];</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="高精度除法"><a href="#高精度除法" class="headerlink" title="高精度除法"></a>高精度除法</h3><h4 id="高精除低精"><a href="#高精除低精" class="headerlink" title="高精除低精"></a>高精除低精</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> a1[<span class="number">100</span>],c1[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100</span>],c[<span class="number">100</span>],lena,i,x=<span class="number">0</span>,lenc,b;</span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line"><span class="built_in">memset</span>(c,<span class="number">0</span>,<span class="keyword">sizeof</span>(c));</span><br><span class="line">gets(a1);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;b;</span><br><span class="line">lena=<span class="built_in">strlen</span>(a1);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=lena<span class="number">-1</span>;i++)</span><br><span class="line">a[i+<span class="number">1</span>]=a1[i]<span class="number">-48</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=lena;i++)</span><br><span class="line">&#123;</span><br><span class="line">c[i]=(x*<span class="number">10</span>+a[i])/b;</span><br><span class="line">x=(x*<span class="number">10</span>+a[i])%b;</span><br><span class="line">&#125;</span><br><span class="line">lenc=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(c[lenc]==<span class="number">0</span>&amp;&amp;lenc&lt;lena)</span><br><span class="line">lenc++;</span><br><span class="line"><span class="keyword">for</span>(i=lenc;i&lt;=lena;i++)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;c[i];</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="高精除高精"><a href="#高精除高精" class="headerlink" title="高精除高精"></a>高精除高精</h4><p>这个复杂一点，要用到前面的好几种高精度运算</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">101</span>],b[<span class="number">101</span>],c[<span class="number">101</span>],d,i;</span><br><span class="line"></span><br><span class="line"><span class="comment">//--------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> a[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">a[<span class="number">0</span>]=s.length();</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=a[<span class="number">0</span>];i++)</span><br><span class="line">a[i]=s[a[<span class="number">0</span>]-i]<span class="number">-48</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//--------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> a[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">if</span>(a[<span class="number">0</span>]==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="number">0</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=a[<span class="number">0</span>];i&gt;<span class="number">0</span>;i--)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;a[i];</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> b[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">if</span>(a[<span class="number">0</span>]&gt;b[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(a[<span class="number">0</span>]&lt;b[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(i=a[<span class="number">0</span>];i&gt;<span class="number">0</span>;i--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]&gt;b[i])</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(a[i]&lt;b[i])</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">jian</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> b[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> flag,i;</span><br><span class="line">flag=cmp(a,b);</span><br><span class="line"><span class="keyword">if</span>(flag==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">a[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=a[<span class="number">0</span>];i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]&lt;b[i])</span><br><span class="line">&#123;</span><br><span class="line">a[i+<span class="number">1</span>]--;</span><br><span class="line">a[i]+=<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">a[i]-=b[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(a[<span class="number">0</span>]&gt;<span class="number">0</span>&amp;&amp;a[a[<span class="number">0</span>]]==<span class="number">0</span>)</span><br><span class="line">a[<span class="number">0</span>]--;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">numcpy</span><span class="params">(<span class="keyword">int</span> p[],<span class="keyword">int</span> q[],<span class="keyword">int</span> det)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=p[<span class="number">0</span>];i++)</span><br><span class="line">q[i+det<span class="number">-1</span>]=p[i];</span><br><span class="line">q[<span class="number">0</span>]=p[<span class="number">0</span>]+det<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">chugao</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> b[],<span class="keyword">int</span> c[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,tmp[<span class="number">101</span>];</span><br><span class="line">c[<span class="number">0</span>]=a[<span class="number">0</span>]-b[<span class="number">0</span>]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(i=c[<span class="number">0</span>];i&gt;<span class="number">0</span>;i--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(tmp,<span class="number">0</span>,<span class="keyword">sizeof</span>(tmp));</span><br><span class="line">numcpy(b,tmp,i);</span><br><span class="line"><span class="keyword">while</span>(cmp(a,tmp)&gt;=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">c[i]++;</span><br><span class="line">jian(a,tmp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(c[<span class="number">0</span>]&gt;<span class="number">0</span>&amp;&amp;c[c[<span class="number">0</span>]]==<span class="number">0</span>)</span><br><span class="line">c[<span class="number">0</span>]--;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line"><span class="built_in">memset</span>(b,<span class="number">0</span>,<span class="keyword">sizeof</span>(b));</span><br><span class="line"><span class="built_in">memset</span>(c,<span class="number">0</span>,<span class="keyword">sizeof</span>(c));</span><br><span class="line">init(a);</span><br><span class="line">init(b);</span><br><span class="line">chugao(a,b,c);</span><br><span class="line">print(c);</span><br><span class="line">print(a);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="高精乘方"><a href="#高精乘方" class="headerlink" title="高精乘方"></a>高精乘方</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">char</span>  a[])</span>          <span class="comment">//数字转化为字符串存储</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> t=m;</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; t;i++)&#123;</span><br><span class="line">   a[i]=t%<span class="number">10</span>+<span class="number">48</span>;</span><br><span class="line">   t/=<span class="number">10</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">char</span>  str[],<span class="keyword">int</span> l)</span> <span class="comment">//字符串翻转</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">char</span> temp;</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=l/<span class="number">2</span>;i++)</span><br><span class="line">   &#123;</span><br><span class="line">       temp=str[i];</span><br><span class="line">       str[i]=str[l-i];</span><br><span class="line">       str[l-i]=temp;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n,<span class="keyword">char</span>  result[])</span>          <span class="comment">//高精度m^n 乘法</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">char</span> a[<span class="number">20</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">   <span class="keyword">int</span>  c[<span class="number">5000</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">   <span class="keyword">int</span> la,lr;</span><br><span class="line">   <span class="keyword">if</span>(n==<span class="number">0</span> || m==<span class="number">1</span>)&#123;result[<span class="number">0</span>]=<span class="string">&#x27;1&#x27;</span>;<span class="keyword">return</span> ;&#125;</span><br><span class="line">   change(m,a);           <span class="comment">//将数字转化为字符</span></span><br><span class="line">   la=<span class="built_in">strlen</span>(a)<span class="number">-1</span>;         <span class="comment">//记录字符a 的位数</span></span><br><span class="line">   lr=la;</span><br><span class="line">   <span class="built_in">strcpy</span>(result,a);       <span class="comment">//积初始化为a*1</span></span><br><span class="line">   <span class="keyword">int</span> i,j,k,l;</span><br><span class="line">   <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=n;i++)&#123;          <span class="comment">//result*=a^(n-1)</span></span><br><span class="line">   <span class="built_in">memset</span>(c,<span class="number">0</span>,<span class="keyword">sizeof</span>(c));</span><br><span class="line">   <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;=la;j++)           <span class="comment">//大数相乘</span></span><br><span class="line">     <span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;=lr;k++)&#123;</span><br><span class="line">      c[j+k]+=(a[j]<span class="number">-48</span>)*(result[k]<span class="number">-48</span>);</span><br><span class="line">      c[j+k+<span class="number">1</span>]+=c[j+k]/<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">      c[j+k]%=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    l=k+j+<span class="number">1</span>;      <span class="comment">//记录当前可能的最大位数</span></span><br><span class="line">   <span class="keyword">while</span>(c[l]==<span class="number">0</span>)l--;    <span class="comment">//去除la+lr+1 最高几位的的0</span></span><br><span class="line">   <span class="built_in">memset</span>(result,<span class="number">0</span>,<span class="keyword">sizeof</span>(result));</span><br><span class="line">   <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;=l;j++)result[j]=c[j]+<span class="string">&#x27;0&#x27;</span>;<span class="comment">//将临时变量c 里的数字转化为字符存到result 中</span></span><br><span class="line">   lr=l;      <span class="comment">//刷新result 的字符个数</span></span><br><span class="line">  &#125;</span><br><span class="line">  reverse(result,lr);    <span class="comment">//字符串翻转，方便输出</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> m,n;</span><br><span class="line">  <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;m,&amp;n),m&amp;&amp;n)</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="keyword">char</span>  result[<span class="number">5000</span>]=&#123;<span class="number">0</span>&#125;;      <span class="comment">// 这句必须放到循环体内，WA得好苦 因为有这句</span></span><br><span class="line">      <span class="keyword">if</span>(n==<span class="number">0</span> ||m==<span class="number">1</span>) result[<span class="number">0</span>]=<span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">      mul(m,n,result);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,result);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="高精度取模"><a href="#高精度取模" class="headerlink" title="高精度取模"></a>高精度取模</h3><p>这个就十分简单了，都不用记录商</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> k=<span class="number">0</span>,a,b,i;</span><br><span class="line"><span class="keyword">bool</span> flag;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;s&gt;&gt;b;<span class="comment">//输入被除数和除数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.size();i++)<span class="comment">//从高位开始，一位一位向低位</span></span><br><span class="line">    &#123;</span><br><span class="line">        a=a*<span class="number">10</span>+s[i]-<span class="string">&#x27;0&#x27;</span>;<span class="comment">//加上被除数的这一位</span></span><br><span class="line">        a%=b;<span class="comment">//一直取余</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;a;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="当然还有大佬用的重载运算符操作"><a href="#当然还有大佬用的重载运算符操作" class="headerlink" title="当然还有大佬用的重载运算符操作"></a>当然还有大佬用的重载运算符操作</h2><p>这个东西我就真的不会了</p><p>直接上个实例吧</p><p>高精度的GCD（最大公约数）</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,l,r) for (int i=l;i&lt;=r;++i)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Mx=<span class="number">1252</span>,MOD=<span class="number">100000000</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BIGN</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> a[Mx+<span class="number">10</span>];</span><br><span class="line">BIGN()&#123;<span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span> a);&#125;</span><br><span class="line"><span class="keyword">int</span> &amp;<span class="keyword">operator</span> [](<span class="keyword">int</span> i)&#123;<span class="keyword">return</span> a[i];&#125;</span><br><span class="line"><span class="keyword">void</span> <span class="keyword">operator</span> /=(<span class="keyword">int</span> x)&#123; <span class="comment">//高精 &#x27;/=&#x27;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=Mx;i&gt;=<span class="number">1</span>;--i)</span><br><span class="line">a[i<span class="number">-1</span>]+=a[i]%x*MOD,a[i]/=x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> <span class="keyword">operator</span> -=(BIGN &amp;b)&#123; <span class="comment">//高精 &#x27;-=&#x27;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;Mx;++i)</span><br><span class="line">a[i]=a[i]-b[i]+(a[i<span class="number">-1</span>]+MOD)/MOD <span class="number">-1</span>,a[i<span class="number">-1</span>]=(a[i<span class="number">-1</span>]+MOD)%MOD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> <span class="keyword">operator</span> *=(<span class="keyword">int</span> x)&#123; <span class="comment">//高精 &#x27;*=&#x27;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;Mx;++i)</span><br><span class="line">a[i]=a[i]*x+a[i<span class="number">-1</span>]/MOD,a[i<span class="number">-1</span>]%=MOD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(BIGN &amp;b)&#123; <span class="comment">//重定义 &#x27;&lt;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=Mx;i&gt;=<span class="number">1</span>;--i)</span><br><span class="line"><span class="keyword">if</span> (a[i]!=b[i]) <span class="keyword">return</span> a[i]&lt;b[i];</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">iszero</span><span class="params">()</span></span>&#123; <span class="comment">//判0</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;Mx;++i) <span class="keyword">if</span> (a[i]!=<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> tp[<span class="number">10005</span>]=&#123;<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;0&#x27;</span>&#125;;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,tp+<span class="number">8</span>);</span><br><span class="line"><span class="keyword">int</span> len=<span class="built_in">strlen</span>(tp+<span class="number">1</span>),p=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (len<span class="number">-8</span>*p+<span class="number">1</span>&gt;<span class="number">0</span>)</span><br><span class="line"><span class="built_in">scanf</span>(tp+len<span class="number">-8</span>*p+++<span class="number">1</span>,<span class="string">&quot;%8d&quot;</span>,&amp;a[p]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> p=Mx;</span><br><span class="line"><span class="keyword">while</span> (!a[p]&amp;&amp;p&gt;<span class="number">0</span>) p--;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a[p--]);</span><br><span class="line"><span class="keyword">while</span> (p&gt;<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;%08d&quot;</span>,a[p--]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">BIGN <span class="title">gcd</span><span class="params">(BIGN x,BIGN y)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> g=<span class="number">0</span>;<span class="keyword">bool</span> x1,y1;</span><br><span class="line"><span class="keyword">while</span> (!x.iszero() &amp;&amp; !y.iszero())&#123;</span><br><span class="line">x1=!(x[<span class="number">1</span>]&amp;<span class="number">1</span>),y1=!(y[<span class="number">1</span>]&amp;<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (x1 &amp;&amp; y1)&#123;g++;x/=<span class="number">2</span>,y/=<span class="number">2</span>;&#125;<span class="keyword">else</span></span><br><span class="line"><span class="keyword">if</span> (x1 || y1)&#123;<span class="keyword">if</span> (x1) x/=<span class="number">2</span>;<span class="keyword">else</span> y/=<span class="number">2</span>;&#125;<span class="keyword">else</span></span><br><span class="line"><span class="keyword">if</span> (y&lt;x) x-=y;<span class="keyword">else</span> y-=x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (x&lt;y) x=y;</span><br><span class="line"><span class="keyword">while</span> (g--) x*=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line">BIGN a,b;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">a.read();</span><br><span class="line">b.read();</span><br><span class="line">gcd(a,b).print();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="懒人专用-int64"><a href="#懒人专用-int64" class="headerlink" title="懒人专用 __int64"></a>懒人专用 __int64</h2><p>其实是上面第一种忘得差不多了，第二种还不会</p><p>不过针对 <code>GCC</code> 和 <code>VC</code> ，这个东西是有差别的</p><p>主要是输入啦</p><p><strong>VC6.0</strong> 的 64 位整数分别叫做 <code>__int64</code> 与 <code>unsigned __int64</code> ，其范围分别是[-2^63, 2^63)与[0,2^64)，即 -9223372036854775808 ~ 9223372036854775807 与 0 ~ 18446744073709551615 (约 1800 亿亿)。对 64 位整数的运算与 32 位整数基本相同，都支持四则运算与位运算等。当进行 64 位与 32 位的混合运算时， 32 位整数会被隐式转换成 64 位整数。但是， VC 的输入输出与 <code>__int64</code> 的兼容就不是很好了，如果你写下这样一段代码：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">__int64 a;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;a;</span><br></pre></td></tr></table></figure><p>那么，在第2行会收到“ <code>error C2679: binary &#39;&gt;&gt;&#39; : no operator defined which takes a right-hand operand of type &#39;__int64&#39; (or there is no acceptable conversion)</code> ”的错误；在第3行会收到“ <code>error C2593: &#39;operator &lt;&lt;&#39; is ambiguous</code> ”的错误。那是不是就不能进行输入输出呢？当然不是，你可以使用C的写法：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%I64d&quot;</span>,&amp;a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%I64d&quot;</span>,a);</span><br></pre></td></tr></table></figure><p>就可以正确输入输出了。当使用 <code>unsigned __int64</code> 时，把 <code>&quot;I64d&quot;</code> 改为 <code>&quot;I64u&quot;</code> 就可以了。</p><p><strong>OJ</strong> 通常使用 <code>g++</code> 编译器。其 64 位扩展方式与 VC 有所不同，它们分别叫做 long long 与  unsigned long long 。处理规模与除输入输出外的使用方法同上。对于输入输出，它的扩展比VC好。既可以使用</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;a;</span><br></pre></td></tr></table></figure><p>也可以使用</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,a);</span><br></pre></td></tr></table></figure><p>使用无符号数时，将 <code>&quot;%lld&quot;</code> 改成 <code>&quot;%llu&quot;</code> 即可。<br>最后再说明两点点：</p><p>  1、作为一个特例，如果你使用的是 Dev-C++ 的 g++ 编译器，它使用的是 “%I64d” 而非 “%lld” 。</p><p>  2、注意： <code>__int64</code> 是两个短的下划线</p><hr><h2 id="最后补充一个-int128-和-uint128"><a href="#最后补充一个-int128-和-uint128" class="headerlink" title="最后补充一个 __int128 和 __uint128"></a>最后补充一个 __int128 和 __uint128</h2><h4 id="PS：这玩意只有-Linux-可以用"><a href="#PS：这玩意只有-Linux-可以用" class="headerlink" title="PS：这玩意只有 Linux 可以用"></a>PS：这玩意只有 Linux 可以用</h4><p>定义方式 <code>__int64</code> 是一样的</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">__int128 a;</span><br></pre></td></tr></table></figure><p>只是这玩意还不能用 <code>cin</code> 和 <code>cout</code> 进行读入读出（ <code>scanf</code> 和 <code>printf</code> 也不行）</p><p>所幸现在的 oj 基本上都是 linux 系统的</p><p>所以只能抄一个读入读出代码了</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> __int128 <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    __int128 x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">            f=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=x*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(__int128 x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">        x=-x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;<span class="number">9</span>)</span><br><span class="line">        print(x/<span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    __int128 a = read();</span><br><span class="line">    __int128 b = read();</span><br><span class="line">    print(a + b);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="关于高精度的算法我知道的就这些了，当然你如果学的是-python"><a href="#关于高精度的算法我知道的就这些了，当然你如果学的是-python" class="headerlink" title="关于高精度的算法我知道的就这些了，当然你如果学的是 python"></a>关于高精度的算法我知道的就这些了，当然你如果学的是 python</h3><p><del>好吧，以上东西你不需要</del></p>]]></content>
      
      
      <categories>
          
          <category> C++学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人哔哔: 关于我为什么搞博客</title>
      <link href="46581.html"/>
      <url>46581.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="Why"><a href="#Why" class="headerlink" title="Why"></a>Why</h1><h3 id="搞清为什么做一件事，对于我来说是十分重要的。"><a href="#搞清为什么做一件事，对于我来说是十分重要的。" class="headerlink" title="搞清为什么做一件事，对于我来说是十分重要的。"></a>搞清为什么做一件事，对于我来说是十分重要的。</h3><p>博客这个东西，对于我来说应当是遥远的记忆了。之前高一高二还在打 <strong>noip</strong> 的时候，曾在洛谷上打过几篇题解。也是那时，初次了解到了博客。</p><p>不过那时写题解只能说是一时兴起，再加上后来退赛之后，学业繁重，就没空去运维了，所以没做多少就咕咕咕了。</p><p>国内外有挺多平台是支持我们这些穷苦老百姓白嫖一定的空间去制作自己的博客的，也给了相当多样的主题。我接触过的有 <strong>CSDN 社区</strong>，<strong>博客园</strong>，<strong>阿里云的美站</strong>（这个不能白嫖），还有以前我用的<strong>洛谷</strong>，现在用的 <strong>github page</strong> 等等。许多网站都是给了特别傻瓜式的操作平台和后台文章部署。虽然这样做确实简单了许多，对于我这种完全不懂 <code>html</code> 和 <code>css </code>的蒟蒻来讲更是天堂。不过还是限制了许多想象的空间，比如自己美化主题页面，导入一些小的板块啥的就特别难受，缺了一点码代码的乐趣。当我了解到有 <a href="https://pages.github.com/">github page</a> 和 <a href="https://hexo.io/zh-cn/">hexo</a> 这种神奇的东西可以满足我的需求时，我一下子有了搭博客的想法。于是我开始找相关的教程进行学习。</p><blockquote><p>教程来自 <a href="https://blog.csdn.net/sinat_37781304">zjufangzh</a> 的 <a href="https://blog.csdn.net/sinat_37781304/article/details/82729029">hexo史上最全搭建教程</a> </p></blockquote><h4 id="PS："><a href="#PS：" class="headerlink" title="PS："></a>PS：</h4><p>关键的一个契机是我的一个朋友 @<a href="http://lijyya.site/">lijyya</a> 刚好开始搭建她的博客。于是乎我觉得我也不能落后，才开始做这件事，进而了解到 <strong>github page</strong> 。</p><h1 id="Power"><a href="#Power" class="headerlink" title="Power"></a>Power</h1><h3 id="有想法是不够的，关键是要让临时起意变成持之以恒。"><a href="#有想法是不够的，关键是要让临时起意变成持之以恒。" class="headerlink" title="有想法是不够的，关键是要让临时起意变成持之以恒。"></a>有想法是不够的，关键是要让临时起意变成持之以恒。</h3><p>所以，我<del>一气之下</del>买了 5 年的域名<del>（ 冲动是魔鬼 ）</del>。</p><p>同时我作了一点小宣传，想要让我的小伙伴们来督促督促我。</p><p><del>（你们的关注是我前进的最好动力！！！）</del></p><h1 id="Try"><a href="#Try" class="headerlink" title="Try"></a>Try</h1><p>当然搭建过程也遇到了各种各样的 <del>sb</del> 问题。开始搭建的时候用的是 windows ， windows 系统搞这种运维总会出现一些无法准确描述的问题。这种事情在度娘上也无法解决。</p><p>所以我选择求教大佬。在求教之前，我先在自己的电脑上安装了 ubuntu 和 windows 双系统，并在 ubuntu 上重新搭建我的博客。</p><p>这次终于是比较顺利了点，同时<del>不懂教程人话的</del>我向大佬 @<a href="https://bili33.top/">GamerNoTitle</a> 求教了许多问题。</p><p>这里致谢大佬在高三百忙之际还能给我一点指点，当然这时候我也不能经常性的骚扰大佬啦，很多东西还是要自己学习的。</p><p>经历了两天肝到半夜的搭建时间，终于是把博客搭得有个样了。</p><h1 id="End"><a href="#End" class="headerlink" title="End"></a>End</h1><p>虽然 <strong>hexo</strong> 写文章也是挺简单的，它内置了 <strong>markdown</strong> ，可以让我在打好一个文章后经过 <strong>markdown</strong> 的格式修饰就可直接发布。这个过程对于我来说显然轻松了很多，也不用再花时间去学习html。同时他的模板代码我是可以修改的，这又满足了我的需求（虽然我现在还不会）～～～</p><p>今后这个博客我会不断的更新，会推一些自己的日记啦，自己 <strong>ps</strong> 画的图<del>（手残）</del>，一些 <strong>C++/Python</strong> 的学习记录/题解，一些奇怪软件/插件的使用，还有以后可能会做的项目。</p><hr><h1 id="所以，这个博客，算是我大学未来四年的生活学习记录了！"><a href="#所以，这个博客，算是我大学未来四年的生活学习记录了！" class="headerlink" title="所以，这个博客，算是我大学未来四年的生活学习记录了！"></a>所以，这个博客，算是我大学未来四年的生活学习记录了！</h1><hr>]]></content>
      
      
      <categories>
          
          <category> 贰猹随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Diary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【NOI1995】石子合并——题解</title>
      <link href="49862.html"/>
      <url>49862.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="原题"><a href="#原题" class="headerlink" title="原题"></a>原题</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>在一个圆形操场的四周摆放 N 堆石子,现要将石子有次序地合并成一堆.规定每次只能选相邻的 2 堆合并成新的一堆，并将新的一堆的石子数，记为该次合并的得分。</p><p>试设计出一个算法,计算出将 N 堆石子合并成 1 堆的最小得分和最大得分。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>数据的第 1 行是正整数 N，表示有 N 堆石子。</p><p>第 2 行有 N 个整数，第 i 个整数 ai​ 表示第 i 堆石子的个数。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出共 2 行，第 1 行为最小得分，第 2 行为最大得分。</p><h2 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h2><h3 id="输入-1"><a href="#输入-1" class="headerlink" title="输入 #1"></a>输入 #1</h3><p>4<br>4 5 9 4</p><h3 id="输出-1"><a href="#输出-1" class="headerlink" title="输出 #1"></a>输出 #1</h3><p>43<br>54</p><hr><h1 id="题解（搬运自我好久好久之前在洛谷发的博客）"><a href="#题解（搬运自我好久好久之前在洛谷发的博客）" class="headerlink" title="题解（搬运自我好久好久之前在洛谷发的博客）"></a>题解（搬运自我好久好久之前在洛谷发的博客）</h1><p><del>（顺便做个博客文章格式的测试）</del></p><p><del>（<strong>大佬轻喷</strong>）</del></p><p><strong>《信息学奥赛一本通–提高篇》</strong>给了一个非常优秀的O(8n3)的代码</p><p><del>作为<strong>蒟蒻</strong>我表示<strong>看不懂</strong></del></p><p><strong><del>难受</del></strong></p><p>不过没关系</p><p><strong>蒟蒻有蒟蒻的dp方法</strong></p><p>淡定地枚举了区间长度,然后一层一层增加</p><p>一段一段地维护**<del>（不懂的可以手动看代码模拟）</del>**</p><p>然后，默默地祭出了O(2n3)的代码</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">201</span>],sum[<span class="number">201</span>];</span><br><span class="line"><span class="keyword">int</span> Fmin[<span class="number">201</span>][<span class="number">201</span>],Fmax[<span class="number">201</span>][<span class="number">201</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span><span class="comment">//读入优化大法好！！！</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> ch=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)res=res*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>,ch=getchar();</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n=read();</span><br><span class="line">    <span class="comment">//把环拉成一条2*n的线</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)a[i]=a[i+n]=read();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">2</span>*n;++i)sum[i]=sum[i<span class="number">-1</span>]+a[i];</span><br><span class="line"><span class="built_in">memset</span>(Fmin,<span class="number">127</span>/<span class="number">3</span>,<span class="keyword">sizeof</span>(Fmin));<span class="comment">//取最小值需要一点放大的初值</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">2</span>*n;++i)Fmin[i][i]=<span class="number">0</span>;<span class="comment">//这个不改会炸的！！！</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">1</span>;l&lt;n;++l)<span class="comment">//枚举区间长度1到n-1</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i+l&lt;=<span class="number">2</span>*n;++i)<span class="comment">//枚举左端点</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=i;k&lt;i+l;++k)<span class="comment">//这个就不用解释了吧~~~</span></span><br><span class="line">&#123;</span><br><span class="line">Fmin[i][i+l]=min(Fmin[i][i+l],Fmin[i][k]+Fmin[k+<span class="number">1</span>][i+l]+sum[i+l]-sum[i<span class="number">-1</span>]);</span><br><span class="line">Fmax[i][i+l]=max(Fmax[i][i+l],Fmax[i][k]+Fmax[k+<span class="number">1</span>][i+l]+sum[i+l]-sum[i<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ansmin=<span class="number">923917391</span>,ansmax=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//然后开个O(2n)求最终答案（因为把环拉成链了）</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;++i)ansmin=min(ansmin,Fmin[i][i+n<span class="number">-1</span>]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;++i)ansmax=max(ansmax,Fmax[i][i+n<span class="number">-1</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ansmin);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ansmax);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>~~然后，常数其实也没有2那么大啦~~~时间复杂度具体怎么算我也不知道</p><p><del>估计一下时间复杂度差不多只有O(n3)</del></p>]]></content>
      
      
      <categories>
          
          <category> C++学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
