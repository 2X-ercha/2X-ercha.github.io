<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>rust写个操作系统：课程实验blogos移至armV8深度解析（更新中）</title>
      <link href="16433.html"/>
      <url>16433.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>不能不说，我看着实验指导书给好的现成的代码，不知道这些代码到底在干什么。我陷入了沉思，作为一个想学习嵌入式系统的学生而言，我似乎不能从这个实验中学到些什么。</p><p>然而这些知识，理应是一个想做嵌入式的人应该有的，但看着现成代码再看注解，大部分情况下还是一头雾水。老师说理解原理，但又理解不能，于是去翻阅资料。只有一步步实现，才能更好的知道我们为什么要这么做。</p><p>很多的代码细节，我也仍然没办法去一行行解释。面对想学的东西，更多的还是保持求知欲和不厌其烦。</p><p>路漫漫其修远兮，吾将上下而求索，说的莫若如是。</p><hr><h2 id="实验一-环境配置"><a href="#实验一-环境配置" class="headerlink" title="实验一 环境配置"></a>实验一 环境配置</h2><p>这是实验的开始。由于我们的目标是编写一个操作系统，所以首先我们需要创建一个独立于操作系统的可执行程序，又称 <strong>独立式可执行程序（freestanding executable）</strong> 或 <strong>裸机程序（bare-metal executable）</strong> 。然后我们将此程序编译成为内核。</p><p>我们编写的独立程序得十分纯净，这意味着所有依赖于操作系统的库我们都不能使用。比如 std 中的大部分内容（io, thread, file system, etc.）都需要操作系统的支持，所以这部分内容我们不能使用。</p><p>但是，不依赖与操作系统的 rust 的语言特性 我们还是可以继续使用的，比如：迭代器、模式匹配、字符串格式化、所有权系统等。这使得 rust 依旧可以作为一个功能强大的高级语言，帮助我们编写操作系统。</p><p>最小化内核只干了两件事：能开机在屏幕上输出点东西，以及能保持运行。</p><h3 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h3><h4 id="安装rust"><a href="#安装rust" class="headerlink" title="安装rust"></a>安装rust</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install gcc </span><br><span class="line">curl --proto <span class="string">&#x27;=https&#x27;</span> --tlsv1.2 -sSf https://sh.rustup.rs | sh</span><br><span class="line"><span class="built_in">source</span> <span class="variable">$HOME</span>/.cargo/env</span><br><span class="line">cargo install cargo-binutils rustfilt</span><br></pre></td></tr></table></figure><p>全新安装 <code>rust</code>之后，鉴于实现操作系统时需要的各种并非出现在正式 <code>rust</code>版本中的特性（如内联汇编语句 <code>asm!()</code>)，以及实验要求的版本（这点在实验指导书中不是很明确的说明，<code>rust nightly</code>各版本代码差异极大，故在这里明确申明实验所用 <code>rust</code>版本）</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rustup install nightly-2021-11-20</span><br><span class="line">rustup default nightly-2021-11-20</span><br></pre></td></tr></table></figure><p>此时输入 <code>rustc -V</code>应该看到如下字样：</p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/blogos-armv8/1.png"></p><h4 id="为rust增加armv8支持"><a href="#为rust增加armv8支持" class="headerlink" title="为rust增加armv8支持"></a>为rust增加armv8支持</h4><p><code>cargo</code> 在编译内核时，可以用过 <code>--target &lt;target triple&gt;</code> 支持不同的系统。<strong>目标三元组 (target triple)</strong> 包含：cpu 架构、供应商、操作系统和 ABI 。</p><p>由于我们在编写自己的操作系统，所以所有目前的目标三元组都不适用。幸运的是，rust 允许我们用 JSON 文件定义自己的目标三元组。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rustup target add aarch64-unknown-none-softfloat</span><br></pre></td></tr></table></figure><h4 id="安装QEMU模拟器"><a href="#安装QEMU模拟器" class="headerlink" title="安装QEMU模拟器"></a>安装QEMU模拟器</h4><p>实验指导书中，希望我们参考文档去安装 qemu 。然后给出的文档却是如何在本地编译 qemu 。这并没有必要，ubuntu 的 apt 软件库之中已经提供了现成的模拟器软件。我们可以直接通过如下命令安装：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install qemu qemu-system-arm</span><br></pre></td></tr></table></figure><h4 id="安装交叉编译工具链-aarch64-及其调试工具"><a href="#安装交叉编译工具链-aarch64-及其调试工具" class="headerlink" title="安装交叉编译工具链 (aarch64) 及其调试工具"></a>安装交叉编译工具链 (aarch64) 及其调试工具</h4><p>交叉编译让我们能在<code>x86-64</code>架构中编译出能在<code>arm</code>架构执行的程序（两种架构底层的逻辑是不同的，以常规的编译方式，我们在<code>x86-64</code>下编译的程序无法在<code>arm</code>架构机器平台运行。这也是为什么在许多软件中，他会有多种统一系统的下载安装包。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://developer.arm.com/-/media/Files/downloads/gnu-a/10.2-2020.11/binrel/gcc-arm-10.2-2020.11-x86_64-aarch64-none-elf.tar.xz</span><br><span class="line">tar -xf gcc-arm-10*</span><br><span class="line">sudo cp gcc-arm-10*/bin/* /usr/<span class="built_in">local</span>/bin/</span><br><span class="line">rm -rf gcc-arm-10*</span><br></pre></td></tr></table></figure><p>第三条的<code>copy</code>指令是将我们交叉编译的工具链完整的放进我们的环境中。实验指导书的该行代码只拷贝了必要的编译工具 <strong>（很不幸的是它唯独忘记了把gdb调试工具拷贝到其中）</strong>。在这里我选择完整拷贝交叉编译工具链。</p><hr><h3 id="构建最小化内核"><a href="#构建最小化内核" class="headerlink" title="构建最小化内核"></a>构建最小化内核</h3><p>构建最小化内核，那必须要知道对于一个裸机状态的机器来讲什么状态才可以称之为最小。单单使用实验中的代码并解读它并不能让我们知道这一点，我们仍然不知道为什么那是最小。所以我在网上翻阅相关资料，对照实验，一步一步的向内核中添加必要代码。</p><h4 id="能跑起来的裸机程序尝试"><a href="#能跑起来的裸机程序尝试" class="headerlink" title="能跑起来的裸机程序尝试"></a>能跑起来的裸机程序尝试</h4><p>试着创建一个<code>main</code>程序：新建项目</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cargo new blogos_armv8 --bin --edition 2021</span><br><span class="line"><span class="built_in">cd</span> blogos_armv8</span><br></pre></td></tr></table></figure><p>然后新建<code>src/main.rs</code>。此时<code>main</code>函数内容为空，因为我并不知道失去了标准库我还能在函数中使用什么代码。</p><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#![no_std]</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;&#125;</span><br></pre></td></tr></table></figure><p>然后<code>cargo build</code>进行构建，会产生两个报错：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">error: language item required, but not found: &#96;eh_personality&#96;</span><br><span class="line"></span><br><span class="line">error: &#96;#[panic_handler]&#96; function required, but not found</span><br></pre></td></tr></table></figure><ul><li><p><code>eh_personality</code>报错：</p><blockquote><p>eh_personality 语义项(language item)用于标记函数：该函数在 堆栈展开(stack unwinding) 时被调用。当程序发生 panic 时，rust 会调用 堆栈展开 析构堆栈中的所有生存变量，达到释放内存的目的。但是这是一个复杂的过程，而且依赖于一些其他的库文件。所以我们只是简单的将其禁用：</p></blockquote><p>  编辑<code>Cargo.toml</code>，在后边加入如下代码:</p>  <figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># dev时禁用panic时栈展开</span></span><br><span class="line"><span class="section">[profile.dev]</span></span><br><span class="line"><span class="attr">panic</span> = <span class="string">&quot;abort&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># release时禁用panic时栈展开</span></span><br><span class="line"><span class="section">[profile.release]</span></span><br><span class="line"><span class="attr">panic</span> = <span class="string">&quot;abort&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><code>panic</code>报错：</p><blockquote><p>当程序出现异常时（程序并没有运行，但是这在编译阶段就会主动链接<code>panic</code>)，程序将会进入<code>panic</code>，此时需要调用相应函数。标准库有对应函数，但是由于我们使用了 <code>no_std</code> 属性，所以接下来我们需要自己实现一个函数。新建<code>src/panic.rs</code></p></blockquote>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use core::panic::PanicInfo;</span><br><span class="line"></span><br><span class="line">#[panic_handler]</span><br><span class="line">fn on_panic(_info: &amp;PanicInfo) -&gt; ! &#123;</span><br><span class="line">    loop &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  然后在<code>main.rs</code>中引入<code>panic</code></p>  <figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mod</span> panic;</span><br></pre></td></tr></table></figure><p>  由于程序 panic 后就应该结束，所以用 -&gt; ! 表示该函数不会返回。由于目前的 OS 功能还很弱小，我们有希望系统保持开机状态，所以只能无限循环。</p></li></ul><hr><p>解决完如上几个报错后，再次<code>cargo build</code>，出现新的报错：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">error: requires &#96;start&#96; lang_item</span><br></pre></td></tr></table></figure><ul><li><p><code>start</code>入口报错</p><blockquote><p>对于大多数语言，他们都使用了 运行时系统(runtime system) ，这导致 main 并不是他们执行的第一个函数。以 rust 语言为例：一个典型的 rust 程序会先链接标准库，然后运行 C runtime library 中的 crt0(C runtime zero) 设置 C 程序运行所需要的环境(比如：创建堆栈，设置寄存器参数等)。然后 C runtime 会调用 rust runtime 的 入口点(entry point) 。rust runtime 结束之后才会调用 main 。由于我们的程序无法访问 rust runtime 和 crt0 ，所以需要重写覆盖 crt0 入口点：</p></blockquote><p>  新建<code>src/start.s</code>，告诉函数我们程序的进入入口在哪：</p>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.globl _start</span><br><span class="line">.extern LD_STACK_PTR</span><br><span class="line">.section &quot;.text.boot&quot;</span><br><span class="line"></span><br><span class="line">_start:</span><br><span class="line">        ldr     x30, &#x3D;LD_STACK_PTR</span><br><span class="line">        mov     sp, x30</span><br><span class="line">        bl      not_main</span><br><span class="line"></span><br><span class="line">.equ PSCI_SYSTEM_OFF, 0x84000002</span><br><span class="line">.globl system_off</span><br><span class="line">system_off:</span><br><span class="line">        ldr     x0, &#x3D;PSCI_SYSTEM_OFF</span><br><span class="line">        hvc     #0</span><br></pre></td></tr></table></figure><p>  可以看到我们想告诉程序：我们这玩意的入口是<code>not_main</code>，程序要从<code>not_main</code>函数开始。然后修改<code>main.rs</code>，将主函数删除，替换成：</p>  <figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#![no_main]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#[no_mangle]</span> <span class="comment">// 不修改函数名</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function"><span class="keyword">fn</span> <span class="title">not_main</span></span>() &#123;&#125;</span><br></pre></td></tr></table></figure><p>  这里 <code>pub extern &quot;C&quot; fn not_main</code> 就是我们需要的 <code>start</code> 。 <code>#[no_mangle]</code> 属性用于防止改名称被混淆。</p><p>  由于 <code>start</code> 只能由操作系统或引导加载程序直接调用，不会被其他函数调用，所以不能够返回。如果需要离开该函数，应该使用 <code>exit</code> 系统调用。</p><p>  由于 start 函数无法返回或退出，自然也就不会调用 main 。所以将 main 函数删除，并且增加属性标签 <code>#![no_main]</code> 。</p></li></ul><hr><p>再次构建项目，却告诉我们汇编代码有问题：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">error: unknown token in expression</span><br></pre></td></tr></table></figure><ul><li><p>汇编报错</p><blockquote><p>由于我们使用的是<code>arm</code>架构的汇编代码，自然用正常的编译方式这段汇编代码无法被正确解读。此时我们需要给<code>cargo</code>说明我们要编译的是给<code>arm</code>的代码：</p></blockquote>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cargo build --target aarch64-unknown-none-softfloat</span><br></pre></td></tr></table></figure><p>  为了方便，我们采用另一种方式：</p><p>  新建<code>.cargo/config.toml</code>，输入：</p>  <figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="section">[build]</span></span><br><span class="line"><span class="attr">target</span> = <span class="string">&quot;aarch64-unknown-none-softfloat&quot;</span></span><br><span class="line"><span class="attr">rustflags</span> = [<span class="string">&quot;-C&quot;</span>,<span class="string">&quot;link-arg=-Taarch64-qemu.ld&quot;</span>, <span class="string">&quot;-C&quot;</span>, <span class="string">&quot;target-cpu=cortex-a53&quot;</span>, <span class="string">&quot;-D&quot;</span>, <span class="string">&quot;warnings&quot;</span>]</span><br></pre></td></tr></table></figure><p>  构建指令就仍然可以采用简短的<code>cargo build</code></p></li></ul><hr><p>再次尝试编译，出现如下错误：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">error: linking with &#96;rust-lld&#96; failed: exit status: 1</span><br></pre></td></tr></table></figure><ul><li><p>rust-lld报错：</p><blockquote><p>上节我们讲到需要构建原生目标三元组（而现有的三元组或多或少的都带有标准库），所以需要自己定义：</p></blockquote><p>  新建<code>aarch64-unknown-none-softfloat.json</code>，配置目标平台相关参数，内容如下：</p>  <figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;abi-blacklist&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;stdcall&quot;</span>,</span><br><span class="line">    <span class="string">&quot;fastcall&quot;</span>,</span><br><span class="line">    <span class="string">&quot;vectorcall&quot;</span>,</span><br><span class="line">    <span class="string">&quot;thiscall&quot;</span>,</span><br><span class="line">    <span class="string">&quot;win64&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sysv64&quot;</span></span><br><span class="line">],</span><br><span class="line"><span class="attr">&quot;arch&quot;</span>: <span class="string">&quot;aarch64&quot;</span>,</span><br><span class="line"><span class="attr">&quot;data-layout&quot;</span>: <span class="string">&quot;e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128&quot;</span>,</span><br><span class="line"><span class="attr">&quot;disable-redzone&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">&quot;env&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;executables&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">&quot;features&quot;</span>: <span class="string">&quot;+strict-align,+neon,+fp-armv8&quot;</span>,</span><br><span class="line"><span class="attr">&quot;is-builtin&quot;</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">&quot;linker&quot;</span>: <span class="string">&quot;rust-lld&quot;</span>,</span><br><span class="line"><span class="attr">&quot;linker-flavor&quot;</span>: <span class="string">&quot;ld.lld&quot;</span>,</span><br><span class="line"><span class="attr">&quot;linker-is-gnu&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">&quot;pre-link-args&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;ld.lld&quot;</span>: [<span class="string">&quot;-Taarch64-qemu.ld&quot;</span>]</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;llvm-target&quot;</span>: <span class="string">&quot;aarch64-unknown-none&quot;</span>,</span><br><span class="line"><span class="attr">&quot;max-atomic-width&quot;</span>: <span class="number">128</span>,</span><br><span class="line"><span class="attr">&quot;os&quot;</span>: <span class="string">&quot;none&quot;</span>,</span><br><span class="line"><span class="attr">&quot;panic-strategy&quot;</span>: <span class="string">&quot;abort&quot;</span>,</span><br><span class="line"><span class="attr">&quot;relocation-model&quot;</span>: <span class="string">&quot;static&quot;</span>,</span><br><span class="line"><span class="attr">&quot;target-c-int-width&quot;</span>: <span class="string">&quot;32&quot;</span>,</span><br><span class="line"><span class="attr">&quot;target-endian&quot;</span>: <span class="string">&quot;little&quot;</span>,</span><br><span class="line"><span class="attr">&quot;target-pointer-width&quot;</span>: <span class="string">&quot;64&quot;</span>,</span><br><span class="line"><span class="attr">&quot;vendor&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  然后修改程序启动例程：创建<code>aarch64-qemu.ld</code>，输入：</p>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ENTRY(_start)</span><br><span class="line">SECTIONS</span><br><span class="line">&#123;</span><br><span class="line">    . &#x3D; 0x40080000;</span><br><span class="line">    .text.boot : &#123; *(.text.boot) &#125;</span><br><span class="line">    .text : &#123; *(.text) &#125;</span><br><span class="line">    .data : &#123; *(.data) &#125;</span><br><span class="line">    .rodata : &#123; *(.rodata) &#125;</span><br><span class="line">    .bss : &#123; *(.bss) &#125;</span><br><span class="line"></span><br><span class="line">    . &#x3D; ALIGN(8);</span><br><span class="line">    . &#x3D; . + 0x4000;</span><br><span class="line">    LD_STACK_PTR &#x3D; .;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  ENTRY(_start)中指明入口函数为_start函数，该函数在start.s中。</p><p>  通过 . = 0x40080000; 将程序安排在内存位置0x40080000开始的地方。</p><p>  链接脚本中的符号LD_STACK_PTR是全局符号，可以在程序中使用（如start.s中），这里定义的是栈底的位置。</p></li></ul><hr><p>最后进行一次构建：</p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/blogos-armv8/4.png" alt="裸机构建成功"></p><p>使用如下命令运行裸机程序：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">qemu-system-aarch64 -machine virt -m 1024M -cpu cortex-a53 -nographic -kernel target/aarch64-unknown-none-softfloat/debug/blogos_armv8</span><br></pre></td></tr></table></figure><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/blogos-armv8/2.png" alt="运行成功"></p><hr><h4 id="程序的开始：”Hello-World”"><a href="#程序的开始：”Hello-World”" class="headerlink" title="程序的开始：”Hello World”"></a>程序的开始：”Hello World”</h4><p>绝大部分程序员的第一个程序都是在屏幕上输出类似于<code>&quot;Hello World&quot;</code>这样的字样。不例外的，我们也让这个最小化内核构建成功后能够打印<code>&quot;Hello World&quot;</code>：</p><p>修改<code>main.rs</code>，将<code>not_main</code>函数修改成下面所示代码，并引用<code>core</code>库中的<code>ptr</code>模块：</p><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> core::ptr;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[no_mangle]</span> <span class="comment">// 不修改函数名</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function"><span class="keyword">fn</span> <span class="title">not_main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">const</span> UART0: *<span class="keyword">mut</span> <span class="built_in">u8</span> = <span class="number">0x0900_0000</span> <span class="keyword">as</span> *<span class="keyword">mut</span> <span class="built_in">u8</span>;</span><br><span class="line">    <span class="keyword">let</span> out_str = <span class="string">b&quot;Hello World&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> byte <span class="keyword">in</span> out_str &#123;</span><br><span class="line">        <span class="keyword">unsafe</span> &#123;</span><br><span class="line">            ptr::write_volatile(UART0, *byte);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>其中<code>UART0</code>是异步串行接口，在这个程序中相当于控制台的外设输入输出。</p><p>not_main函数通过<code>ptr::write_volatile</code>向串口输出字符.</p></blockquote><p>这里相当于使用<code>ptr::write_volatile</code>直接向串口中循环输入字符。</p><p>再次构建并运行，可以看到：</p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/blogos-armv8/3.png" alt="输出Hello World"></p><hr><h3 id="gdb调试"><a href="#gdb调试" class="headerlink" title="gdb调试"></a>gdb调试</h3><p>我们运行内核文件，是没办法像普通可执行文件那样，编译时增加<code>-g</code>指令然后<code>gdb</code>运行。因此我们要利用到<code>qemu</code>服务端功能，也就是开放端口让外部程序能够连接到<code>qemu</code>正在执行的程序中。</p><h4 id="qemu-启动参数"><a href="#qemu-启动参数" class="headerlink" title="qemu 启动参数"></a>qemu 启动参数</h4><p>下面是<code>qemu</code>的启动参数表：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96;-hda file&#39;        &#96;-hdb file&#39; &#96;-hdc file&#39; &#96;-hdd file&#39;</span><br><span class="line">    使用 file  作为硬盘0、1、2、3镜像。</span><br><span class="line">&#96;-fda file&#39;  &#96;-fdb file&#39;</span><br><span class="line">    使用 file  作为软盘镜像，可以使用 &#x2F;dev&#x2F;fd0 作为 file 来使用主机软盘。</span><br><span class="line">&#96;-cdrom file&#39;</span><br><span class="line">    使用 file  作为光盘镜像，可以使用 &#x2F;dev&#x2F;cdrom 作为 file 来使用主机 cd-rom。</span><br><span class="line">&#96;-boot [a|c|d]&#39;</span><br><span class="line">    从软盘(a)、光盘(c)、硬盘启动(d)，默认硬盘启动。</span><br><span class="line">&#96;-snapshot&#39;</span><br><span class="line">    写入临时文件而不写回磁盘镜像，可以使用 C-a s 来强制写回。</span><br><span class="line">&#96;-m megs&#39;</span><br><span class="line">    设置虚拟内存为 msg M字节，默认为 128M 字节。</span><br><span class="line">&#96;-smp n&#39;</span><br><span class="line">    设置为有 n 个 CPU 的 SMP 系统。以 PC 为目标机，最多支持 255 个 CPU。</span><br><span class="line">&#96;-nographic&#39;</span><br><span class="line">    禁止使用图形输出。</span><br><span class="line">其他：</span><br><span class="line">    可用的主机设备 dev 例如：</span><br><span class="line">        vc</span><br><span class="line">            虚拟终端。</span><br><span class="line">        null</span><br><span class="line">            空设备</span><br><span class="line">        &#x2F;dev&#x2F;XXX</span><br><span class="line">            使用主机的 tty。</span><br><span class="line">        file: filename</span><br><span class="line">            将输出写入到文件 filename 中。</span><br><span class="line">        stdio</span><br><span class="line">            标准输入&#x2F;输出。</span><br><span class="line">        pipe：pipename</span><br><span class="line">            命令管道 pipename。</span><br><span class="line">        等。</span><br><span class="line">    使用 dev 设备的命令如：</span><br><span class="line">        &#96;-serial dev&#39;</span><br><span class="line">            重定向虚拟串口到主机设备 dev 中。</span><br><span class="line">        &#96;-parallel dev&#39;</span><br><span class="line">            重定向虚拟并口到主机设备 dev 中。</span><br><span class="line">        &#96;-monitor dev&#39;</span><br><span class="line">            重定向 monitor 到主机设备 dev 中。</span><br><span class="line">    其他参数：</span><br><span class="line">        &#96;-s&#39;</span><br><span class="line">            等待 gdb 连接到端口 1234。</span><br><span class="line">        &#96;-p port&#39;</span><br><span class="line">            改变 gdb 连接端口到 port。</span><br><span class="line">        &#96;-S&#39;</span><br><span class="line">            在启动时不启动 CPU， 需要在 monitor 中输入 &#39;c&#39;，才能让qemu继续模拟工作。</span><br><span class="line">        &#96;-d&#39;</span><br><span class="line">            输出日志到 qemu.log 文件。</span><br></pre></td></tr></table></figure><p>可以对照启动命令，来进行启动命令的解释，这里不做详解。</p><p>看到参数中<code>-S</code>和<code>-s</code>和<code>-p</code>，我们能知道如何启动<code>qemu</code>的服务端状态，开放相关的端口（默认<code>1234</code>来另<code>gdb</code>连接。</p><h4 id="启动调试"><a href="#启动调试" class="headerlink" title="启动调试"></a>启动调试</h4><p>为了与<code>qemu</code>配合进行源代码级别的调试，需要先让<code>qemu</code>进入<strong>等待gdb调试器的接入</strong>并且<strong>还不能让qemu中的CPU执行</strong>，因此启动qemu的时候，我们需要使用参数<code>-S –s</code>这两个参数来做到这一点，这相当于在<strong>本地的1234端口</strong>开启远程调试功能。</p><p>在qemu内核启动命令后加上<code>-S -s</code>:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">qemu-system-aarch64 -machine virt -m 1024M -cpu cortex-a53 -nographic -kernel target/aarch64-unknown-none-softfloat/debug/blogos_armv8 -S -s</span><br></pre></td></tr></table></figure><p>内核不会马上运行，开始等待<code>gdb</code>的接管。由于我们是写给<code>arm</code>平台的操作系统，自然也需要<code>arm</code>平台的<code>gdb</code>调试工具。在项目根目录中，我们调用交叉编译工具链中的<code>aarch64-none-elf-gdb</code>工具来对程序进行调试。</p><p>保持<code>qemu</code>继续运行，新建一个终端后，在终端中输入：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">aarch64-none-elf-gdb target/aarch64-unknown-none-softfloat/debug/blogos_armv8</span><br></pre></td></tr></table></figure><p>在<code>gdb</code>调试界面中输入：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(gdb) target remote localhost:1234</span><br></pre></td></tr></table></figure><p>连接到<code>qemu</code>中正在准备开始执行的内核后，可以像正常的<code>gdb</code>调试去调试我们的内核。</p><hr><h2 id="实验二-Hello-World"><a href="#实验二-Hello-World" class="headerlink" title="实验二 Hello World"></a>实验二 Hello World</h2><p>上一个实验里，我们已经初步实现了让内核运行一开始输出<code>&quot;Hello World&quot;</code>，也初步了解到程序是如何调用硬件设备的寄存器。然而我们希望能在实验的每一个rust代码文件中，都能方便的调用<code>print</code>，而不是每一次输出都需要写一大串代码。</p><p>用函数模块化固然是个不错的方法，但当我们想调用它时就需要向<code>c</code>语言那样调用<code>stdio.h</code>头文件。这时候我们就需要了解<code>rust</code>本身的一个高级特性：宏</p><p>所以实验二我们将实现<code>rust</code>中最经典的宏：<code>print!</code>和<code>println!</code>，以便于后续的调试输出。</p><p>注：至于实验指导书中关于<code>virt</code>机器和设备树的部分，我会将其放到选做的实验三。实验三选做但是必要，是理解后续实验的关键。另外吐槽的是这节的实验指导书意外的还不错，我可以偷懒一点。</p><hr><h2 id="Write-实例实现和测试"><a href="#Write-实例实现和测试" class="headerlink" title="Write 实例实现和测试"></a>Write 实例实现和测试</h2><h3 id="实例实现"><a href="#实例实现" class="headerlink" title="实例实现"></a>实例实现</h3><p>回顾实验一的<code>main.rs</code>代码，看看我们是如何实现输出<code>Hello World</code>的</p><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> UART0: *<span class="keyword">mut</span> <span class="built_in">u8</span> = <span class="number">0x0900_0000</span> <span class="keyword">as</span> *<span class="keyword">mut</span> <span class="built_in">u8</span>;</span><br><span class="line"><span class="keyword">let</span> out_str = <span class="string">b&quot;Hello World&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> byte <span class="keyword">in</span> out_str &#123;</span><br><span class="line">    <span class="keyword">unsafe</span> &#123;</span><br><span class="line">        ptr::write_volatile(UART0, *byte);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们向<code>UART</code>串口循环写入我们想输出的字符。于是我们定义一个<code>Write</code>结构来实现输出单个字符和字符串：</p><p>新建<code>src/uart_console.rs</code>，定义如下结构：</p><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="comment">//嵌入式系统使用串口，而不是vga，直接输出，没有颜色控制，不记录列号，也没有frame buffer，所以采用空结构</span></span><br><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">struct</span> <span class="title">Writer</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//往串口寄存器写入字节和字符串进行输出</span></span><br><span class="line"><span class="keyword">impl</span> Writer &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">write_byte</span></span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, byte: <span class="built_in">u8</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> UART0: *<span class="keyword">mut</span> <span class="built_in">u8</span> = <span class="number">0x0900_0000</span> <span class="keyword">as</span> *<span class="keyword">mut</span> <span class="built_in">u8</span>;</span><br><span class="line">        <span class="keyword">unsafe</span> &#123;</span><br><span class="line">            ptr::write_volatile(UART0, byte);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">write_string</span></span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, s: &amp;<span class="built_in">str</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> byte <span class="keyword">in</span> s.chars() &#123;</span><br><span class="line">            <span class="keyword">self</span>.write_byte(byte <span class="keyword">as</span> <span class="built_in">u8</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与<code>main.rs</code>中的输出进行对比，便显得很容易理解。我们为<code>Write</code>结构实现<code>core::fmt::Write trait(特性)</code>。继续向文件中加入如下代码：</p><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">impl</span> core::fmt::Write <span class="keyword">for</span> Writer &#123;</span><br><span class="line">  <span class="function"><span class="keyword">fn</span> <span class="title">write_str</span></span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, s: &amp;<span class="built_in">str</span>) -&gt; fmt::<span class="built_in">Result</span> &#123;</span><br><span class="line">      <span class="keyword">self</span>.write_string(s);</span><br><span class="line">      <span class="literal">Ok</span>(())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于我们实现了 write_str ，核心库会帮我们自动实现 write_fmt 。进一步了解这部分内容，可以阅读 rust 官方文档中 <a href="https://doc.rust-lang.org/core/fmt/trait.Write.html">core::fmt::Write 部分</a> 和 <a href="https://doc.rust-lang.org/book/ch10-02-traits.html">rust 官方教程中 Traits</a> 部分。</p><p>基于Rust的<code>core::fmt</code>实现格式化控制，可以使我们方便地打印不同类型的变量。实现<code>core::fmt::Write</code>后，我们就可以使用Rust内置的格式化宏<code>write!</code>和<code>writeln!</code>，这使改结构具有其他语言运行时所提供的格式化控制能力。</p><hr><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>向<code>main.rs</code>中加入测试函数，并修改<code>not_main</code>函数</p><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#[no_mangle]</span> <span class="comment">// 不修改函数名</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function"><span class="keyword">fn</span> <span class="title">not_main</span></span>() &#123;</span><br><span class="line">    print_something();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//以下是测试代码部分</span></span><br><span class="line">include!(<span class="string">&quot;uart_console.rs&quot;</span>);</span><br><span class="line"><span class="comment">//引用Writer需要的控件</span></span><br><span class="line"><span class="keyword">use</span> core::fmt;</span><br><span class="line"><span class="keyword">use</span> core::fmt::Write;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试函数</span></span><br><span class="line"><span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">print_something</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> writer = Writer&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试Writer我们实现的两个函数</span></span><br><span class="line">    writer.write_byte(<span class="string">b&#x27;H&#x27;</span>);</span><br><span class="line">    writer.write_string(<span class="string">&quot;ello &quot;</span>);</span><br><span class="line">    writer.write_string(<span class="string">&quot;Wörld!\n&quot;</span>);</span><br><span class="line">    writer.write_string(<span class="string">&quot;[0] Hello from Rust!&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 验证实现core::fmt::Write自动实现的方法</span></span><br><span class="line">    <span class="keyword">let</span> display: fmt::Arguments = <span class="built_in">format_args!</span>(<span class="string">&quot;hello arguments!\n&quot;</span>);</span><br><span class="line">    writer.write_fmt(display).unwrap();</span><br><span class="line">    <span class="comment">// 使用write!宏进行格式化输出</span></span><br><span class="line">    <span class="built_in">write!</span>(writer, <span class="string">&quot;The numbers are &#123;&#125; and &#123;&#125; \n&quot;</span>, <span class="number">42</span>, <span class="number">1.0</span>/<span class="number">3.0</span>).unwrap();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>cargo build</code>后并运行进行测试</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cargo build</span><br><span class="line">qemu-system-aarch64 -machine virt -m 1024M -cpu cortex-a53 -nographic -kernel target/aarch64-unknown-none-softfloat/debug/blogos_armv8</span><br></pre></td></tr></table></figure><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/blogos-armv8/5.png" alt="测试输出"></p><hr><h2 id="print-和println-封装"><a href="#print-和println-封装" class="headerlink" title="print!和println!封装"></a>print!和println!封装</h2><p>现在我们已经可以采用print_something函数通过串口输出字符了。但为了输出，我们需要两个步骤：</p><p>（1）创建Writer类型的实例</p><p>（2）调用实例的write_byte或write_string等函数。</p><p>为了方便在其他模块中调用，我们希望可以直接执行步骤（2）而不是首先执行上述步骤（1）再执行步骤（2）。</p><p>一般情况下可以通过将步骤（1）中的实例定义为static类型来实现</p><hr><h3 id="Write全局接口"><a href="#Write全局接口" class="headerlink" title="Write全局接口"></a>Write全局接口</h3><p>我们尝试创建一个静态的WRITER变量：编辑<code>src/uart_console.rs</code>，新增：</p><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">static</span> <span class="keyword">ref</span> WRITER: Writer = Writer&#123;&#125;;</span><br></pre></td></tr></table></figure><p>我们尝试构建，却发生了错误。为了明白现在发生了什么，我们需要知道一点：一般的变量在运行时初始化，而静态变量在编译时初始化。Rust编译器规定了一个称为常量求值器<code>（const evaluator）</code>的组件，它应该在编译时处理这样的初始化工作。所以Rust暂不支持Writer这样类型的静态变量（编译时）初始化。</p><ul><li><p>延迟初始化</p><blockquote><p>使用非常函数初始化静态变量是Rust程序员普遍遇到的问题。幸运的是，有一个叫做<code>lazy_static</code>的包提供了一个很棒的解决方案：它提供了名为<code>lazy_static!</code>的宏，定义了一个延迟初始化<code>（lazily initialized）</code>的静态变量；这个变量的值将<strong>在第一次使用时计算，而非在编译时计算</strong>。这时，变量的初始化过程将在运行时执行，任意的初始化代码——无论简单或复杂——都是能够使用的。</p></blockquote><p>  现在我们引入<code>lazy_static</code>包：</p><p>  编辑<code>Cargo.toml</code>，向其中加入如下依赖：(在这里，由于程序不连接标准库，我们需要启用<code>spin_no_std</code>特性。)</p>  <figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="section">[dependencies.lazy_static]</span></span><br><span class="line"><span class="attr">version</span> = <span class="string">&quot;1.0&quot;</span></span><br><span class="line"><span class="attr">features</span> = [<span class="string">&quot;spin_no_std&quot;</span>]</span><br></pre></td></tr></table></figure><p>  然后将上述的静态变量<code>WRITER</code>的定义处套一层<code>lazy_static!</code>宏：</p>  <figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> lazy_static::lazy_static;</span><br><span class="line"></span><br><span class="line">lazy_static! &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">static</span> <span class="keyword">ref</span> WRITER: Writer = Writer&#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  再次编译可发现编译成功。然而，这个WRITER可能没有什么用途，因为它目前还是不可变变量<code>（immutable variable）</code>：这意味着我们无法向它写入数据，因为所有与写入数据相关的方法都需要实例的可变引用<code>&amp;mut self</code>。</p><p>  一种解决方案是使用可变静态<code>（mutable static）</code>的变量，但所有对它的读写操作都被规定为不安全的（unsafe）操作，因为这很容易导致数据竞争或发生其它不好的事情——使用<code>static mut</code>极其不被赞成，甚至有一些提案认为应该将它删除。</p></li><li><p>自旋锁</p><blockquote><p>要定义同步的<strong>内部可变</strong>性，我们往往使用标准库提供的互斥锁类<code>Mutex</code>，它通过提供当资源被占用时将线程阻塞<code>（block）</code>的互斥条件<code>（mutual exclusion）</code>实现这一点；</p><p>但我们初步的内核代码还没有线程和阻塞的概念，我们将不能使用这个类（而且我们也不能用标准库）。不过，我们还有一种较为基础的互斥锁实现方式——自旋锁<code>（spinlock）</code>。</p><p><strong>自旋锁</strong>并不会调用阻塞逻辑，而是<strong>在一个小的无限循环中反复尝试获得这个锁</strong>，也因此会一直占用CPU时间，直到互斥锁被它的占用者释放。</p></blockquote><p>  简单的说，我们在从某个资源中读写数据知识，我们需要保证这个资源一直被我们所占用，<strong>以免被其它的读写操作修改而导致结果错误，或引发一些其他的安全性问题</strong>。（众所周知rust十分注重安全）</p><p>  向<code>Cargo.toml</code>加入如下依赖：</p>  <figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="section">[dependencies]</span></span><br><span class="line"><span class="attr">spin</span> = <span class="string">&quot;0.9.2&quot;</span></span><br></pre></td></tr></table></figure><p>  然后再次修改我们的静态变量<code>WRITER</code>的定义：</p>  <figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> lazy_static::lazy_static;</span><br><span class="line"><span class="keyword">use</span> spin::Mutex;</span><br><span class="line"></span><br><span class="line">lazy_static! &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">static</span> <span class="keyword">ref</span> WRITER: Mutex&lt;Writer&gt; = Mutex::new(Writer &#123; &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  此时我们的<code>WRITER</code>才能可修改的全局静态变量，为我们<code>print!</code>和<code>println</code>宏的实现做好了准备。</p></li></ul><hr><h3 id="实现-print-宏"><a href="#实现-print-宏" class="headerlink" title="实现 print! 宏"></a>实现 print! 宏</h3><p>现在我们可以开始实现<code>print!</code>和<code>println!</code>了。我们继续向<code>src\uart_console.rs</code>中写入：</p><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#[doc(hidden)]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">_print</span></span>(args: fmt::Arguments) &#123;</span><br><span class="line">    <span class="keyword">use</span> core::fmt::Write;</span><br><span class="line">    WRITER.lock().write_fmt(args).unwrap();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[macro_export]</span></span><br><span class="line"><span class="built_in">macro_rules!</span> print &#123;</span><br><span class="line">    ($($arg:tt)*) =&gt; ($crate::uart_console::_print(<span class="built_in">format_args!</span>($($arg)*)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[macro_export]</span></span><br><span class="line"><span class="built_in">macro_rules!</span> println &#123;</span><br><span class="line">    () =&gt; ($crate::<span class="built_in">print!</span>(<span class="string">&quot;\n&quot;</span>));</span><br><span class="line">    ($($arg:tt)*) =&gt; ($crate::<span class="built_in">print!</span>(<span class="string">&quot;&#123;&#125;\n&quot;</span>, <span class="built_in">format_args!</span>($($arg)*)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数<code>_print</code>和<code>print!</code>宏是从标准库中得到的，而<code>println!</code>宏则作了一点修改。</p><p>我们在每个使用的<code>print!</code>宏前面添加了<code>$crate</code>变量。这样我们在只需要使用<code>println!</code>时，不必也编写代码导入<code>print!</code>宏。</p><ol><li><p>首先是关于<code>_print</code>函数：</p><blockquote><p>我们在静态变量<code>WRITER</code>中引入了自旋锁，而<code>_print</code>函数调用时，将通过<code>.lock</code>来完成对<code>WRITER</code>锁的占有。同时<code>_print</code>函数并调用它的write_fmt方法。这个方法是从名为<code>Write</code>的特性中获得的，所以我们需要导入这个特性。额外的<code>unwrap()</code>函数将在打印不成功的时候<code>panic</code>；但实际上我们的<code>write_str</code>总是返回Ok，这种情况不应该发生。</p><p>考虑到这个函数是一个私有的实现细节，我们添加一个doc(hidden)属性，防止它在生成的文档中出现。（事实上这个实验也不会去生成文档）</p></blockquote></li><li><p>根据声明宏的定义，我们为两个宏都添加了#[macro_export]属性，这样在包的其它地方也可以使用它们。</p><blockquote><p>需要注意的是，这将占用包的根命名空间<code>（root namespace）</code>，所以我们调用不能通过<code>use crate::uart_console::print</code>来导入，也不能直接通过<code>crate::uart_console::print!()</code>来调用它。</p></blockquote><p> 故，我们应该使用<code>use crate::print</code>导入或直接通过<code>crate::print!()</code>进行调用。</p></li></ol><hr><h3 id="调用宏并测试"><a href="#调用宏并测试" class="headerlink" title="调用宏并测试"></a>调用宏并测试</h3><p>我们不再以额外文件<code>include!</code>的方式添加到<code>main.rs</code>，而是将其作为模块导入。</p><p>我们删除上一节中<code>main.rs</code>的测试代码，然后修改成如下（最终完整的<code>main.rs</code>文件）</p><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不使用标准库</span></span><br><span class="line"><span class="meta">#![no_std]</span></span><br><span class="line"><span class="comment">// 不使用预定义入口点</span></span><br><span class="line"><span class="meta">#![no_main]</span></span><br><span class="line"><span class="meta">#![feature(global_asm)]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">mod</span> panic;</span><br><span class="line"><span class="keyword">mod</span> uart_console;</span><br><span class="line"></span><br><span class="line">global_asm!(<span class="built_in">include_str!</span>(<span class="string">&quot;start.s&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="meta">#[no_mangle]</span> <span class="comment">// 不修改函数名</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function"><span class="keyword">fn</span> <span class="title">not_main</span></span>() &#123;</span><br><span class="line">    <span class="built_in">print!</span>(<span class="string">&quot;Hello!&quot;</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;[0] Hello from Rust!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并在<code>src/uart_console.rs</code>开头导入<code>fmt</code>和<code>ptr</code>库</p><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> core::&#123;fmt, ptr&#125;;</span><br></pre></td></tr></table></figure><p>然后编译运行：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cargo build</span><br><span class="line">qemu-system-aarch64 -machine virt -m 1024M -cpu cortex-a53 -nographic -kernel target/aarch64-unknown-none-softfloat/debug/rui_armv8_os</span><br></pre></td></tr></table></figure><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/blogos-armv8/6.png" alt="输出宏实现"></p><hr><h2 id="实验三（施工中…）"><a href="#实验三（施工中…）" class="headerlink" title="实验三（施工中…）"></a>实验三（施工中…）</h2>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Course </tag>
            
            <tag> os </tag>
            
            <tag> rust </tag>
            
            <tag> blogos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于linux: 设备树浅析（更新中）</title>
      <link href="36455.html"/>
      <url>36455.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="在设备树还未被广泛使用时的那些事"><a href="#在设备树还未被广泛使用时的那些事" class="headerlink" title="在设备树还未被广泛使用时的那些事"></a>在设备树还未被广泛使用时的那些事</h2><p>电脑手机等设备开机后，bios / bootloader开始启动，它开始执行一些固定的程序，比如启动操作系统，调用系统内核从而让系统调用硬件中的寄存器。</p><p>然后请设想一下：bootloader刚刚将Linux内核复制到内存中，然后跳到内核的入口点开始执行。</p><p>此时内核就像运行在处理器上的一个裸机程序。需要配置处理器，设置虚拟内存，向控制台打印一些信息。但是这些事情如何完成？所有的这些操作都要通过写寄存器来实现，但Linux内核如何知道这些寄存器的地址？如何知道当前有多少个CPU核可以使用？有多少内存可以访问？</p><h3 id="早期解决方案"><a href="#早期解决方案" class="headerlink" title="早期解决方案"></a>早期解决方案</h3><p>最直接的办法就是在内核代码里为指定平台写好这些代码，由内核配置参数决定哪些平台代码将被启用。</p><p>当底层架构都固定不变时这种方法还不错，比如在x86处理器上内部的寄存器，或是BIOS的访问。</p><p>但对于变化量来说， 比如PCI/PCIe外设，就需要内核明确了解这些变化的细节。</p><p>此后的ARM架构及其生态不断扩大，不同的嵌入式设备等开始遍地开花。我们俗称这些设备的主板叫“开发板”，更通俗一点就是“板子”。ARM架构和其生态的扩大不能不说是一件好事，但它同样也给当时的linux社区带来了一个很大的潜在麻烦。因为嵌入式平台中很多公司的芯片采用的都是ARM架构，随着Android的成功，这些代码越来越多。据说常见的平台如s3c2410板级目录下边的代码有数万行，难怪Linux Torvalds会说“this whole ARM thing is a fucking pain in the ass”</p><p>对于每块不同的板子，即使处理器使用相同的编译器和函数，但具体到某一种芯片，它就有自己的寄存器地址和不同的配置方式。不仅如此，每种板子都有自己的外设。</p><p>内核要存这些板子芯片和外设的参数文件啊。但是芯片越来越多，外设也越来越多。内核要存的硬件信息也就越来越多。结果造成内核中有大量的头文件、补丁和特殊的配置参数，它们的一种组合就对应于一款芯片的一种特殊板型。更糟糕的是，这些代码大多是杂乱且重复的，这使得ARM体系结构的代码维护者和内核维护者在发布一个新的版本的时候有大量的工作要做。。</p><p>那有人肯定想说，为什么用哪就只存哪，那不就能省很多空间了嘛。言之有理，但修改内核文件，意味着要重新编译内核，这对于开发者和用户是及其不友好的。另外一点是，一个设备少数的寄存器记录也需要大量的代码，编写设备的配置参数文件也不是特别简单。</p><h3 id="设备树的出现"><a href="#设备树的出现" class="headerlink" title="设备树的出现"></a>设备树的出现</h3><p>那我们如果将这些板级细节丢到内核外呢？这些板级细节被bootloader调用后传递给内核，这样子是不是让内核更加精简，内核对各种板子的兼容性更强，同时可扩展性更高呢？（毕竟设备描述文件已经被丢到外边了，增删改也不需要重新编译内核，再动态的增加减少设备文件也简单了许多）</p><p>这时就需要讲到设备树了。“开放固件设备树(Open Firmware Device Tree)”或简称为设备树（DT）是数据描述硬件的结构和语言。更具体地说，是对操作系统可读的硬件的描述。这样，操作系统就无需对应用程序的详细信息进行硬编码（即设备描述文件丢内核里边）。</p><p>DT最初是由Open Firmware创建的，它是用于将数据从开放固件传递到客户端的通信方法程序（类似于操作系统）。一个操作系统使用了设备树，用于在运行时发现硬件的拓扑，以及从而支持大多数可用硬件。由于开放式固件通常在PowerPC和SPARC平台上使用，Linux对这些架构的支持已经使用设备树很长时间了。这距离linus大怒说出(2011年3月17日)“this whole ARM thing is a f*cking pain in the ass”还早着。于是从2011年3月开始，内核在PowerPC、ARM等体系里正式打算使用设备树。以ARM体系为例，加入设备树的版本就是v3.1，可以在arch/arm/boot/目录下看到dts目录的出现。</p><p>设备树能存我们需要的设备描述文件了，那内核如何调用设备树文件来获取硬件细节信息呢？大概可以这么理解：设备树基本上就是画一棵电路板上CPU、总线、设备组成的树，Bootloader会将这棵树传递给内核，然后内核可以通过驱动和其它手段识别这棵树，并根据它展开出Linux内核中的platform_device、i2c_client、spi_device等设备，而这些设备用到的内存、IRQ等资源，也被传递给了内核，内核会将这些资源绑定给展开的相应的设备。</p><h2 id="浅谈设备树组成及文件类型"><a href="#浅谈设备树组成及文件类型" class="headerlink" title="浅谈设备树组成及文件类型"></a>浅谈设备树组成及文件类型</h2><h3 id="如何理解设备树"><a href="#如何理解设备树" class="headerlink" title="如何理解设备树"></a>如何理解设备树</h3><p>内核中关于设备树的文档位于kernel/Documentation/devicetree/目录。设备树是Power.org组织定义的一套规范，规范文档可以在官网上找到，目前最新的版本是<a href="https://www.power.org/documentation/epapr-version-1-1/%E3%80%82**%E8%AE%BE%E5%A4%87%E6%A0%91%E6%98%AF%E4%BB%8E%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8%E7%9A%84%E8%A7%92%E5%BA%A6%E6%8F%8F%E8%BF%B0%E7%A1%AC%E4%BB%B6%E7%9A%84%EF%BC%8C%E4%B8%8D%E6%98%AF%E4%BB%8E%E7%A1%AC%E4%BB%B6%E8%AE%BE%E8%AE%A1%E7%9A%84%E8%A7%92%E5%BA%A6%E6%8F%8F%E8%BF%B0%E7%9A%84%E3%80%82%E6%88%91%E4%BB%AC%E5%9C%A8%E5%86%99%E8%AE%BE%E5%A4%87%E6%A0%91%E6%97%B6%E6%B2%A1%E6%9C%89%E5%BF%85%E8%A6%81%E6%8C%89%E7%85%A7%E7%A1%AC%E4%BB%B6%E9%80%BB%E8%BE%91%E7%94%9F%E6%90%AC%E7%A1%AC%E5%A5%97%EF%BC%8C%E4%B9%9F%E4%B8%8D%E8%A6%81%E6%8C%87%E6%9C%9B%E9%80%9A%E8%BF%87%E9%98%85%E8%AF%BB%E8%AE%BE%E5%A4%87%E6%A0%91%E5%BC%84%E6%B8%85%E6%A5%9A%E7%A1%AC%E4%BB%B6%E6%98%AF%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1%E7%9A%84%E3%80%82%E5%AF%B9%E4%BA%8E%E8%BD%AF%E4%BB%B6%E5%8F%AF%E4%BB%A5%E8%87%AA%E5%8A%A8%E8%AF%86%E5%88%AB%E7%9A%84%E7%A1%AC%E4%BB%B6%EF%BC%8C%E5%A6%82USB%E8%AE%BE%E5%A4%87%EF%BC%8CPCI%E8%AE%BE%E5%A4%87%EF%BC%8C%E4%B9%9F%E6%98%AF%E6%B2%A1%E6%9C%89%E5%BF%85%E8%A6%81%E9%80%9A%E8%BF%87%E8%AE%BE%E5%A4%87%E6%A0%91%E6%8F%8F%E8%BF%B0%E7%9A%84%E3%80%82">https://www.power.org/documentation/epapr-version-1-1/。**设备树是从软件使用的角度描述硬件的，不是从硬件设计的角度描述的。我们在写设备树时没有必要按照硬件逻辑生搬硬套，也不要指望通过阅读设备树弄清楚硬件是如何设计的。对于软件可以自动识别的硬件，如USB设备，PCI设备，也是没有必要通过设备树描述的。</a>**</p><p>规范内容是可以分为两个层次的。第一层是关于设备树组织形式的，如设备树结构，节点名字的构成等，第一个层次是基础，是理解第二个层次的前提。第二层是关于设备树内容的，如多核CPU怎样描述，一个具体的设备如何描述。第二层可以看成是第一层的具体应用。相对来说第二层内容更多，更具体，根据描述的内容不同，定义规范的方式也有差别，比如关于CPU，内存，中断这些基础的内容，是在epapr中说明的，而关于外设的规范是在专门的地方说明的。</p><p>设备树首先是一个树形结构，并且是一棵树。除了根节点外其他子节点都有唯一的父节点，节点下可以有子节点和属性(子节点可以看成是树枝，属性可以看成是叶子)。属性由名字和值组成(名字是必须的，但是值不是必须的，如果只要根据是否存在这个属性就可以表示我们想要的功能，那么可以不需要有值)。如：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">从内核代码中截取的一个DTS片段。</span><br><span class="line"> </span><br><span class="line"> “&#x2F;”表示根节点。</span><br><span class="line"> “model &#x3D; &quot;Newflow AM335x NanoBone&quot;”是根节点下边的属性。</span><br><span class="line"> “cpus”是根节点的一个子节点。</span><br><span class="line"> “cpu0-supply &#x3D; &lt;&amp;dcdc2_reg&gt;”是“cpu@0”子节点下的属性。</span><br><span class="line"></span><br><span class="line"> 节点下的属性用来表示节点的特性，子节点和父节点具有一定的从属关系。</span><br></pre></td></tr></table></figure><p><strong>真实的硬件不可能是这样规则的树形结构，所以设备树仅是软件开发人员为了描述硬件而做的一个近似表示而已，连抽象都算不上。</strong></p><h3 id="设备树文件类型"><a href="#设备树文件类型" class="headerlink" title="设备树文件类型"></a>设备树文件类型</h3><p>设备树包含DTC（device tree compiler），DTS（device tree source）和DTB（device tree blob）。</p><p><strong>DTS(device tree source)</strong></p><p>.dts文件是一种对Device Tree的ASCII文本描述，一个dts文件对应一个ARM架构的machine。但是一个SOC板可能对应多个产品。这些产品的dts文件会存在大量冗余。为了简化，Device Tree将这些冗余提炼为.dtsi文件，dtsi文件相当于C语言的头文件，dts文件需要include引入dtsi文件。</p><p>通常，soc厂商会将soc的硬件信息或多个开发板公用的硬件部分写成dtsi文件，将特定于某块开发板的信息写成dts文件，这样，dts文件+dtsi文件就构成了完整的设备树。</p><p><strong>DTC(编译工具)</strong></p><p>DTC为编译工具，它可以将.dts文件编译成.dtb文件。DTC的源码位于内核的scripts/dtc目录下，内核选中CONFIG_OF，编译内核的时候，主机可执行程序DTC就会被编译出来。</p><p><strong>DTB(二进制文件)</strong></p><p>DTC编译.dts生成的二进制文件(.dtb),bootloader在引到内核时，会预先读取.dtb到内存，进而由内核解析。</p><h2 id="设备树被各种东西的调用解析"><a href="#设备树被各种东西的调用解析" class="headerlink" title="设备树被各种东西的调用解析"></a>设备树被各种东西的调用解析</h2><p>设备树从二进制文件状态被bootloader调用，再到内核读取设备树的信息并解析，大体可以区分两步。一步是硬件层面上的，也就是bootloader加载设备树到内存中；第二步是内核解析设备树，使其像早期的platform文件一样能被识别并匹配对应的硬件，然后与调用它们的软件相绑定。</p><h3 id="dtb文件如何被加载到内存"><a href="#dtb文件如何被加载到内存" class="headerlink" title="dtb文件如何被加载到内存"></a>dtb文件如何被加载到内存</h3><p>相关资料链接：<a href="https://www.cnblogs.com/zongzi10010/p/10793084.html">https://www.cnblogs.com/zongzi10010/p/10793084.html</a></p><p>首先要明确的是U-boot的启动：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bootm &lt;uImage_addr&gt;                            &#x2F;&#x2F; 无设备树, 如bootm 0x30007FC0</span><br><span class="line">bootm &lt;uImage_addr&gt; &lt;initrd_addr&gt; &lt;dtb_addr&gt;   &#x2F;&#x2F; 有设备树 </span><br></pre></td></tr></table></figure><p>可以看到在有设备树的情况下，第三个参数 <code>&lt;dtb_addr&gt;</code>指向了设备树文件 <code>.dtb</code>的具体地址，我们对其做解析即可。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (argc == <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="comment">//第三个参数argv[3]就是设备树地址</span></span><br><span class="line">    of_flat_tree = (<span class="keyword">char</span> *) simple_strtoul(argv[<span class="number">3</span>], <span class="literal">NULL</span>, <span class="number">16</span>);</span><br><span class="line">    <span class="comment">/* unsigned long simple_strtoul(const char *cp, char **endp, unsigned int base)</span></span><br><span class="line"><span class="comment">        功能：将一个字符串转换成unsigend long型数据。</span></span><br><span class="line"><span class="comment">        返回：返回转换后数据。*/</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>  (be32_to_cpu(*(ulong *)of_flat_tree) == OF_DT_HEADER) &#123;</span><br><span class="line"><span class="comment">// 大小端转换函数，le32_to_cpu is used for convesions from 32bit little endian data into CPUs endianness，大多数情况下无事发生</span></span><br><span class="line">  </span><br><span class="line"><span class="built_in">printf</span> (<span class="string">&quot;\nStarting kernel with device tree at 0x%x...\n\n&quot;</span>, of_flat_tree);</span><br><span class="line"></span><br><span class="line">        cleanup_before_linux ();<span class="comment">// 加载前的一些清理工作</span></span><br><span class="line"></span><br><span class="line">        theKernel (<span class="number">0</span>, bd-&gt;bi_arch_number, of_flat_tree);<span class="comment">// //把dtb的地址传到r2寄存器里</span></span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Bad magic of device tree at 0x%x!\n\n&quot;</span>, of_flat_tree);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终的启动流程如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nand read.jffs2 0x30007FC0 kernel;     &#x2F;&#x2F; 读内核uImage到内存0x30007FC0</span><br><span class="line">nand read.jffs2 0x32000000 device_tree;  &#x2F;&#x2F; 读dtb到内存32000000</span><br><span class="line">bootm 0x30007FC0 - 0x32000000          &#x2F;&#x2F; 启动, 没有initrd时对应参数写为&quot;-&quot;</span><br></pre></td></tr></table></figure><p>然而这个 <code>0x32000000</code>地址是如何被确定的？它有什么样的要求？</p><h3 id="设备树文件的内存选址"><a href="#设备树文件的内存选址" class="headerlink" title="设备树文件的内存选址"></a>设备树文件的内存选址</h3><p>显然以下几个需求：</p><ul><li>不要破坏u-boot本身</li><li>内核本身的空间不能占用, 内核要用到的内存区域也不能占用</li><li>内核启动时一般会在它所处位置的下边放置页表, 这块空间(一般是0x4000即16K字节)不能被占用</li></ul><p>前两条都容易理解，第三条属于内核的知识，在此我们不谈</p><p>这里引用资料中的一张图。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">                   ------------------------------</span><br><span class="line">0x33f80000       -&gt;|    u-boot                  | 分析lds链接文件</span><br><span class="line">                   ------------------------------</span><br><span class="line">                   |    u-boot所使用的内存(栈等)|</span><br><span class="line">                   ------------------------------</span><br><span class="line">                   |                            |</span><br><span class="line">                   |                            |</span><br><span class="line">                   |        空闲区域             |</span><br><span class="line">                   |                            |</span><br><span class="line">                   |                            |</span><br><span class="line">                   |                            |</span><br><span class="line">                   |                            |</span><br><span class="line">                   ------------------------------</span><br><span class="line">0x30008000       -&gt;|      zImage                |</span><br><span class="line">                   ------------------------------  uImage（压缩后的内核映像） &#x3D; 64字节的头部+zImage</span><br><span class="line">0x30007FC0       -&gt;|      uImage头部            |</span><br><span class="line">                   ------------------------------</span><br><span class="line">0x30004000       -&gt;|      内核创建的页表         |  head.S</span><br><span class="line">                   ------------------------------</span><br><span class="line">                   |                            |</span><br><span class="line">                   |                            |</span><br><span class="line">            -----&gt; ------------------------------</span><br><span class="line">            |</span><br><span class="line">            |</span><br><span class="line">            --- (内存基址 0x30000000)</span><br></pre></td></tr></table></figure><p>显然 <code>0x30000000</code>到 <code>0x30004000</code>之间的空间不能被拿来作为设备树的内存存放地址。而中间的空闲部分虽然可以使用，但又不能放到开头。zImage我们只知道它的开始地址是 <code>0x30008000</code>，大小未知即结束位置未知。一般而言，内核所占的内存在几百M到几G之间，把dtb丢在空闲区域的前部分显然是不理智的。</p><p>然后看到U-boot的起始地址 <code>0x33f80000</code>，其所用内存都丢在其地址下边的空间。所以从dtb文件地址开始，到U-boot的起始地址，之间的空间要包含下dtb的文件大小以及U-boot的内存使用。这俩玩意还都是动态的内存大小，这对dtb文件的内存地址确定造成了麻烦。</p><p>这里我推测设备树文件起始地址 <code>0x32000000</code>是对应资料实验环境所得到的一个较不错的内存地址选择。最后这部分的内存图示如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">                   ------------------------------</span><br><span class="line">0x33f80000       -&gt;|    u-boot                  | 分析lds链接文件</span><br><span class="line">                   ------------------------------</span><br><span class="line">                   |    u-boot所使用的内存(栈等)|</span><br><span class="line">                   ------------------------------</span><br><span class="line">                   |      动态空闲              |</span><br><span class="line">    ------------------------------</span><br><span class="line">0x32000000       -&gt;|      dtb                   |  设备树文件</span><br><span class="line">    ------------------------------</span><br><span class="line">                   |      空闲地址              |</span><br><span class="line">                   ------------------------------</span><br><span class="line">0x30008000       -&gt;|      zImage                |</span><br><span class="line">                   ------------------------------  uImage（压缩后的内核映像） &#x3D; 64字节的头部+zImage</span><br><span class="line">0x30007FC0       -&gt;|      uImage头部            |</span><br><span class="line">                   ------------------------------</span><br><span class="line">0x30004000       -&gt;|      内核创建的页表        |  head.S</span><br><span class="line">                   ------------------------------</span><br><span class="line">                   |                            |</span><br><span class="line">                   |                            |</span><br><span class="line">            -----&gt; ------------------------------</span><br><span class="line">            |</span><br><span class="line">            |</span><br><span class="line">            --- (内存基址 0x30000000)</span><br></pre></td></tr></table></figure><p>当然如果以一个破坏页表的方式来启动是启动不起来的，例如：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nand read.jffs2 30004000 device_tree</span><br><span class="line">nand read.jffs2 0x30007FC0 kernel</span><br><span class="line">bootm 0x30007FC0 - 30004000</span><br></pre></td></tr></table></figure><h3 id="内核解析设备树的具体流程（自己还没整理）"><a href="#内核解析设备树的具体流程（自己还没整理）" class="headerlink" title="内核解析设备树的具体流程（自己还没整理）"></a>内核解析设备树的具体流程（自己还没整理）</h3><p>相关资料链接：<a href="https://blog.csdn.net/qq_40537232/article/details/115507062">https://blog.csdn.net/qq_40537232/article/details/115507062</a> 、 <a href="https://www.cnblogs.com/zongzi10010/p/10793082.html">https://www.cnblogs.com/zongzi10010/p/10793082.html</a></p><p>过程大致如下：</p><ul><li>dtb展开为device_node</li><li>device_node展开为platform_device</li><li>设备匹配</li></ul><h2 id="设备树编写应用（略）"><a href="#设备树编写应用（略）" class="headerlink" title="设备树编写应用（略）"></a>设备树编写应用（略）</h2><p>此部分先略过，还没摸到。</p><p>原则上这部分内容是要详细了解上部分内容的，这里只做个简略介绍。具体工程里，首先看的还是文档。文档是对各种node 的描述，位于内核documentation/devicetree/bingdings/arm/下。很多上层应用开发者没有做过内核开发的经验，对内核一直觉得很神秘，其实可以换一种思路来看内核，相信上层应用开发者最熟悉的就是各种API，工作中可以说就是和API 打交道，对于内核也可以想象是各种API，只不过是内核态的API。</p><p>这里设备文件就是根据各种内核态的API 来调用设备树里的板级信息：</p><ul><li>struct device_node *of_find_node_by_phandle(phandle handle)</li><li>struct device_node *of_get_parent(const struct device_node_ *node)</li><li>of_get_child_count()</li><li>of_property_read_u32_array()</li><li>of_property_read_u64()</li><li>of_property_read_string()</li><li>of_property_read_string_array()</li><li>of_property_read_bool()</li></ul><p>具体的用法这里不做进一步的解释，可以查看官网文档或者上一节提供的资料链接。</p><h2 id="结"><a href="#结" class="headerlink" title="结"></a>结</h2><p>回过头来看设备树的作用。</p><ol><li>平台标识，所谓平台标识就是板级识别，让内核知道当前使用的是哪个开发板，这里识别的方式是根据 root 节点下的 compatible 字段来匹配。</li><li>是运行时配置，就是在内核启动的时候 ramdisk 的配置，比如 bootargs 的配置，ramdisk 的起始和结束地址。</li><li>是设备信息集合，这也是最重要的信息，集合了各种设备控制器。</li></ol><p>理解设备树还是需要具体去看源码解析和编写规范的，只有实操过才能有真知。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Course </tag>
            
            <tag> DTS </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>猹的魔改日记-小菜单和复制/F12提示栏</title>
      <link href="40244.html"/>
      <url>40244.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><div class="note red icon flat"><i class="note-icon fas fa-fan"></i><p>温馨提示：本日记本只提供魔改参考，并不做通用处理，很多源码修改都需要根据自己博客做小小微调</p></div><div class="note purple icon flat"><i class="note-icon far fa-hand-scissors"></i><p>另外在修改源码时注意做好备份处理。本帖只提供思路与方法，如果哪里炸了，请检查语法与缩进等，猹概不负责啦！</p></div><p>继白嫖<a href="https://akilar.top/">店长</a>、<a href="https://zfe.space/">冰老师</a>、<a href="https://www.antmoe.com/">小康</a>、<a href="https://www.nesxc.com/">小N</a>等大佬的魔改之后，猹终于不满于白嫖，开始想动手实操，把自己的博客调教成想要的样子，也以此来使猹学前端有实操的机会。</p><p>当然在整个站点还没修改完之前，这些魔改内容只会在<a href="https://blogdev.noionion.top/">猹的魔改测试站</a>出现。你可以在测试站点进行预览。<del>（当然测试站点会有非常多的bug和还没调的设置和样式，这些也不需要和猹吐槽）</del>在魔改完成之前主站也不会再做任何样式调整</p><p><strong>注</strong>：这部分前言内容会在魔改日记本的每一篇都出现；另外这是一篇日记而非教程，文风可能不是那么友好（逃</p><hr><h2 id="小菜单的调整"><a href="#小菜单的调整" class="headerlink" title="小菜单的调整"></a>小菜单的调整</h2><h3 id="缘由"><a href="#缘由" class="headerlink" title="缘由"></a>缘由</h3><p>其实小菜单的魔改要从上篇日记说起。双栏变单栏，就需要把侧边栏有用的部分提取出来。对于我而言，侧边栏最有用的莫过于作者卡片和文章页的目录，至于统计也算稍稍有用（数据咱还是偶尔要康康的嘛），这个可以丢页脚。</p><p>在上篇日记中，我已经实现了侧边菜单栏集成作者卡片。但是侧栏只有移动端具备，电脑端整一个侧边菜单栏显然不合适。那么小菜单就成了丢作者卡片的好去处。而目录丢小菜单也是再合适不过了，本来butterfly主题的移动端也是这么干的。现在就差怎么设计合适了。</p><p>我前前后后想过了好多个方案，有类似于两侧加雷姆角标的（来自火喵的建议，想试试的可以直接引入<code>&lt;script src=&quot;https://cdn.jsdelivr.net/gh/fz6m/lamu-leimu-button@1.2/dist/lamu-leimu.min.js&quot;&gt;&lt;/script&gt; # 拉姆雷姆角标参考</code>；还有类似书签一样的侧边菜单；最后写了现在这版</p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20211130201321.png" style="zoom: 67%;" /><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20211130201410.png" style="zoom:66%;" /></p><p>另外其实这篇魔改大部分是可以直接用的（只要你只限于我开的这些功能的话</p><details cyan><summary> 基础面板布局和样式 </summary>              <div class='content'>              <p>本身卡片直接从侧边栏的源码直接扒就有，只有样式和JS函数算是对于我来讲真正麻烦的东西。毕竟是个前端大白菜，很多东西还是得一步一步来。</p><p>首先是html的原本代码。除开目录页，小功能菜单显然能在电脑端时有作者卡片、跳转最顶和展开关闭，而在文章页（这个判断hexo有内部函数可以实现）则必须有目录和评论跳转功能。最基本的几项功能就有了。因为展开和关闭写在一起再用js、css去完成动画的变化显然比分开写两个要难，所以不如写两个再去控制显隐吧。</p><p>把原先的<code>[root]\themes\butterfly\layout\includes\rightside.pug</code>备份，重写一份代码</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#rightside</span></span><br><span class="line">  <span class="comment">#rightside-menu</span></span><br><span class="line">    //- 作者UI卡片</span><br><span class="line">    <span class="comment">#rightside-avatar-card</span></span><br><span class="line">      .<span class="keyword">is</span>-center<span class="comment">#rightside-avatar</span></span><br><span class="line">        .avatar-img</span><br><span class="line">          img(src=url_for(theme.avatar.img) onerror=`this.onerror=null;this.src=<span class="string">&#x27;` + url_for(theme.error_img.flink) + `&#x27;</span>` alt=<span class="string">&quot;avatar&quot;</span>)</span><br><span class="line">        .author-info__name= config.author</span><br><span class="line">        .author-info__description!= theme.aside.card_author.description || config.description</span><br><span class="line">      </span><br><span class="line">      .site-data</span><br><span class="line">        <span class="keyword">if</span> site.posts.length</span><br><span class="line">          .data-item.<span class="keyword">is</span>-center</span><br><span class="line">            .data-item-link</span><br><span class="line">              a(href=url_for(config.archive_dir) + <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">                .headline= _p(<span class="string">&#x27;aside.articles&#x27;</span>) </span><br><span class="line">                .length-num= site.posts.length</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> site.tags.length</span><br><span class="line">          .data-item.<span class="keyword">is</span>-center</span><br><span class="line">            .data-item-link</span><br><span class="line">              a(href=url_for(config.tag_dir) + <span class="string">&#x27;/&#x27;</span> )</span><br><span class="line">                .headline= _p(<span class="string">&#x27;aside.tags&#x27;</span>)</span><br><span class="line">                .length-num= site.tags.length</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> site.categories.length</span><br><span class="line">          .data-item.<span class="keyword">is</span>-center</span><br><span class="line">            .data-item-link</span><br><span class="line">              a(href=url_for(config.category_dir) + <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">                .headline= _p(<span class="string">&#x27;aside.categories&#x27;</span>) </span><br><span class="line">                .length-num= site.categories.length</span><br><span class="line"></span><br><span class="line">      //- begin follow_me按钮</span><br><span class="line">      <span class="keyword">if</span> theme.aside.card_author.button.enable</span><br><span class="line">        a<span class="comment">#card-info-btn.button--animated(href=theme.aside.card_author.button.link)</span></span><br><span class="line">          i(class=theme.aside.card_author.button.icon)</span><br><span class="line">          span=theme.aside.card_author.button.text</span><br><span class="line">      //- end</span><br><span class="line">        </span><br><span class="line">      //- begin 社交</span><br><span class="line">      <span class="keyword">if</span>(theme.social)</span><br><span class="line">        .menu-info-social-icons.<span class="keyword">is</span>-center</span><br><span class="line">          !=fragment_cache(<span class="string">&#x27;social&#x27;</span>, function()&#123;<span class="keyword">return</span> partial(<span class="string">&#x27;includes/header/social&#x27;</span>)&#125;)</span><br><span class="line">      //- end</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#rightside-menus.is-center</span></span><br><span class="line">      //- 繁简体切换</span><br><span class="line">        button<span class="comment">#rightside-childmenu-translate(type=&quot;button&quot;, title=_p(&#x27;rightside.translate_title&#x27;))</span></span><br><span class="line">          i.fas.fa-cog.fa-spin</span><br><span class="line">      //- 目录</span><br><span class="line">      <span class="keyword">if</span> is_post()</span><br><span class="line">        button<span class="comment">#rightside-childmenu-contents(type=&quot;button&quot;, title=&quot;目录&quot;)</span></span><br><span class="line">          i.fas.fa-<span class="built_in">list</span>-ul</span><br><span class="line">      //- 跳转评论</span><br><span class="line">      <span class="keyword">if</span> is_post()</span><br><span class="line">        button<span class="comment">#rightside-childmenu-comment(href=&quot;#post-comment&quot; title=_p(&quot;rightside.scroll_to_comment&quot;))</span></span><br><span class="line">          i.fas.fa-comments</span><br><span class="line">      //- 跳转最上</span><br><span class="line">      button<span class="comment">#rightside-childmenu-go-up(type=&quot;button&quot; title=_p(&quot;rightside.back_to_top&quot;))</span></span><br><span class="line">        i.fas.fa-arrow-up</span><br><span class="line">      //- 菜单展开/关闭</span><br><span class="line">      button<span class="comment">#rightside-childmenu-unfold(type=&quot;button&quot; title=&quot;展开菜单&quot;)</span></span><br><span class="line">        i.fas.fa-angle-up</span><br><span class="line">      button<span class="comment">#rightside-childmenu-fold(type=&quot;button&quot; title=&quot;收起菜单&quot;)</span></span><br><span class="line">        i.fas.fa-angle-down</span><br></pre></td></tr></table></figure><p>html的基本架构就有了</p><p>现在来考虑每一部分的css。这里就不唠嗑咋写的了，不断调试出真知喽（记得不忘黑夜模式）</p><figure class="highlight styl"><table><tr><td class="code"><pre><span class="line">rightside-menu</span><br><span class="line">  <span class="attribute">position</span>: absolute</span><br><span class="line">  <span class="attribute">transform</span>: translate(-<span class="number">13rem</span>, -<span class="number">21rem</span>)</span><br><span class="line">  #rightside-avatar-card</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="number">#000</span></span><br><span class="line">    <span class="attribute">background</span>: linear-gradient(<span class="number">60deg</span>, <span class="number">#ffd7e4</span> <span class="number">0%</span>, <span class="number">#c8f1ff</span> <span class="number">100%</span>)</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">1rem</span></span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0.5rem</span> <span class="number">1rem</span> <span class="number">0.5rem</span> <span class="number">1rem</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">12rem</span></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">19.6rem</span></span><br><span class="line">    <span class="attribute">display</span>: none</span><br><span class="line">    <span class="comment">//transform: translate(-20px, -20px)</span></span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&#x27;aqqxs&#x27;</span>, sans-serif</span><br><span class="line">    #rightside-avatar</span><br><span class="line">      <span class="attribute">margin-top</span>: <span class="number">0.3rem</span></span><br><span class="line">    <span class="comment">/* 手机侧栏菜单展开 信息、头像位置调整*/</span></span><br><span class="line">    .site-data</span><br><span class="line">      <span class="attribute">margin-top</span>: <span class="number">0.5rem</span></span><br><span class="line">      <span class="attribute">display</span>: table</span><br><span class="line">      <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">0.5rem</span></span><br><span class="line">      <span class="attribute">width</span>: <span class="number">100%</span></span><br><span class="line">      <span class="attribute">table-layout</span>: fixed</span><br><span class="line">      .data-item</span><br><span class="line">        <span class="attribute">display</span>: table-cell</span><br><span class="line">    <span class="comment">/* 分类等字体加粗 */</span></span><br><span class="line">    .headline</span><br><span class="line">      <span class="attribute">font-size</span>: <span class="number">0.875rem</span></span><br><span class="line">      <span class="attribute">color</span>: <span class="number">#000</span></span><br><span class="line">    .length-num</span><br><span class="line">      <span class="attribute">font-size</span>: <span class="number">0.8rem</span> <span class="meta">!important</span></span><br><span class="line">      <span class="attribute">color</span>: <span class="number">#000</span></span><br><span class="line">    .author-info__name</span><br><span class="line">      <span class="attribute">color</span>: <span class="number">#000</span></span><br><span class="line">    .author-info__description</span><br><span class="line">      <span class="attribute">color</span>: <span class="number">#000</span></span><br><span class="line">    <span class="comment">/* 作者名 */</span></span><br><span class="line">    .author-info__name</span><br><span class="line">      <span class="attribute">font-weight</span>: <span class="number">500</span></span><br><span class="line">      <span class="attribute">font-size</span>: <span class="number">1.57em</span></span><br><span class="line">    <span class="comment">/* 手机侧栏菜单展开 follow_me按钮*/</span></span><br><span class="line">    #card-info-btn</span><br><span class="line">      <span class="attribute">display</span>: block</span><br><span class="line">      <span class="attribute">margin</span>: <span class="number">0.3rem</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line">      <span class="attribute">background-color</span>: var(--btn-bg)</span><br><span class="line">      <span class="attribute">color</span>: var(--btn-color)</span><br><span class="line">      <span class="attribute">text-align</span>: center</span><br><span class="line">      <span class="attribute">line-height</span>: <span class="number">2.4</span></span><br><span class="line">      <span class="attribute">overflow</span>: hidden</span><br><span class="line">      <span class="attribute">border-radius</span>: <span class="number">0.625rem</span></span><br><span class="line">    <span class="comment">/* 手机侧栏菜单展开 社交图标 */</span></span><br><span class="line">    .menu-info-social-icons</span><br><span class="line">      <span class="attribute">margin</span>: <span class="number">0.5rem</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line">      .social-<span class="attribute">icon</span></span><br><span class="line">        <span class="attribute">display</span>: inline</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">0.3rem</span> <span class="number">0</span> <span class="number">0.3rem</span></span><br><span class="line"></span><br><span class="line">  #rightside-menus</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0.5rem</span> <span class="number">1rem</span> <span class="number">0.5rem</span> <span class="number">1rem</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">12rem</span></span><br><span class="line">    <span class="attribute">transform</span>: translateY(<span class="number">19.6rem</span>)</span><br><span class="line">    #rightside-childmenu-contents</span><br><span class="line">    #rightside-childmenu-comment</span><br><span class="line">      <span class="attribute">visibility</span>: hidden</span><br><span class="line">    #rightside-childmenu-fold</span><br><span class="line">      <span class="attribute">display</span>: none</span><br><span class="line">    <span class="comment">/* 功能按钮栏 */</span></span><br><span class="line">    button</span><br><span class="line">      <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="number">#000</span></span><br><span class="line">      <span class="attribute">height</span>: <span class="number">2rem</span></span><br><span class="line">      <span class="attribute">width</span>: <span class="number">2rem</span></span><br><span class="line">      <span class="attribute">border-radius</span>: <span class="number">0.6rem</span></span><br><span class="line">      <span class="attribute">background</span>: var(--card-bg)</span><br><span class="line">      <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0.15rem</span> <span class="number">0</span> <span class="number">0.15rem</span></span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span></span><br><span class="line">  #rightside-menu</span><br><span class="line">    #rightside-avatar-card</span><br><span class="line">      <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="number">#fff</span></span><br><span class="line">      <span class="attribute">background</span>: linear-gradient(<span class="number">60deg</span>, <span class="number">#2c0c16</span> <span class="number">0%</span>, <span class="number">#043749</span> <span class="number">100%</span>)</span><br><span class="line">      .author-info__name</span><br><span class="line">      .author-info__description</span><br><span class="line">      .headline</span><br><span class="line">      .length-num</span><br><span class="line">        <span class="attribute">color</span>: <span class="number">#fff</span></span><br><span class="line">    #rightside-menus</span><br><span class="line">      button</span><br><span class="line">        <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="number">#fff</span></span><br><span class="line">        <span class="attribute">background</span>: <span class="number">#000</span></span><br><span class="line">        .fas</span><br><span class="line">          <span class="attribute">color</span>: <span class="number">#fff</span></span><br></pre></td></tr></table></figure><p>样子基本成行啦（正常而言的显隐状态也已经写进上面的代码里了）</p>              </div>            </details><details red><summary> 目录布局和样式 </summary>              <div class='content'>              <p>按照这个布局，我们其实只需要在作者卡片相同位置上覆盖一层相同块大小的目录即可。这样空间也不会显得太挤。</p><p>所以再加入新的html和css来描述目录和样式（一般而言鼠标在停留于目录某一项时，此项重点突出会更好一点，所以给他加上了hover的样式。至于追踪页面定位目录调项，这咱还不会就没做）</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> is_post()</span><br><span class="line">  <span class="comment">#rightside-contents</span></span><br><span class="line">    //- - let tocNumber = page.toc_number !== undefined ? page.toc_number : theme.toc.number</span><br><span class="line">    <span class="comment">#card-toc.card-widget</span></span><br><span class="line">      .item-headline.<span class="keyword">is</span>-center</span><br><span class="line">        i.fas.fa-stream</span><br><span class="line">        span= _p(<span class="string">&#x27;aside.card_toc&#x27;</span>)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (page.encrypt == true)</span><br><span class="line">        .toc-content.toc-div-class(style=&quot;display:none&quot;)!=toc(page.origin, &#123;list_number: tocNumber&#125;)</span><br><span class="line">      <span class="keyword">else</span> </span><br><span class="line">        .toc-content!=toc(page.content, &#123;list_number: tocNumber&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight styl"><table><tr><td class="code"><pre><span class="line">#rightside-contents</span><br><span class="line">  <span class="attribute">position</span>: absolute</span><br><span class="line">  <span class="attribute">transform</span>: translate(-<span class="number">13rem</span>, -<span class="number">21rem</span>)</span><br><span class="line">  <span class="attribute">display</span>: none</span><br><span class="line">  #card-toc</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="number">#000</span></span><br><span class="line">    <span class="attribute">background</span>: linear-gradient(<span class="number">60deg</span>, <span class="number">#ffd7e4</span> <span class="number">0%</span>, <span class="number">#c8f1ff</span> <span class="number">100%</span>)</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">1rem</span></span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0.5rem</span> <span class="number">1rem</span> <span class="number">0.5rem</span> <span class="number">1rem</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">12rem</span></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">19.6rem</span></span><br><span class="line">    .item-headline</span><br><span class="line">      <span class="attribute">font-size</span>: <span class="number">1rem</span></span><br><span class="line">      span</span><br><span class="line">        <span class="attribute">margin-left</span>: <span class="number">0.5rem</span></span><br><span class="line">        <span class="attribute">font-family</span>: <span class="string">&#x27;aqqxs&#x27;</span>, sans-serif</span><br><span class="line">    <span class="selector-tag">span</span>.toc-text</span><br><span class="line">      <span class="attribute">color</span>: <span class="number">#000</span></span><br><span class="line">    .toc</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">105%</span></span><br><span class="line">      <span class="attribute">overflow-y</span>: scroll</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">16.3rem</span></span><br><span class="line">      <span class="attribute">margin-top</span>: -<span class="number">0.3rem</span></span><br><span class="line">      <span class="attribute">margin-left</span>: -<span class="number">0.7rem</span></span><br><span class="line">      .toc-child</span><br><span class="line">        <span class="attribute">margin-left</span>: -<span class="number">1rem</span></span><br><span class="line">      &amp;::-webkit-scrollbar</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">0</span></span><br><span class="line">    .toc-link</span><br><span class="line">      <span class="attribute">display</span>: block</span><br><span class="line">      padding-left: .3rem</span><br><span class="line">      <span class="attribute">border-left</span>: <span class="number">3px</span> solid transparent</span><br><span class="line">      <span class="attribute">color</span>: var(--toc-link-color)</span><br><span class="line">      <span class="attribute">transition</span>: all <span class="number">0.6s</span> ease-in-out</span><br><span class="line">      <span class="attribute">margin</span>: <span class="number">0.1rem</span> <span class="number">0</span> <span class="number">0.1rem</span> <span class="number">0.1rem</span></span><br><span class="line">      &amp;:hover</span><br><span class="line">        <span class="attribute">background</span>: var(--btn-bg)</span><br><span class="line">        <span class="attribute">border-radius</span>: <span class="number">0.4rem</span></span><br><span class="line">        <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0.2rem</span> <span class="number">#000</span></span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">0.3rem</span> <span class="number">0</span> <span class="number">0.3rem</span> <span class="number">0.1rem</span></span><br><span class="line">        <span class="selector-tag">span</span>.toc-text</span><br><span class="line">          <span class="attribute">color</span>: <span class="number">#fff</span></span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span></span><br><span class="line">  #rightside-contents</span><br><span class="line">    #card-toc</span><br><span class="line">      <span class="attribute">background</span>: linear-gradient(<span class="number">60deg</span>, <span class="number">#2c0c16</span> <span class="number">0%</span>, <span class="number">#043749</span> <span class="number">100%</span>)</span><br><span class="line">      <span class="selector-tag">span</span>.toc-text</span><br><span class="line">        <span class="attribute">color</span>: <span class="number">#fff</span></span><br></pre></td></tr></table></figure>              </div>            </details><details yellow><summary> 各个按钮的功能 </summary>              <div class='content'>              <p>这个对于我应该算是最难的吧，毕竟没学过js。所以就查了一下原先的js来进行仿写。（如果熟悉bf源码的会发现我有好多都是源码直接扣过来的）</p><p>这里涉及的函数应该有三项，小菜单的展开和关闭、目录的展开和关闭、还有跳转顶部。跳转顶部最好解决，可以直接抄源码。而其他块元素的显示隐藏一般有两种，一是写两套样式，然后用js给对应块套类（店长的方法，可惜我懒，咱不想写两套）；另一种是直接对块进行显隐控制。</p><p>这里咱吃了大亏，因为<code>display: none</code>会使元素的体积被忽略，咱为了少写个校准便宜就直接用了<code>visibility: visible/hidden</code>。<code>visibility</code>的原理是让浏览器重写样式，比如令元素不可见，层次比较多的元素不会一次性消失，而是一个个消失（这就特别怪异）</p><p>最后还是写偏移了</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> rightSideFn = &#123;</span><br><span class="line">    showBtn: <span class="function">() =&gt;</span> &#123; <span class="comment">// 点击展开</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">window</span>.innerWidth &gt; <span class="number">900</span>) &#123;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">&#x27;rightside-avatar-card&#x27;</span>).style.display = <span class="string">&quot;inline-block&quot;</span></span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">&#x27;rightside-menus&#x27;</span>).style.transform = <span class="string">&quot;translateY(0)&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">document</span>.getElementById(<span class="string">&#x27;rightside-childmenu-unfold&#x27;</span>).style.display = <span class="string">&quot;none&quot;</span></span><br><span class="line">      <span class="built_in">document</span>.getElementById(<span class="string">&#x27;rightside-childmenu-fold&#x27;</span>).style.display = <span class="string">&quot;inline-block&quot;</span></span><br><span class="line">      <span class="built_in">document</span>.getElementById(<span class="string">&#x27;rightside-childmenu-contents&#x27;</span>).style.visibility = <span class="string">&quot;visible&quot;</span></span><br><span class="line">      <span class="built_in">document</span>.getElementById(<span class="string">&#x27;rightside-childmenu-comment&#x27;</span>).style.visibility = <span class="string">&quot;visible&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    hideBtn: <span class="function">() =&gt;</span> &#123; <span class="comment">// 点击收起</span></span><br><span class="line">      <span class="built_in">document</span>.getElementById(<span class="string">&#x27;rightside-avatar-card&#x27;</span>).style.display = <span class="string">&quot;none&quot;</span></span><br><span class="line">      <span class="built_in">document</span>.getElementById(<span class="string">&#x27;rightside-childmenu-unfold&#x27;</span>).style.display = <span class="string">&quot;inline-block&quot;</span></span><br><span class="line">      <span class="built_in">document</span>.getElementById(<span class="string">&#x27;rightside-childmenu-fold&#x27;</span>).style.display = <span class="string">&quot;none&quot;</span></span><br><span class="line">      <span class="built_in">document</span>.getElementById(<span class="string">&#x27;rightside-menus&#x27;</span>).style.transform = <span class="string">&quot;translateY(19.6rem)&quot;</span></span><br><span class="line">      <span class="built_in">document</span>.getElementById(<span class="string">&#x27;rightside-contents&#x27;</span>).style.display = <span class="string">&quot;none&quot;</span></span><br><span class="line">      <span class="built_in">document</span>.getElementById(<span class="string">&#x27;rightside-childmenu-contents&#x27;</span>).style.background = <span class="string">&quot;var(--card-bg)&quot;</span></span><br><span class="line">      <span class="built_in">document</span>.getElementById(<span class="string">&#x27;rightside-childmenu-contents&#x27;</span>).style.visibility = <span class="string">&quot;hidden&quot;</span></span><br><span class="line">      <span class="built_in">document</span>.getElementById(<span class="string">&#x27;rightside-childmenu-comment&#x27;</span>).style.visibility = <span class="string">&quot;hidden&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    ShowOrHideContent: <span class="function">() =&gt;</span>&#123; <span class="comment">//目录展开/关闭</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">document</span>.getElementById(<span class="string">&#x27;rightside-contents&#x27;</span>).style.display == <span class="string">&quot;inline-block&quot;</span>) &#123;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">&#x27;rightside-contents&#x27;</span>).style.display = <span class="string">&quot;none&quot;</span></span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">&#x27;rightside-childmenu-contents&#x27;</span>).style.background = <span class="string">&quot;var(--card-bg)&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">&#x27;rightside-contents&#x27;</span>).style.display = <span class="string">&quot;inline-block&quot;</span></span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">&#x27;rightside-childmenu-contents&#x27;</span>).style.background = <span class="string">&quot;var(--btn-bg)&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">      event.stopPropagation()</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    scrollToTop: <span class="function">() =&gt;</span> &#123; <span class="comment">// 回到顶部</span></span><br><span class="line">      btf.scrollToDest(<span class="number">0</span>, <span class="number">500</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;rightside&#x27;</span>).addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> $target = e.target.id || e.target.parentNode.id</span><br><span class="line">    <span class="keyword">switch</span> ($target) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;rightside-childmenu-go-up&#x27;</span>:</span><br><span class="line">        rightSideFn.scrollToTop()</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;rightside-childmenu-unfold&#x27;</span>:</span><br><span class="line">        rightSideFn.showBtn()</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;rightside-childmenu-fold&#x27;</span>:</span><br><span class="line">        rightSideFn.hideBtn()</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;rightside-childmenu-contents&#x27;</span>:</span><br><span class="line">        rightSideFn.ShowOrHideContent()</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>              </div>            </details><details blue><summary> 细节修改 </summary>              <div class='content'>              <p>大体上面的已经可以做完了，但咱魔改自己的站点，那肯定是希望精益求精。电脑端时看不出啥问题了，就从移动端下手喽</p><p>手机看小菜单时总觉得不居中奇奇怪怪的；因为在手机时作者卡片是不需要显示了（侧边菜单栏有了），首页那个展开也展开不出啥来，不如干脆默认展开；最后是目录，移动端可能在展开目录想收起时是点目录外区域而非点目录按钮。</p><p>于是我针对移动端做了css和js的一点点修复</p><figure class="highlight styl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">900px</span>)</span><br><span class="line">  #rightside</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">2rem</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">12rem</span></span><br><span class="line">    margin: auto</span><br><span class="line">    left: <span class="number">38px</span></span><br><span class="line">    #rightside-menu</span><br><span class="line">      transform: translate(<span class="number">0</span>, -<span class="number">18rem</span>)</span><br><span class="line">      #rightside-childmenu-unfold</span><br><span class="line">        display: none</span><br><span class="line">      #rightside-childmenu-contents</span><br><span class="line">      #rightside-childmenu-comment</span><br><span class="line">        visibility: visible</span><br><span class="line">      button</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">1.5rem</span></span><br><span class="line">        <span class="attribute">width</span>: <span class="number">1.5rem</span></span><br><span class="line">    #rightside-contents</span><br><span class="line">      transform: translate(<span class="number">0</span>, -<span class="number">18rem</span>)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 补充：移动端点击目录外区域关闭目录</span></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">document</span>.getElementById(<span class="string">&#x27;rightside-contents&#x27;</span>).style.display == <span class="string">&quot;inline-block&quot;</span> &amp;&amp; <span class="built_in">window</span>.innerWidth &lt;= <span class="number">900</span>)</span><br><span class="line">    rightSideFn.ShowOrHideContent()</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&#x27;rightside&#x27;</span>).addEventListener(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">  event = event || <span class="built_in">window</span>.event</span><br><span class="line">  event.stopPropagation()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h2 id="复制提醒和F12禁用与提醒"><a href="#复制提醒和F12禁用与提醒" class="headerlink" title="复制提醒和F12禁用与提醒"></a>复制提醒和F12禁用与提醒</h2><p>这个是根据火喵酱的<a href="https://cat.dorcandy.cn/7e2fcd3e.html/comment-page-1">利用element显示Notification通知，复制提醒，禁用F12或右键菜单提醒</a>来做的（我写的时候这个笨蛋火喵把cdn写错了，导致我以为hexo不能直接用这玩意）</p><p>引入vue组件（我很想把这个去掉的）和alement组件库/样式表</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 引入VUE --&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue@2.6.14&#x2F;dist&#x2F;vue.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;!-- 引入样式 --&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;element-ui@2.15.6&#x2F;lib&#x2F;index.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;!-- 引入组件库 --&gt;</span><br><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;element-ui@2.15.6&#x2F;packages&#x2F;theme-chalk&#x2F;lib&#x2F;index.css&quot;&gt;</span><br></pre></td></tr></table></figure><p>然后js引入</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 复制提醒</span></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&quot;copy&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    data:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.$notify(&#123;</span><br><span class="line">        title:<span class="string">&quot;哎嘿！复制成功&quot;</span>,</span><br><span class="line">        message:<span class="string">&quot;若要转载请务必保留原文链接！猹分你个瓜！&quot;</span>,</span><br><span class="line">        position: <span class="string">&#x27;bottom-right&#x27;</span>,</span><br><span class="line">        offset: <span class="number">50</span>,</span><br><span class="line">        showClose: <span class="literal">false</span>,</span><br><span class="line">        type:<span class="string">&quot;success&quot;</span></span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">return</span>&#123;<span class="attr">visible</span>:<span class="literal">false</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 禁用F12按键并提醒 */</span></span><br><span class="line"><span class="built_in">document</span>.onkeydown = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.event &amp;&amp; <span class="built_in">window</span>.event.keyCode == <span class="number">123</span>) &#123;</span><br><span class="line">    event.keyCode = <span class="number">0</span>;</span><br><span class="line">    event.returnValue = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">      data:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.$notify(&#123;</span><br><span class="line">          title:<span class="string">&quot;啊啊！你干嘛啊！&quot;</span>,</span><br><span class="line">          message:<span class="string">&quot;怎么能随随便便想扒猹的底裤呢？坏！&quot;</span>,</span><br><span class="line">          position: <span class="string">&#x27;bottom-right&#x27;</span>,</span><br><span class="line">          offset: <span class="number">50</span>,</span><br><span class="line">          showClose: <span class="literal">false</span>,</span><br><span class="line">          type:<span class="string">&quot;error&quot;</span></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span>&#123;<span class="attr">visible</span>:<span class="literal">false</span>&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>即可享用（魔改测试站的控制台如果打开，会看到我的一段话哦（感觉貌似有点涩</p><hr><h2 id="完整的代码"><a href="#完整的代码" class="headerlink" title="完整的代码"></a>完整的代码</h2><p>这篇魔改的大部分都是可以直接拿去用的（小菜单阉割了好多功能所以要就自己加喽），所以就放完整的源码以供参考了</p><details cyan><summary> rightside.pug须替换源码 </summary>              <div class='content'>              <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#rightside</span></span><br><span class="line">  <span class="comment">#rightside-menu</span></span><br><span class="line">    //- 作者UI卡片</span><br><span class="line">    <span class="comment">#rightside-avatar-card</span></span><br><span class="line">      .<span class="keyword">is</span>-center<span class="comment">#rightside-avatar</span></span><br><span class="line">        .avatar-img</span><br><span class="line">          img(src=url_for(theme.avatar.img) onerror=`this.onerror=null;this.src=<span class="string">&#x27;` + url_for(theme.error_img.flink) + `&#x27;</span>` alt=<span class="string">&quot;avatar&quot;</span>)</span><br><span class="line">        .author-info__name= config.author</span><br><span class="line">        .author-info__description!= theme.aside.card_author.description || config.description</span><br><span class="line">      </span><br><span class="line">      .site-data</span><br><span class="line">        <span class="keyword">if</span> site.posts.length</span><br><span class="line">          .data-item.<span class="keyword">is</span>-center</span><br><span class="line">            .data-item-link</span><br><span class="line">              a(href=url_for(config.archive_dir) + <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">                .headline= _p(<span class="string">&#x27;aside.articles&#x27;</span>) </span><br><span class="line">                .length-num= site.posts.length</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> site.tags.length</span><br><span class="line">          .data-item.<span class="keyword">is</span>-center</span><br><span class="line">            .data-item-link</span><br><span class="line">              a(href=url_for(config.tag_dir) + <span class="string">&#x27;/&#x27;</span> )</span><br><span class="line">                .headline= _p(<span class="string">&#x27;aside.tags&#x27;</span>)</span><br><span class="line">                .length-num= site.tags.length</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> site.categories.length</span><br><span class="line">          .data-item.<span class="keyword">is</span>-center</span><br><span class="line">            .data-item-link</span><br><span class="line">              a(href=url_for(config.category_dir) + <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">                .headline= _p(<span class="string">&#x27;aside.categories&#x27;</span>) </span><br><span class="line">                .length-num= site.categories.length</span><br><span class="line"></span><br><span class="line">      //- begin follow_me按钮</span><br><span class="line">      <span class="keyword">if</span> theme.aside.card_author.button.enable</span><br><span class="line">        a<span class="comment">#card-info-btn.button--animated(href=theme.aside.card_author.button.link)</span></span><br><span class="line">          i(class=theme.aside.card_author.button.icon)</span><br><span class="line">          span=theme.aside.card_author.button.text</span><br><span class="line">      //- end</span><br><span class="line">        </span><br><span class="line">      //- begin 社交</span><br><span class="line">      <span class="keyword">if</span>(theme.social)</span><br><span class="line">        .menu-info-social-icons.<span class="keyword">is</span>-center</span><br><span class="line">          !=fragment_cache(<span class="string">&#x27;social&#x27;</span>, function()&#123;<span class="keyword">return</span> partial(<span class="string">&#x27;includes/header/social&#x27;</span>)&#125;)</span><br><span class="line">      //- end</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#rightside-menus.is-center</span></span><br><span class="line">      //- 繁简体切换</span><br><span class="line">        button<span class="comment">#rightside-childmenu-translate(type=&quot;button&quot;, title=_p(&#x27;rightside.translate_title&#x27;))</span></span><br><span class="line">          i.fas.fa-cog.fa-spin</span><br><span class="line">      //- 目录</span><br><span class="line">      <span class="keyword">if</span> is_post()</span><br><span class="line">        button<span class="comment">#rightside-childmenu-contents(type=&quot;button&quot;, title=&quot;目录&quot;)</span></span><br><span class="line">          i.fas.fa-<span class="built_in">list</span>-ul</span><br><span class="line">      //- 跳转评论</span><br><span class="line">      <span class="keyword">if</span> is_post()</span><br><span class="line">        button<span class="comment">#rightside-childmenu-comment(href=&quot;#post-comment&quot; title=_p(&quot;rightside.scroll_to_comment&quot;))</span></span><br><span class="line">          i.fas.fa-comments</span><br><span class="line">      //- 跳转最上</span><br><span class="line">      button<span class="comment">#rightside-childmenu-go-up(type=&quot;button&quot; title=_p(&quot;rightside.back_to_top&quot;))</span></span><br><span class="line">        i.fas.fa-arrow-up</span><br><span class="line">      //- 菜单展开/关闭</span><br><span class="line">      button<span class="comment">#rightside-childmenu-unfold(type=&quot;button&quot; title=&quot;展开菜单&quot;)</span></span><br><span class="line">        i.fas.fa-angle-up</span><br><span class="line">      button<span class="comment">#rightside-childmenu-fold(type=&quot;button&quot; title=&quot;收起菜单&quot;)</span></span><br><span class="line">        i.fas.fa-angle-down</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> is_post()</span><br><span class="line">    <span class="comment">#rightside-contents</span></span><br><span class="line">      //- - let tocNumber = page.toc_number !== undefined ? page.toc_number : theme.toc.number</span><br><span class="line">      <span class="comment">#card-toc.card-widget</span></span><br><span class="line">        .item-headline.<span class="keyword">is</span>-center</span><br><span class="line">          i.fas.fa-stream</span><br><span class="line">          span= _p(<span class="string">&#x27;aside.card_toc&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (page.encrypt == true)</span><br><span class="line">          .toc-content.toc-div-class(style=&quot;display:none&quot;)!=toc(page.origin, &#123;list_number: tocNumber&#125;)</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">          .toc-content!=toc(page.content, &#123;list_number: tocNumber&#125;)</span><br></pre></td></tr></table></figure>              </div>            </details><details red><summary> CSS(STYLUS)源码（自行引入） </summary>              <div class='content'>              <figure class="highlight styl"><table><tr><td class="code"><pre><span class="line">#rightside-menu</span><br><span class="line">  <span class="attribute">position</span>: absolute</span><br><span class="line">  <span class="attribute">transform</span>: translate(-<span class="number">13rem</span>, -<span class="number">21rem</span>)</span><br><span class="line">  #rightside-avatar-card</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="number">#000</span></span><br><span class="line">    <span class="attribute">background</span>: linear-gradient(<span class="number">60deg</span>, <span class="number">#ffd7e4</span> <span class="number">0%</span>, <span class="number">#c8f1ff</span> <span class="number">100%</span>)</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">1rem</span></span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0.5rem</span> <span class="number">1rem</span> <span class="number">0.5rem</span> <span class="number">1rem</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">12rem</span></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">19.6rem</span></span><br><span class="line">    <span class="attribute">display</span>: none</span><br><span class="line">    <span class="comment">//transform: translate(-20px, -20px)</span></span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&#x27;aqqxs&#x27;</span>, sans-serif</span><br><span class="line">    #rightside-avatar</span><br><span class="line">      <span class="attribute">margin-top</span>: <span class="number">0.3rem</span></span><br><span class="line">    <span class="comment">/* 手机侧栏菜单展开 信息、头像位置调整*/</span></span><br><span class="line">    .site-data</span><br><span class="line">      <span class="attribute">margin-top</span>: <span class="number">0.5rem</span></span><br><span class="line">      <span class="attribute">display</span>: table</span><br><span class="line">      <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">0.5rem</span></span><br><span class="line">      <span class="attribute">width</span>: <span class="number">100%</span></span><br><span class="line">      <span class="attribute">table-layout</span>: fixed</span><br><span class="line">      .data-item</span><br><span class="line">        <span class="attribute">display</span>: table-cell</span><br><span class="line">    <span class="comment">/* 分类等字体加粗 */</span></span><br><span class="line">    .headline</span><br><span class="line">      <span class="attribute">font-size</span>: <span class="number">0.875rem</span></span><br><span class="line">      <span class="attribute">color</span>: <span class="number">#000</span></span><br><span class="line">    .length-num</span><br><span class="line">      <span class="attribute">font-size</span>: <span class="number">0.8rem</span> <span class="meta">!important</span></span><br><span class="line">      <span class="attribute">color</span>: <span class="number">#000</span></span><br><span class="line">    .author-info__name</span><br><span class="line">      <span class="attribute">color</span>: <span class="number">#000</span></span><br><span class="line">    .author-info__description</span><br><span class="line">      <span class="attribute">color</span>: <span class="number">#000</span></span><br><span class="line">    <span class="comment">/* 作者名 */</span></span><br><span class="line">    .author-info__name</span><br><span class="line">      <span class="attribute">font-weight</span>: <span class="number">500</span></span><br><span class="line">      <span class="attribute">font-size</span>: <span class="number">1.57em</span></span><br><span class="line">    <span class="comment">/* 手机侧栏菜单展开 follow_me按钮*/</span></span><br><span class="line">    #card-info-btn</span><br><span class="line">      <span class="attribute">display</span>: block</span><br><span class="line">      <span class="attribute">margin</span>: <span class="number">0.3rem</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line">      <span class="attribute">background-color</span>: var(--btn-bg)</span><br><span class="line">      <span class="attribute">color</span>: var(--btn-color)</span><br><span class="line">      <span class="attribute">text-align</span>: center</span><br><span class="line">      <span class="attribute">line-height</span>: <span class="number">2.4</span></span><br><span class="line">      <span class="attribute">overflow</span>: hidden</span><br><span class="line">      <span class="attribute">border-radius</span>: <span class="number">0.625rem</span></span><br><span class="line">    <span class="comment">/* 手机侧栏菜单展开 社交图标 */</span></span><br><span class="line">    .menu-info-social-icons</span><br><span class="line">      <span class="attribute">margin</span>: <span class="number">0.5rem</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line">      .social-<span class="attribute">icon</span></span><br><span class="line">        <span class="attribute">display</span>: inline</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">0.3rem</span> <span class="number">0</span> <span class="number">0.3rem</span></span><br><span class="line"></span><br><span class="line">  #rightside-menus</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0.5rem</span> <span class="number">1rem</span> <span class="number">0.5rem</span> <span class="number">1rem</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">12rem</span></span><br><span class="line">    <span class="attribute">transform</span>: translateY(<span class="number">19.6rem</span>)</span><br><span class="line">    #rightside-childmenu-contents</span><br><span class="line">    #rightside-childmenu-comment</span><br><span class="line">      <span class="attribute">visibility</span>: hidden</span><br><span class="line">    #rightside-childmenu-fold</span><br><span class="line">      <span class="attribute">display</span>: none</span><br><span class="line">    <span class="comment">/* 功能按钮栏 */</span></span><br><span class="line">    button</span><br><span class="line">      <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="number">#000</span></span><br><span class="line">      <span class="attribute">height</span>: <span class="number">2rem</span></span><br><span class="line">      <span class="attribute">width</span>: <span class="number">2rem</span></span><br><span class="line">      <span class="attribute">border-radius</span>: <span class="number">0.6rem</span></span><br><span class="line">      <span class="attribute">background</span>: var(--card-bg)</span><br><span class="line">      <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0.15rem</span> <span class="number">0</span> <span class="number">0.15rem</span></span><br><span class="line"></span><br><span class="line">#rightside-contents</span><br><span class="line">  <span class="attribute">position</span>: absolute</span><br><span class="line">  <span class="attribute">transform</span>: translate(-<span class="number">13rem</span>, -<span class="number">21rem</span>)</span><br><span class="line">  <span class="attribute">display</span>: none</span><br><span class="line">  #card-toc</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="number">#000</span></span><br><span class="line">    <span class="attribute">background</span>: linear-gradient(<span class="number">60deg</span>, <span class="number">#ffd7e4</span> <span class="number">0%</span>, <span class="number">#c8f1ff</span> <span class="number">100%</span>)</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">1rem</span></span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0.5rem</span> <span class="number">1rem</span> <span class="number">0.5rem</span> <span class="number">1rem</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">12rem</span></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">19.6rem</span></span><br><span class="line">    .item-headline</span><br><span class="line">      <span class="attribute">font-size</span>: <span class="number">1rem</span></span><br><span class="line">      span</span><br><span class="line">        <span class="attribute">margin-left</span>: <span class="number">0.5rem</span></span><br><span class="line">        <span class="attribute">font-family</span>: <span class="string">&#x27;aqqxs&#x27;</span>, sans-serif</span><br><span class="line">    <span class="selector-tag">span</span>.toc-text</span><br><span class="line">      <span class="attribute">color</span>: <span class="number">#000</span></span><br><span class="line">    .toc</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">105%</span></span><br><span class="line">      <span class="attribute">overflow-y</span>: scroll</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">16.3rem</span></span><br><span class="line">      <span class="attribute">margin-top</span>: -<span class="number">0.3rem</span></span><br><span class="line">      <span class="attribute">margin-left</span>: -<span class="number">0.7rem</span></span><br><span class="line">      .toc-child</span><br><span class="line">        <span class="attribute">margin-left</span>: -<span class="number">1rem</span></span><br><span class="line">      &amp;::-webkit-scrollbar</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">0</span></span><br><span class="line">    .toc-link</span><br><span class="line">      <span class="attribute">display</span>: block</span><br><span class="line">      padding-left: .3rem</span><br><span class="line">      <span class="attribute">border-left</span>: <span class="number">3px</span> solid transparent</span><br><span class="line">      <span class="attribute">color</span>: var(--toc-link-color)</span><br><span class="line">      <span class="attribute">transition</span>: all <span class="number">0.6s</span> ease-in-out</span><br><span class="line">      <span class="attribute">margin</span>: <span class="number">0.1rem</span> <span class="number">0</span> <span class="number">0.1rem</span> <span class="number">0.1rem</span></span><br><span class="line">      &amp;:hover</span><br><span class="line">        <span class="attribute">background</span>: var(--btn-bg)</span><br><span class="line">        <span class="attribute">border-radius</span>: <span class="number">0.4rem</span></span><br><span class="line">        <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0.2rem</span> <span class="number">#000</span></span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">0.3rem</span> <span class="number">0</span> <span class="number">0.3rem</span> <span class="number">0.1rem</span></span><br><span class="line">        <span class="selector-tag">span</span>.toc-text</span><br><span class="line">          <span class="attribute">color</span>: <span class="number">#fff</span></span><br><span class="line"></span><br><span class="line">.el-notification</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="number">#000</span></span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span></span><br><span class="line">  #rightside-menu</span><br><span class="line">    #rightside-avatar-card</span><br><span class="line">      <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="number">#fff</span></span><br><span class="line">      <span class="attribute">background</span>: linear-gradient(<span class="number">60deg</span>, <span class="number">#2c0c16</span> <span class="number">0%</span>, <span class="number">#043749</span> <span class="number">100%</span>)</span><br><span class="line">      .author-info__name</span><br><span class="line">      .author-info__description</span><br><span class="line">      .headline</span><br><span class="line">      .length-num</span><br><span class="line">        <span class="attribute">color</span>: <span class="number">#fff</span></span><br><span class="line">    #rightside-menus</span><br><span class="line">      button</span><br><span class="line">        <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="number">#fff</span></span><br><span class="line">        <span class="attribute">background</span>: <span class="number">#000</span></span><br><span class="line">        .fas</span><br><span class="line">          <span class="attribute">color</span>: <span class="number">#fff</span></span><br><span class="line"></span><br><span class="line">  #rightside-contents</span><br><span class="line">    #card-toc</span><br><span class="line">      <span class="attribute">background</span>: linear-gradient(<span class="number">60deg</span>, <span class="number">#2c0c16</span> <span class="number">0%</span>, <span class="number">#043749</span> <span class="number">100%</span>)</span><br><span class="line">      <span class="selector-tag">span</span>.toc-text</span><br><span class="line">        <span class="attribute">color</span>: <span class="number">#fff</span></span><br><span class="line"></span><br><span class="line">  .el-notification</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="number">#fff</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">900px</span>)</span><br><span class="line">  #rightside</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">2rem</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">12rem</span></span><br><span class="line">    margin: auto</span><br><span class="line">    left: <span class="number">38px</span></span><br><span class="line">    #rightside-menu</span><br><span class="line">      transform: translate(<span class="number">0</span>, -<span class="number">18rem</span>)</span><br><span class="line">      #rightside-childmenu-unfold</span><br><span class="line">        display: none</span><br><span class="line">      #rightside-childmenu-contents</span><br><span class="line">      #rightside-childmenu-comment</span><br><span class="line">        visibility: visible</span><br><span class="line">      button</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">1.5rem</span></span><br><span class="line">        <span class="attribute">width</span>: <span class="number">1.5rem</span></span><br><span class="line">    #rightside-contents</span><br><span class="line">      transform: translate(<span class="number">0</span>, -<span class="number">18rem</span>)</span><br></pre></td></tr></table></figure>              </div>            </details><details yellow><summary> JS源码（须与alement的cdn一起自行引入） </summary>              <div class='content'>              <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> rightSideFn = &#123;</span><br><span class="line">    showBtn: <span class="function">() =&gt;</span> &#123; <span class="comment">// 点击展开</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">window</span>.innerWidth &gt; <span class="number">900</span>) &#123;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">&#x27;rightside-avatar-card&#x27;</span>).style.display = <span class="string">&quot;inline-block&quot;</span></span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">&#x27;rightside-menus&#x27;</span>).style.transform = <span class="string">&quot;translateY(0)&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">document</span>.getElementById(<span class="string">&#x27;rightside-childmenu-unfold&#x27;</span>).style.display = <span class="string">&quot;none&quot;</span></span><br><span class="line">      <span class="built_in">document</span>.getElementById(<span class="string">&#x27;rightside-childmenu-fold&#x27;</span>).style.display = <span class="string">&quot;inline-block&quot;</span></span><br><span class="line">      <span class="built_in">document</span>.getElementById(<span class="string">&#x27;rightside-childmenu-contents&#x27;</span>).style.visibility = <span class="string">&quot;visible&quot;</span></span><br><span class="line">      <span class="built_in">document</span>.getElementById(<span class="string">&#x27;rightside-childmenu-comment&#x27;</span>).style.visibility = <span class="string">&quot;visible&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    hideBtn: <span class="function">() =&gt;</span> &#123; <span class="comment">// 点击收起</span></span><br><span class="line">      <span class="built_in">document</span>.getElementById(<span class="string">&#x27;rightside-avatar-card&#x27;</span>).style.display = <span class="string">&quot;none&quot;</span></span><br><span class="line">      <span class="built_in">document</span>.getElementById(<span class="string">&#x27;rightside-childmenu-unfold&#x27;</span>).style.display = <span class="string">&quot;inline-block&quot;</span></span><br><span class="line">      <span class="built_in">document</span>.getElementById(<span class="string">&#x27;rightside-childmenu-fold&#x27;</span>).style.display = <span class="string">&quot;none&quot;</span></span><br><span class="line">      <span class="built_in">document</span>.getElementById(<span class="string">&#x27;rightside-menus&#x27;</span>).style.transform = <span class="string">&quot;translateY(19.6rem)&quot;</span></span><br><span class="line">      <span class="built_in">document</span>.getElementById(<span class="string">&#x27;rightside-contents&#x27;</span>).style.display = <span class="string">&quot;none&quot;</span></span><br><span class="line">      <span class="built_in">document</span>.getElementById(<span class="string">&#x27;rightside-childmenu-contents&#x27;</span>).style.background = <span class="string">&quot;var(--card-bg)&quot;</span></span><br><span class="line">      <span class="built_in">document</span>.getElementById(<span class="string">&#x27;rightside-childmenu-contents&#x27;</span>).style.visibility = <span class="string">&quot;hidden&quot;</span></span><br><span class="line">      <span class="built_in">document</span>.getElementById(<span class="string">&#x27;rightside-childmenu-comment&#x27;</span>).style.visibility = <span class="string">&quot;hidden&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    ShowOrHideContent: <span class="function">() =&gt;</span>&#123; <span class="comment">//目录展开/关闭</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">document</span>.getElementById(<span class="string">&#x27;rightside-contents&#x27;</span>).style.display == <span class="string">&quot;inline-block&quot;</span>) &#123;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">&#x27;rightside-contents&#x27;</span>).style.display = <span class="string">&quot;none&quot;</span></span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">&#x27;rightside-childmenu-contents&#x27;</span>).style.background = <span class="string">&quot;var(--card-bg)&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">&#x27;rightside-contents&#x27;</span>).style.display = <span class="string">&quot;inline-block&quot;</span></span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">&#x27;rightside-childmenu-contents&#x27;</span>).style.background = <span class="string">&quot;var(--btn-bg)&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">      event.stopPropagation()</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    scrollToTop: <span class="function">() =&gt;</span> &#123; <span class="comment">// 回到顶部</span></span><br><span class="line">      btf.scrollToDest(<span class="number">0</span>, <span class="number">500</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;rightside&#x27;</span>).addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> $target = e.target.id || e.target.parentNode.id</span><br><span class="line">    <span class="keyword">switch</span> ($target) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;rightside-childmenu-go-up&#x27;</span>:</span><br><span class="line">        rightSideFn.scrollToTop()</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;rightside-childmenu-unfold&#x27;</span>:</span><br><span class="line">        rightSideFn.showBtn()</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;rightside-childmenu-fold&#x27;</span>:</span><br><span class="line">        rightSideFn.hideBtn()</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;rightside-childmenu-contents&#x27;</span>:</span><br><span class="line">        rightSideFn.ShowOrHideContent()</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 补充：移动端点击目录外区域关闭目录</span></span><br><span class="line">  <span class="built_in">document</span>.addEventListener(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">document</span>.getElementById(<span class="string">&#x27;rightside-contents&#x27;</span>).style.display == <span class="string">&quot;inline-block&quot;</span> &amp;&amp; <span class="built_in">window</span>.innerWidth &lt;= <span class="number">900</span>)</span><br><span class="line">      rightSideFn.ShowOrHideContent()</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;rightside&#x27;</span>).addEventListener(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">    event = event || <span class="built_in">window</span>.event</span><br><span class="line">    event.stopPropagation()</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 复制提醒</span></span><br><span class="line">  <span class="built_in">document</span>.addEventListener(<span class="string">&quot;copy&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">      data:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.$notify(&#123;</span><br><span class="line">          title:<span class="string">&quot;哎嘿！复制成功&quot;</span>,</span><br><span class="line">          message:<span class="string">&quot;若要转载请务必保留原文链接！猹分你个瓜！&quot;</span>,</span><br><span class="line">          position: <span class="string">&#x27;bottom-right&#x27;</span>,</span><br><span class="line">          offset: <span class="number">50</span>,</span><br><span class="line">          showClose: <span class="literal">false</span>,</span><br><span class="line">          type:<span class="string">&quot;success&quot;</span></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span>&#123;<span class="attr">visible</span>:<span class="literal">false</span>&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 禁用F12按键并提醒 */</span></span><br><span class="line">  <span class="built_in">document</span>.onkeydown = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.event &amp;&amp; <span class="built_in">window</span>.event.keyCode == <span class="number">123</span>) &#123;</span><br><span class="line">      event.keyCode = <span class="number">0</span>;</span><br><span class="line">      event.returnValue = <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        data:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          <span class="built_in">this</span>.$notify(&#123;</span><br><span class="line">            title:<span class="string">&quot;啊啊！你干嘛啊！&quot;</span>,</span><br><span class="line">            message:<span class="string">&quot;怎么能随随便便想扒猹的底裤呢？坏！&quot;</span>,</span><br><span class="line">            position: <span class="string">&#x27;bottom-right&#x27;</span>,</span><br><span class="line">            offset: <span class="number">50</span>,</span><br><span class="line">            showClose: <span class="literal">false</span>,</span><br><span class="line">            type:<span class="string">&quot;error&quot;</span></span><br><span class="line">          &#125;);</span><br><span class="line">          <span class="keyword">return</span>&#123;<span class="attr">visible</span>:<span class="literal">false</span>&#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h2 id="售后（糖果屋小广告"><a href="#售后（糖果屋小广告" class="headerlink" title="售后（糖果屋小广告"></a>售后（糖果屋小广告</h2><p>菜单栏的魔改就这样结束啦！如果有需要询问的，可以加入糖果屋交流讨论（猹已经常驻糖果屋且不想开自己的群</p><img src=https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/akicandyroom.jpg alt='🧊Akilarの糖果屋' style='max-height:500px'> ]]></content>
      
      
      <categories>
          
          <category> 魔改日记本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Course </tag>
            
            <tag> Diary </tag>
            
            <tag> hexo </tag>
            
            <tag> butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人哔哔: 一年期至，又一年始（不定时写完）</title>
      <link href="47865.html"/>
      <url>47865.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="前话"><a href="#前话" class="headerlink" title="前话"></a>前话</h2><p>去年的今天晚上11点钟，我很不容易的给我电脑装上了双系统并搭好了我的hexo博客。我就以那天作为开始，而今天即是建站的一周年。</p><p>本来一周年之前我是想把我的新站魔改完发布的，但这阵子发生了挺多事让我没有空继续我的魔改，现在这个站点就只好再继续用一段时间了。</p><p>从搞博客开始到如今，进了现在这个hexo的博客圈子，认识了许多人，学习了许多新知识，也算收获满满。这篇随笔，就来记录一下这一年里发生的事，留下一点点的记忆与人分享。</p><p>本来今天应该把这篇一口气打完的，但上周去住院做口腔的手术，一周没去上课导致我落下了许多课程，而下周又已经进入大学期中的时间范畴，不得已还是课业要紧。所以我只能先把作业啥的没学的先学完，再来把这篇随笔写完（可能是下下周的事了）</p><p>之后有空再聊吧，先把这篇搁在这了~~~</p><hr><h2 id="开始的开始"><a href="#开始的开始" class="headerlink" title="开始的开始"></a>开始的开始</h2><p>我在写下第一篇文字的时候，是记录为何开始，是<a href="https://noionion.top/46581.html">个人哔哔：关于我为什么搞博客</a>。当时说实在估计只是想随便搭个网站玩玩，没想到能坚持满一年。也算是不错的第一年吧</p><p>那时跟许多刚踏入博客的人一样，不懂什么是api什么是cdn，图片也是很朴素的直接存在站点目录下面。我记得最早的友链是几个线下的好友（大佬），单向的把他们放到了自己的友链之中。网上的大佬看着好多好多，我怂，不敢去交换友链<img src="https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/huaji/huaji15.jpg"></p><p>第一个线上友链应该是GamerNoTitle，他也算我博客的引路人。他和我同在一个MC服，自然有更多的交集。我的前几个小玩意也是参照他的弄的，比如一言的爬虫，还有之后加入twikoo群后自己弄的表情收录仓库也是仿照他的Valine-Magic来弄的</p><p>第二个友链倒是没什么交集，第三个友链是火喵酱的，至今也经常互访留言，友链朋友圈3.0的一大新功能也是他的留言给我的思路。当时惊艳到我的是火喵的主页，此后他的博客站点也是经常修改，总之也越来越好看（原谅我辞藻鄙陋，不能描述）</p><p>开始的文章也是水了几篇关于OI/ACM来悄悄装点门面，还有参照的爬虫和爬虫用熟了之后应朋友要求写的明日方舟的立绘爬虫，还有用oss搭图床的一篇教程（也一直用到了现在，但其实挺不安全，不抗打）。2020年也就这样过了。</p><p>这时候我印象里是因为不会配Twikoo的表情而加入了Twikoo的交流群划水（其实是真的不明白cdn是个啥，jsd怎么用，直到后来看到了GamerNoTitle的关于jsd的小白介绍才懂）</p><p>元旦期间，啥都没干，先去把Valine-Magic的表情扒了下来试着用jsd整个同类的Twikoo-Magic（其实那时候是有小康的表情速查的）～～（好耶，又水了一篇）～～</p><p>然后接下来应该是我水分最多的时期了（逃）。</p><p>（不想写了继续咕咕，这篇继续丢这了）<img src="https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/huaji/huaji27.gif"></p>]]></content>
      
      
      <categories>
          
          <category> 贰猹随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Diary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>友链朋友圈食用说明书</title>
      <link href="47095.html"/>
      <url>47095.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><blockquote><p>本教程已过期。部署请查看官方仓库文档链接：<a href="https://fcircle-doc.js.cool/">https://fcircle-doc.js.cool/</a></p></blockquote><p>在经过了两个大版本更新后，友链朋友圈迈入了3.0时代。而<a href="https://zfe.space/post/friend-link-circle.html">原先的说明书</a>一直停留在1.15，适用范围也仅仅到1.19。 于是，新的说明书来了！<strong>（注，后端版本 &lt; <code>3.0 beta2</code> 的用户请更换后端，1.0、2.0用户更新均需重新部署api和前端，leancloud部分已做兼容无须变动）</strong></p><details cyan><summary> 更新记录（现版本4.0） </summary>              <div class='content'>              <p><strong>3.0</strong></p><p>release 3.0 版本：<br>① 支持butterfly、volantis、matery、sakura、fluid主题的友链获取<br>② 支持小康友链及 volantis 主题友链，即部署于 gitee 上的 issuse 友链获取<br>③ 支持 butterfly、volantis、matery、sakura、fluid主题的最新文章获取<br>④ 去除sitemap，新增目前最通用的atom和rss规则<br>⑤ 拥有友链屏蔽、关键词屏蔽、等自定义 yaml 的配置项<br>⑥ 代码重构并规范化，便于二次开发<br>⑦ 可以支持更新时间和创建时间排序<br>⑧ 未适配的hexo主题和非hexo用户也可使用（使用方法见说明书）</p><p>bug修复<br>① 重复爬取同一文章问题<br>② 非bf主题爬取报错<br>③ sitemap重新置后（不通用）<br>④ hexo-theme-sakura主题两种时间格式引发错误<br>⑤ 屏蔽链接修复</p><hr><p><strong>3.1</strong></p><p>可以爬取typecho类型的博客</p><hr><p><strong>4.0</strong></p><p>代码基于scrapy重构，提速大约4倍<br>优化文章去重规则<br>可以爬取wordpress类型博客<br>新增nexmoe、Yun、stun主题爬取策略<br>额外友链页获取，在配置项选择开启<br>过期文章时间可配置<br>新增失败重爬配置项</p>              </div>            </details><details red open><summary> 更新方法 </summary>              <div class='content'>              <p>保留配置项（setting.py文件，其余直接从主仓库拉取即可（配置文件一样可能会修改，对比更新配置文件））</p><p>无须更改您的数据库及其api。</p>              </div>            </details><p>P.s. 本说明书较为详细<del>冗长</del>，如果有相关平台使用经验的朋友也跳着阅读。</p><p>如果有服务器的用户可以考虑自行构建api到服务器上，详见二次开发说明。</p><p>效果展示：<a href="https://noionion.top/friendcircle/">https://noionion.top/friendcircle/</a></p><hr><h1 id="目录导览"><a href="#目录导览" class="headerlink" title="目录导览"></a>目录导览</h1><details cyan open><summary> 后端部署及基本配置 </summary>              <div class='content'>              <p>涉及平台较多，但实际操作难度低。部署需要有一定耐心（但我们这里不提供解决github和vercel（可能）被墙的问题方法，如果被墙可以参考：<a href="https://akilar.top/posts/812734f8/">vercel</a> / <a href="https://akilar.top/posts/61b3e163/">github</a>）</p><ul><li>leancloud数据库搭建</li><li>github爬虫仓库部署及配置项说明</li><li>vercel无服务器API部署</li></ul>              </div>            </details><details red open><summary> 前端部署 </summary>              <div class='content'>              <ul><li>hexo插件安装版</li><li>CDN引入版</li></ul>              </div>            </details><details yellow open><summary> 二次开发说明 </summary>              <div class='content'>              <ul><li>主题爬虫和另外两种规则的函数命名标准及传参标准</li><li>加入新爬取数据并推送到数据库的修改说明</li><li>api数据说明</li><li>相关平台文档链接</li></ul>              </div>            </details><hr><h1 id="后端部署及基本配置"><a href="#后端部署及基本配置" class="headerlink" title="后端部署及基本配置"></a>后端部署及基本配置</h1><p>友链朋友圈的后端运行由3部分组成，涉及2个仓库、3个平台，难免感觉有些繁琐。</p><p>后端运行步骤为：</p><p>gh action爬虫抓取友链文章并作基本处理，推送至leancloud → vercel获取leancloud数据后进行二次处理后生成api</p><p>而前端只需要再对api返回的json数据做一次排序即可</p><details cyan><summary> leancloud数据库搭建 </summary>              <div class='content'>              <p>前往<a href="https://leancloud.app/">leancloud 国际版官网</a>（推荐国际版）注册账号并登录。</p><p>前往<a href="https://console.leancloud.app/apps">控制台</a>新建应用，应用名称无限制</p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20210801163918.png" alt="创建应用"></p><p>进入应用中，点击 <code>设置</code> -&gt; <code>应用凭证</code>，记录<code>AppID</code>和<code>AppKet</code>即可。(之后两步部署均会使用到)</p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20210801164344.png" alt="找到AppID和AppKey"></p>              </div>            </details><details red><summary> github爬虫仓库部署及配置项说明 </summary>              <div class='content'>              <p>这步会稍微长一些，但希望认真看完。</p><p><strong>仓库部署</strong></p><p>① <code>fork</code>友链朋友圈的项目仓库<a href="https://github.com/Rock-Candy-Tea/hexo-circle-of-friends">https://github.com/Rock-Candy-Tea/hexo-circle-of-friends</a></p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20210801165944.png" alt="fork仓库"></p><p>点击fork后的仓库的 <code>Settings</code> -&gt; <code>Secrets</code> -&gt; <code>New repository secret</code></p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20210801170342.png" alt="配置变量 1"></p><p><strong>Name</strong> 分别以 APPID、APPKEY、LINK 创建环境变量。<br><strong>Value</strong> 分别 填入刚刚保存 Leancloud 的应用 ID（AppID）和应用密钥（AppKey）以及你的友链链接（例如<a href="https://noionion.top/link/%EF%BC%89">https://noionion.top/link/）</a></p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20210801170853.png" alt="配置变量 2"></p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20210801171155.png" alt="配置变量 3"></p><p>② 启用友链朋友圈的github action</p><p>点击fork后的仓库的 <code>Actions</code> -&gt; <code>I understand my workflows, go ahead and enable them</code></p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20210801171531.png" alt="启用action 1"></p><p>之后点击 <code>update-friends-posts</code> 并启用workflow</p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20210801172346.png" alt="启用action 2"></p><p>之后点击仓库<code>star</code>来完成第一次程序运行，不出意外的话结果如下图</p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20210801173106.png" alt="启用action 3"></p><p>这时你应该能在leancloud上看到上传的数据啦（除非你不是已经适配的主题，在配置项中会有相应解决办法）</p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20210801173224.png" alt="数据上传成功"></p><p>此后在每天的8,12,17,22点各会有两次自动更新爬取。</p><p><strong>配置项说明</strong></p><p>编辑仓库中的<code>/hexo_circle_of_friends/setting.py</code>文件，需要用户自行编辑的仅如下几项。</p><p>对于<strong>非已适配主题的hexo用户（无github和gitee友链）</strong>和<strong>非hexo用户</strong>，请将友链自行按格式添加到<code>CONFIG_FRIENDS_LINKS[&#39;list&#39;]</code>中并启用它。（这是目前通用化的一种方式，如果是hexo用户希望适配自己的主题，请提交issue）</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">功能 设置</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># leancloud post data outdate_clean</span></span><br><span class="line"><span class="comment"># 过期文章清除（天）</span></span><br><span class="line">OUTDATE_CLEAN = <span class="number">60</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># get links from settings</span></span><br><span class="line">SETTINGS_FRIENDS_LINKS=&#123;</span><br><span class="line">    <span class="string">&quot;enable&quot;</span>: <span class="literal">False</span>, <span class="comment"># 是否启用配置项友链 True/False（此项用于针对还未适配的主题用户）</span></span><br><span class="line">    <span class="string">&quot;list&quot;</span>:[</span><br><span class="line">        <span class="comment"># 格式：[&quot;name&quot;, &quot;link&quot;, &quot;avatar&quot;]，除最后一行外每行后面加&quot;,&quot;，&quot;[]&quot;不可省略</span></span><br><span class="line">        <span class="comment"># link的结尾最好加上&#x27;/&#x27;</span></span><br><span class="line">        <span class="comment"># 例如：</span></span><br><span class="line">        [<span class="string">&quot;贰猹の小窝&quot;</span>, <span class="string">&quot;https://noionion.top/&quot;</span>, <span class="string">&quot;https://pub-noionion.oss-cn-hangzhou.aliyuncs.com/head.jpg&quot;</span>],</span><br><span class="line">        [<span class="string">&quot;akilar&quot;</span>, <span class="string">&quot;https://akilar.top/link/&quot;</span>, <span class="string">&quot;https://akilar.top/images/headimage.png&quot;</span>]</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># get links from gitee</span></span><br><span class="line"><span class="comment"># get links from gitee</span></span><br><span class="line">GITEE_FRIENDS_LINKS=&#123;</span><br><span class="line">    <span class="string">&quot;enable&quot;</span>: <span class="literal">False</span>,    <span class="comment"># True 开启gitee issue兼容</span></span><br><span class="line">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;normal&quot;</span>,  <span class="comment"># volantis用户请在这里填写 volantis</span></span><br><span class="line">    <span class="string">&quot;owner&quot;</span>: <span class="string">&quot;ccknbc&quot;</span>,  <span class="comment"># 填写你的gitee用户名</span></span><br><span class="line">    <span class="string">&quot;repo&quot;</span>: <span class="string">&quot;blogroll&quot;</span>,  <span class="comment"># 填写你的gitee仓库名</span></span><br><span class="line">    <span class="string">&quot;state&quot;</span>: <span class="string">&quot;open&quot;</span>  <span class="comment"># 填写抓取的issue状态(open/closed)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># get links from github</span></span><br><span class="line">GITHUB_FRIENDS_LINKS = &#123;</span><br><span class="line">    <span class="string">&quot;enable&quot;</span>: <span class="literal">False</span>,    <span class="comment"># True 开启github issue兼容</span></span><br><span class="line">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;normal&quot;</span>,  <span class="comment"># volantis用户请在这里填写 volantis</span></span><br><span class="line">    <span class="string">&quot;owner&quot;</span>: <span class="string">&quot;ccknbc-actions&quot;</span>,  <span class="comment"># 填写你的github用户名</span></span><br><span class="line">    <span class="string">&quot;repo&quot;</span>: <span class="string">&quot;blogroll&quot;</span>,  <span class="comment"># 填写你的github仓库名</span></span><br><span class="line">    <span class="string">&quot;state&quot;</span>: <span class="string">&quot;open&quot;</span>  <span class="comment"># 填写抓取的issue状态(open/closed)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># retry allowed</span></span><br><span class="line"><span class="comment"># 爬取url失败是否重试</span></span><br><span class="line">RETRY_ENABLED=<span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># block site list</span></span><br><span class="line"><span class="comment"># 添加屏蔽站点</span></span><br><span class="line">BLOCK_SITE=[</span><br><span class="line">    <span class="comment"># &quot;https://example.com/&quot;,</span></span><br><span class="line">    <span class="comment"># &quot;https://example.com/&quot;,</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 除了在github配置的友链页面，支持添加更多友链页面，同时爬取</span></span><br><span class="line"><span class="comment"># 但是数据保存在一起</span></span><br><span class="line">EXTRA_FRIENPAGE_LINK = [</span><br><span class="line">    <span class="comment"># &quot;https://noionion.top/&quot;,</span></span><br><span class="line">    <span class="comment"># &quot;https://kaleb.top/link/&quot;,</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>              </div>            </details><details yellow><summary> vercel无服务器API部署 </summary>              <div class='content'>              <p>前往<a href="https://vercel.com/">vercel官网</a>，直接用github创建账号并用手机号绑定（其实前端直接调用leancloud的数据也可以获取信息，但会暴露你的AppID和AppKey，所以套一层vercel作为api较为安全）</p><p>点击<code>New Project</code>新建项目</p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20210801201836.png" alt="创建api 1"></p><p>点击<code>Import Third-Party Git Repository</code>，输入<code>https://github.com/Rock-Candy-Tea/hexo-friendcircle-api</code>。</p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20210801202209.png" alt="创建api 2"></p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20210801202323.png" alt="创建api 3"></p><p>然后点击github，输入仓库名（无限制），生成api仓库。（此步骤会在github生成一个api仓库（不用理它，但也不要删除））</p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20210801202456.png" alt="创建api 4"></p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20210801202724.png" alt="创建api 5"></p><p>下一步骤<code>Create a Team</code>跳过(Skip)即可，等它构建完后点击<code>Go to Dashboard</code>即可</p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20210801203028.png" alt="创建api 6"></p><p>点击项目 <code>Settings</code> -&gt; <code>Environment Variables</code>，在如图框中输入密钥，<strong>Name</strong> 分别以 LEANCLOUD_ID、LEANCLOUD_KEY 创建环境变量。<br><strong>Value</strong> 分别填入刚刚保存 Leancloud 的应用 ID（AppID）和应用密钥（AppKey）。</p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20210801211034.png" alt="配置变量 1"></p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20210801211552.png" alt="配置变量 2"></p><p>回到项目首页，点击<code>View Build Logs</code>后在Visit左侧的选择框中点击<code>Redeploy</code>即可</p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20210801204242.png" alt="构建api 1"></p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20210801204242.png" alt="构建api 2"></p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20210801204746.png" alt="构建api 3"></p><p>回到上一页，点击<code>visit</code>后在网址后面加上<code>/api</code>访问api，如<a href="https://hexo-friendcircle3-api.vercel.app/api%EF%BC%8C%E5%87%BA%E7%8E%B0%E6%95%B0%E6%8D%AE%E5%8D%B3%E4%B8%BA%E9%83%A8%E7%BD%B2%E6%88%90%E5%8A%9F">https://hexo-friendcircle3-api.vercel.app/api，出现数据即为部署成功</a></p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20210801204926.png"></p><p>而前端要用到的，就只有api地址了</p>              </div>            </details><hr><h1 id="前端部署"><a href="#前端部署" class="headerlink" title="前端部署"></a>前端部署</h1><p>这里为了方便用户安装，我们做了相关的hexo前端插件简化部署过程。</p><p>同时为了服务非hexo用户也能使用友链朋友圈，我们也给了CDN引入的方案。</p><details cyan><summary> hexo插件安装版 </summary>              <div class='content'>              <p>在此感谢aki店长的精心制作！</p><div class="tag link"><a class="link-card" title="友链朋友圈3.0前端方案NPM插件使用文档" href="https://akilar.top/posts/62f13a97/"><div class="left"><img src="https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io/img/siteicon/favicon.ico"/></div><div class="right"><p class="text">友链朋友圈3.0前端方案NPM插件使用文档</p><p class="url">https://akilar.top/posts/62f13a97/</p></div></a></div>              </div>            </details><details red><summary> CDN引入版 </summary>              <div class='content'>              <p>引入内容到你想添加的地方（md文件/html文件）（注意替换<code>api地址</code>等变量）：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- fontawesome图标的依赖，主题自带的不用加这行 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free/css/all.min.css&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 友链朋友圈样式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/gh/Rock-Candy-Tea/hexo-friendcircle-demo@main/css/akilar-SAO.css&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 挂载友链朋友圈的容器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;fcircleContainer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 全局引入友链朋友圈配置项 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 全局变量声明区域</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> fdata = &#123;</span></span><br><span class="line"><span class="javascript">    apiurl: <span class="string">&#x27;https://hexo-friendcircle-api.vercel.app/api&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    initnumber: <span class="number">20</span>, <span class="comment">//【可选】页面初始化展示文章数量</span></span></span><br><span class="line"><span class="javascript">    stepnumber: <span class="number">10</span>,<span class="comment">//【可选】每次加载增加的篇数</span></span></span><br><span class="line"><span class="javascript">    error_img: <span class="string">&#x27;/image/404.gif&#x27;</span> <span class="comment">//【可选】头像加载失败时默认显示的头像</span></span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  <span class="comment">//存入本地存储</span></span></span><br><span class="line"><span class="javascript">  <span class="built_in">localStorage</span>.setItem(<span class="string">&quot;fdatalist&quot;</span>,<span class="built_in">JSON</span>.stringify(fdata))</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 全局引入抓取方法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">defer</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/gh/Rock-Candy-Tea/hexo-friendcircle-demo@main/js/fetch.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 局部引入页面元素生成方法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/gh/Rock-Candy-Tea/hexo-friendcircle-demo@main/js/fcircle.js&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>    <span class="comment">&lt;!-- js --&gt;</span></span><br></pre></td></tr></table></figure>              </div>            </details><p>更多的css可以查看<a href="https://github.com/Rock-Candy-Tea/hexo-friendcircle-demo">https://github.com/Rock-Candy-Tea/hexo-friendcircle-demo</a></p><hr><h1 id="二次开发说明"><a href="#二次开发说明" class="headerlink" title="二次开发说明"></a>二次开发说明</h1><p>对于一些想自己手动DIY的用户，我们也尽可能详尽的做一些源码说明，方便大家快速开发</p><p>目前来讲有下面几类DIY：（有好的DIY也可以请求PR，我们会根据需求选择是否采纳合并）</p><ul><li>想收到好友的博客最新文章更新但没有相应规则（希望增加主题策略）</li><li>想在友链朋友圈看到文章描述（新增爬取信息，这个得从后端爬虫、api改到前端）</li><li>想有服务器部署的（api或者数据库丢到自己的服务器上）</li></ul><p>等等，我们大致给出以下几个说明讲解：</p><details cyan><summary> 主题爬虫和另外两种规则的函数命名标准及传参标准（此条过期，加紧重写中——咕咕咕咕咕） </summary>              <div class='content'>              <details cyan><summary> 主题规则标准 </summary>              <div class='content'>              <p>请在<code>theme</code>文件夹处增添以主题名命名的<code>.py</code>文件，文件中至少包含以下两个函数：</p><div class="tip cogs"><p>友链爬取函数 get_friendlink(friendpage_link, friend_poor)</p></div><p>传入友链页面地址<code>friendpage</code>和友链列表<code>friend_poor</code>两个参数，无需返回值。</p><p>对于爬取到的友链地址<code>user_info</code>中应带有如下几个值（有序）：<code>name</code>，<code>link</code>，<code>img/avatar</code>。格式如：<code>user_info = [name, link, img]</code></p><p>然后将其放入列表<code>frieng_poor</code>中：<code>friend_poor.append(user_info)</code></p><hr><div class="tip cogs"><p>最新文章爬取函数 get_last_post(user_info,post_poor)</p></div><p>传入友链信息列表<code>uesr_info</code>（格式如上）和文章列表<code>post_poor</code>两个参数，需返回值<code>error</code>，标记是否错误</p><p>对于爬取到的文章信息<code>post_info</code>中应带有如下键值对：<br>? </p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">post_info = &#123;</span><br><span class="line">    <span class="string">&#x27;title&#x27;</span>:    , </span><br><span class="line">    <span class="string">&#x27;time&#x27;</span>:     ,</span><br><span class="line">    <span class="string">&#x27;updated&#x27;</span>:  , <span class="comment"># 这项建议直接使用time</span></span><br><span class="line">    <span class="string">&#x27;link&#x27;</span>:     ,</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>:     ,</span><br><span class="line">    <span class="string">&#x27;img&#x27;</span>:      ,</span><br><span class="line">    <span class="string">&#x27;rule&#x27;</span>: &#123;themename&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后将其放入列表<code>post_poor</code>中：<code>post_poor.append(post_info)</code><br>具体可以参考已有的主题规则函数</p><hr><div class="tip ban"><p>注意函数名，变量名保持一致，否则主函数将无法正确运行</p></div><p>主函数部分只需导入对应的文件和增添对象即可，修改部分如下所示：</p><p>（示例即为当前版本适配）</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># component</span></span><br><span class="line"><span class="keyword">from</span> theme <span class="keyword">import</span> butterfly,matery,volantis,sakura,fluid</span><br><span class="line"></span><br><span class="line"><span class="comment"># theme fit massage</span></span><br><span class="line">themes = [</span><br><span class="line">    butterfly,</span><br><span class="line">    matery,</span><br><span class="line">    volantis,</span><br><span class="line">    sakura,</span><br><span class="line">    fluid</span><br><span class="line">]</span><br></pre></td></tr></table></figure>              </div>            </details><details red><summary> 其他规则标准 </summary>              <div class='content'>              <p>可参考<code>/handlers/coreLink.py</code>文件下的<code>atom_get、rss2_get</code>函数进行，传参与主题爬虫的<code>get_last_post</code>参数相同。命名相对无限制，只需在主函数<code>run.py</code>添加相应的引入如</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> handlers.coreLink <span class="keyword">import</span> atom_get</span><br><span class="line"><span class="keyword">from</span> handlers.coreLink <span class="keyword">import</span> rss2_get</span><br></pre></td></tr></table></figure><p>在<code>getpost</code>函数处合适位置仿照其他规则加入代码即可。</p>              </div>            </details>              </div>            </details><details red><summary> 加入新爬取数据并推送到数据库的修改说明（此条过期，加紧重写中——咕咕咕咕咕） </summary>              <div class='content'>              <p>若有需要加入新的爬取信息键值对，则需相应修改所有已有规则（包括主题规则和其它规则）的返回值，即：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">post_info &#x3D; &#123;</span><br><span class="line">    &#39;title&#39;:    , </span><br><span class="line">    &#39;time&#39;:     ,</span><br><span class="line">    &#39;updated&#39;:  , # 这项建议直接使用time</span><br><span class="line">    &#39;link&#39;:     ,</span><br><span class="line">    &#39;name&#39;:     ,</span><br><span class="line">    &#39;img&#39;:      ,</span><br><span class="line">    &#39;rule&#39;: &#123;themename&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并相应修改<code>/handlers/coreDatas.py</code>的<code>leancloud_push</code>函数，在：</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">friendpoor.<span class="built_in">set</span>(<span class="string">&#x27;title&#x27;</span>, item[<span class="string">&#x27;title&#x27;</span>])</span><br><span class="line">friendpoor.<span class="built_in">set</span>(<span class="string">&#x27;time&#x27;</span>, item[<span class="string">&#x27;time&#x27;</span>])</span><br><span class="line">friendpoor.<span class="built_in">set</span>(<span class="string">&#x27;updated&#x27;</span>, item[<span class="string">&#x27;updated&#x27;</span>])</span><br><span class="line">friendpoor.<span class="built_in">set</span>(<span class="string">&#x27;link&#x27;</span>, item[<span class="string">&#x27;link&#x27;</span>])</span><br><span class="line">friendpoor.<span class="built_in">set</span>(<span class="string">&#x27;author&#x27;</span>, item[<span class="string">&#x27;name&#x27;</span>])</span><br><span class="line">friendpoor.<span class="built_in">set</span>(<span class="string">&#x27;headimg&#x27;</span>, item[<span class="string">&#x27;img&#x27;</span>])</span><br><span class="line">friendpoor.<span class="built_in">set</span>(<span class="string">&#x27;rule&#x27;</span>, item[<span class="string">&#x27;rule&#x27;</span>])</span><br><span class="line">friendpoor.save()</span><br></pre></td></tr></table></figure><p>处新增相应关联即可。</p>              </div>            </details><details yellow><summary> api数据说明 </summary>              <div class='content'>              <p>API预览: <a href="https://hexo-friendcircle3-api.vercel.app/api">https://hexo-friendcircle3-api.vercel.app/api</a></p><p>截取部分json，对json数据的说明如下</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;statistical_data&quot;</span>: &#123; <span class="comment">//统计信息</span></span><br><span class="line">        <span class="attr">&quot;friends_num&quot;</span>: <span class="string">&quot;当前友链数&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;active_num&quot;</span>: <span class="string">&quot;活跃友链数（即数据库中的文章的作者数）&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;error_num&quot;</span>: <span class="string">&quot;爬取错误数（即数据库中的友链error数）&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;article_num&quot;</span>: <span class="string">&quot;库存文章总数&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;last_updated_time&quot;</span>: <span class="string">&quot;最近更新时间（即数据库中文章最大的createAt值（时间）&quot;</span></span><br><span class="line">        <span class="comment">//今日更新由前端计算获得</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;article_data&quot;</span>: [ <span class="comment">//文章数据</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;文章标题&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;created&quot;</span>: <span class="string">&quot;发布时间&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;updated&quot;</span>: <span class="string">&quot;更新时间&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;link&quot;</span>: <span class="string">&quot;文章链接地址&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;author&quot;</span>: <span class="string">&quot;友链名&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;avatar&quot;</span>: <span class="string">&quot;友链头像&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details blue><summary> 相关平台文档链接 </summary>              <div class='content'>              <p>leancloud api: <a href="https://leancloud.cn/docs/rest_api.html">https://leancloud.cn/docs/rest_api.html</a></p><p>leancloud Python SDK: <a href="https://leancloud.cn/docs/sdk_setup-python.html">https://leancloud.cn/docs/sdk_setup-python.html</a></p><p>leancloud Python SDK-api: <a href="https://leancloud.github.io/python-sdk/">https://leancloud.github.io/python-sdk/</a></p><p>vercel Serverless Functions: <a href="https://vercel.com/docs/serverless-functions/introduction">https://vercel.com/docs/serverless-functions/introduction</a></p>              </div>            </details><hr><p>想看开发吐槽的话可以访问<a href="./54068.html">个人哔哔：友链朋友圈开发二三事</a>、<a href="https://akilar.top/posts/117e1b1a/">友链朋友圈 3.0 前端开发方案记录</a></p><p>如有<strong>更多需要进行补充的</strong>或者<strong>说明书哪里没看懂的</strong>或者<strong>部署出问题的</strong>可以于下方评论区留言。</p>]]></content>
      
      
      <categories>
          
          <category> 实用项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Project </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HNU:小学期软件实训第三周（这周简单一点，水题较多）</title>
      <link href="45048.html"/>
      <url>45048.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>这周就一题背包（double精度恶心人就是</p><hr><p>本周作业让我感觉比较有收获的题（从高到低）：</p><p>8.ab串</p><p>5.最大报销额</p><hr><h1 id="1-部分A-B"><a href="#1-部分A-B" class="headerlink" title="1.部分A+B"></a>1.部分A+B</h1><details blue><summary> 题目 </summary>              <div class='content'>              <p>【问题描述】</p><p>正整数A的“DA（为1位整数）部分”定义为由A中所有DA组成的新整数PA。例如：给定A = 3862767，DA = 6，则A的“6部分”PA是66，因为A中有2个6；给定A = 3862767，DA = 1，则A的“1部分”PA是0，因为A中有0个1。</p><p>现给定A、DA、B、DB，请编写程序计算PA + PB。</p><p>【输入形式】</p><p>输入在一行中依次给出A、DA、B、DB，中间以空格分隔，其中0 &lt; A, B &lt; 1010。</p><p>【输出形式】</p><p>在一行中输出PA + PB的值。</p><p>【样例输入】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3862767 6 13530293 3</span><br></pre></td></tr></table></figure><p>【样例输出】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">399</span><br></pre></td></tr></table></figure>              </div>            </details><details cyan open><summary> 题解 </summary>              <div class='content'>              <p>这题就取位就行，可以用string取也可以按位找，我这里就按位找了（</p>              </div>            </details><details red><summary> 代码 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a,da,b,db;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld %lld %lld %lld&quot;</span>, &amp;a,&amp;da,&amp;b,&amp;db);</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> pa=<span class="number">0</span>,pb=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(a&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> data = a%<span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span>(data == da)</span><br><span class="line">pa=pa*<span class="number">10</span>+da;</span><br><span class="line">a/=<span class="number">10</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(b&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> data = b%<span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span>(data == db)</span><br><span class="line">pb=pb*<span class="number">10</span>+db;</span><br><span class="line">b/=<span class="number">10</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, pa+pb);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h1 id="2-导弹防御系统"><a href="#2-导弹防御系统" class="headerlink" title="2.导弹防御系统"></a>2.导弹防御系统</h1><details blue><summary> 题目 </summary>              <div class='content'>              <p>【问题描述】</p><p>某国为了防御敌国的导弹袭击，开发出一种导弹拦截系统。但是这种导弹拦截系统有一个缺陷：虽然它的第一发炮弹能够到达任意的高度，但是以后每一发炮弹都不能高于前一发的高度。某天，雷达捕捉到敌国的导弹来袭，并观测到导弹依次飞来的高度，请计算这套系统最多能拦截多少导弹。拦截来袭导弹时，必须按来袭导弹袭击的时间顺序，不允许先拦截后面的导弹，再拦截前面的导弹。 </p><p>【输入形式】</p><p>每组输入有两行，</p><p>第一行，输入雷达捕捉到的敌国导弹的数量k（k&lt;=25），</p><p>第二行，输入k个正整数，表示k枚导弹的高度，按来袭导弹的袭击时间顺序给出，以空格分隔。</p><p>【输出形式】</p><p>每组输出只有一行，包含一个整数，表示最多能拦截多少枚导弹。</p><p>【样例输入】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">8</span><br><span class="line">300 207 155 300 299 170 158 65</span><br></pre></td></tr></table></figure><p>【样例输出】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure>              </div>            </details><details cyan open><summary> 题解 </summary>              <div class='content'>              <p>199几年NOIP的经典题：最大下降子序列（DP）</p><p>然后是可以用二分查找优化的，这里就是用二分查找优化的写法（按CCF也应该不会管这种优化吧，不优化也能过</p>              </div>            </details><details red><summary> 代码 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100005</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="keyword">int</span> f[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">int</span> l,r,mid;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    f[<span class="number">0</span>]=<span class="number">1234123412</span>;</span><br><span class="line">    <span class="keyword">int</span> ans1=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(f[ans1]&gt;=a[i])&#123;</span><br><span class="line">            f[ans1+<span class="number">1</span>]=a[i];<span class="comment">//结束点为a[i]</span></span><br><span class="line">            ans1++; <span class="comment">//当前最长不上升序列的长度加一</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;<span class="comment">//二分查找</span></span><br><span class="line">            l=<span class="number">0</span>;r=ans1;</span><br><span class="line">            <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">                mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">                <span class="keyword">if</span>(f[mid]&gt;=a[i])l=mid+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> r=mid;    </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(l!=<span class="number">0</span>)f[l]=a[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans1&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h1 id="3-魔咒词典"><a href="#3-魔咒词典" class="headerlink" title="3.魔咒词典"></a>3.魔咒词典</h1><details blue><summary> 题目 </summary>              <div class='content'>              <p>【问题描述】</p><p>哈利波特在魔法学校的必修课之一就是学习魔咒。据说魔法世界有100000种不同的魔咒，哈利很难全部记住，但是为了对抗强敌，他必须在危急时刻能够调用任何一个需要的魔咒，所以他需要你的帮助。</p><p>给你一部魔咒词典。当哈利听到一个魔咒时，你的程序必须告诉他那个魔咒的功能；当哈利需要某个功能但不知道该用什么魔咒时，你的程序要替他找到相应的魔咒。如果他要的魔咒不在词典中，就输出“what?”</p><p>【输入形式】</p><p>首先列出词典中不超过100000条不同的魔咒词条，每条格式为：</p><p><code>[魔咒] 对应功能</code></p><p>其中“魔咒”和“对应功能”分别为长度不超过20和80的字符串，字符串中保证不包含字符“[”和“]”，且“]”和后面的字符串之间有且仅有一个空格。词典最后一行以“@END@”结束，这一行不属于词典中的词条。<br>词典之后的一行包含非负整数N（0=&lt;N&lt;=1000），随后是N个测试用例。每个测试用例占一行，或者给出“[魔咒]”，或者给出“对应功能”。</p><p>【输出形式】</p><p>每个测试用例的输出占一行，输出魔咒对应的功能，或者功能对应的魔咒。如果魔咒不在词典中，就输出“what?”</p><p>【样例输入】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[expelliarmus] the disarming charm</span><br><span class="line">[rictusempra] send a jet of silver light to hit the enemy</span><br><span class="line">[tarantallegra] control the movement of one&#39;s legs</span><br><span class="line">[serpensortia] shoot a snake out of the end of one&#39;s wand</span><br><span class="line">[lumos] light the wand</span><br><span class="line">[obliviate] the memory charm</span><br><span class="line">[expecto patronum] send a Patronus to the dementors</span><br><span class="line">[accio] the summoning charm</span><br><span class="line">@END@</span><br><span class="line">4</span><br><span class="line">[lumos]</span><br><span class="line">the summoning charm</span><br><span class="line">[arha]</span><br><span class="line">take me to the sky</span><br></pre></td></tr></table></figure><p>【样例输出】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">light the wand</span><br><span class="line">accio</span><br><span class="line">what?</span><br><span class="line">what?</span><br></pre></td></tr></table></figure>              </div>            </details><details cyan open><summary> 题解 </summary>              <div class='content'>              <p>双map正反存是写起来最快也是跑起来最快的办法，至于分割字符串的话，<code>find</code>和<code>substr</code>一顿操作（巴拉巴拉巴拉~</p>              </div>            </details><details red><summary> 代码 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line"><span class="built_in">string</span> fun;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; findfun;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; findname;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line">getline(<span class="built_in">cin</span>, s);</span><br><span class="line"><span class="keyword">if</span>(s==<span class="string">&quot;@END@&quot;</span>)<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">int</span> pos2 = s.find(<span class="string">&#x27;]&#x27;</span>);</span><br><span class="line">name = s.substr(<span class="number">0</span>, pos2+<span class="number">1</span>);</span><br><span class="line">fun = s.substr(pos2+<span class="number">2</span>);</span><br><span class="line">findfun[name] = fun;</span><br><span class="line">findname[fun] = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="built_in">cin</span>.ignore();</span><br><span class="line"><span class="keyword">while</span>(n--)&#123;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line">getline(<span class="built_in">cin</span>, s);</span><br><span class="line"><span class="keyword">if</span>(s[<span class="number">0</span>]==<span class="string">&#x27;[&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(findfun.find(s)!=findfun.end())</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;findfun[s]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;what?&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(findname.find(s)!=findname.end())&#123;</span><br><span class="line"><span class="built_in">string</span> ss = findname[s];</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ss.substr(<span class="number">1</span>,ss.length()<span class="number">-2</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;what?&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h1 id="4-打牌"><a href="#4-打牌" class="headerlink" title="4.打牌"></a>4.打牌</h1><details blue><summary> 题目 </summary>              <div class='content'>              <p>【问题描述】</p><p>牌只有1到9，手里拿着已经排好序的牌a，对方出牌b，用程序判断手中牌是否能够压过对方出牌。<br>规则：出牌牌型有5种</p><ol><li>一张 如4 则5…9可压过 </li><li>两张 如44 则55，66，77，…，99可压过 </li><li>三张 如444 规则如2</li><li>四张 如4444 规则如2 </li><li>五张 牌型只有12345 23456 34567 45678 56789五个，后面的比前面的均大。</li></ol><p>【输入形式】</p><p>输入有多行，第一行代表手中的牌，长度不超过200个数字。接下来的每一行代表每次对方出的牌。</p><p>【输出形式】</p><p>输出有多行，代表手中的牌是否能压过对方出的牌，压过输出YES， 并列出所有可选项，可选项之间用空格分隔。 否则输出NO。</p><p>【样例输入】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">17624234556367</span><br><span class="line">33</span><br><span class="line">222</span><br><span class="line">34567</span><br></pre></td></tr></table></figure><p>【样例输出】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">YES 44 55 66 77</span><br><span class="line">YES 666</span><br><span class="line">NO</span><br></pre></td></tr></table></figure>              </div>            </details><details cyan open><summary> 题解 </summary>              <div class='content'>              <p>其实规则1~4本质上都是一样的，可以一起判断。我这里没用string/map之类的方法，就用了最朴素的写法解决这题。记录自己的手牌中每种有几张然后看对手出牌来判断就是</p>              </div>            </details><details red><summary> 代码 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> have[<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> ch[<span class="number">201</span>];</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, ch);</span><br><span class="line">s = ch;</span><br><span class="line"><span class="keyword">int</span> l = s.length();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;l;i++)</span><br><span class="line">have[<span class="keyword">int</span>(ch[i]-<span class="string">&#x27;0&#x27;</span>)]++;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, ch))&#123;</span><br><span class="line">s = ch;</span><br><span class="line">l = s.length();</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span>(l&lt;<span class="number">5</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = ch[<span class="number">0</span>]-<span class="string">&#x27;0&#x27;</span>+<span class="number">1</span>; i&lt;<span class="number">10</span>; i++)</span><br><span class="line"><span class="keyword">if</span>(have[i]&gt;l<span class="number">-1</span>)&#123;</span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">break</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = ch[<span class="number">0</span>]-<span class="string">&#x27;0&#x27;</span>+<span class="number">1</span>; i&lt;<span class="number">10</span>; i++)</span><br><span class="line"><span class="keyword">if</span>(have[i]&gt;l<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;l;j++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;NO\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = ch[<span class="number">0</span>]-<span class="string">&#x27;0&#x27;</span>+<span class="number">1</span>; i&lt;<span class="number">6</span>; i++)</span><br><span class="line"><span class="keyword">if</span>(have[i]&gt;<span class="number">0</span> &amp;&amp; have[i+<span class="number">1</span>]&gt;<span class="number">0</span> &amp;&amp; have[i+<span class="number">2</span>]&gt;<span class="number">0</span> &amp;&amp; have[i+<span class="number">3</span>]&gt;<span class="number">0</span> &amp;&amp; have[i+<span class="number">4</span>]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = ch[<span class="number">0</span>]-<span class="string">&#x27;0&#x27;</span>+<span class="number">1</span>; i&lt;<span class="number">6</span>; i++)</span><br><span class="line"><span class="keyword">if</span>(have[i]&gt;<span class="number">0</span> &amp;&amp; have[i+<span class="number">1</span>]&gt;<span class="number">0</span> &amp;&amp; have[i+<span class="number">2</span>]&gt;<span class="number">0</span> &amp;&amp; have[i+<span class="number">3</span>]&gt;<span class="number">0</span> &amp;&amp; have[i+<span class="number">4</span>]&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;i+<span class="number">5</span>;j++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;NO\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h1 id="5-最大报销额"><a href="#5-最大报销额" class="headerlink" title="5.最大报销额"></a>5.最大报销额</h1><details blue><summary> 题目 </summary>              <div class='content'>              <p>【问题描述】现有一笔经费可以报销一定额度的发票。允许报销的发票类型包括买图书（A类）、文具（B类）、差旅（C类），要求每张发票的总额不得超过1000元，每张发票上，单项物品的价值不得超过600元。现请你编写程序，在给出的一堆发票中找出可以报销的、不超过给定额度的最大报销额。</p><p>【输入形式】测试输入包含若干测试用例。每个测试用例的第1行包含两个正数 Q 和 N，其中 Q 是给定的报销额度，N（N&lt;=30）是发票张数。随后是 N 行输入，每行的格式为：<br>      <code>m Type_1:price_1 Type_2:price_2 … Type_m:price_m</code></p><pre><code>  其中正整数 m 是这张发票上所开物品的件数，Type_i 和 price_i 是第 i 项物品的种类和价值。物品种类用一个大写英文字母表示。当N为0时，全部输入结束，相应的结果不要输出。</code></pre><p>【输出形式】对每个测试用例输出1行，即可以报销的最大数额，精确到小数点后2位。</p><p>【样例输入】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">200.00 3</span><br><span class="line">2 A:23.50 B:100.00</span><br><span class="line">1 C:650.00</span><br><span class="line">3 A:59.99 A:120.00 X:10.00</span><br><span class="line">1200.00 2</span><br><span class="line">2 B:600.00 A:400.00</span><br><span class="line">1 C:200.50</span><br><span class="line">1200.50 3</span><br><span class="line">2 B:600.00 A:400.00</span><br><span class="line">1 C:200.50</span><br><span class="line">1 A:100.00</span><br><span class="line">100.00 0</span><br></pre></td></tr></table></figure><p>【样例输出】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">123.50</span><br><span class="line">1000.00</span><br><span class="line">1200.50</span><br></pre></td></tr></table></figure>              </div>            </details><details cyan open><summary> 题解 </summary>              <div class='content'>              <p>这题判断每张发票是否满足条件还是比较简单的，只是记得要先把可能的结果存起来</p><p>然后比较复杂的是接下来的01背包，这题属于01背包的一个变种（装箱问题），而我们一般处理这类问题会把重量/体积作为数组的索引进行DP，而这里体积为double就稍微麻烦点</p><p>看到题目要求两位小数就想扩大个100倍，结果因为精度问题只过了4个点，所以咱扩大个10000倍（逃</p>              </div>            </details><details red><summary> 代码 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> f[<span class="number">100000001</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">double</span> have;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;have&gt;&gt;n &amp;&amp; n&gt;<span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">31</span>];</span><br><span class="line"><span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(n--)&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//printf(&quot;%d\n&quot;, n);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="keyword">bool</span> flag=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">double</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line"><span class="keyword">while</span>(t--)&#123;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;ch;</span><br><span class="line"><span class="built_in">cin</span>.ignore();</span><br><span class="line"><span class="keyword">double</span> qwq;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;qwq;</span><br><span class="line"><span class="keyword">if</span>(ch != <span class="string">&#x27;A&#x27;</span> &amp;&amp; ch != <span class="string">&#x27;B&#x27;</span> &amp;&amp; ch != <span class="string">&#x27;C&#x27;</span>)</span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span>(qwq &gt; <span class="number">600.00</span>)</span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line">sum+=qwq;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(sum &gt; <span class="number">1000.00</span>)</span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span>(flag)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">a[num++] = sum*<span class="number">10000</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> v = have*<span class="number">10000</span>;</span><br><span class="line"><span class="built_in">memset</span>(f, <span class="number">0</span>, <span class="keyword">sizeof</span>(f));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;num; i++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=v; j&gt;=a[i]; j--)</span><br><span class="line">            f[j] = max(f[j],f[j-a[i]]+a[i]);</span><br><span class="line">    <span class="comment">//cout&lt;&lt;f[v]&lt;&lt;endl;</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.2f\n&quot;</span>, (<span class="keyword">double</span>)f[v]/<span class="number">10000.0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h1 id="6-带通配符的数"><a href="#6-带通配符的数" class="headerlink" title="6.带通配符的数"></a>6.带通配符的数</h1><details blue><summary> 题目 </summary>              <div class='content'>              <p>【问题描述】给定一个可以带通配符问号的正整数W，问号可以代表任意一个一位数字。再给定一个正整数X，和W具有同样的长度。问有多少个整数符合W的形式并且比X大？</p><p>【输入形式】多组数据，每组数据两行，第一行是W，第二行是X，它们长度相同，在[1..10]之间。</p><p>【输出形式】每行一个整数表示结果。</p><p>【样例输入】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">36?1?8</span><br><span class="line">236428</span><br><span class="line">8?3</span><br><span class="line">910</span><br><span class="line">?</span><br><span class="line">5</span><br></pre></td></tr></table></figure><p>【样例输出】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">100</span><br><span class="line">0</span><br><span class="line">4</span><br></pre></td></tr></table></figure>              </div>            </details><details cyan open><summary> 题解 </summary>              <div class='content'>              <p>记录所有?的个数，这里需要稍微模拟一下每个?处的取值，而当前?处理完进入下一个?时此处就与另一个数同位置相同。（这样讲可能讲不明白（</p>              </div>            </details><details red><summary> 代码 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> w, x;</span><br><span class="line">    <span class="keyword">int</span> len, amount;</span><br><span class="line">    <span class="keyword">int</span> res;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; w &gt;&gt; x)&#123;</span><br><span class="line">        res = <span class="number">0</span>;</span><br><span class="line">        len = w.length();</span><br><span class="line">        amount = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">            <span class="keyword">if</span> (w[i] == <span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">                amount += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (w[i] != <span class="string">&#x27;?&#x27;</span>)&#123;</span><br><span class="line">                <span class="comment">//相等才有继续比下一位的意义</span></span><br><span class="line">                <span class="keyword">if</span> (w[i] &gt; x[i])&#123;</span><br><span class="line">                    res += <span class="built_in">pow</span>(<span class="number">10</span>, amount);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (w[i] &lt; x[i])</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                amount -= <span class="number">1</span>;</span><br><span class="line">                res += (<span class="number">9</span> - (x[i] - <span class="string">&#x27;0&#x27;</span>)) * <span class="built_in">pow</span>(<span class="number">10</span>, amount); <span class="comment">// 比他大的计数就行，如果等于的之后就会计算到，不用考虑 </span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h1 id="7-愚人节的礼物"><a href="#7-愚人节的礼物" class="headerlink" title="7.愚人节的礼物"></a>7.愚人节的礼物</h1><details blue><summary> 题目 </summary>              <div class='content'>              <p>【问题描述】</p><p>四月一日快到了，Vayko 想了个愚人的好办法——送礼物。嘿嘿，不要想的太好，这礼物可没那么简单，Vayko 为了愚人，准备了一堆盒子，其中只有一个盒子里面装了礼物。盒子里面可以再放零个或者多个盒子。假设放礼物的盒子里不再放其他盒子。用()表示一个盒子，B表示礼物，Vayko 想让你帮她算出愚人指数，即最少需要拆多少个盒子才能拿到礼物。</p><p>【输入形式】</p><p>本题目包含多组测试，请处理到文件结束。每组测试包含一个长度不大于 1000, 只包含’(‘,’)’和’B’三种字符的字符串，代表 Vayko 设计的礼物透视图。你可以假设，每个透视图画的都是合法的。</p><p>【输出形式】</p><p>对于每组测试，请在一行里面输出愚人指数。</p><p>【样例输入】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">((((B)()))())</span><br><span class="line">(B)</span><br></pre></td></tr></table></figure><p>【样例输出】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4</span><br><span class="line">1</span><br></pre></td></tr></table></figure>              </div>            </details><details cyan open><summary> 题解 </summary>              <div class='content'>              <p>看到这种题，有良好做题经验的人第一反应应该是括号匹配，也就是栈模拟。</p><p>但是这里没有多种类的括号，所以只模拟栈高度就够了，遇到B的时候就break输出栈高度就行</p>              </div>            </details><details red><summary> 代码 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt; </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;s)&#123;</span><br><span class="line"><span class="keyword">int</span> l=s.length();</span><br><span class="line"><span class="keyword">int</span> qwq=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;l;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(s[i]==<span class="string">&#x27;(&#x27;</span>)qwq++;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s[i]==<span class="string">&#x27;)&#x27;</span>)qwq--;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, qwq);</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h1 id="8-ab串"><a href="#8-ab串" class="headerlink" title="8.ab串"></a>8.ab串</h1><details blue><summary> 题目 </summary>              <div class='content'>              <p>【问题描述】</p><pre><code>   给定一个由字符&#39;a&#39;和字符&#39;b&#39;组成的字符串，可以删除若干字符，使得剩下来的字符串满足前后段为a，中间段为b（aaa....aaabbbb.....bbbbaaa.....aaa）,区段可以没有字符（ba,ab,b,aa都是合法的），求最长剩下字符串的长度。</code></pre><p>【输入形式】</p><pre><code>  输入为一行一个长度不超过5000的非空字符串，字符串仅由字符&#39;a&#39;和字符&#39;b&#39;组成。</code></pre><p>【输出形式】</p><pre><code>  输出为一个整数，表示符合要求的最长剩下字符串长度</code></pre><p>【样例输入1】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">abba</span><br></pre></td></tr></table></figure><p>【样例输出1】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><p>【样例输入2】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bab</span><br></pre></td></tr></table></figure><p>【样例输出2】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure>              </div>            </details><details cyan open><summary> 题解 </summary>              <div class='content'>              <p>这题也老麻烦了。。。</p><p>说是前缀和，但我习惯把他看作普通的预处理（确实是前缀和</p><p>把ab分别做前缀和处理，那么<code>i-&gt;j</code>段的<code>a</code>个数就有<code>numa[j]-numa[i-1]</code>，b也一样</p><p>而这题其实只是找两个位置，也就是<code>前面的a串与中间b串的分割点</code>、以及<code>中间b串与后面a串的分割点</code>，枚举并迭代更新即可（可以看作dp也可以看作暴力）</p>              </div>            </details><details red><summary> 代码 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5000</span>;</span><br><span class="line"><span class="keyword">int</span> numa[N], numb[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; mp;</span><br><span class="line">    <span class="keyword">int</span> len=s.length();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//预处理前缀和</span></span><br><span class="line">    <span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">        numa[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">numb[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] == <span class="string">&#x27;a&#x27;</span>)&#123;</span><br><span class="line">            numa[i] = numa[i - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">            numb[i] = numb[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (s[i] == <span class="string">&#x27;b&#x27;</span>)&#123;</span><br><span class="line">            numb[i] = numb[i - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">            numa[i] = numa[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        mp[s[i]]++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> MAX = max(mp[<span class="string">&#x27;b&#x27;</span>] ? mp[<span class="string">&#x27;a&#x27;</span>] + <span class="number">1</span> : mp[<span class="string">&#x27;a&#x27;</span>], mp[<span class="string">&#x27;b&#x27;</span>]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> r = <span class="number">0</span>; r &lt; len; r++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">0</span>; l &lt; r; l++)&#123;</span><br><span class="line">            <span class="keyword">int</span> ans1 = numa[l];                         <span class="comment">//第一段a的个数</span></span><br><span class="line">            <span class="keyword">int</span> ans2 = numb[r] - numb[l - <span class="number">1</span>];           <span class="comment">//中间段b的个数</span></span><br><span class="line">            <span class="keyword">int</span> ans3 = numa[len - <span class="number">1</span>] - numa[r - <span class="number">1</span>]; <span class="comment">//后面一段a的个数</span></span><br><span class="line">            MAX = max(MAX, ans1+ans2+ans3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; MAX &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h1 id="9-占座位"><a href="#9-占座位" class="headerlink" title="9.占座位"></a>9.占座位</h1><details blue><summary> 题目 </summary>              <div class='content'>              <p>【问题描述】sun所在学校的教室座位每天都是可以预占的。<br>一个人可以去占多个座位，而且一定是要连续的座位，如果占不到他所要求的这么多座位，那么他就一个座位也不要了。为了降低难度，每次分配座位按座位号从小到大查找，采用最先适配法分配座位。</p><p>【输入形式】输入有多组数据。<br>每组数据输入座位排数n，0&lt;n&lt;=100（座位的排列数相等，座位是按每行从左到右依次排序的, 第1行的最右边一个座位与第二行的第一个座位视为连续座位），m（ 0&lt;m&lt;=min(100,n*n) ）个人。<br>然后输入k（0&lt;k&lt;=100），最后输入k个命令。<br>命令只有两种：</p><ol><li>in id num（代表id,0&lt;=id&lt;m,要占num个座位，若占不到连续的num(0&lt;num&lt;=20)个座位表示该命令无效）</li><li>out id（代表id要释放他之前占的所有座位）<br>注意：如果id之前占过座还没释放那么之后他的in命令都是无效的，<br>如果id之前没占过座位那么他的out命令也是无效的。</li></ol><p>【输出形式】对每个in命令输出yes或者no，如果命令有效则输出yes，无效则输出no。<br>在yes no后面只带有回车，不带其他任何字符。</p><p>【样例输入】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4 10</span><br><span class="line">9</span><br><span class="line">in 1 7</span><br><span class="line">in 2 3</span><br><span class="line">in 3 3</span><br><span class="line">in 3 3</span><br><span class="line">in 4 3</span><br><span class="line">out 2</span><br><span class="line">in 5 6</span><br><span class="line">out 3</span><br><span class="line">in 5 6</span><br></pre></td></tr></table></figure><p>【样例输出】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yes</span><br><span class="line">yes</span><br><span class="line">yes</span><br><span class="line">no</span><br><span class="line">yes</span><br><span class="line">yes</span><br><span class="line">no</span><br><span class="line">yes</span><br><span class="line">yes</span><br></pre></td></tr></table></figure>              </div>            </details><details cyan open><summary> 题解 </summary>              <div class='content'>              <p>这题其实和第一周第十题内存管理其实几乎是一样的（</p><p>我这边就不像那题一样写单链表了，过于麻烦，这次就写个纯模拟就好啦！</p>              </div>            </details><details red><summary> 代码 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> use[<span class="number">10010</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">bool</span> have=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">int</span> left=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> right=<span class="number">-1</span>;</span><br><span class="line">&#125;id[<span class="number">10010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,m,k,len;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;n, &amp;m, &amp;k);</span><br><span class="line">len = n*n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">use[i]=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span>(k--)&#123;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="keyword">int</span> a,b;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;s&gt;&gt;a;</span><br><span class="line"><span class="keyword">if</span>(s==<span class="string">&quot;in&quot;</span>)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;b;</span><br><span class="line"><span class="keyword">if</span>(id[a].have)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;no\n&quot;</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(use[i] == <span class="number">-1</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> j;</span><br><span class="line"><span class="keyword">for</span>(j=i; j&lt;i+b &amp;&amp; j&lt;len; j++)</span><br><span class="line"><span class="keyword">if</span>(use[j] != <span class="number">-1</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span>(j==i+b)&#123;</span><br><span class="line">id[a].have=<span class="literal">true</span>;</span><br><span class="line">id[a].left=i;</span><br><span class="line">id[a].right=j<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(j=i; j&lt;i+b; j++)</span><br><span class="line">use[j]=a;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;yes\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">i=j<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i==len)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;no\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!id[a].have)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;no\n&quot;</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=id[a].left; i&lt;=id[a].right; i++)</span><br><span class="line">use[i]=<span class="number">-1</span>;</span><br><span class="line">id[a].have=<span class="literal">false</span>;</span><br><span class="line">id[a].left=<span class="number">-1</span>;</span><br><span class="line">id[a].right=<span class="number">-1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;yes\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h1 id="10-Maya历法"><a href="#10-Maya历法" class="headerlink" title="10.Maya历法"></a>10.Maya历法</h1><details blue><summary> 题目 </summary>              <div class='content'>              <p>【问题描述】</p><p>在学术休假期间，M.A. Ya教授在古老的Maya历法上有一个惊人的发现。从一个古老的令人棘手的信息中，教授发现Maya文明以365天为一年，称为Haab，包含19个月。前18个月每月有20天，月份名字为：pop、no、zip、zotz、tzec、xul、yoxkin、mol、chen、yax、zac、ceh、mac、kankin、muan、pax、koyab、cumhu。每月的天数使用数字来表示，从0~19，而不是用名字。Haab的最后一个月叫做uayet，有5天，表示为0、1、2、3、4。玛雅人认为这个月是不吉利的，法院不开庭，贸易停止了，人们甚至停止清扫地板。</p><pre><code>   出于宗教的目的，Maya人使用另外一套历法，叫做Tzolkin（冬青年）。一年被分为13个期间，每个期间20天。每天被表示为由数字和日期名表示的数对。使用20个名字：imix、ik、akbal、kan、chicchan、cimi、manik、lamat、muluk、ok、chuen、eb、ben、ix、mem、cib、caban、eznab、canac、ahau，以及13个数字，双循环使用。   请注意，每一天都有一个明确的描述。例如，在年初的日子被描述如下：   1 imix, 2 ik, 3 akbal, 4 kan, 5 chicchan, 6 cimi, 7 manik, 8 lamat, 9 muluk, 10 ok, 11 chuen, 12 eb, 13 ben, 1 ix, 2 mem, 3 cib, 4 caban, 5 eznab, 6 canac, 7 ahau, 在下一个期间开始为 8 imix, 9 ik, 10 akbal . . .   年份（包含Haab和Tzolkin)用数字0、1、...来表示，数字0是世界的开始。因此，第一天表示为：   Haab: 0. pop 0  Tzolkin: 1 imix 0  请帮M.A.Ya教授写一个程序，将Haab日历转换为Tzolkin日历。  </code></pre><p>【输入形式】</p><pre><code>   在Haab中日期用以下形式表示：           NumberOfTheDay. Month Year   输入文件的第一行包含文件中输入日期的数目。接下来的n行包含Haab日历格式的n个日期，年份小于5000。</code></pre><p>【输出形式】</p><pre><code>    Tzolkin日期用一下格式：           Number NameOfTheDay Year    输出包括n行，按照与输入日期对应的顺序，输出tzolkin日历格式日期。 </code></pre><p>【样例输入】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">10.zac 0</span><br><span class="line">0.pop 0</span><br><span class="line">10.zac 1995</span><br></pre></td></tr></table></figure><p>【样例输出】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3 chuen 0</span><br><span class="line">1 imix 0</span><br><span class="line">9 cimi 2801</span><br></pre></td></tr></table></figure>              </div>            </details><details cyan open><summary> 题解 </summary>              <div class='content'>              <p>化成一个单位再化回去就好了（这题看起来又臭又长我就直接搜题解了</p>              </div>            </details><details red><summary> 代码 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> month[<span class="number">19</span>]=&#123;<span class="string">&quot;pop&quot;</span>,<span class="string">&quot;no&quot;</span>,<span class="string">&quot;zip&quot;</span>,<span class="string">&quot;zotz&quot;</span>,<span class="string">&quot;tzec&quot;</span>,<span class="string">&quot;xul&quot;</span>,<span class="string">&quot;yoxkin&quot;</span>,</span><br><span class="line"><span class="string">&quot;mol&quot;</span>,<span class="string">&quot;chen&quot;</span>,<span class="string">&quot;yax&quot;</span>,<span class="string">&quot;zac&quot;</span>,<span class="string">&quot;ceh&quot;</span>,<span class="string">&quot;mac&quot;</span>,<span class="string">&quot;kankin&quot;</span>,<span class="string">&quot;muan&quot;</span>,<span class="string">&quot;pax&quot;</span>,<span class="string">&quot;koyab&quot;</span>,<span class="string">&quot;cumhu&quot;</span>,<span class="string">&quot;uayet&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> day[<span class="number">20</span>]=&#123;<span class="string">&quot;imix&quot;</span>,<span class="string">&quot;ik&quot;</span>,<span class="string">&quot;akbal&quot;</span>,<span class="string">&quot;kan&quot;</span>,<span class="string">&quot;chicchan&quot;</span>,<span class="string">&quot;cimi&quot;</span>,</span><br><span class="line"><span class="string">&quot;manik&quot;</span>,<span class="string">&quot;lamat&quot;</span>,<span class="string">&quot;muluk&quot;</span>,<span class="string">&quot;ok&quot;</span>,<span class="string">&quot;chuen&quot;</span>,<span class="string">&quot;eb&quot;</span>,<span class="string">&quot;ben&quot;</span>,<span class="string">&quot;ix&quot;</span>,<span class="string">&quot;mem&quot;</span>,<span class="string">&quot;cib&quot;</span>,<span class="string">&quot;caban&quot;</span>,<span class="string">&quot;eznab&quot;</span>,<span class="string">&quot;canac&quot;</span>,<span class="string">&quot;ahau&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_month</span><span class="params">(<span class="built_in">string</span> mon)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">19</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(month[i]==mon)&#123;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">while</span>(n--)&#123;</span><br><span class="line"><span class="keyword">int</span> Haab_day,Haab_year;</span><br><span class="line"><span class="keyword">char</span> point;</span><br><span class="line"><span class="built_in">string</span> Haab_month;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;Haab_day&gt;&gt;point&gt;&gt;Haab_month&gt;&gt;Haab_year;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> totol_day=Haab_year*<span class="number">365</span>+find_month(Haab_month)*<span class="number">20</span>+Haab_day;</span><br><span class="line"><span class="keyword">int</span> Tzolkin_num,Tzolkin_year;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> Tzolkin_day;</span><br><span class="line">Tzolkin_year=totol_day/<span class="number">260</span>;</span><br><span class="line">totol_day%=<span class="number">260</span>;</span><br><span class="line">Tzolkin_num=totol_day%<span class="number">13</span>+<span class="number">1</span>;</span><br><span class="line">Tzolkin_day=day[totol_day%<span class="number">20</span>];</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;Tzolkin_num&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;Tzolkin_day&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;Tzolkin_year&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>              </div>            </details><hr><h1 id="11-数码管"><a href="#11-数码管" class="headerlink" title="11.数码管"></a>11.数码管</h1><details blue><summary> 题目 </summary>              <div class='content'>              <p>【问题描述】</p><p>液晶数码管用七笔阿拉数字表示的十个数字，把横和竖的一 个短划都称为一笔，即７有３笔，８有７笔等。对于十个数字一种排列，要做到两相邻数字都可以由另一个数字加上几笔或减去几笔组成，但不能又加又减。比如 ７→３是允许的，７→２不允许。任意输入一组数，判断是否符合上述规则，注意，1在右边。</p><p>【输入形式】</p><p>每行输入一个0~9的排列，数字之间用空格分隔，以-1作为输入结束</p><p>【输出形式】</p><p>输出YES或NO</p><p>【样例输入】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4 1 0 7 3 9 5 6 8 2</span><br><span class="line">3 5 1 6 2 7 9 0 4 8</span><br><span class="line">-1</span><br></pre></td></tr></table></figure><p>【样例输出】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">YES</span><br><span class="line">NO</span><br></pre></td></tr></table></figure>              </div>            </details><details cyan open><summary> 题解 </summary>              <div class='content'>              <p>这题其实把每种数用个表存一下各个短线处就好啦，然后判断只需要看是不是有增有减就行（看代码理解去（</p>              </div>            </details><details red><summary> 代码 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> num[<span class="number">10</span>][<span class="number">7</span>]=&#123;</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[<span class="number">0</span>]) &amp;&amp; a[<span class="number">0</span>]!=<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> temp1=<span class="number">0</span>,temp2=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">7</span>;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(num[a[i]][j] - num[a[i<span class="number">-1</span>]][j]&gt;<span class="number">0</span>)temp1++;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(num[a[i]][j] - num[a[i<span class="number">-1</span>]][j]&lt;<span class="number">0</span>)temp2++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//cout&lt;&lt;a[i]&lt;&lt;&quot;-&quot;&lt;&lt;a[i-1]&lt;&lt;&quot;: &quot;&lt;&lt;temp1&lt;&lt;&quot; &quot;&lt;&lt;temp2&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">if</span>(temp1&gt;<span class="number">0</span> &amp;&amp; temp2&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;NO\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">10</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;YES\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h1 id="12-多项式加法"><a href="#12-多项式加法" class="headerlink" title="12.多项式加法"></a>12.多项式加法</h1><details blue><summary> 题目 </summary>              <div class='content'>              <p>【问题描述】</p><p>一个多项式可以表示为一组数对，数对中第一个数始终为整数，且唯一，表示多项式的次数，另一数表示为对应的系数且不为0。输入两组数对，每组以0 0作为结束，实现对两个多项式的加法并按降幂输出结果数对</p><p>【输入形式】</p><p>每行输入一个数对，以空格为分隔符，以0 0结束</p><p>【输出形式】</p><p>每行输出一个数对，以空格为分隔符</p><p>【样例输入】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5 12</span><br><span class="line">3 8</span><br><span class="line">1 2</span><br><span class="line">15 5</span><br><span class="line">0 10</span><br><span class="line">0 0</span><br><span class="line">3 12</span><br><span class="line">30 1</span><br><span class="line">15 5</span><br><span class="line">0 0</span><br></pre></td></tr></table></figure><p>【样例输出】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">30 1</span><br><span class="line">15 10</span><br><span class="line">5 12</span><br><span class="line">3 20</span><br><span class="line">1 2</span><br><span class="line">0 10</span><br></pre></td></tr></table></figure>              </div>            </details><details cyan open><summary> 题解 </summary>              <div class='content'>              <p>熟练应用map以及其自带排序的特点，还有迭代器的逆序输出也得注意end指针是没有值的（没写过rbegin所以我就用while了</p>              </div>            </details><details red><summary> 代码 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; qwq;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a,b;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;a,&amp;b))&#123;</span><br><span class="line"><span class="keyword">if</span>(a==<span class="number">0</span> &amp;&amp; b==<span class="number">0</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">qwq[a]+=b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;::iterator it=qwq.end();</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">--it;</span><br><span class="line"><span class="keyword">if</span>(it-&gt;second != <span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, it-&gt;first,it-&gt;second);</span><br><span class="line"><span class="keyword">if</span>(it==qwq.begin())</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h1 id="13-数字统计"><a href="#13-数字统计" class="headerlink" title="13.数字统计"></a>13.数字统计</h1><details blue><summary> 题目 </summary>              <div class='content'>              <p>【问题描述】</p><p>给定一个k位整数N = dk-1<em>10k-1 + … + d1</em>101 + d0 (0&lt;=di&lt;=9, i=0,…,k-1, dk-1&gt;0)，请编写程序统计每种不同的个位数字出现的次数。例如：给定N = 100311，则有2个0，3个1，和1个3。</p><p>【输入形式】</p><p>每个输入包含1个测试用例，即一个不超过1000位的正整数N。</p><p>【输出形式】</p><p>对N中每一种不同的个位数字，以D:M的格式在一行中输出该位数字D及其在N中出现的次数M。要求按D的升序输出</p><p>【样例输入】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">100311</span><br></pre></td></tr></table></figure><p>【样例输出】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0:2</span><br><span class="line">1:3</span><br><span class="line">3:1</span><br></pre></td></tr></table></figure>              </div>            </details><details cyan open><summary> 题解 </summary>              <div class='content'>              <p>跟上一题就差不多嘛，不过因为只有0-9，所以在速度上来看直接数组比map快（map的自带排序在这里就害了速度，这里用数组就不需要排序。所以不要滥用数据结构）</p>              </div>            </details><details red><summary> 代码 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> num[<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line"><span class="keyword">int</span> l = s.length();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;l;i++)</span><br><span class="line">num[<span class="keyword">int</span>(s[i]-<span class="string">&#x27;0&#x27;</span>)]++;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line"><span class="keyword">if</span>(num[i]&gt;<span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d:%d\n&quot;</span>, i,num[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h1 id="14-A除以B"><a href="#14-A除以B" class="headerlink" title="14.A除以B"></a>14.A除以B</h1><details blue><summary> 题目 </summary>              <div class='content'>              <p>【问题描述】<br>【问题描述】</p><p>本题要求计算A/B，其中A是不超过1000位的整数（A&gt;=0），B是1位正整数。你需要输出商数Q和余数R，使得A = B * Q + R成立。</p><p>【输入形式】</p><p>输入在1行中依次给出A和B，中间以1空格分隔。</p><p>【输出形式】</p><p>在1行中依次输出Q和R，中间以1空格分隔。</p><p>【样例输入】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">123456789050987654321 7</span><br></pre></td></tr></table></figure><p>【样例输出】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">17636684150141093474 3</span><br></pre></td></tr></table></figure>              </div>            </details><details cyan open><summary> 题解 </summary>              <div class='content'>              <p>高精度除低精度的题，这里直接用高精度除高精度的板子会超时。</p><p>然后取余我这里就取巧了（因为除数只有一位，所以余数也只会有一位（但其实没必要，计算过程就会算余数（</p>              </div>            </details><details red><summary> 代码 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> a1[<span class="number">1001</span>],c1[<span class="number">1001</span>];</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">1001</span>],c[<span class="number">1001</span>],lena,i,x=<span class="number">0</span>,lenc,b;</span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line"><span class="built_in">memset</span>(c,<span class="number">0</span>,<span class="keyword">sizeof</span>(c));</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a1&gt;&gt;b;</span><br><span class="line">lena=<span class="built_in">strlen</span>(a1);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=lena<span class="number">-1</span>;i++)</span><br><span class="line">a[i+<span class="number">1</span>]=a1[i]<span class="number">-48</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=lena;i++)</span><br><span class="line">&#123;</span><br><span class="line">c[i]=(x*<span class="number">10</span>+a[i])/b;</span><br><span class="line">x=(x*<span class="number">10</span>+a[i])%b;</span><br><span class="line">&#125;</span><br><span class="line">lenc=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(c[lenc]==<span class="number">0</span>&amp;&amp;lenc&lt;lena)</span><br><span class="line">lenc++;</span><br><span class="line"><span class="keyword">for</span>(i=lenc;i&lt;=lena;i++)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;c[i];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> temp=a[lena]-c[lena]*b;</span><br><span class="line"><span class="keyword">while</span>(temp&lt;<span class="number">0</span>)</span><br><span class="line">temp+=<span class="number">10</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;temp;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h1 id="15-公交系统"><a href="#15-公交系统" class="headerlink" title="15.公交系统"></a>15.公交系统</h1><details blue><summary> 题目 </summary>              <div class='content'>              <p>【问题描述】</p><pre><code>    城市公交系统有一个记录仪，用于记录每个站点的乘客人数的变化情况，例如：x表示到站前公交车上的乘客人数，y表示离站时公交车上的乘客人数，则该记录仪记录的该站的数字为y-x。    对于一辆公交车和n个车站，a1,a2,...,an为该公交车在各站的记录数据。    假定w为该公交车可容纳的最大乘客人数，编程求出在第一站停靠之前公交车上人数的可能数据有多少种？</code></pre><p>【输入形式】</p><pre><code>    第一行包含两个数据n和w(1&lt;=n&lt;=1000, 1&lt;=w&lt;=109)，分别表示车站的数目和公交车可容纳的最大乘客人数。    第二行包含一个序列a1,a2,...,an，表示记录仪记录的各站的数据。</code></pre><p>【输出形式】</p><pre><code>    输出一个整数，表示公交车在第一站停靠之前可能的乘客人数数据的个数，如果没有，则输出0。</code></pre><p>【样例输入1】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3 5</span><br><span class="line">2 1 -3</span><br></pre></td></tr></table></figure><p>【样例输出1】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><p>【样例输入2】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2 4</span><br><span class="line">-1 1</span><br></pre></td></tr></table></figure><p>【样例输出2】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><p>【样例输入3】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4 10</span><br><span class="line">2 4 1 2</span><br></pre></td></tr></table></figure><p>【样例输出3】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><p>【样例说明】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在第一个样例中，乘客数可能有0、1、2，共3种情况</span><br><span class="line">在第二个样例中，乘客数可能有1、2、3、4，共4种情况</span><br><span class="line">在第三个样例种，乘客数可能为0或1，共2种情况</span><br></pre></td></tr></table></figure>              </div>            </details><details cyan open><summary> 题解 </summary>              <div class='content'>              <p>这题也算前缀和吧，不过需要注意好变量的意义。</p><p>用max记录前缀和最大值，<code>w-max(max&gt;=0)</code>即决定了初始的最大乘客数</p><p>用min记录前缀和最小值, 这里就需要考虑一下，如果<code>min&lt;=0</code>说明初始乘客量至少是<code>-min</code>，而<code>min&gt;0</code>是没有意义的</p><p>明确这两点就很容易求解了，<code>max(max&gt;=0)-min(min&lt;=0)</code>即为区间范围，如果区间长度l大于w显然无解，否则答案就是<code>w-l+1</code>（这个就很容易推了吧）</p>              </div>            </details><details red><summary> 代码 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,w;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n,&amp;w);</span><br><span class="line"><span class="keyword">int</span> ma=<span class="number">0</span>,mi=<span class="number">0</span>,now=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(n--)&#123;</span><br><span class="line"><span class="keyword">int</span> q;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q);</span><br><span class="line">now+=q;</span><br><span class="line">ma = max(ma, now);</span><br><span class="line">mi = min(mi, now);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> t = ma-mi;</span><br><span class="line"><span class="keyword">if</span>(t&gt;w)<span class="built_in">printf</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, w-t+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h1 id="16-成绩大排队"><a href="#16-成绩大排队" class="headerlink" title="16.成绩大排队"></a>16.成绩大排队</h1><details blue><summary> 题目 </summary>              <div class='content'>              <p>【问题描述】</p><p>读入n名学生的姓名、学号、成绩，分别输出成绩最高和成绩最低学生的姓名和学号。</p><p>【输入形式】</p><p>每个测试输入包含1个测试用例，格式为</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第1行：正整数n</span><br><span class="line"> 第2行：第1个学生的姓名 学号 成绩</span><br><span class="line"> 第3行：第2个学生的姓名 学号 成绩</span><br><span class="line"> ... ... ...</span><br><span class="line"> 第n+1行：第n个学生的姓名 学号 成绩</span><br></pre></td></tr></table></figure><p>其中姓名和学号均为不超过20个字符的字符串，成绩为0到100之间的一个整数，这里保证在一组测试用例中没有两个学生的成绩是相同的。</p><p>【输出形式】</p><p>对每个测试用例输出2行，第1行是成绩最高学生的姓名和学号，第2行是成绩最低学生的姓名和学号，字符串间有1空格。</p><p>【样例输入】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">Joe Math990112 89</span><br><span class="line">Mike CS991301 100</span><br><span class="line">Mary EE990830 95</span><br></pre></td></tr></table></figure><p>【样例输出】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Mike CS991301</span><br><span class="line">Joe Math990112</span><br></pre></td></tr></table></figure>              </div>            </details><details cyan open><summary> 题解 </summary>              <div class='content'>              <p>明显结构体sort，水的不能再水了（</p>              </div>            </details><details red><summary> 代码 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="built_in">string</span> name,id;</span><br><span class="line"><span class="keyword">int</span> score;</span><br><span class="line">&#125;p[<span class="number">10086</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node a, node b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.score&lt;b.score;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;p[i].name&gt;&gt;p[i].id&gt;&gt;p[i].score;</span><br><span class="line">sort(p, p+n, cmp);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;p[n<span class="number">-1</span>].name&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;p[n<span class="number">-1</span>].id&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;p[<span class="number">0</span>].name&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;p[<span class="number">0</span>].id;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h1 id="17-字符串数字置换"><a href="#17-字符串数字置换" class="headerlink" title="17.字符串数字置换"></a>17.字符串数字置换</h1><details blue><summary> 题目 </summary>              <div class='content'>              <p>【问题描述】</p><p>从键盘接收用户输入的字符串, 对用户输入的每个字符串的处理是：将字符串内的每一个十进制数字字符置换成下列表格中右边所对应的一个字符串（所有其他字符不变），然后将转换的结果显示在屏幕上；并分别计算每个数字的置换次数。</p><p>十进制数字字符置换成</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0 (Zero)</span><br><span class="line">1 (One)</span><br><span class="line">2 (Two)</span><br><span class="line">3 (Three)</span><br><span class="line">4 (Four)</span><br><span class="line">5 (Five)</span><br><span class="line">6 (Six)</span><br><span class="line">7 (Seven)</span><br><span class="line">8 (Eight)</span><br><span class="line">9 (Nine)</span><br></pre></td></tr></table></figure><p>例如，若用户输入的字符串为</p><pre><code>     Page112-Line3，</code></pre><p>则程序5的输出是：</p><pre><code>     Page(One) (One) (Two)-Line(Three),</code></pre><p>数字0到9的置换次数分别是  0 2 1 1 0 0 0 0 0 0</p><p>【输入形式】</p><p>输入一行字符串，其中可包含字母、数字、空格或其他符号（英文）</p><p>【输出形式】</p><p>第一行为将字符串中的数字转换为表格中的内容后输出</p><p>第二行为数字0~9被转换的次数</p><p>【样例输入】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Page112-Line3</span><br></pre></td></tr></table></figure><p>【样例输出】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Page(One)(One)(Two)-Line(Three)</span><br><span class="line">0 2 1 1 0 0 0 0 0 0</span><br></pre></td></tr></table></figure>              </div>            </details><details cyan open><summary> 题解 </summary>              <div class='content'>              <p>逐字处理，略</p>              </div>            </details><details red><summary> 代码 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> change[<span class="number">10</span>] = &#123;<span class="string">&quot;(Zero)&quot;</span>, <span class="string">&quot;(One)&quot;</span>, <span class="string">&quot;(Two)&quot;</span>, <span class="string">&quot;(Three)&quot;</span>, <span class="string">&quot;(Four)&quot;</span>, <span class="string">&quot;(Five)&quot;</span>, <span class="string">&quot;(Six)&quot;</span>, <span class="string">&quot;(Seven)&quot;</span>, <span class="string">&quot;(Eight)&quot;</span>, <span class="string">&quot;(Nine)&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> c[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line">getline(<span class="built_in">cin</span>, s);</span><br><span class="line"><span class="keyword">int</span> l = s.length();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;l;i++)</span><br><span class="line"><span class="keyword">if</span>(s[i]&gt;=<span class="string">&#x27;0&#x27;</span> &amp;&amp; s[i]&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;change[<span class="keyword">int</span>(s[i]-<span class="string">&#x27;0&#x27;</span>)];</span><br><span class="line">c[<span class="keyword">int</span>(s[i]-<span class="string">&#x27;0&#x27;</span>)]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;s[i];</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, c[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h1 id="18-写出来吧"><a href="#18-写出来吧" class="headerlink" title="18.写出来吧"></a>18.写出来吧</h1><details blue><summary> 题目 </summary>              <div class='content'>              <p>【问题描述】</p><p>读入一个自然数n，计算其各位数字之和，用汉语拼音写出和的每一位数字。</p><p>【输入形式】</p><p>每个测试输入包含1个测试用例，即给出自然数n的值。这里保证n小于10的100次方。</p><p>【输出形式】</p><p>在一行内输出n的各位数字之和的每一位，拼音数字间有1 空格，但一行中最后一个拼音数字后没有空格。</p><p>【样例输入】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1234567890987654321123456789</span><br></pre></td></tr></table></figure><p>【样例输出】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yi san wu</span><br></pre></td></tr></table></figure><p>【样例说明】<br>友情提示汉语拼音</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0~9：ling yi er san si wu liu qi ba jiu</span><br></pre></td></tr></table></figure>              </div>            </details><details cyan open><summary> 题解 </summary>              <div class='content'>              <p>水（就拆字麻烦，正常都是低位到高位拆出，所以输出就反了（不如咱们开个栈处理（逃</p>              </div>            </details><details red><summary> 代码 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> change[<span class="number">10</span>] = &#123;<span class="string">&quot;ling&quot;</span>, <span class="string">&quot;yi&quot;</span>, <span class="string">&quot;er&quot;</span>, <span class="string">&quot;san&quot;</span>, <span class="string">&quot;si&quot;</span>, <span class="string">&quot;wu&quot;</span>, <span class="string">&quot;liu&quot;</span>, <span class="string">&quot;qi&quot;</span>, <span class="string">&quot;ba&quot;</span>, <span class="string">&quot;jiu&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="built_in">string</span>&gt; st;</span><br><span class="line"><span class="keyword">int</span> l = s.length(), sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;l;i++)</span><br><span class="line">sum+=s[i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"><span class="keyword">while</span>(sum&gt;<span class="number">0</span>)&#123;</span><br><span class="line">st.push(change[sum%<span class="number">10</span>]);</span><br><span class="line">sum/=<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(st.empty())</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;change[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;st.top();</span><br><span class="line">st.pop();</span><br><span class="line"><span class="keyword">while</span>(!st.empty())&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;st.top();</span><br><span class="line">st.pop(); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h1 id="19-到底买不买"><a href="#19-到底买不买" class="headerlink" title="19.到底买不买"></a>19.到底买不买</h1><details blue><summary> 题目 </summary>              <div class='content'>              <p>小红想买些珠子做一串自己喜欢的珠串。卖珠子的摊主有很多串五颜六色的珠串，但是不肯把任何一串拆散了卖。于是小红要你帮忙判断一下，某串珠子里是否包含了全部自己想要的珠子？如果是，那么告诉她有多少多余的珠子；如果不是，那么告诉她缺了多少珠子。</p><p>为方便起见，我们用[0-9]、[a-z]、[A-Z]范围内的字符来表示颜色。例如在图1中，第3串是小红想做的珠串；那么第1串可以买，因为包含了全部她想要的珠子，还多了8颗不需要的珠子；第2串不能买，因为没有黑色珠子，并且少了一颗红色的珠子。</p><p>【输入形式】</p><p>每个输入包含1个测试用例。每个测试用例分别在2行中先后给出摊主的珠串和小红想做的珠串，两串都不超过1000个珠子。</p><p>【输出形式】</p><p>如果可以买，则在一行中输出“Yes”以及有多少多余的珠子；如果不可以买，则在一行中输出“No”以及缺了多少珠子。其间以1个空格分隔。</p><p>【样例输入】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ppRYYGrrYBR2258</span><br><span class="line">YrR8RrY</span><br></pre></td></tr></table></figure><p>【样例输出】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Yes 8</span><br></pre></td></tr></table></figure>              </div>            </details><details cyan open><summary> 题解 </summary>              <div class='content'>              <p>一样的map统计，然后判断有没有缺漏，有缺漏就计数。无缺漏显然l1-l2就是多了多少</p>              </div>            </details><details red><summary> 代码 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; m;</span><br><span class="line"><span class="built_in">string</span> s1,s2;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;s1&gt;&gt;s2;</span><br><span class="line"><span class="keyword">int</span> l1 = s1.length();</span><br><span class="line"><span class="keyword">int</span> l2 = s2.length();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;l2;i++)</span><br><span class="line">m[s2[i]]++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;l1;i++)</span><br><span class="line"><span class="keyword">if</span>(m.find(s1[i]) !=  m.end())</span><br><span class="line">m[s1[i]]--;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">map</span>&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt;::iterator it=m.begin(); it!=m.end(); ++it)</span><br><span class="line"><span class="keyword">if</span>(it-&gt;second &gt; <span class="number">0</span>)</span><br><span class="line">count += it-&gt;second;</span><br><span class="line"><span class="keyword">if</span>(count&gt;<span class="number">0</span>)<span class="built_in">printf</span>(<span class="string">&quot;No %d&quot;</span>, count);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;Yes %d&quot;</span>, l1-l2);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h1 id="20-挖掘机技术哪家强"><a href="#20-挖掘机技术哪家强" class="headerlink" title="20.挖掘机技术哪家强"></a>20.挖掘机技术哪家强</h1><details blue><summary> 题目 </summary>              <div class='content'>              <p>【问题描述】</p><p>为了用事实说明挖掘机技术到底哪家强，组织一场挖掘机技能大赛。现请你根据比赛结果统计出技术最强的那个学校。</p><p>【输入形式】</p><p>输入在第1行给出不超过105的正整数N，即参赛人数。随后N行，每行给出一位参赛者的信息和成绩，包括其所代表的学校的编号、及其比赛成绩（百分制），中间以空格分隔。</p><p>【输出形式】</p><p>在一行中给出总得分最高的学校的编号、及其总分，中间以空格分隔。题目保证答案唯一，没有并列。</p><p>【样例输入】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6</span><br><span class="line">3 65</span><br><span class="line">2 80</span><br><span class="line">1 100</span><br><span class="line">2 70</span><br><span class="line">3 40</span><br><span class="line">3 0</span><br></pre></td></tr></table></figure><p>【样例输出】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2 150</span><br></pre></td></tr></table></figure><p>【问题说明】</p><p>建议练习使用STL中的map</p>              </div>            </details><details cyan open><summary> 题解 </summary>              <div class='content'>              <p>又是一道统计的水题。。。最后迭代器遍历找一下最大和下标就行</p>              </div>            </details><details red><summary> 代码 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">while</span>(n--)&#123;</span><br><span class="line"><span class="keyword">int</span> a,b;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;a,&amp;b);</span><br><span class="line">m[a]+=b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ma=<span class="number">0</span>, index;</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;::iterator it=m.begin(); it!=m.end(); ++it)</span><br><span class="line"><span class="keyword">if</span>(it-&gt;second &gt; ma)&#123;</span><br><span class="line">ma = it-&gt;second;</span><br><span class="line">index = it-&gt;first;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d&quot;</span>, index,ma);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h1 id="21-Web导航"><a href="#21-Web导航" class="headerlink" title="21.Web导航"></a>21.Web导航</h1><details blue><summary> 题目 </summary>              <div class='content'>              <p>【问题描述】</p><p>标准的Web浏览器具有在最近访问的页面中前后移动的特性。实现这些特性的一种方法是使用两个堆栈来跟踪可以通过前后移动到达的页面。在这个问题中，我们要求实现这一点。</p><pre><code>   需要支持以下命令：   BACK：将当前页面压入前向堆栈的顶部；从后向堆栈的顶部弹出该页，使其成为新的当前页。如果后向堆栈为空，则该指令忽略。   FORWARD：将当前页面压入后向堆栈的顶部；从前向堆栈的顶部弹出该页，使其成为新的当前页。如果前向堆栈为空，则该指令忽略。   VISIT：将当前页面压入后向堆栈的顶部，将URL指定为新的当前页。前向堆栈被清空。   QUIT：退出浏览器。   假设浏览器最初在网址`http://www.game.org/`上加载网页。</code></pre><p>【输入形式】输入是一个命令序列。命令关键字BACK、FORWARD、VISIT和QUIT都是大写。URL中无空格，最多有70个字符。假定在任何时候，每个堆栈中没有问题实例需要超过100个元素。输入的结尾由QUIT命令标识。</p><p>【输出形式】除QUIT外的每个命令，如果命令没有被忽略，则在命令执行后输出当前页面的URL，否则，打印”Ignored”。每个命令的输出独立打印一行。QUIT命令无输出。</p><p>【样例输入】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">VISIT http:&#x2F;&#x2F;game.ashland.edu&#x2F;</span><br><span class="line">VISIT http:&#x2F;&#x2F;game.baylor.edu&#x2F;acmicpc&#x2F;</span><br><span class="line">BACK</span><br><span class="line">BACK</span><br><span class="line">BACK</span><br><span class="line">FORWARD</span><br><span class="line">VISIT http:&#x2F;&#x2F;www.our.com&#x2F;</span><br><span class="line">BACK</span><br><span class="line">BACK</span><br><span class="line">FORWARD</span><br><span class="line">FORWARD</span><br><span class="line">FORWARD</span><br><span class="line">QUIT</span><br></pre></td></tr></table></figure><p>【样例输出】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;game.ashland.edu&#x2F;</span><br><span class="line">http:&#x2F;&#x2F;game.baylor.edu&#x2F;acmicpc&#x2F;</span><br><span class="line">http:&#x2F;&#x2F;game.ashland.edu&#x2F;</span><br><span class="line">http:&#x2F;&#x2F;www.game.org&#x2F;</span><br><span class="line">Ignored</span><br><span class="line">http:&#x2F;&#x2F;game.ashland.edu&#x2F;</span><br><span class="line">http:&#x2F;&#x2F;www.our.com&#x2F;</span><br><span class="line">http:&#x2F;&#x2F;game.ashland.edu&#x2F;</span><br><span class="line">http:&#x2F;&#x2F;www.game.org&#x2F;</span><br><span class="line">http:&#x2F;&#x2F;game.ashland.edu&#x2F;</span><br><span class="line">http:&#x2F;&#x2F;www.our.com&#x2F;</span><br><span class="line">Ignored</span><br></pre></td></tr></table></figure>              </div>            </details><details cyan open><summary> 题解 </summary>              <div class='content'>              <p>题目都把怎么处理告诉你了，总不能这还不会吧</p>              </div>            </details><details red><summary> 代码 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="built_in">string</span>&gt; fr,ba;</span><br><span class="line"><span class="built_in">string</span> code,now=<span class="string">&quot;http://www.game.org/&quot;</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;code)&#123;</span><br><span class="line"><span class="keyword">if</span>(code == <span class="string">&quot;QUIT&quot;</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(code == <span class="string">&quot;BACK&quot;</span> &amp;&amp; !ba.empty())&#123;</span><br><span class="line">fr.push(now);</span><br><span class="line">now = ba.top();</span><br><span class="line">ba.pop();</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;now&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(code == <span class="string">&quot;FORWARD&quot;</span> &amp;&amp; !fr.empty())&#123;</span><br><span class="line">ba.push(now);</span><br><span class="line">now = fr.top();</span><br><span class="line">fr.pop();</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;now&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(code == <span class="string">&quot;VISIT&quot;</span>)&#123;</span><br><span class="line">ba.push(now);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;now;</span><br><span class="line"><span class="keyword">while</span>(!fr.empty())</span><br><span class="line">fr.pop();</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;now&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Ignored&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h1 id="结"><a href="#结" class="headerlink" title="结"></a>结</h1><p>第三周复盘结束（这周居然这么快就写完了）。有什么问题可以评论留言</p>]]></content>
      
      
      <categories>
          
          <category> C++学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> CCF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>猹的魔改日记-菜单栏及移动端侧边菜单栏的魔改</title>
      <link href="12280.html"/>
      <url>12280.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><div class="note red icon flat"><i class="note-icon fas fa-fan"></i><p>温馨提示：本日记本只提供魔改参考，并不做通用处理，很多源码修改都需要根据自己博客做小小微调</p></div><div class="note purple icon flat"><i class="note-icon far fa-hand-scissors"></i><p>另外在修改源码时注意做好备份处理。本帖只提供思路与方法，如果哪里炸了，请检查语法与缩进等，猹概不负责啦！</p></div><p>继白嫖<a href="https://akilar.top/">店长</a>、<a href="https://zfe.space/">冰老师</a>、<a href="https://www.antmoe.com/">小康</a>、<a href="https://www.nesxc.com/">小N</a>等大佬的魔改之后，猹终于不满于白嫖，开始想动手实操，把自己的博客调教成想要的样子，也以此来使猹学前端有实操的机会。</p><p>当然在整个站点还没修改完之前，这些魔改内容只会在<a href="https://blogdev.noionion.top/">猹的魔改测试站</a>出现。你可以在测试站点进行预览。<del>（当然测试站点会有非常多的bug和还没调的设置和样式，这些也不需要和猹吐槽）</del>在魔改完成之前主站也不会再做任何样式调整</p><p><strong>注</strong>：这部分前言内容会在魔改日记本的每一篇都出现；另外这是一篇日记而非教程，文风可能不是那么友好（逃</p><hr><h2 id="菜单栏魔改的各部分"><a href="#菜单栏魔改的各部分" class="headerlink" title="菜单栏魔改的各部分"></a>菜单栏魔改的各部分</h2><h3 id="菜单栏居中布局和右侧功能实现"><a href="#菜单栏居中布局和右侧功能实现" class="headerlink" title="菜单栏居中布局和右侧功能实现"></a>菜单栏居中布局和右侧功能实现</h3><p>猹的菜单栏一直用的是butterfly最原生的布局，即左侧博客名右侧菜单栏（搜索按钮和菜单）</p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20210820174952.png" alt="魔改前的菜单栏"></p><p>而这样多的菜单项目虽然一目了然，但终归看起来太杂太乱，不能给猹一种简洁的感觉。而猹对<a href="https://blog.zhheo.com/">洪哥</a>和<a href="https://ranas.cn/">小雨</a>的菜单栏那种居中而又功能完备的菜单栏艳羡已久。想来想去就此开始了自己的魔改之路。</p><details cyan><summary> 彩色图标等前置教程 </summary>              <div class='content'>              <p>既然要魔改，那顺便也把图标换成彩色的吧！这里用的是店长的教程帖子<del>（能白嫖的部分还是尽量白嫖的好）</del></p><p>如果不需要彩色图标，这部分请忽略~</p><div class="tag link"><a class="link-card" title="前置：Hexo 引入阿里矢量图标库" href="https://akilar.top/posts/d2ebecef/"><div class="left"><img src="https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io/img/siteicon/favicon.ico"/></div><div class="right"><p class="text">前置：Hexo 引入阿里矢量图标库</p><p class="url">https://akilar.top/posts/d2ebecef/</p></div></a></div><div class="tag link"><a class="link-card" title="菜单栏多色图标配置教程" href="https://akilar.top/posts/23fdf850/#菜单栏多色图标配置教程"><div class="left"><img src="https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io/img/siteicon/favicon.ico"/></div><div class="right"><p class="text">菜单栏多色图标配置教程</p><p class="url">https://akilar.top/posts/23fdf850/#菜单栏多色图标配置教程</p></div></a></div><div class="tag link"><a class="link-card" title="Social 卡片彩色图标引入" href="https://akilar.top/posts/23fdf850/#Social卡片彩色图标引入"><div class="left"><img src="https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io/img/siteicon/favicon.ico"/></div><div class="right"><p class="text">Social 卡片彩色图标引入</p><p class="url">https://akilar.top/posts/23fdf850/#Social卡片彩色图标引入</p></div></a></div>              </div>            </details><details red open><summary> 菜单选项居中 </summary>              <div class='content'>              <p>前置摸完了之后，首先要解决的是菜单栏的居中问题。这部分的源码在<code>[blogroot]\themes\butterfly\layout\includes\header\nav.pug</code></p><p>而检查它的CSS之后，发现<code>div#blog_name</code>的css有一条<code>flex: 1</code></p><p>因而整个菜单栏的最右侧也需要一个相同<code>flex</code>属性的<code>div</code>来平衡。因为右侧我要做一个搜索和黑夜模式切换的功能，所以姑且id命名为<code>navFn</code></p><p>然后给它加个<code>flex: 1</code>的css属性就给菜单栏完成了居中（居中如果用偏移之类的方法显然是会出bug的，改变设备宽度就会发现它又不居中了，改源码加样式是最好的方法）</p><p>然后<strong>子菜单居中</strong>一样参考的一样是店长的文章，这里我就不再写一遍</p><div class="tag link"><a class="link-card" title="butterfly-heo 主题反编译日记" href="https://akilar.top/posts/ecff41cf/"><div class="left"><img src="https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io/img/siteicon/favicon.ico"/></div><div class="right"><p class="text">butterfly-heo 主题反编译日记</p><p class="url">https://akilar.top/posts/ecff41cf/</p></div></a></div>              </div>            </details><details yellow open><summary> 右侧功能区 </summary>              <div class='content'>              <p>搜索功能是bf菜单栏自带的功能，这里只需要把<code>nav.bug</code>中的搜索模块代码从<code>#menus</code>移到咱刚刚新建的<code>#navFn</code>中即可。如果想将图标换成彩色的，则类似于social卡片彩色图标的替换做法（注意缩进，这里不能直接用我的，你没有这个图标）</p><figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">      if (theme.algolia_search.enable || theme.local_search.enable)</span><br><span class="line">        #search-button</span><br><span class="line">          a.social-icon.search</span><br><span class="line"><span class="deletion">-           i.fas.fa-search.fa-fw</span></span><br><span class="line"><span class="addition">+           svg.icon(aria-hidden=&quot;true&quot;)</span></span><br><span class="line"><span class="addition">+             use(xlink:href=`#`+ &#x27;icon-sousuo&#x27;)</span></span><br><span class="line">            span=&#x27; 搜索&#x27;</span><br></pre></td></tr></table></figure><p>而切换功能相对就复杂一点点，而基础的布局和上边类似（不过那个if判断就没啥必要了），主要是需要调用一个切换的js，我这里就直接扒了bf的js</p><p>注，这里其实是PUG，但没有bf没有PUG的代码高亮，只能用PY了</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#darkmodeBt</span></span><br><span class="line">  a.darkmode.switch</span><br><span class="line">    svg.icon(aria-hidden=<span class="string">&quot;true&quot;</span>)</span><br><span class="line">      use(xlink:href=`<span class="comment">#`+ &#x27;icon-deng1&#x27;)</span></span><br><span class="line">    <span class="keyword">if</span> (theme.display_mode == <span class="string">&#x27;dark&#x27;</span>)</span><br><span class="line">      span<span class="comment">#darkmode-switch=&#x27; 开灯&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>  </span><br><span class="line">      span<span class="comment">#darkmode-switch=&#x27; 关灯&#x27;</span></span><br></pre></td></tr></table></figure><p>怎么引入js这里就不用我多说了</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> navFn = &#123;</span><br><span class="line">    switchDarkMode: <span class="function">() =&gt;</span> &#123; <span class="comment">// Switch Between Light And Dark Mode</span></span><br><span class="line">      <span class="keyword">const</span> nowMode = <span class="built_in">document</span>.documentElement.getAttribute(<span class="string">&#x27;data-theme&#x27;</span>) === <span class="string">&#x27;dark&#x27;</span> ? <span class="string">&#x27;dark&#x27;</span> : <span class="string">&#x27;light&#x27;</span></span><br><span class="line">      <span class="keyword">if</span> (nowMode === <span class="string">&#x27;light&#x27;</span>) &#123;</span><br><span class="line">        activateDarkMode()</span><br><span class="line">        saveToLocal.set(<span class="string">&#x27;theme&#x27;</span>, <span class="string">&#x27;dark&#x27;</span>, <span class="number">2</span>)</span><br><span class="line">        GLOBAL_CONFIG.Snackbar !== <span class="literal">undefined</span> &amp;&amp; btf.snackbarShow(GLOBAL_CONFIG.Snackbar.day_to_night)</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">&#x27;darkmode-switch&#x27;</span>).innerHTML = <span class="string">&#x27; 开灯&#x27;</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        activateLightMode()</span><br><span class="line">        saveToLocal.set(<span class="string">&#x27;theme&#x27;</span>, <span class="string">&#x27;light&#x27;</span>, <span class="number">2</span>)</span><br><span class="line">        GLOBAL_CONFIG.Snackbar !== <span class="literal">undefined</span> &amp;&amp; btf.snackbarShow(GLOBAL_CONFIG.Snackbar.night_to_day)</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">&#x27;darkmode-switch&#x27;</span>).innerHTML = <span class="string">&#x27; 关灯&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// handle some cases</span></span><br><span class="line">      <span class="keyword">typeof</span> utterancesTheme === <span class="string">&#x27;function&#x27;</span> &amp;&amp; utterancesTheme()</span><br><span class="line">      <span class="keyword">typeof</span> FB === <span class="string">&#x27;object&#x27;</span> &amp;&amp; <span class="built_in">window</span>.loadFBComment()</span><br><span class="line">      <span class="built_in">window</span>.DISQUS &amp;&amp; <span class="built_in">document</span>.getElementById(<span class="string">&#x27;disqus_thread&#x27;</span>).children.length &amp;&amp; <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="built_in">window</span>.disqusReset(), <span class="number">200</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;darkmodeBt&#x27;</span>).addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    navFn.switchDarkMode()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>之后是这俩按钮的CSS控制，一个是居右的显示，另一个是移动端开灯关灯字样的隐藏，同时按钮之间拉开一定的距离，会使界面看起来更加大方（css我都用stylus写的，如果会引入的可以也用stylus写，经过nib的转换后兼容性更好）</p><figure class="highlight styl"><table><tr><td class="code"><pre><span class="line">#nav</span><br><span class="line">  <span class="comment">/* 搜索与黑夜切换样式 */</span> </span><br><span class="line">  #search-button</span><br><span class="line">    <span class="attribute">display</span>: inline</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1rem</span> </span><br><span class="line">    <span class="attribute">position</span>: relative</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">0.3rem</span></span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">0.05rem</span> <span class="number">0.05rem</span> <span class="number">0.1rem</span> rgb(<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> / <span class="number">30%</span>)</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0.78em</span></span><br><span class="line">    <span class="attribute">cursor</span>: pointer</span><br><span class="line">  #darkmodeBt</span><br><span class="line">    <span class="attribute">display</span>: inline</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1rem</span> </span><br><span class="line">    <span class="attribute">position</span>: relative</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">0.3rem</span></span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">0.05rem</span> <span class="number">0.05rem</span> <span class="number">0.1rem</span> rgb(<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> / <span class="number">30%</span>)</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0.78em</span></span><br><span class="line">    <span class="attribute">cursor</span>: pointer</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#nav</span>.hide-menu</span><br><span class="line">  <span class="comment">/* 手机模式开关灯字样隐藏 */</span></span><br><span class="line">  #darkmodeBt</span><br><span class="line">    span</span><br><span class="line">      <span class="attribute">display</span>: none <span class="meta">!important</span></span><br></pre></td></tr></table></figure><p>而针对一些手机用户习惯，菜单栏展开的按钮靠在最右侧相对比较合适，于是把这个按钮也移到功能区。（源码参考下面的nav.pug源码分享）</p><figure class="highlight styl"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#nav</span> </span><br><span class="line">  <span class="comment">/* 移动端菜单展开按钮 */</span></span><br><span class="line">  #toggle-menu</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0.1rem</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1rem</span></span><br><span class="line">    svg.<span class="attribute">icon</span></span><br><span class="line">      <span class="attribute">width</span>: <span class="number">1.6rem</span></span><br><span class="line">      <span class="attribute">height</span>: <span class="number">1.6rem</span></span><br></pre></td></tr></table></figure>              </div>            </details><details blue><summary> 屏幕宽度缩减后菜单栏变成两行的bug修复 </summary>              <div class='content'>              <p>这个情况得直接去改butterfly的<code>main.js</code>（我心里一万个不愿意），它的宽度是动态计算的，所以只需要把右侧的新增部分纳入计算即可</p><figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">  document.addEventListener(&#x27;DOMContentLoaded&#x27;, function () &#123;</span><br><span class="line">    const $blogName = document.getElementById(&#x27;site-name&#x27;)</span><br><span class="line">    let blogNameWidth = $blogName &amp;&amp; $blogName.offsetWidth</span><br><span class="line">    const $menusEle = document.querySelector(&#x27;#menus .menus_items&#x27;)</span><br><span class="line">    let menusWidth = $menusEle &amp;&amp; $menusEle.offsetWidth</span><br><span class="line">    const $searchEle = document.querySelector(&#x27;#search-button&#x27;)</span><br><span class="line">    let searchWidth = $searchEle &amp;&amp; $searchEle.offsetWidth</span><br><span class="line"><span class="addition">+   $darkmodeBtEle = document.querySelector(&#x27;#darkmodeBt&#x27;)</span></span><br><span class="line"><span class="addition">+   let darkmodeBtWidth = $darkmodeBtEle &amp;&amp; $darkmodeBtEle.offsetWidth</span></span><br><span class="line"></span><br><span class="line">    const adjustMenu = (change = false) =&gt; &#123;</span><br><span class="line">      if (change) &#123;</span><br><span class="line">        blogNameWidth = $blogName &amp;&amp; $blogName.offsetWidth</span><br><span class="line">        menusWidth = $menusEle &amp;&amp; $menusEle.offsetWidth</span><br><span class="line">        searchWidth = $searchEle &amp;&amp; $searchEle.offsetWidth</span><br><span class="line">      &#125;</span><br><span class="line">      const $nav = document.getElementById(&#x27;nav&#x27;)</span><br><span class="line">      let t</span><br><span class="line">      if (window.innerWidth &lt; 768) t = true</span><br><span class="line"><span class="deletion">-     else t = blogNameWidth + menusWidth + searchWidth &gt; $nav.offsetWidth - 120</span></span><br><span class="line"><span class="addition">+     else t = blogNameWidth + menusWidth + searchWidth + darkmodeBtWidth &gt; $nav.offsetWidth - 120</span></span><br><span class="line"></span><br><span class="line">      if (t) &#123;</span><br><span class="line">        $nav.classList.add(&#x27;hide-menu&#x27;)</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        $nav.classList.remove(&#x27;hide-menu&#x27;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details green><summary> 效果展示及nav.pug源码 </summary>              <div class='content'>              <p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20210820175139.png" alt="魔改后的菜单栏"></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">nav<span class="comment">#nav</span></span><br><span class="line">  span<span class="comment">#blog_name</span></span><br><span class="line">    a<span class="comment">#site-name(href=url_for(&#x27;/&#x27;)) #[=config.title]</span></span><br><span class="line">    </span><br><span class="line">  <span class="comment">#menus</span></span><br><span class="line">    !=partial(<span class="string">&#x27;includes/header/menu_item&#x27;</span>, &#123;&#125;, &#123;cache: true&#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">#navFn</span></span><br><span class="line">    <span class="keyword">if</span> (theme.algolia_search.enable || theme.local_search.enable)</span><br><span class="line">      <span class="comment">#search-button</span></span><br><span class="line">        a.social-icon.search</span><br><span class="line">          svg.icon(aria-hidden=<span class="string">&quot;true&quot;</span>)</span><br><span class="line">            use(xlink:href=`<span class="comment">#`+ &#x27;icon-sousuo&#x27;)</span></span><br><span class="line">          span=<span class="string">&#x27; 搜索&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#darkmodeBt</span></span><br><span class="line">      a.darkmode.switch</span><br><span class="line">        svg.icon(aria-hidden=<span class="string">&quot;true&quot;</span>)</span><br><span class="line">          use(xlink:href=`<span class="comment">#`+ &#x27;icon-deng1&#x27;)</span></span><br><span class="line">        <span class="keyword">if</span> (theme.display_mode == <span class="string">&#x27;dark&#x27;</span>)</span><br><span class="line">          span<span class="comment">#darkmode-switch=&#x27; 开灯&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>  </span><br><span class="line">          span<span class="comment">#darkmode-switch=&#x27; 关灯&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#toggle-menu</span></span><br><span class="line">      a.site-page</span><br><span class="line">        svg.icon(aria-hidden=<span class="string">&quot;true&quot;</span>)</span><br><span class="line">          use(xlink:href=`<span class="comment">#`+ &#x27;icon-mulu&#x27;)</span></span><br></pre></td></tr></table></figure>              </div>            </details><h3 id="侧边菜单栏的UI调整"><a href="#侧边菜单栏的UI调整" class="headerlink" title="侧边菜单栏的UI调整"></a>侧边菜单栏的UI调整</h3><p>可能很多来看这篇魔改的目的是看这个吧，毕竟改完的侧边菜单栏是真的漂亮（逃</p><p>先看看魔改前后效果吧（左侧两幅是魔改前的，右边魔改后的</p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/sidebar.png" alt="侧边菜单栏魔改前后对比"></p><p>这个魔改是我把自己分别丢到读者和博主的角度去看的。身为读者我一般不会再手机端阅读时，把页面拖到最下边去看博主信息，一般是直接下一页（即使留言也是在博主信息上面的</p><p><strong>而身为博主当然不止希望读者只看到自己的文章而忽略了博主本身</strong></p><p>显然在移动端，<strong>简单的侧边栏下移到底部的布局是十分不合理的</strong>。所以如何体现作者信息卡片成了移动端UI布局的一个要点。而<strong>把作者信息丢到侧边菜单栏</strong>无疑是最好的选择。</p><p>原先的布局未免又过于简陋，一个头像和一个文章标签分类数量怎么能表现作者本人和风格呢？至少得和侧边栏一样吧~</p><p>（那既然改了侧边菜单栏的布局，干脆把背景啥的都改的可爱一点吧）猹如是想到</p><details cyan open><summary> 侧边菜单栏作者信息卡片 </summary>              <div class='content'>              <p>这边基本上可以直接搬运侧栏的源码，但是由于类名的不同，需要自己重新写一下css（其实还是搬运）</p><p>修改的源码为<code>[blogroot]\themes\butterfly\layout\includes\sidebar.pug</code></p><figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">      //- 作者头像、名字、描述，此部分原先的代码在bf的版本更迭中有修改，要根据自己的bf版本源码做相应调整 -//</span><br><span class="line"><span class="deletion">-     .avatar-img.is-center</span></span><br><span class="line"><span class="deletion">-       img(src=url_for(theme.avatar.img) onerror=`onerror=null;src=&#x27;$&#123;theme.error_img.flink&#125;&#x27;` alt=&quot;avatar&quot;)</span></span><br><span class="line"><span class="addition">+     .is-center#sidebar-avatar</span></span><br><span class="line"><span class="addition">+       .avatar-img</span></span><br><span class="line"><span class="addition">+         img(src=url_for(theme.avatar.img) onerror=`this.onerror=null;this.src=&#x27;` + url_for(theme.error_img.flink) + `&#x27;` alt=&quot;avatar&quot;)</span></span><br><span class="line"><span class="addition">+       .author-info__name= config.author</span></span><br><span class="line"><span class="addition">+       .author-info__description!= theme.aside.card_author.description || config.description</span></span><br></pre></td></tr></table></figure><p>然后在<code>hr</code>之前添加这段代码</p><figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="addition">+     //- begin follow_me按钮</span></span><br><span class="line"><span class="addition">+     if theme.aside.card_author.button.enable</span></span><br><span class="line"><span class="addition">+       a#card-info-btn.button--animated(href=theme.aside.card_author.button.link)</span></span><br><span class="line"><span class="addition">+         i(class=theme.aside.card_author.button.icon)</span></span><br><span class="line"><span class="addition">+         span=theme.aside.card_author.button.text</span></span><br><span class="line"><span class="addition">+     //- end     </span></span><br><span class="line"><span class="addition">+     //- begin 社交</span></span><br><span class="line"><span class="addition">+     if(theme.social)</span></span><br><span class="line"><span class="addition">+       .menu-info-social-icons.is-center</span></span><br><span class="line"><span class="addition">+         !=fragment_cache(&#x27;social&#x27;, function()&#123;return partial(&#x27;includes/header/social&#x27;)&#125;)</span></span><br><span class="line"><span class="addition">+     //- end</span></span><br><span class="line"></span><br><span class="line">      hr</span><br></pre></td></tr></table></figure><p>然后调整作者信息等的css</p><figure class="highlight styl"><table><tr><td class="code"><pre><span class="line">#sidebar</span><br><span class="line">  #sidebar-menus</span><br><span class="line">    <span class="comment">/* 手机侧栏菜单展开 信息、头像位置调整*/</span></span><br><span class="line">    .site-data</span><br><span class="line">      <span class="attribute">margin-top</span>: <span class="number">0.5rem</span></span><br><span class="line">    #sidebar-avatar</span><br><span class="line">      <span class="attribute">margin-top</span>: <span class="number">0.2rem</span></span><br><span class="line">      <span class="comment">/* 作者名 */</span></span><br><span class="line">      .author-info__name</span><br><span class="line">        <span class="attribute">font-weight</span>: <span class="number">500</span></span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">1.57em</span></span><br><span class="line">    <span class="comment">/* 手机侧栏菜单展开 follow_me按钮*/</span></span><br><span class="line">    #card-info-btn</span><br><span class="line">      <span class="attribute">display</span>: block</span><br><span class="line">      <span class="attribute">margin</span>: <span class="number">0.3rem</span> <span class="number">1rem</span> <span class="number">0</span> <span class="number">1rem</span></span><br><span class="line">      <span class="attribute">background-color</span>: var(--btn-bg)</span><br><span class="line">      <span class="attribute">color</span>: var(--btn-color)</span><br><span class="line">      <span class="attribute">text-align</span>: center</span><br><span class="line">      <span class="attribute">line-height</span>: <span class="number">2.4</span></span><br><span class="line">      <span class="attribute">overflow</span>: hidden</span><br><span class="line">      <span class="attribute">border-radius</span>: <span class="number">0.625rem</span></span><br><span class="line">    <span class="comment">/* 手机侧栏菜单展开 社交图标 */</span></span><br><span class="line">    .menu-info-social-icons</span><br><span class="line">      <span class="attribute">margin</span>: <span class="number">0.5rem</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line">      .social-<span class="attribute">icon</span></span><br><span class="line">        <span class="attribute">display</span>: inline</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">0.7rem</span> <span class="number">0</span> <span class="number">0.7rem</span></span><br></pre></td></tr></table></figure>              </div>            </details><details red open><summary> 背景彩色渐变css </summary>              <div class='content'>              <p>这个就是纯css了，不需要再额外添加什么其它的东西</p><figure class="highlight styl"><table><tr><td class="code"><pre><span class="line">#sidebar</span><br><span class="line">  #sidebar-menus</span><br><span class="line">    <span class="attribute">background</span>: linear-gradient(<span class="number">60deg</span>, <span class="number">#ffd7e4</span> <span class="number">0%</span>, <span class="number">#c8f1ff</span> <span class="number">100%</span>)</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span></span><br><span class="line">  #sidebar</span><br><span class="line">    #sidebar-menus</span><br><span class="line">      <span class="attribute">background</span>: linear-gradient(<span class="number">60deg</span>, <span class="number">#2c0c16</span> <span class="number">0%</span>, <span class="number">#043749</span> <span class="number">100%</span>)</span><br></pre></td></tr></table></figure>              </div>            </details><details yellow><summary> 猹的可爱简笔画形象 </summary>              <div class='content'>              <p>猹一直想把自己的简笔画形象加到博客里，丢进侧边菜单栏作为一点点缀能让猹的博客看起来更加可爱一点点</p><p>于是我在上下各加了一个<code>div</code>容器放置两张简笔画图片，改变css大小和偏移位置来融入菜单栏的其他各部分之间</p><figure class="highlight styl"><table><tr><td class="code"><pre><span class="line">#sidebar</span><br><span class="line">  #sidebar-menus</span><br><span class="line">    .simply-cha-<span class="attribute">top</span></span><br><span class="line">      <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0</span> -<span class="number">3rem</span> <span class="number">0</span></span><br><span class="line">      <span class="attribute">height</span>: <span class="number">4rem</span></span><br><span class="line">      <span class="attribute">background</span>: url(<span class="string">&quot;/img/simplycha-top.png&quot;</span>)</span><br><span class="line">      <span class="attribute">background-size</span>: contain</span><br><span class="line">      <span class="attribute">background-repeat</span>: no-repeat</span><br><span class="line">      <span class="attribute">background-position</span>: <span class="number">100%</span> <span class="number">0%</span></span><br><span class="line">    .simply-cha</span><br><span class="line">      <span class="attribute">margin-top</span>: -<span class="number">4rem</span></span><br><span class="line">      <span class="attribute">height</span>: <span class="number">5rem</span></span><br><span class="line">      <span class="attribute">background</span>: url(<span class="string">&quot;/img/simplycha.png&quot;</span>)</span><br><span class="line">      <span class="attribute">background-size</span>: contain</span><br><span class="line">      <span class="attribute">background-repeat</span>: no-repeat</span><br></pre></td></tr></table></figure><p>由于一个子菜单收缩带来了奇怪的bug，和店长探讨之后发现只有js动态控制一条道路可行，我。。。难受</p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20210820215456.png" alt="吸底"></p><p>但猹很小天才的想到，猹决定把上下展开的按钮隐藏了，不动态变化了就不需要考虑啦</p><figure class="highlight styl"><table><tr><td class="code"><pre><span class="line">#sidebar</span><br><span class="line">  #sidebar-menus</span><br><span class="line">    <span class="selector-class">.fas</span><span class="selector-class">.fa-chevron-down</span>.expand</span><br><span class="line">      <span class="attribute">display</span>: none</span><br></pre></td></tr></table></figure>              </div>            </details><details blue><summary> 一点点个人强迫症修复 </summary>              <div class='content'>              <p>既然把个人信息栏丢进侧边菜单了，那是不是在移动端的时候侧栏就可以关了？</p><p>然而bf的配置项<code>aside: mobile: false</code>只能在屏宽小于768px的时候有效，而在屏宽在768-900px的时候还是会把整个侧边栏显示在下边（看着超难受</p><p>于是乎我把900px以下的都关了，同时为了保证900px屏宽下一定会出现移动端导航栏样式，顺便把main.js的计算下限调了（这部分代码在上一节的修复里提到过</p><figure class="highlight styl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">900px</span>)</span><br><span class="line">  #aside-content</span><br><span class="line">    display: none</span><br></pre></td></tr></table></figure><figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">-     if (window.innerWidth &lt; 768) t = true</span></span><br><span class="line"><span class="addition">+     if (window.innerWidth &lt;= 900) t = true</span></span><br><span class="line">      else t = blogNameWidth + menusWidth + searchWidth + darkmodeBtWidth &gt; $nav.offsetWidth - 120</span><br></pre></td></tr></table></figure>              </div>            </details><details green><summary> sidebar.pug源码 </summary>              <div class='content'>              <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#sidebar</span></span><br><span class="line">  <span class="comment">#menu-mask</span></span><br><span class="line">  <span class="comment">#sidebar-menus</span></span><br><span class="line">    .simply-cha-top</span><br><span class="line">    //- begin 打算换成网站左上角图</span><br><span class="line">    .<span class="keyword">is</span>-center<span class="comment">#sidebar-avatar</span></span><br><span class="line">      .avatar-img</span><br><span class="line">        img(src=url_for(theme.avatar.img) onerror=`this.onerror=null;this.src=<span class="string">&#x27;` + url_for(theme.error_img.flink) + `&#x27;</span>` alt=<span class="string">&quot;avatar&quot;</span>)</span><br><span class="line">      .author-info__name= config.author</span><br><span class="line">      .author-info__description!= theme.aside.card_author.description || config.description</span><br><span class="line">    //- end</span><br><span class="line"></span><br><span class="line">    .site-data</span><br><span class="line">      <span class="keyword">if</span> site.posts.length</span><br><span class="line">        .data-item.<span class="keyword">is</span>-center</span><br><span class="line">          .data-item-link</span><br><span class="line">            a(href=url_for(config.archive_dir) + <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">              .headline= _p(<span class="string">&#x27;aside.articles&#x27;</span>) </span><br><span class="line">              .length-num= site.posts.length</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> site.tags.length</span><br><span class="line">        .data-item.<span class="keyword">is</span>-center</span><br><span class="line">          .data-item-link</span><br><span class="line">            a(href=url_for(config.tag_dir) + <span class="string">&#x27;/&#x27;</span> )</span><br><span class="line">              .headline= _p(<span class="string">&#x27;aside.tags&#x27;</span>)</span><br><span class="line">              .length-num= site.tags.length</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> site.categories.length</span><br><span class="line">        .data-item.<span class="keyword">is</span>-center</span><br><span class="line">          .data-item-link</span><br><span class="line">            a(href=url_for(config.category_dir) + <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">              .headline= _p(<span class="string">&#x27;aside.categories&#x27;</span>) </span><br><span class="line">              .length-num= site.categories.length</span><br><span class="line"></span><br><span class="line">    //- begin follow_me按钮</span><br><span class="line">    <span class="keyword">if</span> theme.aside.card_author.button.enable</span><br><span class="line">      a<span class="comment">#card-info-btn.button--animated(href=theme.aside.card_author.button.link)</span></span><br><span class="line">        i(class=theme.aside.card_author.button.icon)</span><br><span class="line">        span=theme.aside.card_author.button.text</span><br><span class="line">    //- end</span><br><span class="line">    </span><br><span class="line">    //- begin 社交</span><br><span class="line">    <span class="keyword">if</span>(theme.social)</span><br><span class="line">      .menu-info-social-icons.<span class="keyword">is</span>-center</span><br><span class="line">        !=fragment_cache(<span class="string">&#x27;social&#x27;</span>, function()&#123;<span class="keyword">return</span> partial(<span class="string">&#x27;includes/header/social&#x27;</span>)&#125;)</span><br><span class="line">    //- end</span><br><span class="line"></span><br><span class="line">    hr</span><br><span class="line">    !=partial(<span class="string">&#x27;includes/header/menu_item&#x27;</span>, &#123;&#125;, &#123;cache: true&#125;)</span><br><span class="line"></span><br><span class="line">    .simply-cha</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h3 id="售后（糖果屋小广告"><a href="#售后（糖果屋小广告" class="headerlink" title="售后（糖果屋小广告"></a>售后（糖果屋小广告</h3><p>菜单栏的魔改就这样结束啦！如果有需要询问的，可以加入糖果屋交流讨论（猹已经常驻糖果屋且不想开自己的群</p><img src=https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/akicandyroom.jpg alt='🧊Akilarの糖果屋' style='max-height:500px'> ]]></content>
      
      
      <categories>
          
          <category> 魔改日记本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Course </tag>
            
            <tag> Diary </tag>
            
            <tag> hexo </tag>
            
            <tag> butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些博弈论的基础题型和解法（不讲证明（kbd</title>
      <link href="48071.html"/>
      <url>48071.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>之前其实也只会自己能推出来的博弈论题，都是最简单的那种，然后遇到难的就惨败</p><p>来总结一下一些常见的简单博弈的特征及其解决算法</p><hr><h1 id="巴什博弈"><a href="#巴什博弈" class="headerlink" title="巴什博弈"></a>巴什博弈</h1><details cyan open><summary> 特征 </summary>              <div class='content'>              <p>一堆物品有n个，两个人轮流从这堆物品中取物，规定每次至少取一个，最多取m个。最后取光者得胜。</p><p>引申的还有其它的表述方法，类似于两人操控一个棋子轮流走一段长度，到最后位置的人输或者赢之类的</p>              </div>            </details><details red><summary> 算法 </summary>              <div class='content'>              <p>考虑第一步是不是必败态，否则必胜。证明也很简单，控制剩余石子的数量，使对方无论如何行动都达不到赢面即可</p><p>对于巴什博弈，那么我们规定，如果<strong>最后取光者输</strong>，那么又会如何呢？</p><div class="note purple icon flat"><i class="note-icon far fa-hand-scissors"></i><p><b>n%（m+1）==0则后手胜利</b></p></div>              </div>            </details><hr><h1 id="推广：减法博弈"><a href="#推广：减法博弈" class="headerlink" title="推广：减法博弈"></a>推广：减法博弈</h1><details cyan open><summary> 特征 </summary>              <div class='content'>              <p>巴什博弈的变形，轮流取石子，只能取给定的集合中的石子个数，取到最后一个石子的人获胜。</p>              </div>            </details><details red><summary> 算法 </summary>              <div class='content'>              <p>这个就得用到动态规划了qaq</p><p>可以发现当前石子数m如果可以通过取集合中的任何一个，让m-ai变成一个P态（先手必胜态），则当前m就是N态（后手必胜态），如果不能，则m为P态。</p><div class="note purple icon flat"><i class="note-icon far fa-hand-scissors"></i><p><b>使用<code>dp[i]</code>表示有i颗石子时的胜负状态，则<code>dp[i-a[j]]</code>(<code>a[]</code>为集合)是之前能达到的状态，如果他们中至少有一个是必胜态，那么i是必败态，否则i时必胜态。</b></p></div>              </div>            </details><hr><h1 id="斐波那契博弈"><a href="#斐波那契博弈" class="headerlink" title="斐波那契博弈"></a>斐波那契博弈</h1><details cyan open><summary> 特征 </summary>              <div class='content'>              <p>有一堆石子，两个顶尖聪明的人玩游戏，先取者可以取走任意多个（很明显大于1），但不能全取完，以后每人取的石子数不能超过上个人的两倍</p>              </div>            </details><details red><summary> 算法 </summary>              <div class='content'>              <p>斐波那契博弈有一个非常重要的性质：</p><div class="note purple icon flat"><i class="note-icon far fa-hand-scissors"></i><p><b>先手必败，当且仅当石子数为斐波那契数</b></p></div><p>就没有什么其他的好说了（</p>              </div>            </details><hr><h1 id="威佐夫博弈"><a href="#威佐夫博弈" class="headerlink" title="威佐夫博弈"></a>威佐夫博弈</h1><details cyan open><summary> 特征 </summary>              <div class='content'>              <p>有两堆各若干的物品，两人轮流从其中一堆取至少一件物品，至多不限，或从两堆中同时取相同件物品，规定最后取完者胜利。</p>              </div>            </details><details red><summary> 算法 </summary>              <div class='content'>              <p>这种情况下是颇为复杂的。我们用<code>（a[k]，b[k]）（a[k] ≤ b[k] ,k=0，1，2，...,n)</code>表示两堆物品的数量并称其为局势，如果甲面对（0，0），那么甲已经输了，这种局势我们称为奇异局势。前几个奇异局势是：<code>（0，0）、（1，2）、（3，5）、（4，7）、（6，10）、（8，13）、（9，15）、（11，18）、（12，20）</code>。（注：k表示奇异局势的序号， 第一个奇异局势k=0）</p><p>可以看出,<code>a[0]=b[0]=0</code>, a[k]是未在前面出现过的最小自然数,而 <code>b[k]= a[k] + k</code>。</p><p>这里的奇异局势有这样三个性质：</p><ol><li><p>任何自然数都包含在一个且仅有一个奇异局势中。</p></li><li><p>任意操作都可将奇异局势变为非奇异局势。</p></li><li><p>采用适当的方法，可以将非奇异局势变为奇异局势。</p></li></ol><div class="note purple icon flat"><i class="note-icon far fa-hand-scissors"></i><p>两个人如果都采用正确操作，那么面对非奇异局势，先拿者必胜；反之，则后拿者取胜。</p></div><p>那么任给一个局势（a，b），怎样判断它是不是奇异局势呢？我们有如下公式：</p><div class="note red icon flat"><i class="note-icon fas fa-fan"></i><p><b>ak =[k*（1+√5）/2]，bk= ak + k</b> （k=0，1，2，…n 方括号表示取整函数)</p></div><p>（k=0，1，2，…n 方括号表示取整函数)</p><p>奇妙的是其中出现了黄金分割数（1+√5）/2 = 1.618…因此，由ak，bk组成的矩形近似为黄金矩形，由于2/（1+√5）=（√5-1）/2，可以先求出j=[a（√5-1）/2]，若a=[j（1+√5）/2]，那么a = aj，bj = aj + j，若不等于，那么a = aj+1，b = aj + j + 1，若都不是，那么就不是奇异局势。然后再按照上述法则进行，一定会遇到奇异局势。</p>              </div>            </details><hr><h1 id="尼姆博弈（nim游戏）"><a href="#尼姆博弈（nim游戏）" class="headerlink" title="尼姆博弈（nim游戏）"></a>尼姆博弈（nim游戏）</h1><details cyan open><summary> 特征 </summary>              <div class='content'>              <p>有任意堆物品，每堆物品的个数是任意的，双方轮流从中取物品，每一次只能从一堆物品中取部分或全部物品，最少取一件，取到最后一件物品的人获胜。</p><p>而这里的物品数可以看作是每堆的最大变化次数（</p>              </div>            </details><details red><summary> 算法 </summary>              <div class='content'>              <p>假设只有三堆，我们用(a,b,c)表示某种局势，首先(0,0,0)显然是必败态，无论谁面对(0,0,0) ，都必然失败；第二种必败态是(0,n,n)，自己在某一堆拿走k（k ≤ n）个物品，不论k为多少，对方只要在另一堆拿走k个物品，最后自己都将面临(0,0,0)的局势，必败。仔细分析一下，(1,2,3)也是必败态，无论自己如何拿，接下来对手都可以把局势变为(0,n,n)的情形。</p><p>然后之后不知道有哪个天才把这玩意和<strong>异或（^）</strong>联系了起来，有：</p><div class="note red icon flat"><i class="note-icon fas fa-fan"></i><p><b>任何奇异局势(a,b,c)都有a XOR b XOR c = 0</b></p></div><p>面对的是一个非必败态(a,b,c)，要如何变为必败态呢？</p><p>假设 a &lt; b &lt; c，我们只要将 c 变为a XOR b，即可。因为有如下的运算结果：</p><p><code>a XOR b XOR (a XOR b)=(a XOR a) XOR (b XOR b) = 0 XOR 0 = 0</code></p><p>要将c 变为a XOR b，只要对 c进行 c-(a XOR b)这样的运算即可。</p><p>同样的也可以拓展到 n 堆物品，有下述结论：</p><div class="note purple icon flat"><i class="note-icon far fa-hand-scissors"></i><p><b>Bouton定理：先手能够在非平衡尼姆博弈中取胜，而后手能够在平衡的尼姆博弈中取胜。</b></p></div><p>而平衡的尼姆博奕则为：</p><div class="note red icon flat"><i class="note-icon fas fa-fan"></i><p><b>a XOR b XOR c XOR …= 0</b></p></div>              </div>            </details><hr><h1 id="推广：阶梯博弈（NimStaircase）"><a href="#推广：阶梯博弈（NimStaircase）" class="headerlink" title="推广：阶梯博弈（NimStaircase）"></a>推广：阶梯博弈（NimStaircase）</h1><details cyan open><summary> 特征 </summary>              <div class='content'>              <p>游戏开始时有许多硬币任意分布在楼梯上，共n阶楼梯从地面由下向上编号为0到n。游戏者在每次操作时可以将楼梯j(1&lt;=j&lt;=n)上的任意多但至少一个硬币移动到楼梯j-1上。游戏者轮流操作，将最后一枚硬币移至地上的人获胜。</p>              </div>            </details><details red><summary> 算法 </summary>              <div class='content'>              <div class="note red icon flat"><i class="note-icon fas fa-fan"></i><p>阶梯博弈等效为奇数号阶梯的尼姆博弈。</p></div><p>假设我们是先手。我们按照尼姆博弈的原则进行第一次移动。如果对方移动奇数号阶梯的石子，我们继续按照尼姆博弈的原则移动。如果对方移动的是偶数号阶梯的石子，及对方将偶数号阶梯的石子移动到了奇数号（对奇数号产生了影响）我们就接着将对方移动到奇数号的石子再向下移动一个台阶，移动到偶数号。这就意味着<strong>在偶数号的棋子对我们的博弈是没有影响的</strong>。</p><p>而为什么等效于奇数号的尼姆博弈而不是偶数号的？</p><div class="note red icon flat"><i class="note-icon fas fa-fan"></i><p>这是因为如果等效于偶数号的，当后手移动奇数号的，移动到0了，就不能保证状态一致了。</p></div><p>所以有：</p><div class="note purple icon flat"><i class="note-icon far fa-hand-scissors"></i><p><b>将奇数层的状态异或，如果不为0，先手必胜，否则先手必败</b></p></div>              </div>            </details><hr><h1 id="环形博弈"><a href="#环形博弈" class="headerlink" title="环形博弈"></a>环形博弈</h1><details cyan open><summary> 特征 </summary>              <div class='content'>              <p>n个石子围成一个环，每次可取走1个或相邻的两个，注意若两个石子之间的石子被取走，这两个石子仍然是不相邻的</p>              </div>            </details><details red><summary> 算法 </summary>              <div class='content'>              <p>其实这个博弈可以看作对称博弈的特殊情况，下面在对称博弈的时候证明（</p><div class="note purple icon flat"><i class="note-icon far fa-hand-scissors"></i><p><b>若n&lt;=2则先手胜，否则后手胜</b></p></div>              </div>            </details><hr><h1 id="推广：对称博弈"><a href="#推广：对称博弈" class="headerlink" title="推广：对称博弈"></a>推广：对称博弈</h1><details cyan open><summary> 特征 </summary>              <div class='content'>              <p>n个石子围成环,每次只能取相邻的一个到k个之间</p>              </div>            </details><details red><summary> 算法 </summary>              <div class='content'>              <ol><li><p>k等于1时，一次最多只能拿1个（每堆只有一个），那就是看奇偶了。</p></li><li><p>n≤k  这种情况，那肯定先拿的赢。</p></li><li><p>这条就是对称博弈了， 除了上述两种情况外的情况（n&gt;k &amp;&amp; k!=1）这时候，无论你第一个人拿什么，怎么拿，后手的人完全可以在第一个人拿的对称的地方做同样的事情。这样，后手就一定会取得胜利，因为最后一步是后手走的。</p></li></ol><div class="note purple icon flat"><i class="note-icon far fa-hand-scissors"></i><p><b>如果<code>k&lt;n</code>：对<code>k=1</code>,如果n能被2整除,则后手赢；如果<code>k&gt;1</code>,后手赢（先手取什么位置后手就取对称的位置，这样保证后手永远能取到)；</br></br>如果<code>k&gt;=n</code>：先手赢.</b></p></div>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> C++学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人哔哔: 友链朋友圈开发二三事</title>
      <link href="54068.html"/>
      <url>54068.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>转眼间，离接手友链朋友圈（4月7日）已经过了3个多月。从1.16我简单的给朋友圈加了多线程文章抓取开始，就已经掉进了这个大坑</p><p>所以这篇博客其实也是个简单的开发日志，时间，就从4月7号开始说吧</p><p><strong>如果看到哪看不下去我流水账式的吐槽，请划到最下边，听听我为什么接下了这个项目</strong></p><hr><h1 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h1><p>我写1.16的多线程时，友链已经停更了一个多月。对于一个1月份开始做并在两个月内快速迭代了13个版本的小项目来讲，这算是陷入了停滞</p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20210730220518.png" alt="1.15.1-1.16的时间跨度"></p><p>那时候冰老师忙于找工作，而贤鱼也基本改完了友链朋友圈的大体结构，做完了大部分的组件模块化（但到我写下这篇吐槽的时候，还是没有做完这件事）</p><p>而我由于在二月份就说要给友链朋友圈写多线程，结果一直咕咕咕 <del>（老鸽子了）</del> ，到四月份我才觉得不能再咕咕咕了，就写了多线程（然后日志就由于多线程而变得混乱不堪，一直到2.0版本我才解决了这件事）。这也是接锅的开始</p><p>很多时候就莫名其妙的画了个大饼，然后一直坚持做了下来QAQ</p><hr><h1 id="一直到2-0之间的更新"><a href="#一直到2-0之间的更新" class="headerlink" title="一直到2.0之间的更新"></a>一直到2.0之间的更新</h1><p>决定接手了友链朋友圈之后，我第一件事是好好的看源码。众所周知，冰老师学了一周的Python之后就开始写了友链朋友圈这个项目并逐渐觉得Py很香，但写出来的代码就及其不精炼而 冗长，以及主函数的代码也是乱乱的。</p><p>我就先把友链朋友圈的主函数修改了一下，并把主题规则那三个分开的文件夹整合成了一个。这样就有了1.17版本的友链朋友圈（感觉在水版本</p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20210730221723.png" alt="1.17的更新"></p><p>由于是刚接手这个项目，有些许的不熟悉，然后就写出了bug。以及对sitemap规则的不熟悉，我也没想到sitemap居然是<strong>先爬链接，然后对具体页面做笼统爬取</strong>。。。笼统爬取的后果就是时间错乱等等。</p><p>所以1.18就修了1.17写出来的bug和冰老师一个不知道什么版本流传下来的逻辑bug，然后自作主张的把sitemap策略作为优先策略（那时候以为它通用的），又写了个bug出来</p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20210730222942.png" alt="1.18的更新"></p><p>然后就有了糖果屋群里的一些反馈，然后就咕了好久才修了这俩bug。这个版本倒没什么好吐槽的。顺手也写了两个新的主题爬虫。</p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20210730223440.png" alt="1.19的更新"></p><p>然后就是酝酿了两个小版本的2.0啦</p><hr><h1 id="2-0更新"><a href="#2-0更新" class="headerlink" title="2.0更新"></a>2.0更新</h1><p>1.18的sitemap其实起源于我的一个想法：能不能找到一个更通用的方式完成对友链文章的获取。在sitemap失败后我把目光转向了rss和atom（在准备做3.0的时候惊讶的发现rss其实也是不行的，但2.0时没有意识到）</p><p>那时看起来rss和atom是具有标题和发布时间的通用规则，于是乎就在打算把这俩规则也搓了。</p><p>想着2.0也不能做的那么草率，就更新个通用规则显然不怎么科学。所以顺便也把乱七八糟的多线程日志修了（原本的多线程日志只有我看的懂），另外贤鱼也基本把配置从<code>_config.yml</code>基本迁到<code>setting.py</code>。然后就（可能不是那么草率的）更新了</p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20210730231753.png" alt="2.0的更新"></p><p>但基于sitemap的各种局限性，2.0最终是移除了sitemap，也算解决了sitemap的各种问题吧（逃</p><p>本来在2.0更新之后就打算养生了，但随着用户多了，用户需求就来了</p><hr><h1 id="关于3-0的引子（还在进行阶段）"><a href="#关于3-0的引子（还在进行阶段）" class="headerlink" title="关于3.0的引子（还在进行阶段）"></a>关于3.0的引子（还在进行阶段）</h1><h2 id="一个本来我们看起来不怎么可行的issue"><a href="#一个本来我们看起来不怎么可行的issue" class="headerlink" title="一个本来我们看起来不怎么可行的issue"></a>一个本来我们看起来不怎么可行的issue</h2><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20210730232104.png" alt="希望增加以更新时间为依据的issue"></p><p>我当时给的答复是这样的（也是我看起来不可行的issue</p><blockquote><p>这边需要说明一下我们为什么选择了以发布时间作为依据：</p><p>1，许多个人博客文章不怎么习惯给文章加updated，那么文章的更新时间则会按照hexo g的时间。如果友链中的小伙伴没有对他的每篇文章加上updated的话，它的某一次更新博客会导致友链朋友圈的爬虫把未更新的文章一样当作有更新的文章进行计算，直接占满朋友圈（即使它只是新发布或更新了一篇文章或者做了友链的更新）</p><p>2，同时在没办法保证每位小伙伴都在主页的文章处有更新时间的情况下，主页爬取规则会失效。而sitemap规则我们已经打算在2.0版本废弃，换成更通用的atom和rss，虽然一样可以爬到更新时间，仍然受上一个原因影响</p><p>3，在文章没加上date、链接不变的情况下，发布时间改变不会导致重新爬取而导致出现原因1的情况，只会被当作重复爬取而不被上传。</p><p>我们经过讨论觉得没办法很好的处理上述问题，因此可能不会增加此功能。如果对这个功能有自己实现的想法可以回复提出，感谢您的支持与反馈！</p></blockquote><p>之后这位小伙伴提出了个貌似可行的解决方案，但是其实对于我来说却是已经排除掉的方案。我给了这个issue一个测试的回复（但我是真的不想做，就放着了</p><p>然后又经历了大概一周左右，我突然感觉貌似确实可以做。不过前端改ui后端改api的更新，显然比2.0的更新还更大很多，放到2.1显然是不合理的。于是我给了个设想并在前天做了新的回复，也达到了这位小伙伴的预期</p><p>所以继大改后端爬虫后，我终于是向冰老师的保留地（api和前端ui）发起了进攻（逃，等会下面还会吐槽这件事</p><h2 id="一个朋友的墙裂愿望"><a href="#一个朋友的墙裂愿望" class="headerlink" title="一个朋友的墙裂愿望"></a>一个朋友的墙裂愿望</h2><p>这个功能是来自于我的一个友链朋友<a href="https://cat.dorcandy.cn/">@火喵</a>给我的留言。我俩经常在他的博客下面交流，然后就讲到了这个。他希望typecho也可以有友链朋友圈</p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20210730233603.png" alt="火喵日记本上的交流1"></p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20210730233703.png" alt="火喵日记本上的交流2"></p><p>这给了我一个点子。我能不能把友链列表丢进配置里，这样就不一定要适配主题啦</p><p>我又在通用化的道路上更近了一步</p><p>就有了<code>setting.py</code>的新配置（这个功能已经上线了，并且可以使用，只是还没推正式版而已）</p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20210730234036.png" alt="新的配置项！"></p><p>3.0的更新点子就这么出现啦！</p><hr><h1 id="现在3-0开发的一点点吐槽"><a href="#现在3-0开发的一点点吐槽" class="headerlink" title="现在3.0开发的一点点吐槽"></a>现在3.0开发的一点点吐槽</h1><p>后端爬虫部分修改也不是很麻烦，主要是api和前端咱是真不会</p><p>前端短时间我肯定是没空学的，毕竟暑期还有校训在身，没空再学一门新语言。所以新UI的设计咱就交给万能的店长<a href="https://akilar.top/">@Akilar</a>去做啦</p><p>但前端怎么做也得看咱api怎么给是吧。所幸api看着做起来不太难，然后就去看了看冰老师的api输出长什么样。这不看不知道，一看吓一跳</p><p><a href="https://hexo-circle-of-friends-api-kappa.vercel.app/api">老api</a></p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20210730234843.png" alt="老api前半（友链数据）"></p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20210730234929.png" alt="老api后半（友链文章数据）"></p><p>前面的友链数据姑且看得懂，但传友链我不太理解。那，文章数据。。。我能推出来，但可读性太差了吧。</p><p>对于冰老师的api，店长是这么评价的：</p><blockquote><p>冰老师做了一堆的数据切片。</p><p>他写的api就是一堆数组</p><p>不是对象。</p><p>只有他自己知道那个字段是啥</p></blockquote><p>我差点笑死。仔细思索我才知道。。。</p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20210730235344.png" alt="友链朋友圈统计信息"></p><p>你丫这玩意是在前端算的？？？这玩意不该在后端api算出来的吗！</p><p>我。。。算了，真的得重写，不然店长都不会写ui了</p><blockquote><p>店长：我写UI的。冰老师的数据逻辑我压根不了解。</p></blockquote><p>经过一番修改，新的api长这样（这个还没上线，因为对应的前端还没写</p><p><a href="https://hexo-friendcircle3-api.vercel.app/api">新api（测试中）</a></p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20210730235735.png"></p><p>看起来舒服了，而且数据也拉到了后台算</p><blockquote><p>店长：这tm才叫json啊</p></blockquote><p>这个api上线得等到店长什么时候把新ui写出来、我把新文档写出来了。。。</p><hr><h1 id="感慨（瞎哔哔）"><a href="#感慨（瞎哔哔）" class="headerlink" title="感慨（瞎哔哔）"></a>感慨（瞎哔哔）</h1><p>吐槽归吐槽，不过不得不说，冰老师这个友链朋友圈的项目，<strong>才真正算勾连起了个人博客</strong>。不像是开往和十年之约，虽然是个圈子，但是随机性和没有确定的文章获取勾不起太大点击的欲望。而大部分个人博客的质量又比csdn、博客园的博客高些（至少没那么多Ctrl+C/V），而在国内的百度等搜索引擎竞价排名的恶臭环境下，个人博客的优质文章几乎无法精准地被搜出（关键字搜索都不优先显示就很说明问题，明明有但它就要在好几页后边才给你出来）。文章被更多人看到只能靠个人博主们自身的宣传，并在不互相点进文章的情况下很难被发现优文，友链朋友圈就提供了这样一条简便的途径（供个人博主们抱团取暖）</p><p>在我看来，至少这是一个小小的前进，让更多优文有了被发现宣传扩散的可能。</p><p>这也是我为什么坚持继续做下去，并完善友链朋友圈各个功能的理由。也在此由衷的感谢冰老师的开创之举</p>]]></content>
      
      
      <categories>
          
          <category> 贰猹随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Diary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ACM暑假训练：【求极大化矩阵】DP之悬线法</title>
      <link href="51816.html"/>
      <url>51816.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="前言（吐槽）"><a href="#前言（吐槽）" class="headerlink" title="前言（吐槽）"></a>前言（吐槽）</h1><p>第一次知道这个东西，把暴力搜索的扫描法O(nm<sup>2</sup>)降成了O(nm)</p><p>有点腻害。</p><p>这玩意是国家队写的论文！作者是咱胡建银！（知网没找到，只能找到百度文库的）</p><blockquote><p><a href="https://wenku.baidu.com/view/728cd5126edb6f1aff001fbb.html">浅谈用极大化思想解决最大子矩形问题-王知昆</a></p></blockquote><p>开始学习！</p><hr><p>传统的扫描法我就不讲了，其实就是暴力求解，直接讲悬线法算法了</p><h1 id="算法核心"><a href="#算法核心" class="headerlink" title="算法核心"></a>算法核心</h1><p>首先是对几个东西的定义：</p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><h3 id="最大子矩形问题"><a href="#最大子矩形问题" class="headerlink" title="最大子矩形问题"></a>最大子矩形问题</h3><p>在一个给定的矩形中有一些障碍点，找出内部不包含障碍点的，边与整个矩形平行或重合的最大子矩形。</p><ul><li><p><strong>有效子矩型</strong>：满足要求的子矩形</p></li><li><p><strong>极大子矩型</strong>：无法再向外拓展的有效子矩形</p></li><li><p><strong>最大子矩型</strong>：最大的一个有效子矩形</p></li></ul><p>显然有，在一个有障碍点的矩形中，<strong>最大子矩形一定是极大子矩形</strong></p><h3 id="悬线（其实这个挺直白的"><a href="#悬线（其实这个挺直白的" class="headerlink" title="悬线（其实这个挺直白的"></a>悬线（其实这个挺直白的</h3><ul><li><p><strong>有效竖线</strong>：除了两个端点以外，不覆盖任何一个障碍点的竖直线段</p></li><li><p><strong>悬线</strong>：上端覆盖了一个障碍点或者到达整个矩形上边界的有效线段</p></li></ul><p>每个悬线上的点的与底部的点一一对应，矩形中每一个点（矩形顶部点除外）都对应了一条悬线。</p><p>如果把一条悬线向左右两个方向尽可能的移动，那么就得到了一个矩形。</p><p><strong>注意：悬线对应的矩型不一定是极大子矩阵，因为悬线定义中固定了悬线的下边界，故而，悬线左右移动所得到的矩形无法向下扩展。</strong></p><h3 id="算法变量"><a href="#算法变量" class="headerlink" title="算法变量"></a>算法变量</h3><ul><li><p>$height _{i, j}$ ：表示以$(i,j)$为底的悬线的<strong>高</strong></p></li><li><p>$left _{i, j}$：表示以$(i,j)$为底的悬线<strong>向左最多能移动到的位置</strong></p></li><li><p>$right _{i, j}$：表示以$(i,j)$为底的悬线<strong>向右最多能移动到的位置</strong></p></li></ul><h2 id="初始化（预处理）"><a href="#初始化（预处理）" class="headerlink" title="初始化（预处理）"></a>初始化（预处理）</h2><p>$$<br>\begin{cases}<br>height_{i, j} &amp; =1 \\<br>left_{i, j} &amp; =j \\<br>right_{i, j} &amp; =j<br>\end{cases}<br>$$</p><p>我们需要对这三个数组进行一次预处理</p><h3 id="悬线长度预处理"><a href="#悬线长度预处理" class="headerlink" title="悬线长度预处理"></a>悬线长度预处理</h3><p>显然$(i,j)$如果不是障碍点的话，$height _{i, j} = height _{i-1, j} +1$<br>否则$height _{i, j} = 1$</p><p>所以有</p><p>$$<br>height _{i, j}=<br>\begin{cases}<br>1 &amp;\text{if }&amp;height _{i-1, j}==0 \\<br>height _{i-1, j}+1 &amp;\text{if }&amp;height _{i-1, j}==1<br>\end{cases}<br>$$</p><h3 id="向左移动距离预处理（左右移动都是DP过程）"><a href="#向左移动距离预处理（左右移动都是DP过程）" class="headerlink" title="向左移动距离预处理（左右移动都是DP过程）"></a>向左移动距离预处理（左右移动都是DP过程）</h3><p>我们逐层遍历，显然在没有障碍点的情况下，$left_{i,j} = left_{i,j-1}$；而左边点是障碍点时显然$left_{i,j}=j$。所以有</p><ul><li>$left_{i,j} = (i,j)\text{左边第一个障碍点/边界位置}+1 = (i,j-1)\text{左边第一个障碍点/边界位置}+1$</li></ul><p>如果$(i,j)$的上一个点不是障碍点的情况时有</p><ul><li>$left_{i,j} = left_{i-1,j}$</li></ul><p>我们整合一下就是</p><p>$$<br>left_{i,j} = \text{max}<br>\begin{cases}<br>left_{i-1,j} \\<br>(i,j-1)\text{左边第一个障碍点/边界位置}+1<br>\end{cases}<br>$$</p><h3 id="向右移动距离预处理"><a href="#向右移动距离预处理" class="headerlink" title="向右移动距离预处理"></a>向右移动距离预处理</h3><p>这个和向左也是类似的，方程如下：</p><p>$$<br>right_{i,j} = \text{min}<br>\begin{cases}<br>right_{i-1,j} \\<br>(i,j+1)\text{右边第一个障碍点/边界位置}-1<br>\end{cases}<br>$$</p><h3 id="实际操作"><a href="#实际操作" class="headerlink" title="实际操作"></a>实际操作</h3><p>因为向左预处理是$j: 0→m-1$,而向右预处理是$j: m-1→0$</p><p>原理上来讲这两个不会放到同一个for二层循环里。但取$left/right_{i-1,j}$是自顶向下，无所谓循环从左向右还是从右向左，所以取max和min我们一般放在求最大面积的循环中</p><p>故<strong>预处理一般只处理$left_{i,j} = left_{i,j-1}$和$right_{i,j} = right_{i,j+1}$，以及高度的预处理</strong>，而DP的操作我们丢到求面积的过程中</p><h2 id="面积处理"><a href="#面积处理" class="headerlink" title="面积处理"></a>面积处理</h2><p>显然对于每段悬线来讲，$S_{i,j} = height_{i,j} * (right_{i,j} - left_{i,j} + 1)$</p><p>而$left/right_{i,j}$的DP过程可以放在求面积之前</p><p>所以最终处理所需时间是O(nm)</p><hr><h1 id="板子"><a href="#板子" class="headerlink" title="板子"></a>板子</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//预处理</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">        right[i][j]=left[i][j]=j,up[i][j]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">2</span>;j&lt;=m;j++)</span><br><span class="line">        <span class="keyword">if</span>(满足条件)</span><br><span class="line">            right[i][j]=right[i][j<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=m<span class="number">-1</span>;j&gt;=<span class="number">1</span>;j--)</span><br><span class="line">        <span class="keyword">if</span>(满足条件)</span><br><span class="line">            left[i][j]=left[i][j+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//DP和面积处理</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(满足条件)&#123;</span><br><span class="line">            right[i][j]=min(right[i][j],right[i<span class="number">-1</span>][j]);</span><br><span class="line">            left[i][j]=max(left[i][j],left[i<span class="number">-1</span>][j]);</span><br><span class="line">            up[i][j]=up[i<span class="number">-1</span>][j]+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        s = max(s, up[i][j] * (right[i][j] - left[i][j] + <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>咕咕咕咕咕</p>]]></content>
      
      
      <categories>
          
          <category> C++学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ACM暑假训练：01字典树杂谈</title>
      <link href="13221.html"/>
      <url>13221.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="前言（吐槽）"><a href="#前言（吐槽）" class="headerlink" title="前言（吐槽）"></a>前言（吐槽）</h1><p>其实我是一直知道这玩意，但一直没学过。最近重新在看字符串算法，其中有一节讲到字典树可以处理位异或运算</p><p>知道原理但没手写过，结果隔天的练习赛就遇到了一题。。。（该来的还是会来的）</p><p>开始吐槽<del>(其实是学习和抄板子)</del></p><hr><h1 id="板子"><a href="#板子" class="headerlink" title="板子"></a>板子</h1><p>01-trie 是指字符集为 ${0,1}$ 的 字典树。常用来维护数组的异或极值和异或和。</p><p>01-trie 支持修改（删除 + 重新插入），和全局加一（即：让其所维护所有数值递增 <code>1</code>，本质上是一种特殊的修改操作）。</p><p>这里先上个简单的板子</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> tol; <span class="comment">//节点个数 </span></span><br><span class="line">LL val[<span class="number">32</span>*MAXN]; <span class="comment">//点的值 </span></span><br><span class="line"><span class="keyword">int</span> ch[<span class="number">32</span>*MAXN][<span class="number">2</span>]; <span class="comment">//边的值 </span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123; <span class="comment">//初始化 </span></span><br><span class="line">    tol=<span class="number">1</span>;</span><br><span class="line">    ch[<span class="number">0</span>][<span class="number">0</span>]=ch[<span class="number">0</span>][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(LL x)</span></span>&#123; <span class="comment">//往 01字典树中插入 x </span></span><br><span class="line">    <span class="keyword">int</span> u=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">32</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">int</span> v=(x&gt;&gt;i)&amp;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(!ch[u][v])&#123; </span><br><span class="line">            <span class="comment">//如果节点未被访问过 </span></span><br><span class="line">            ch[tol][<span class="number">0</span>]=ch[tol][<span class="number">1</span>]=<span class="number">0</span>; <span class="comment">//将当前节点的边值初始化 </span></span><br><span class="line">            val[tol]=<span class="number">0</span>; <span class="comment">//节点值为0，表示到此不是一个数 </span></span><br><span class="line">            ch[u][v]=tol++; <span class="comment">//边指向的节点编号 </span></span><br><span class="line">        &#125;</span><br><span class="line">        u=ch[u][v]; <span class="comment">//下一节点 </span></span><br><span class="line">    &#125;</span><br><span class="line">    val[u]=x; <span class="comment">//节点值为 x，即到此是一个数 </span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">LL <span class="title">query</span><span class="params">(LL x)</span></span>&#123; <span class="comment">//查询所有数中和 x异或结果最大的数 </span></span><br><span class="line">    <span class="keyword">int</span> u=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">32</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">int</span> v=(x&gt;&gt;i)&amp;<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//利用贪心策略，优先寻找和当前位不同的数 </span></span><br><span class="line">        <span class="keyword">if</span>(ch[u][v^<span class="number">1</span>]) u=ch[u][v^<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">else</span> u=ch[u][v];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> val[u]; <span class="comment">//返回结果 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>观察建立树的过程，其实就和字典树差不多，上面的板子是在叶子处存值，但实际也会有各种存法（比如每个点都存），例如下面这题</p><p>（吐槽：太久没用数组建过树了，忘记怎么建了）</p><hr><h1 id="题（暴毙）"><a href="#题（暴毙）" class="headerlink" title="题（暴毙）"></a>题（暴毙）</h1><p><a href="https://acm.hdu.edu.cn/showproblem.php?pid=6955">2021“MINIEYE杯”中国大学生算法设计超级联赛（1）-6：XOR sum</a></p><details blue><summary> 题意 </summary>              <div class='content'>              <p>给一个整数数组，你需要找到最短的区间，其按位异或和不小于. 如果有多个，找出左端点最左的</p>              </div>            </details><details cyan open><summary> 题解 </summary>              <div class='content'>              <p>异或运算里，任意<code>x</code>的逆元是本身，故对于前缀和<code>pre[i]</code>和<code>pre[j]</code>,<code>i</code>到<code>j</code>的异或和可以表示为<code>pre[i]^pre[j]</code></p><p>这亚子我们去求一个子串的异或和就简单灰常多啦</p><p>我们考虑字典树去维护前缀异或和，由于是要求左右端点，所以我们每往字典树中新增一个值，则查找前面的有没有适合的</p><p>那这时我们先考虑一个问题。显然一个前缀异或和可能对应好多个前缀子串，那这棵树该存些什么？</p><p>因为是边存边处理，然后要尽可能短的子串，所以在相同前缀异或和的情况下，我们存最右边的那个的下标</p><p>好了，那如何保证<code>pre[i]^pre[j]&gt;=k</code>?</p><p>显然当k的某位为1时，树只能往相异的方向走；为0时则要考虑相异方向的值和同向子树的最大。那我们在每个节点都存最右的值，即可在读到0的时候停下读标号即可</p>              </div>            </details><details red><summary> 代码 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> p[<span class="number">4000010</span>][<span class="number">2</span>]=&#123;<span class="number">0</span>&#125;,val[<span class="number">4000010</span>]=&#123;<span class="number">0</span>&#125;,a[<span class="number">100010</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="comment">//记录树的左右分叉（节点下标），树的节点值（最右下标 ），前缀异或和 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;t);</span><br><span class="line"><span class="keyword">while</span>(t--)&#123;</span><br><span class="line"><span class="keyword">int</span> n,k;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n,&amp;k);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">a[i] ^= a[i<span class="number">-1</span>]; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> l=<span class="number">-1</span>,r=n,num=<span class="number">1</span>;<span class="comment">//记录答案左端点、右端点、数的节点数 </span></span><br><span class="line">val[<span class="number">1</span>]=<span class="number">-1</span>;</span><br><span class="line">p[<span class="number">1</span>][<span class="number">0</span>] = p[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">0</span>;<span class="comment">//初始化树根</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)&#123;<span class="comment">//从0开始: a[i] = a[i]^0</span></span><br><span class="line"><span class="keyword">int</span> nowl=<span class="number">-1</span>;<span class="comment">//记录以i为右当前查到的合适左位置</span></span><br><span class="line"><span class="keyword">int</span> x=<span class="number">1</span>;<span class="comment">//记录走到的节点标号 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">29</span>;j&gt;=<span class="number">0</span>;j--)&#123;</span><br><span class="line"><span class="keyword">int</span> abit = (a[i]&gt;&gt;j)&amp;<span class="number">1</span>; <span class="comment">//记录a[i]第j位；</span></span><br><span class="line"><span class="keyword">if</span>((k&gt;&gt;j)&amp;<span class="number">1</span>)<span class="comment">//如果k的第j位是1，那只能走abit的相反方向</span></span><br><span class="line">x = p[x][abit^<span class="number">1</span>];</span><br><span class="line"><span class="keyword">else</span>&#123; <span class="comment">//如果k的第j位为0则要考虑abit的相反方向和同方向下一层的最大</span></span><br><span class="line"><span class="keyword">if</span>(p[x][abit^<span class="number">1</span>])</span><br><span class="line">nowl = max(nowl, val[p[x][abit^<span class="number">1</span>]]);</span><br><span class="line">x = p[x][abit]; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!x)<span class="keyword">break</span>;<span class="comment">//如果找不到路，则弹出 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(x)</span><br><span class="line">nowl = max(nowl, val[x]);<span class="comment">//如果成功走到最底层也要做一次取最大</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//更新l,r</span></span><br><span class="line"><span class="keyword">if</span>(nowl &gt; <span class="number">-1</span> &amp;&amp; i-nowl &lt; r-l)</span><br><span class="line">l = nowl, r = i;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将a[i]加入字典树中</span></span><br><span class="line">x=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">29</span>;j&gt;=<span class="number">0</span>;j--)&#123;</span><br><span class="line"><span class="keyword">int</span> abit = (a[i]&gt;&gt;j)&amp;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(!p[x][abit])&#123;<span class="comment">//如果不存在节点就新建</span></span><br><span class="line">p[x][abit] = ++num;</span><br><span class="line">p[num][<span class="number">0</span>] = p[num][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">x = p[x][abit];</span><br><span class="line">val[x] = i;<span class="comment">//这里不用比较，i肯定比前面的大，直接覆盖就行； </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(l&gt;<span class="number">-1</span>)<span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, l+<span class="number">1</span>,r);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;-1\n&quot;</span>);</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><hr><p>杭电多校2的第4题貌似也是字典树，但我还没搞懂怎么弄，先鸽着。。。</p><p><a href="https://acm.hdu.edu.cn/showproblem.php?pid=6964">2021“MINIEYE杯”中国大学生算法设计超级联赛（2）-4：I love counting</a></p>]]></content>
      
      
      <categories>
          
          <category> C++学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HNU:小学期软件实训第二周（继续划水）</title>
      <link href="54171.html"/>
      <url>54171.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>居然出了一道动态规划题……模拟题也越来越恶心（变得越加又臭又长）</p><hr><p>本周作业让我感觉比较有收获的题（从高到低）：</p><p>21.新型冠状病毒（COVID19）传播</p><hr><h1 id="1-字符串反转2"><a href="#1-字符串反转2" class="headerlink" title="1.字符串反转2"></a>1.字符串反转2</h1><details blue><summary> 题目 </summary>              <div class='content'>              <p>【问题描述】</p><pre><code>     给定一个句子（只包含字母和空格）， 将句子中的单词位置反转，单词用空格分割, 单词之间只有一个空格，前后没有空格。 比如： “hello xiao mi”-&gt; “mi xiao hello”</code></pre><p>【输入形式】</p><pre><code> 输入数据有多组，每组占一行，包含一个句子(句子长度小于1000个字符)</code></pre><p>【输出形式】</p><pre><code>   对于每个测试示例，要求输出句子中单词反转后形成的句子</code></pre><p>【样例输入】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hello xiao mi</span><br><span class="line">I am a student</span><br></pre></td></tr></table></figure><p>【样例输出】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mi xiao hello</span><br><span class="line">student a am I</span><br></pre></td></tr></table></figure>              </div>            </details><details cyan open><summary> 题解 </summary>              <div class='content'>              <p>跟上周那道题很像吗，不过不是对每个单词反转，而是把整句反转，单词不反转</p><p>用栈解决即可</p>              </div>            </details><details red><summary> 代码 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="keyword">while</span>(getline(<span class="built_in">cin</span>, s))&#123;</span><br><span class="line">        <span class="built_in">stringstream</span> ss;</span><br><span class="line">        <span class="built_in">stack</span>&lt;<span class="built_in">string</span>&gt; a;</span><br><span class="line">        ss&lt;&lt;s;</span><br><span class="line">        <span class="keyword">while</span>(ss&gt;&gt;s)&#123;</span><br><span class="line">            a.push(s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!a.empty())&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;a.top()&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">            a.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h1 id="2-487-3279"><a href="#2-487-3279" class="headerlink" title="2.487-3279"></a>2.487-3279</h1><details blue><summary> 题目 </summary>              <div class='content'>              <p>【问题描述】</p><pre><code>   每个人都喜欢有令人难忘的电话号码。要想让电话号码变得令人难忘的一种方法是拼出一个令人难忘的单词或短语。例如，你可以拨打滑铁卢大学的电话，拨打令人难忘的电话号码TUT-GLOP。   有时只有一部分号码被用来拼写一个单词，例如，你可以拨打310-gino从Gino&#39;s订购披萨。   要使电话号码令人难忘的另一种方法是以一种令人难忘的方式对数字进行分组。你可以从比萨饼小屋中订购比萨饼，方法是拨打他们的“3个10”，即号码3-10-10-10。   电话号码的标准格式是七位的十进制数字，第三和第四位之间包含连字符（例如888-1200）。电话的键盘提供字母到数字的映射，如下所示：   A, B, C映射到2   D, E, F映射到3   G, H, I映射到4   J, K, L映射到5   M, N, O映射到6   P, R, S映射到7   T, U, V映射到8   W, X, Y映射到9   Q和Z没有映射。连接符不拨号，必要时可加上或去除。TUT-GLOP的标准格式是888-4567，310-GINO的标准格式是310-4466，3-10-10-10的标准格式是310-1010。   当两个电话号码有相同的标准格式时是等价的（拨同样的号码）。   你的公司正在编制本地企业的电话号码目录，作为质量控制的一部分，你需要检查没有两个（或多个）企业具有相同的电话号码。</code></pre><p>【输入形式】</p><p>输入包括一个案例。输入的第一行为一个正整数，指定目录中电话号码的数目(最多100，000)。其余的各行列出目录中的电话号码，每个号码单独占一行。每个电话号码都是一个由十进制数字、大写字母(不包括Q和z)和连字符组成的字符串。字符串中的七个字符或是数字或是字母。</p><p>【输出形式】</p><p>对于出现超过一次的每个号码，按照标准格式及字典序每个输出一行，然后是空格，接着输出出现的次数。只出现1次的电话号码不输出。</p><p>【样例输入】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">12</span><br><span class="line">4873279</span><br><span class="line">ITS-EASY</span><br><span class="line">888-4567</span><br><span class="line">3-10-10-10</span><br><span class="line">888-GLOP</span><br><span class="line">TUT-GLOP</span><br><span class="line">967-11-11</span><br><span class="line">310-GINO</span><br><span class="line">F101010</span><br><span class="line">888-1200</span><br><span class="line">-4-8-7-3-2-7-9-</span><br><span class="line">487-3279</span><br></pre></td></tr></table></figure><p>【样例输出】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">310-1010 2</span><br><span class="line">487-3279 4</span><br><span class="line">888-4567 3</span><br></pre></td></tr></table></figure><p>【输入形式】</p><p>输入有多组测试数据。</p><p>输入第一行正整数T，表示有多少组测试数据。</p><p>后面有T行，每行一个非负整数，表示里程表显示数字，里面不含有数字3和8。该数字不超过10位。</p><p>40%的测试数据组数T  10 ≤ T ≤ 10^2；</p><p>30%的测试数据组数T  102 ≤ T ≤ 10^3；</p><p>20%的测试数据组数T  103 ≤ T ≤ 10^4；</p><p>10%的测试数据组数T  104 ≤ T ≤ 10^5；</p><p>【输出形式】</p><p>对于每组测试数据，输出一个整数占一行：真实的行程里程。</p><p>【样例输入】</p><p>6<br>0<br>1<br>12<br>159<br>111224459<br>124567976<br>【样例输出】</p><p>0<br>1<br>10<br>103<br>19212007<br>21913077</p>              </div>            </details><details cyan open><summary> 题解 </summary>              <div class='content'>              <p>看起来其实就是每个字符串做标准化处理后统计，一顿map了事</p>              </div>            </details><details red><summary> 代码 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; d;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; tel;</span><br><span class="line">    d[<span class="string">&#x27;0&#x27;</span>] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    d[<span class="string">&#x27;1&#x27;</span>] = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">    d[<span class="string">&#x27;2&#x27;</span>] = d[<span class="string">&#x27;A&#x27;</span>] = d[<span class="string">&#x27;B&#x27;</span>] = d[<span class="string">&#x27;C&#x27;</span>] = <span class="string">&#x27;2&#x27;</span>;</span><br><span class="line">    d[<span class="string">&#x27;3&#x27;</span>] = d[<span class="string">&#x27;D&#x27;</span>] = d[<span class="string">&#x27;E&#x27;</span>] = d[<span class="string">&#x27;F&#x27;</span>] = <span class="string">&#x27;3&#x27;</span>;</span><br><span class="line">    d[<span class="string">&#x27;4&#x27;</span>] = d[<span class="string">&#x27;G&#x27;</span>] = d[<span class="string">&#x27;H&#x27;</span>] = d[<span class="string">&#x27;I&#x27;</span>] = <span class="string">&#x27;4&#x27;</span>;</span><br><span class="line">    d[<span class="string">&#x27;5&#x27;</span>] = d[<span class="string">&#x27;J&#x27;</span>] = d[<span class="string">&#x27;K&#x27;</span>] = d[<span class="string">&#x27;L&#x27;</span>] = <span class="string">&#x27;5&#x27;</span>;</span><br><span class="line">    d[<span class="string">&#x27;6&#x27;</span>] = d[<span class="string">&#x27;M&#x27;</span>] = d[<span class="string">&#x27;N&#x27;</span>] = d[<span class="string">&#x27;O&#x27;</span>] = <span class="string">&#x27;6&#x27;</span>;</span><br><span class="line">    d[<span class="string">&#x27;7&#x27;</span>] = d[<span class="string">&#x27;P&#x27;</span>] = d[<span class="string">&#x27;R&#x27;</span>] = d[<span class="string">&#x27;S&#x27;</span>] = <span class="string">&#x27;7&#x27;</span>;</span><br><span class="line">    d[<span class="string">&#x27;8&#x27;</span>] = d[<span class="string">&#x27;T&#x27;</span>] = d[<span class="string">&#x27;U&#x27;</span>] = d[<span class="string">&#x27;V&#x27;</span>] = <span class="string">&#x27;8&#x27;</span>;</span><br><span class="line">    d[<span class="string">&#x27;9&#x27;</span>] = d[<span class="string">&#x27;W&#x27;</span>] = d[<span class="string">&#x27;X&#x27;</span>] = d[<span class="string">&#x27;Y&#x27;</span>] = <span class="string">&#x27;9&#x27;</span>;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">        <span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">string</span> s,ss=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">        <span class="keyword">int</span> l = s.length();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;l; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i]==<span class="string">&#x27;-&#x27;</span>)<span class="keyword">continue</span>;</span><br><span class="line">            ss+=d[s[i]];</span><br><span class="line">            num++;</span><br><span class="line">            <span class="keyword">if</span>(num==<span class="number">3</span>)ss+=<span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(num==<span class="number">7</span>)<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(tel.find(ss) == tel.end())tel[ss]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> tel[ss]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt;::iterator it=tel.begin();it!=tel.end();it++)&#123;</span><br><span class="line"><span class="keyword">if</span>(it-&gt;second&gt;<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;it-&gt;first&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;it-&gt;second&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h1 id="3-缺席考试的是谁？"><a href="#3-缺席考试的是谁？" class="headerlink" title="3.缺席考试的是谁？"></a>3.缺席考试的是谁？</h1><details blue><summary> 题目 </summary>              <div class='content'>              <p>【问题描述】</p><p>程序设计考试结束了，传来个不好的消息：有一个学生没参加考试!需要尽快知道缺席考试的人是谁，以便尽快做出处理。</p><p>糟糕的是，尽管有签到表，但由于人数较多，签到情况比较混乱：有的签到表签在一张白纸上，有的虽然签在名册上，但并不是签在自己姓名旁，更有学生签到了别的签到表上……</p><p>现在只能根据这2n-1个姓名（名册上有n个学生姓名，签到有n-1个姓名，签到姓名和名册姓名可能混在一起了），来找到缺席考试的人是谁。唯一一个有利的条件是所有参加考试的人都签了名，且只签一次，签名也都正确无误。</p><p>现在任务交给你：编写一个程序，找出缺席考试的是谁。</p><p>【输入形式】</p><p>有多组测试数据。</p><p>每组测试数据开始一行，是一个正整数n，表示总人数，n=0意味着输入结束并且不需要处理。</p><p>以下2n-1行，每行一个字符串，长度不超过20，表示一个人的姓名。姓名有大小写的英文字母、常用汉字组成(注意每个汉字占2个字节，中英文姓名都不排除有重名情况)。</p><p>40%的测试数据1 ≤ n≤ 10；</p><p>30%的测试数据1 ≤ n≤ 100；</p><p>20%的测试数据1 ≤ n≤ 10^3；</p><p>10%的测试数据1 ≤ n≤ 10^4；</p><p>提示：大量输入数据，C/C++输入推荐使用scanf函数</p><p>【输出形式】</p><p>对于每组测试数据，输出一行，只包含一个字符串，表示缺席的人的姓名。</p><p>【样例输入】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">张三</span><br><span class="line">张三</span><br><span class="line">李四</span><br><span class="line">0</span><br></pre></td></tr></table></figure><p>【样例输出】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">李四</span><br></pre></td></tr></table></figure>              </div>            </details><details cyan open><summary> 题解 </summary>              <div class='content'>              <p>这题实际上就是找只出现过一遍的名字，其它名字都是出现过两次的。</p><p>这里给两个方法：（我用的是第一种）</p><p>第一种是map存储，某个名字被录第一遍时存储，录第二遍的时候就删除（不是次数+1，不然后面找出来会超时），然后迭代器查map（map此时只存了答案）</p><p>第二种是对所有名字排序，然后查i和i+1是不是相同的（i为偶数，从0-(2n-4)），一直查到不是相同的。如果没查到就是i=2n-2的名字。</p><p>PS：用cin记得读入优化！</p>              </div>            </details><details red><summary> 代码 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n &amp;&amp; n)&#123;</span><br><span class="line">        n = <span class="number">2</span>*n<span class="number">-1</span>;</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; a;</span><br><span class="line">        <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">            <span class="built_in">string</span> name;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;name;</span><br><span class="line">            <span class="keyword">if</span>(a.find(name) == a.end())a[name]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> a.erase(name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt;::iterator it=a.begin(); it!=a.end(); it++)</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;it-&gt;first&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h1 id="4-电话号码"><a href="#4-电话号码" class="headerlink" title="4.电话号码"></a>4.电话号码</h1><details blue><summary> 题目 </summary>              <div class='content'>              <p>【问题描述】</p><p>Vasya有几本电话簿，记录了他的朋友们的电话号码，每一个朋友都可以有一或几个电话号码。</p><p>Vasya决定整理关于朋友电话号码的信息。给定n个字符串，来自于Vasya的电话簿中的条目。每一条都以朋友的姓名开头，然后跟着当前条目中的电话号码个数，然后是本人的电话号码。有可能几个相同的电话被记录在同一个记录中。</p><p>Vasya还认为，如果电话号码a是电话号码b的后缀（也就是说，号码b以a结尾），这两个号码被当作同一个电话号码，那么a被认为是无城市代码，它不应该被考虑。</p><p>输出整理后Vasya朋友的电话号码信息。有可能两个不同的人有相同的号码。如果一个人有两个电话号码x和y，x是y的后缀（即y以x结尾），则不输出x。 </p><p>如果Vasya的电话簿中的某些朋友记录了几次，那么只需要记录一次。 </p><p>【输入形式】</p><p>输入第一行一个整数n(1&lt;=n&lt;=20)，Vasya的电话簿上的条目数。</p><p>以下n行后面是描述中的格式记录。 朋友的姓名中不包含空字符，长度不超过10位，由小写英文字母组成。电话号码个数在1<del>10之间。每个电话号码的长度范围在1</del>10之间，可以包含前导0。</p><p>【输出形式】</p><p>输出Vasya的朋友的电话号码的有序信息。首先输出电话簿中的朋友数目m。</p><p>接下来的m行，包含以格式“姓名 电话号码个数 电话号码1 … 电话号码k”的条目，号码间以空格分隔。每个记录包含当前朋友的所有电话号码。</p><p>每个条目输出按照姓名字母序进行排序，电话号码按照从小到大的顺序排列（注意电话号码比较规则：”1”&lt;”01”、”12”&lt;”012”，依此类推）</p><p>【样例输入】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4</span><br><span class="line">ivan 3 123 123 456</span><br><span class="line">ivan 2 456 456</span><br><span class="line">ivan 8 789 3 23 6 56 9 89 2</span><br><span class="line">dasha 2 23 789</span><br></pre></td></tr></table></figure><p>【样例输出】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">dasha 2 23 789 </span><br><span class="line">ivan 4 2 123 456 789</span><br></pre></td></tr></table></figure>              </div>            </details><details cyan open><summary> 题解 </summary>              <div class='content'>              <p>这题属实复杂，直接看我代码注释边理解吧。</p>              </div>            </details><details red><summary> 代码 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">P</span>&#123;</span></span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">int</span> index=<span class="number">0</span>;<span class="comment">//记录tel使用长度</span></span><br><span class="line">    <span class="built_in">string</span> tel[<span class="number">200</span>];<span class="comment">//记录电话</span></span><br><span class="line">&#125;p[<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(P a, P b)</span></span>&#123;<span class="comment">//用于名字排序</span></span><br><span class="line">    <span class="keyword">return</span> a.name&lt;b.name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmptel</span><span class="params">(<span class="built_in">string</span> a,<span class="built_in">string</span> b)</span></span>&#123;<span class="comment">//用于电话号码排序</span></span><br><span class="line">    <span class="keyword">if</span>(a.length()!=b.length())<span class="keyword">return</span> a.length()&lt;b.length();</span><br><span class="line">    <span class="keyword">return</span> a&lt;b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pd</span><span class="params">(<span class="built_in">string</span> s1,<span class="built_in">string</span> s2)</span></span>&#123;<span class="comment">//判断s1是不是s2后缀</span></span><br><span class="line">    reverse(s1.begin(),s1.end());</span><br><span class="line">    reverse(s2.begin(),s2.end());</span><br><span class="line">    <span class="keyword">int</span> l=s1.length(),i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;l;i++)</span><br><span class="line">        <span class="keyword">if</span>(s1[i]!=s2[i])<span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span>(i==l)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t);</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;<span class="comment">//记录总人数</span></span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; index;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="built_in">string</span> s;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;s&gt;&gt;n;</span><br><span class="line"><span class="comment">//录入名字</span></span><br><span class="line">        <span class="keyword">if</span>(index.find(s) == index.end())&#123;</span><br><span class="line">            p[num].name = s;</span><br><span class="line">            index[s] = num++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> id = index[s];</span><br><span class="line"><span class="comment">//录入电话</span></span><br><span class="line">        <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">            p[id].tel[p[id].index++] = s;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++)&#123;</span><br><span class="line">        sort(p[i].tel, p[i].tel+p[i].index, cmptel);<span class="comment">//对第i个人的所有电话进行排序，前面短后面长</span></span><br><span class="line"><span class="comment">//电话长的不会是短的后缀</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> q=<span class="number">0</span>;q&lt;p[i].index<span class="number">-1</span>;q++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> e=q+<span class="number">1</span>;e&lt;p[i].index;e++)</span><br><span class="line">                <span class="keyword">if</span>(pd(p[i].tel[q], p[i].tel[e]))&#123;<span class="comment">//如果是后缀就吧这个电话清了</span></span><br><span class="line">                    p[i].tel[q]=<span class="string">&quot;&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(p, p+num, cmp);<span class="comment">//对名字排序</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;num&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> qaq=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//记录非空电话数</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;p[i].index;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(p[i].tel[j]==<span class="string">&quot;&quot;</span>)<span class="keyword">continue</span>;</span><br><span class="line">            qaq++;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//输出非空电话（前面处理时排序过了）</span></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;p[i].name&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;qaq&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;p[i].index;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(p[i].tel[j]==<span class="string">&quot;&quot;</span>)<span class="keyword">continue</span>;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;p[i].tel[j]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h1 id="5-点球大战"><a href="#5-点球大战" class="headerlink" title="5.点球大战"></a>5.点球大战</h1><details blue><summary> 题目 </summary>              <div class='content'>              <p>【问题描述】在足球比赛中，有不少赛事，例如世界杯淘汰赛和欧洲冠军联赛淘汰赛中，当比赛双方经过正规比赛和加时赛之后仍然不分胜负时，需要进行点球大战来决定谁能够获得最终的胜利。点球大战的规则非常简单，两方轮流派出球员罚点球，每方各罚5个。当5轮点球结束以后如果仍然不分胜负，则进入一轮定胜负的阶段。两方各派一名球员罚点球，直到有一方罚进而另一方没有进为止。<br>在北美职业冰球联赛中，也有点球大战。与足球的规则不同的是，它只先罚3轮点球，随后就进入一轮定胜负的阶段，而其他的规则完全一样。<br>在本题中，输入将给出每次点球是否罚进，而你的任务则是输出一个“比分板”。</p><p>【输入形式】输入包含多组数据。每组数据的第一行包含一个整数N(1&lt;=N&lt;=18)，表示双方总共罚了多少个点球，N=0表示输入结束。随后有N行，每行是一个如下形式的字符串：<br>XXXX good：表示这个点球罚进<br>或者XXXX no good：表示这个点球没有罚进<br>其中XXXX表示球员名字（全部由字母和空格组成，保证不会出现歧义）<br>每一行保证不超过100个字符。<br>XXXX和good以及XXXX和no、no和good之间保证有且只有1个空格。<br>good、no good都是小写。本题是大小写相关的。<br>数据不保证点球大战一定结束，也不保证在结束以后立即结束这组数据（即：不用判断点球大战是否结束，只用把罚进的点球往比分上加即可）。</p><p>【输出形式】对每组数据，输出一个比分板。一个点球如果罚进，则在对应的地方标上’O’，如果没有进则标上’X’。先罚球的队伍的信息在上面，后罚的在下面。最右边标上两队的比分。具体格式参考样例输出。注意如果一轮点球只罚了一个，则后面那个点球对应的地方写上’-’。</p><p>【样例输入】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6</span><br><span class="line">Riise good</span><br><span class="line">Ballack good</span><br><span class="line">Gerrard no good</span><br><span class="line">Lampard no good</span><br><span class="line">Fernando Torres good</span><br><span class="line">Malouda good</span><br><span class="line">9</span><br><span class="line">Christiano Ronaldo no good</span><br><span class="line">Messi no good</span><br><span class="line">Giggs good</span><br><span class="line">Abidal no good</span><br><span class="line">Carrick good</span><br><span class="line">Ronaldinho good</span><br><span class="line">Rooney good</span><br><span class="line">Henry no good</span><br><span class="line">Tevez good</span><br><span class="line">0</span><br></pre></td></tr></table></figure><p>【样例输出】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 2 3 Score</span><br><span class="line">O X O 2</span><br><span class="line">O X O 2</span><br><span class="line">1 2 3 4 5 Score</span><br><span class="line">X O O O O 4</span><br><span class="line">X X O X - 1</span><br></pre></td></tr></table></figure>              </div>            </details><details cyan open><summary> 题解 </summary>              <div class='content'>              <p>这题其实在于每行的空格数不定，所以取出倒数第二个判断是不是no比较麻烦</p><p>没关系，问题不大，我们整行读入，然后切割完丢进栈里，然后取第二个嘿嘿嘿</p><p>剩下的统计就是小事啦！</p>              </div>            </details><details red><summary> 代码 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n &amp;&amp; n)&#123;</span><br><span class="line">        <span class="built_in">cin</span>.ignore();</span><br><span class="line">        <span class="keyword">char</span> a[<span class="number">2</span>][<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">10</span>;j++)</span><br><span class="line">                a[i][j] = <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">        <span class="keyword">int</span> score[<span class="number">2</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="built_in">string</span> s;</span><br><span class="line">            getline(<span class="built_in">cin</span>, s);</span><br><span class="line">            <span class="built_in">stringstream</span> ss;</span><br><span class="line">            ss&lt;&lt;s;</span><br><span class="line">            <span class="built_in">stack</span>&lt;<span class="built_in">string</span>&gt; sta;</span><br><span class="line">            <span class="keyword">while</span>(ss&gt;&gt;s)&#123;</span><br><span class="line">                sta.push(s);</span><br><span class="line">            &#125;</span><br><span class="line">            sta.pop();</span><br><span class="line">            <span class="keyword">int</span> q=i%<span class="number">2</span>,e=i/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(sta.top() == <span class="string">&quot;no&quot;</span>)a[q][e] = <span class="string">&#x27;X&#x27;</span>;</span><br><span class="line">            <span class="keyword">else</span> a[q][e] = <span class="string">&#x27;O&#x27;</span>,score[q]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=(n+<span class="number">1</span>)/<span class="number">2</span>;i++)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Score\n&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;(n+<span class="number">1</span>)/<span class="number">2</span>;j++)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, a[i][j]);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, score[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h1 id="6-飞行棋"><a href="#6-飞行棋" class="headerlink" title="6.飞行棋"></a>6.飞行棋</h1><details blue><summary> 题目 </summary>              <div class='content'>              <p>【问题描述】</p><pre><code>   大家当年一定都下过飞行棋吧。现在Lele和Yueyue要下的棋和这个很相似，只是更简单一点而已。   棋盘由N个格子组成，分别标记为第0格到第N-1格。格子分为两种，一种是普通格子，即表示在该格可以停留。否则是特殊的格子，一旦走到上面，就要根据上面标记的数飞到相应的格子上。如果飞到一个特殊的格子上，则可以继续飞。   除了第0格外，其他格子都只能容纳一个玩家。即一旦A玩家已经在某个格子上，B玩家又走到这里，A玩家则会被踢回第0格，而B玩家留在这个格子上面。   第N-1个格子是终点，一旦一个玩家走到这个格子上，该玩家获胜，游戏结束。   刚刚开始时，两个玩家都站在第0格上，依次扔骰子，根据骰子显示的点数走相应的格子数。比如，玩家在第0格，扔出了5点，则会走到第5个格子上。如果玩家走得超出了棋盘的范围，则要往回走一定的步数。比如，棋盘一共有7(0~6)个格子,玩家在第4格上，扔出了6点，最终他会走到第2格上(4-&gt;5-&gt;6-&gt;5-&gt;4-&gt;3-&gt;2)。   根据观察，骰子扔出来的数也是有规律的。   对于每一盘棋，扔出的第一个点数为 F0=(A*C+B)%6+1,第二个点数为 F1=(A*F0+B)%6+1,第三个点数为 F2=(A*F1+B)%6+1 ....依此类推。   每一盘棋都是由Lele先走，现在就请你当裁判，看谁能获胜。</code></pre><p>【输入形式】</p><pre><code>  本题目包含多组测试，请处理到文件结束。  每组数据占两行。  第一行有4个整数N,A,B,C(含义见题目描述，6&lt;N&lt;200,0&lt;=A,B,C&lt;=2^31)。  第二行有N个字符串，分别表示棋盘上第0个到第N-1个格子的内容。两个字符串之间用一个空格分隔开。  如果字符串为&quot;N&quot;,则表示这个格子为普通格子。否则字符串为&quot;GX&quot;(X为0到N-1之间的整数)的形式，其中X表示玩家走到这个格子时，要马上飞到第X个格子。  数据保证第0个和第N-1个格子一定为&quot;N&quot;。</code></pre><p>【输出形式】</p><pre><code>  对于每组数据，在一行内输出结果。  如果Lele能赢这盘棋，则输出&quot;Lele&quot;,如果Yueyue赢的话，就输出&quot;Yueyue&quot;。</code></pre><p>【样例输入】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">7 1 0 6</span><br><span class="line">N G3 N N N N N</span><br><span class="line">7 1 0 6</span><br><span class="line">N G4 N N N N N</span><br></pre></td></tr></table></figure><p>【样例输出】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Lele</span><br><span class="line">Yueyue</span><br></pre></td></tr></table></figure>              </div>            </details><details cyan open><summary> 题解 </summary>              <div class='content'>              <p>纯模拟，每步换人走，可以写个递推</p><p>然后每步走完判断有没有到达终点、超出边界、跳格、打到另一个人</p>              </div>            </details><details red><summary> 代码 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> pos[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> n,a,b,c;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[<span class="number">200</span>];</span><br><span class="line"><span class="built_in">string</span> name[<span class="number">2</span>] = &#123;<span class="string">&quot;Lele&quot;</span>,<span class="string">&quot;Yueyue&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">go</span><span class="params">(<span class="keyword">int</span> who, <span class="keyword">int</span> step)</span></span>&#123;</span><br><span class="line">    pos[who]+=step;</span><br><span class="line">    <span class="keyword">int</span> other = (who+<span class="number">1</span>)%<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(pos[who]==n<span class="number">-1</span>)&#123;<span class="built_in">cout</span>&lt;&lt;name[who]&lt;&lt;<span class="built_in">endl</span>;<span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="keyword">if</span>(pos[who]&gt;=n)pos[who] = n<span class="number">-1</span> - (pos[who]-(n<span class="number">-1</span>));</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">map</span>[pos[who]]&gt;<span class="number">0</span>)pos[who] = <span class="built_in">map</span>[pos[who]];</span><br><span class="line">    <span class="keyword">if</span>(pos[who] == pos[other] &amp;&amp; !pos[who])pos[other] = <span class="number">0</span>;</span><br><span class="line">    go(other, (a*step+b)%<span class="number">6</span>+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d %d&quot;</span>, &amp;n,&amp;a,&amp;b,&amp;c)!=EOF)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(<span class="built_in">map</span>, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="built_in">map</span>));</span><br><span class="line">        <span class="built_in">memset</span>(pos, <span class="number">0</span>, <span class="keyword">sizeof</span>(pos));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="built_in">string</span> s;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">            <span class="keyword">if</span>(s[<span class="number">0</span>]==<span class="string">&#x27;G&#x27;</span>)<span class="built_in">map</span>[i]=s[<span class="number">1</span>]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        go(<span class="number">0</span>, (a*c+b)%<span class="number">6</span>+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h1 id="7-棋盘"><a href="#7-棋盘" class="headerlink" title="7.棋盘"></a>7.棋盘</h1><details blue><summary> 题目 </summary>              <div class='content'>              <p>【问题描述】</p><pre><code>    棋盘是指一个行和列编号从1~N的NxN的二进制矩阵，当行号和列号之和为偶数时该矩阵对应位置为黑色的(1)，否则为白色的(0)。以下图示为N=1、2、3时的棋盘。    ![](https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/2-7qaq.jpg)    給出一个NxN的二进制矩阵，请找出位于该矩阵内的最大尺寸的完整棋盘，以及最大尺寸棋盘的数量（棋盘可以交叠）。</code></pre><p>【输入形式】</p><pre><code>   每个测试用例的第一行是一个正整数N(1&lt;=N&lt;=2000)，表示給定矩阵的行数和列数，接下来的N行描述了这个矩阵：每行有N个字符，既可以是“1”（代表黑块），也可以是“0”（代表白块）。矩阵至少包含一个“1”字符。</code></pre><p>【输出形式】</p><pre><code>   输出最大尺寸棋盘的行列的大小，以及最大棋盘的个数，以空格分隔。</code></pre><p>【样例输入】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">00101</span><br><span class="line">11010</span><br><span class="line">00101</span><br><span class="line">01010</span><br><span class="line">11101</span><br></pre></td></tr></table></figure><p>【样例输出】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3 3</span><br></pre></td></tr></table></figure>              </div>            </details><details cyan open><summary> 题解 </summary>              <div class='content'>              <p>刚开始没注意到第一格要黑色，栽了。然后没想到直接暴力搜就行。。。</p><p>这里建议从大棋盘到小棋盘开始搜，搜到就能直接break了（搜索怎么搜？看注释！！！）</p>              </div>            </details><details red><summary> 代码 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[<span class="number">2000</span>][<span class="number">2000</span>],num[<span class="number">2000</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">string</span> s;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">            <span class="built_in">map</span>[i][j] = s[j]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> size=n;size&gt;<span class="number">0</span>;size--)&#123;<span class="comment">//搜索的棋盘边长</span></span><br><span class="line">        <span class="keyword">int</span> num=<span class="number">0</span>;<span class="comment">//记录该边长的符合棋盘数</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i+size<span class="number">-1</span>&lt;n;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j+size<span class="number">-1</span>&lt;n;j++)</span><br><span class="line"><span class="comment">//枚举每个size*size方形左上角坐标</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">map</span>[i][j]==<span class="number">1</span>)&#123;<span class="comment">//判断第一个顶点是不是黑的</span></span><br><span class="line">                    <span class="keyword">int</span> q,e;</span><br><span class="line">                    <span class="keyword">bool</span> flag=<span class="literal">true</span>;</span><br><span class="line"><span class="comment">//下面两层循环判断该方形是不是合法棋盘</span></span><br><span class="line">                    <span class="keyword">for</span>(q=i;q&lt;i+size<span class="number">-1</span>;q++)&#123;</span><br><span class="line">                        <span class="keyword">for</span>(e=j;e&lt;j+size<span class="number">-1</span>;e++)</span><br><span class="line">                            <span class="keyword">if</span>(<span class="built_in">map</span>[q][e]+<span class="built_in">map</span>[q+<span class="number">1</span>][e]!=<span class="number">1</span> || <span class="built_in">map</span>[q][e]+<span class="built_in">map</span>[q][e+<span class="number">1</span>]!=<span class="number">1</span> || <span class="built_in">map</span>[q][e] != <span class="built_in">map</span>[q+<span class="number">1</span>][e+<span class="number">1</span>])&#123;</span><br><span class="line"><span class="comment">//判断每个点的下方右方和右下方是不是0110或者1001结构</span></span><br><span class="line">                                flag = <span class="literal">false</span>;<span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        <span class="keyword">if</span>(!flag)<span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(flag)num++;</span><br><span class="line">                &#125;</span><br><span class="line">        <span class="keyword">if</span>(num&gt;<span class="number">0</span>)<span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;%d %d&quot;</span>,size,num),<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h1 id="8-Engine-字符串"><a href="#8-Engine-字符串" class="headerlink" title="8.Engine-字符串"></a>8.Engine-字符串</h1><details blue><summary> 题目 </summary>              <div class='content'>              <p>【问题描述】</p><pre><code>   谷歌、百度等搜索引擎已经成为了互连网中不可或缺的一部分。在本题中，你的任务也是设计一个搜索论文的搜索引擎，当然，本题的要求比起实际的需求要少了许多。   本题的输入将首先给出一系列的论文，对于每篇论文首先给出标题，然后给出它被引用的次数。然后会有一系列的搜索询问，询问标题中包含特定关键词的论文有哪些。   每一个询问可能包含多个关键词，你需要找出标题包含所有关键词的论文。“包含”必须是标题中有一个词正好是给定的关键词，不区分大小写。  对每个询问，都按被引用的次数从多到少输出满足条件的论文的标题。如果有被引用的次数相同的论文，则按照论文在输入中的顺序排列，先给出的论文排在前面。</code></pre><p>【输入形式】输入包含多组数据。<br>     每组数据首先有一行包含一个整数N(1&lt;=N&lt;=1000)，表示论文的数目，N=0表示输入结束。每组论文的信息第一行是论文的标题，由字母（大小写均可）和空格组成，不超过10个词，每个词不超过20个字符，标题总共不超过250个字符。第二行是一个整数K(0&lt;=K&lt;=108)，表示它被引用的次数。在论文信息结束以后，有一行包含一个整数M(1&lt;=M&lt;=100)，表示询问的数目。接下来有M行，每行是一个询问，由L(1&lt;=L&lt;=10)个空格分开的词构成，每个词不超过20个字符。</p><p>【输出形式】</p><pre><code>  对每个询问，按照题目给定的顺序输出满足条件的论文的标题；如果没有满足条件的论文，就不输出。在每组询问的输出之后输出一行“***”，在每组数据的输出之后输出一行“---”。</code></pre><p>【样例输入1】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6</span><br><span class="line">Finding the Shortest Path</span><br><span class="line">120</span><br><span class="line">Finding the k Shortest Path</span><br><span class="line">80</span><br><span class="line">Find Augmenting Path in General Graph</span><br><span class="line">80</span><br><span class="line">Matching in Bipartite Graph</span><br><span class="line">200</span><br><span class="line">Finding kth Shortest Path</span><br><span class="line">50</span><br><span class="line">Graph Theory and its Applications</span><br><span class="line">40</span><br><span class="line">6</span><br><span class="line">shortest path</span><br><span class="line">k shortest path</span><br><span class="line">graph</span><br><span class="line">path</span><br><span class="line">find</span><br><span class="line">application</span><br><span class="line">0</span><br></pre></td></tr></table></figure><p>【样例输出1】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Finding the Shortest Path</span><br><span class="line">Finding the k Shortest Path</span><br><span class="line">Finding kth Shortest Path</span><br><span class="line">***</span><br><span class="line">Finding the k Shortest Path</span><br><span class="line">***</span><br><span class="line">Matching in Bipartite Graph</span><br><span class="line">Find Augmenting Path in General Graph</span><br><span class="line">Graph Theory and its Applications</span><br><span class="line">***</span><br><span class="line">Finding the Shortest Path</span><br><span class="line">Finding the k Shortest Path</span><br><span class="line">Find Augmenting Path in General Graph</span><br><span class="line">Finding kth Shortest Path</span><br><span class="line">***</span><br><span class="line">Find Augmenting Path in General Graph</span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">***</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>【样例输入2】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">Finding the Shortest Path</span><br><span class="line">120</span><br><span class="line">2</span><br><span class="line">Path</span><br><span class="line">Pat</span><br><span class="line">0</span><br></pre></td></tr></table></figure><p>【样例输出2】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Finding the Shortest Path</span><br><span class="line">***</span><br><span class="line">***</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>【样例说明】</p><p>需要查询的内容为“k shortest path”，他包含了3个独立的关键词。</p>              </div>            </details><details cyan open><summary> 题解 </summary>              <div class='content'>              <p>这题也老麻烦了。。。</p><p>第一个是查询时大小写不影响，也就是说读入时就要做标准化处理</p><p>第二个是得刚刚好长度的单词，比如find匹配不了finding，所以就不能直接字符串find啦</p><p>直接看代码注释吧。。。</p>              </div>            </details><details red><summary> 代码 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="built_in">string</span> truename;<span class="comment">//存原先大小写分明的名字</span></span><br><span class="line">    <span class="keyword">int</span> time;<span class="comment">//引用次数</span></span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">bool</span>&gt; dir;<span class="comment">//标准化后的关键词</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node a,node b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.time&gt;b.time;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n &amp;&amp; n)&#123;</span><br><span class="line">        node art[n];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="built_in">string</span> s;</span><br><span class="line">            <span class="keyword">int</span> t;</span><br><span class="line">            <span class="built_in">cin</span>.ignore();</span><br><span class="line">            getline(<span class="built_in">cin</span>, s);</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;t);</span><br><span class="line">            art[i].truename = s;</span><br><span class="line">            art[i].time = t;</span><br><span class="line">            <span class="keyword">int</span> l = s.length();</span><br><span class="line"><span class="comment">//对原文章名标准化处理</span></span><br><span class="line">            <span class="built_in">string</span> temp=<span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;l;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(s[i]&gt;=<span class="string">&#x27;A&#x27;</span> &amp;&amp; s[i]&lt;=<span class="string">&#x27;Z&#x27;</span>)</span><br><span class="line">                    temp+=s[i]-<span class="string">&#x27;A&#x27;</span>+<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">                <span class="keyword">else</span> temp+=s[i];</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//切割关键词</span></span><br><span class="line">            <span class="built_in">stringstream</span> ss;</span><br><span class="line">            ss&lt;&lt;temp;</span><br><span class="line">            <span class="keyword">while</span>(ss&gt;&gt;temp)</span><br><span class="line">                art[i].dir[temp]=<span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;m);</span><br><span class="line">        <span class="built_in">cin</span>.ignore();</span><br><span class="line">        <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">            <span class="built_in">string</span> s;</span><br><span class="line">            getline(<span class="built_in">cin</span>,s);</span><br><span class="line"><span class="comment">//标准化查询的关键词</span></span><br><span class="line">            <span class="built_in">string</span> temp=<span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">int</span> l = s.length();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;l;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(s[i]&gt;=<span class="string">&#x27;A&#x27;</span> &amp;&amp; s[i]&lt;=<span class="string">&#x27;Z&#x27;</span>)</span><br><span class="line">                    temp+=s[i]-<span class="string">&#x27;A&#x27;</span>+<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">                <span class="keyword">else</span> temp+=s[i];</span><br><span class="line">            &#125;</span><br><span class="line">            s = temp;</span><br><span class="line">            <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">            node forsort[n];<span class="comment">//用于存匹配出来的文章</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="comment">//切割查询关键词</span></span><br><span class="line">                <span class="built_in">stringstream</span> ss;</span><br><span class="line">                ss&lt;&lt;s;</span><br><span class="line">                <span class="built_in">string</span> temp;</span><br><span class="line">                <span class="keyword">bool</span> flag=<span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">while</span>(ss&gt;&gt;temp)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(art[i].dir.find(temp) == art[i].dir.end())&#123;</span><br><span class="line"><span class="comment">//匹配</span></span><br><span class="line">                        flag = <span class="literal">false</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(!flag)<span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"><span class="comment">//匹配到就存进去</span></span><br><span class="line">                <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">                    forsort[index].truename = art[i].truename;</span><br><span class="line">                    forsort[index++].time = art[i].time;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            sort(forsort, forsort+index, cmp);<span class="comment">//对匹配完的文章按次数排序</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;index;i++)</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;forsort[i].truename&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;***&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;---&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h1 id="9-字符串压缩"><a href="#9-字符串压缩" class="headerlink" title="9.字符串压缩"></a>9.字符串压缩</h1><details blue><summary> 题目 </summary>              <div class='content'>              <p>【问题描述】</p><pre><code>   给定一个由n个小写字母组成的字符串s，需要使用最少数量的钱币来压缩它。   压缩该字符串，必须将s表示为多个相互连接的非空字符串: s=t1t2...tk，其中第 i 个字符串按照下列两种方法之一编码：</code></pre><p>如果|ti|=1，也就是说 ti为单个字符组成的字符串，编码时需要支付a个钱币</p><p>如果ti是t1t2…ti-1的子串，编码时需要支付b个钱币</p><pre><code>  你的任务是计算压缩给定的字符串需要花费的最小钱币数。</code></pre><p>【输入形式】</p><pre><code>   输入的第一行包含3个用空格分隔的正整数：n、a和b(1≤n、a、b≤5000)，第二行为一个长度为n的小写字符串。</code></pre><p>【输出形式】</p><pre><code>   输出一个整数，表示你需要为压缩s所需要支付的最小钱币数。</code></pre><p>【样例输入1】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3 3 1</span><br><span class="line">aba</span><br></pre></td></tr></table></figure><p>【样例输出1】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">7</span><br></pre></td></tr></table></figure><p>【样例输入2】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4 1 1</span><br><span class="line">abcd</span><br></pre></td></tr></table></figure><p>【样例输出2】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><p>【样例输入3】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4 10 1</span><br><span class="line">aaaa</span><br></pre></td></tr></table></figure><p>【样例输出3】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">12</span><br></pre></td></tr></table></figure>              </div>            </details><details cyan open><summary> 题解 </summary>              <div class='content'>              <p>本来以为是贪心的，然后一想aaaa，emmm贪心不科学啊，按经验就是动态规划啦</p><p>知道是dp题后就简单了。老师放水说了一个一个加，那就很明显了</p><p>对于每个长度l，都有初始<code>dp[l]=dp[l-1]+a</code></p><p>构建状态转移方程<code>dp[l] = min(dp[l], dp[mid]+b)</code>(以mid为切割点切割长度为l的子串，右半是左半的子串时转移。<code>(l+1)/2&lt;=mid&lt;l</code>)</p>              </div>            </details><details red><summary> 代码 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,a,b;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;n,&amp;a,&amp;b);</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">    <span class="keyword">int</span> dp[<span class="number">5001</span>];</span><br><span class="line">    dp[<span class="number">0</span>]=<span class="number">0</span>;dp[<span class="number">1</span>]=a;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">        dp[i]=<span class="number">999999999</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">2</span>;l&lt;=n;l++)&#123;</span><br><span class="line">        <span class="built_in">string</span> ss = s.substr(<span class="number">0</span>,l);<span class="comment">//长度l的子串</span></span><br><span class="line">        dp[l] = dp[l<span class="number">-1</span>]+a;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> mid=(l+<span class="number">1</span>)/<span class="number">2</span>;mid&lt;l;mid++)&#123;<span class="comment">//左半一定是长于右半的，所以mid从(l+1)/2开始</span></span><br><span class="line">            <span class="built_in">string</span> left=ss.substr(<span class="number">0</span>,mid);<span class="comment">//子串左半</span></span><br><span class="line">            <span class="built_in">string</span> right=ss.substr(mid,l);<span class="comment">//子串右半</span></span><br><span class="line">            <span class="keyword">if</span>(left.find(right)!=left.npos)</span><br><span class="line">                dp[l] = min(dp[l], dp[mid]+b);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;dp[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h1 id="10-拼写检查"><a href="#10-拼写检查" class="headerlink" title="10.拼写检查"></a>10.拼写检查</h1><details blue><summary> 题目 </summary>              <div class='content'>              <p>【问题描述】</p><pre><code>   作为一个新的拼写检查程序开发团队的成员，您将编写一个模块，用已知的所有形式正确的词典来检查给定单词的正确性。   如果字典中没有这个词，那么可以用下列操作中的一个来替换正确的单词（从字典中）：   1. 从单词中删除一个字母；   2. 用一个任意字母替换单词中的一个字母；   3. 在单词中插入一个任意字母。   你的任务是编写一个程序，为每个给定的单词找到字典中所有可能的替换。</code></pre><p>【输入形式】</p><pre><code>   输入的第一部分包含所有字典中的词，每个单词占用一行，以一个单一字符“#”作为结束。所有单词都不相同，字典中至多1000个单词。   接下来的部分包含所有需要进行检查的单词，同样每个单词占用一行。这部分也以一个单一字符“#”作为结束。至多有50个单词需要检查。   在输入中所有的单词（字典中的和需要检查的）都仅由小写字母组成，每个最多包含15个字符。</code></pre><p>【输出形式】</p><pre><code>   对于每个在输入中出现的单词，按照它们在输入的第二部分出现的顺序输出一行。如果该单词是正确的（也就是说它包含在字典中）则输出信息：“is correct”；如果该单词不正确，则首先输出该单词，然后输入符号&#39;:&#39;（冒号），之后空一格，写出它所有可能的替代，以空格分隔。这些替代的单词按照它们在字典中（输入的第一部分）出现的顺序写出。如果没有可替代的单词，则在冒号后面直接输出换行。</code></pre><p>【样例输入】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">i</span><br><span class="line">is</span><br><span class="line">has</span><br><span class="line">have</span><br><span class="line">be</span><br><span class="line">my</span><br><span class="line">more</span><br><span class="line">contest</span><br><span class="line">me</span><br><span class="line">too</span><br><span class="line">if</span><br><span class="line">award</span><br><span class="line">#</span><br><span class="line">me</span><br><span class="line">aware</span><br><span class="line">m</span><br><span class="line">contest</span><br><span class="line">hav</span><br><span class="line">oo</span><br><span class="line">or</span><br><span class="line">i</span><br><span class="line">fi</span><br><span class="line">mre</span><br><span class="line">#</span><br></pre></td></tr></table></figure><p>【样例输出】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">me is correct</span><br><span class="line">aware: award</span><br><span class="line">m: i my me</span><br><span class="line">contest is correct</span><br><span class="line">hav: has have</span><br><span class="line">oo: too</span><br><span class="line">or:</span><br><span class="line">i is correct</span><br><span class="line">fi: i</span><br><span class="line">mre: more me</span><br></pre></td></tr></table></figure>              </div>            </details><details cyan open><summary> 题解 </summary>              <div class='content'>              <p>这题也是又臭又长，看起来很麻烦但写起来也还好（我刚开始跳了这题</p><p>这题直接看代码注释吧</p>              </div>            </details><details red><summary> 代码 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s,d[<span class="number">1000</span>];</span><br><span class="line">    <span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//存字典</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;s)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s==<span class="string">&quot;#&quot;</span>)<span class="keyword">break</span>;</span><br><span class="line">        d[num++]=s;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//查询</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;s)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s==<span class="string">&quot;#&quot;</span>)<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;num;i++)</span><br><span class="line">            <span class="keyword">if</span>(s==d[i])<span class="keyword">break</span>;</span><br><span class="line"><span class="comment">//在字典里边</span></span><br><span class="line">        <span class="keyword">if</span>(i!=num)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;s+<span class="string">&quot; is correct&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//不在字典里边（匹配）</span></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;s+<span class="string">&quot;: &quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> l1=s.length();</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;num;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> l2=d[i].length();</span><br><span class="line">            <span class="keyword">if</span>(l1-l2&gt;=<span class="number">-1</span> &amp;&amp; l1-l2&lt;=<span class="number">1</span>)&#123;<span class="comment">//显然有长度相差不大于1的而能够匹配到</span></span><br><span class="line"><span class="comment">//然后我们分几种情况</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">第一种是两个字符串短的那个加一个字符就能成为另一个，其中又分为3种，短的是长的前缀或后缀，或者中间加一个字符</span></span><br><span class="line"><span class="comment">另一种是长度刚好但差一个字符不同</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">我们匹配两个字符串的前缀相同长度q和后缀相同长度e，l为两者的长度的较小值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">                <span class="keyword">int</span> q,e,l=min(l1,l2);</span><br><span class="line"><span class="comment">//如果一个是另一个前缀条件是q==l</span></span><br><span class="line">                <span class="keyword">for</span>(q=<span class="number">0</span>;q&lt;l;q++)</span><br><span class="line">                    <span class="keyword">if</span>(s[q]!=d[i][q])</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">if</span>(q==l)&#123;</span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;d[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"><span class="comment">//如果一个是另一个后缀条件是e==l</span></span><br><span class="line">                <span class="built_in">string</span> temp1=s,temp2=d[i];</span><br><span class="line">                reverse(temp1.begin(), temp1.end());</span><br><span class="line">                reverse(temp2.begin(), temp2.end());</span><br><span class="line">                <span class="keyword">for</span>(e=<span class="number">0</span>;e&lt;l;e++)</span><br><span class="line">                    <span class="keyword">if</span>(temp1[e]!=temp2[e])</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">if</span>(e==l)&#123;</span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;d[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"><span class="comment">//如果两个长度不同，但是中间插入一个字符后两字符串相同条件是q+e==l</span></span><br><span class="line"><span class="comment">//如果两个长度相同，那么中间改一个字符后两字符串相同条件是q+e==l-1</span></span><br><span class="line">                <span class="keyword">if</span>((q+e==l &amp;&amp; l1!=l2) || (q+e==l<span class="number">-1</span> &amp;&amp; l1==l2))</span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;d[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h1 id="11-最小的K个数"><a href="#11-最小的K个数" class="headerlink" title="11.最小的K个数"></a>11.最小的K个数</h1><details blue><summary> 题目 </summary>              <div class='content'>              <p>【问题描述】</p><p>输入n个整数，找出其中最小的k（k&lt;=n）个不同数。例如输入4,5,1,6,1,7,3,8这8个数字，则最小的4个数字是1,3,4,5。</p><p>【输入形式】</p><p>每个测试案例包括2行：</p><p>第一行为2个整数n，k(1&lt;=n，k&lt;=200000)，表示数组的长度。</p><p>第二行包含n个整数，表示这n个数，数组中的数的范围是[0,1000 000 000]。</p><p>【输出形式】</p><p>对应每个测试案例，输出最小的k个数，并按从小到大顺序打印(如果不存在k个不同的数，则按照实际数量进行输出)。</p><p>【样例输入】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">8 4</span><br><span class="line">4 5 1 6 2 7 3 8</span><br></pre></td></tr></table></figure><p>【样例输出】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 2 3 4</span><br></pre></td></tr></table></figure><p>【训练提示】</p><p>1、数的范围从0到1000000000，使用数组记录那些数出现过就不是太合适</p><p>2、需要去除重复的数，需要从小到大排序—-set就是一个不错的选择</p>              </div>            </details><details cyan open><summary> 题解 </summary>              <div class='content'>              <p>这个提示我没看到，但其实无所谓，set和map都自带排序，去重也无所谓，用map的话直接桶排序原理就是</p>              </div>            </details><details red><summary> 代码 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,k;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;k);</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>, <span class="keyword">int</span>&gt; a;</span><br><span class="line">    <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">        a[x] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> index=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">map</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>,<span class="keyword">int</span>&gt;::iterator it = a.begin(); it!=a.end(); it++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld &quot;</span>, it-&gt;first);</span><br><span class="line">        index++;</span><br><span class="line">        <span class="keyword">if</span>(index==k)<span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h1 id="12-绩点计算"><a href="#12-绩点计算" class="headerlink" title="12.绩点计算"></a>12.绩点计算</h1><details blue><summary> 题目 </summary>              <div class='content'>              <p>【问题描述】</p><p>学校对本科生的成绩施行绩点制（GPA）。将学生的实际考分根据不同学科的不同学分按一定的公式进行计算。规定如下：</p><p>实际成绩        绩点</p><p>90-100          4.0</p><p>85-89            3.7</p><p>82-84            3.3</p><p>78-81            3.0</p><p>75-77            2.7</p><p>72-74            2.3</p><p>68-71            2.0</p><p>64-67            1.5</p><p>60-63            1.0</p><p>60以下            0</p><ol><li><p>一门课程的学分绩点=该课绩点*该课学分</p></li><li><p>总评绩点=所有学科绩点之和/所有课程学分之和</p></li></ol><p>现要求你编程求出某人的总评绩点(GPA)</p><p>【输入形式】</p><p>第一行 总的课程数n</p><p>第二行 相应课程的学分（两个学分间用空格隔开）</p><p>第三行 对应课程的实际得分</p><p>此处输入的所有数字均为整数</p><p>【输出形式】</p><p>输出有一行，总评绩点，保留两位小数</p><p>【样例输入】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">4 3 4 2 3</span><br><span class="line">91 88 72 69 56</span><br></pre></td></tr></table></figure><p>【样例输出】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2.52</span><br></pre></td></tr></table></figure>              </div>            </details><details cyan open><summary> 题解 </summary>              <div class='content'>              <p>水题一道，直接模拟过。。。</p>              </div>            </details><details red><summary> 代码 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">int</span> a[n];</span><br><span class="line">    <span class="keyword">int</span> asum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">double</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">        asum+=a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> qaq;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;qaq);</span><br><span class="line">        <span class="keyword">if</span>(qaq&gt;=<span class="number">90</span>)sum+=<span class="number">4.0</span>*a[i];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(qaq&gt;=<span class="number">85</span>)sum+=<span class="number">3.7</span>*a[i];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(qaq&gt;=<span class="number">82</span>)sum+=<span class="number">3.3</span>*a[i];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(qaq&gt;=<span class="number">78</span>)sum+=<span class="number">3.0</span>*a[i];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(qaq&gt;=<span class="number">75</span>)sum+=<span class="number">2.7</span>*a[i];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(qaq&gt;=<span class="number">72</span>)sum+=<span class="number">2.3</span>*a[i];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(qaq&gt;=<span class="number">68</span>)sum+=<span class="number">2.0</span>*a[i];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(qaq&gt;=<span class="number">64</span>)sum+=<span class="number">1.5</span>*a[i];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(qaq&gt;=<span class="number">60</span>)sum+=<span class="number">1.0</span>*a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">double</span> ans=sum/asum;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.2f&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h1 id="13-xxx定律"><a href="#13-xxx定律" class="headerlink" title="13.xxx定律"></a>13.xxx定律</h1><details blue><summary> 题目 </summary>              <div class='content'>              <p>【问题描述】</p><pre><code>   对于一个正整数n，如果是偶数，就把n砍掉一半；如果是奇数，把n变成 3*n+ 1后砍掉一半，直到该数变为1为止。   请计算需要经过几步才能将n变到1，具体可见样例。</code></pre><p>【输入形式】</p><pre><code>   测试包含多个用例，每个用例包含一个整数n,当n为0 时表示输入结束。（1&lt;=n&lt;=10000）</code></pre><p>【输出形式】</p><pre><code>   对于每组测试用例请输出一个数，表示需要经过的步数,每组输出占一行。</code></pre><p>【样例输入】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">2</span><br><span class="line">0</span><br></pre></td></tr></table></figure><p>【样例输出】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">1</span><br></pre></td></tr></table></figure>              </div>            </details><details cyan open><summary> 题解 </summary>              <div class='content'>              <p>其实这题应该叫“冰雹猜想”，也是纯模拟，一个while解决（能不写递归就不写递归）</p>              </div>            </details><details red><summary> 代码 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n) &amp;&amp; n)&#123;</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n!=<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">0</span>)n/=<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">else</span> n=(<span class="number">3</span>*n+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h1 id="14-数的距离差"><a href="#14-数的距离差" class="headerlink" title="14.数的距离差"></a>14.数的距离差</h1><details blue><summary> 题目 </summary>              <div class='content'>              <p>【问题描述】</p><p>给定一组正整数，其中最大值和最小值分别为Max和Min, 其中一个数x到Max和Min的距离差定义为：</p><pre><code>  abs(abs(x-Max)-(x-Min))</code></pre><p>其中abs()为求一个数的绝对值</p><p>【输入形式】</p><p>包括两行，第一行一个数n，表示第二行有n个正整数</p><p>【输出形式】</p><p>输出一个数x，该数在所有n个数中的距离差最小；如果有两个数的距离差都是最小，输出较小的哪个</p><p>【样例输入1】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">3 1 7 5 9</span><br></pre></td></tr></table></figure><p>【样例输出1】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure><p>【样例输入2】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">1 3 2</span><br></pre></td></tr></table></figure><p>【样例输出2】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure>              </div>            </details><details cyan open><summary> 题解 </summary>              <div class='content'>              <p>显然这个数离最大值最小值的平均值越近越好，</p><p>所以我们考虑排序完直接lower_bound，然后查左右（当然直接暴力一个一个查也行）</p>              </div>            </details><details red><summary> 代码 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">int</span> a[n];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    sort(a,a+n);</span><br><span class="line">    <span class="keyword">int</span> avg = (a[<span class="number">0</span>]+a[n<span class="number">-1</span>])/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> i = lower_bound(a,a+n,avg)-a;</span><br><span class="line">    <span class="keyword">if</span>(a[i] == avg || i==<span class="number">0</span>)<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, avg);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">abs</span>(a[n<span class="number">-1</span>]+a[<span class="number">0</span>]<span class="number">-2</span>*a[i<span class="number">-1</span>]) &lt;= <span class="built_in">abs</span>(a[n<span class="number">-1</span>]+a[<span class="number">0</span>]<span class="number">-2</span>*a[i]))<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, a[i<span class="number">-1</span>]);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, a[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h1 id="15-亲和数"><a href="#15-亲和数" class="headerlink" title="15.亲和数"></a>15.亲和数</h1><details blue><summary> 题目 </summary>              <div class='content'>              <p>问题描述】</p><p>古希腊数学家毕达哥拉斯在自然数研究中发现，220 的所有真约数(即不是自身的约数)之和为：   </p><pre><code>           1+2+4+5+10+11+20+22+44+55+110＝284。</code></pre><p>而 284 的所有真约数为 1、2、4、71、 142，加起来恰好为 220。人们对这样的数感到很惊奇，并称之为亲和数。一般地讲，如果两个数中任何一个数都是另一个数的真约数之和，则这两个数就是亲和数。<br>你的任务就编写一个程序，判断给定的两个数是否是亲和数。</p><p>【输入形式】</p><p>输入若干行数据（大于0），每行一个实例,包含两个整数A,B； 其中 0 &lt;= A,B &lt;= 600000 ;</p><p>【输出形式】</p><p>对于每个测试实例，如果 A 和 B 是亲和数的话输出 YES，否则输出 NO</p><p>【样例输入】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">220 284</span><br><span class="line">100 200</span><br></pre></td></tr></table></figure><p>【样例输出】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">YES</span><br><span class="line">NO</span><br></pre></td></tr></table></figure>              </div>            </details><details cyan open><summary> 题解 </summary>              <div class='content'>              <p>把两个数的约数和分别算出来比较就行。。。水题一道</p><p>当然要优化也是有的，只是打起来麻烦，就不写了</p>              </div>            </details><details red><summary> 代码 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;a,&amp;b))&#123;</span><br><span class="line">        <span class="keyword">int</span> s1=<span class="number">0</span>,s2=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=a/<span class="number">2</span>;i++)</span><br><span class="line">            <span class="keyword">if</span>(a%i==<span class="number">0</span>)</span><br><span class="line">                s1+=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=b/<span class="number">2</span>;i++)</span><br><span class="line">            <span class="keyword">if</span>(b%i==<span class="number">0</span>)</span><br><span class="line">                s2+=i;</span><br><span class="line">        <span class="keyword">if</span>(s1==b &amp;&amp; s2==a)<span class="built_in">printf</span>(<span class="string">&quot;YES\n&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;NO\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h1 id="16-金币"><a href="#16-金币" class="headerlink" title="16.金币"></a>16.金币</h1><details blue><summary> 题目 </summary>              <div class='content'>              <p>【问题描述】</p><p>国王为他的忠诚的骑士支付金币。在他服役的第一天，骑士收到一枚金币。在接下来2天（第二天和第三天的服务），骑士每天收到2金币。在未来三天（第五，第四，和第六天的服务），骑士每天收到三金币。在未来四天（第七，第八，第九，和第十天的服务），骑士每天收到四金币。这一模式的付款方式将继续下去：在接下来的n天骑士每天将收到n枚金币，而在接接下来的n+1天每天将收到n+1枚金币，这里n是正整数。你的程序将确定在任何给定的天数（从第1天开始）支付给骑士的金币总数。</p><p>【输入形式】</p><p>输入包含至少一行，但不超过21行。输入的每一行包含一个测试案例的数据，即一个整数（1~10000），代表天数。</p><p>【输出形式】</p><p>每一行输出对应一个测试用例，由天数和支付给骑士的金币总数量组成，中间用空格分隔。</p><p>【样例输入】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10</span><br><span class="line">6</span><br><span class="line">10000</span><br><span class="line">1000</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td></tr></table></figure><p>【样例输出】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10 30</span><br><span class="line">6 14</span><br><span class="line">10000 942820</span><br><span class="line">1000 29820</span><br><span class="line">21 91</span><br><span class="line">22 98</span><br></pre></td></tr></table></figure>              </div>            </details><details cyan open><summary> 题解 </summary>              <div class='content'>              <p>计算i^2和（i和小于总天数），然后加上剩余天数*(i+1)就行</p>              </div>            </details><details red><summary> 代码 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n))&#123;</span><br><span class="line">        <span class="keyword">int</span> t=<span class="number">0</span>,i=<span class="number">1</span>,ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(t+i&lt;n)&#123;</span><br><span class="line">            ans+=i*i;</span><br><span class="line">            t+=i++;</span><br><span class="line">        &#125;</span><br><span class="line">        ans+=(n-t)*i;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,n,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h1 id="17-小A的计算器"><a href="#17-小A的计算器" class="headerlink" title="17.小A的计算器"></a>17.小A的计算器</h1><details blue><summary> 题目 </summary>              <div class='content'>              <p>【问题描述】</p><pre><code>    以往的操作系统内部的数据表示都是二进制方式，小A新写了一个操作系统，系统内部的数据表示为26进制，其中0-25分别由a-z表示。    现在小A要在这个操作系统上实现一个计算器，这个计算器要能实现26进制数的加法运算。你能帮小A实现这个计算器吗？</code></pre><p>【输入形式】</p><pre><code>   输入的第一行包括一个整数N(1&lt;=N&lt;=100)。   接下来的N行每行包括两个26进制数x和y，它们之间用空格隔开，每个数的位数最多为10位,我们可以保证相加的结果的位数最多也是10位。每个数会用小A所设计的操作系统中的表示方法来表示，如：bsadfasdf。即每个数的各个位均由26个小写字母a-z中的一个来表示。</code></pre><p>【输出形式】</p><pre><code>    输出x和y相加后的结果，结果也要用题目中描述的26进制数来表示。</code></pre><p>【样例输入】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4</span><br><span class="line">ba cd</span><br><span class="line">c b</span><br><span class="line">b c</span><br><span class="line">ba c</span><br></pre></td></tr></table></figure><p>【样例输出】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dd</span><br><span class="line">d</span><br><span class="line">d</span><br><span class="line">bc</span><br></pre></td></tr></table></figure>              </div>            </details><details cyan open><summary> 题解 </summary>              <div class='content'>              <p>这题的数据量。。。字符串长度不大于10，26进制转化成10进制也不会爆int。可以直接转换成10进制作加法，然后再转化回来就行</p><p>那如果要应对大数据？用高精度加法吧(小学加法原理就是了)</p><p>具体可以看<a href="./48355.html">关于 C++ 高精度运算的几种方式</a></p>              </div>            </details><details red><summary> 代码 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">        <span class="built_in">string</span> a,b,c=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        reverse(a.begin(),a.end());</span><br><span class="line">        reverse(b.begin(),b.end());</span><br><span class="line">        <span class="keyword">int</span> l1 = a.length(), l2 = b.length();</span><br><span class="line">        <span class="keyword">int</span> temp=<span class="number">0</span>,i;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;l1 &amp;&amp; i&lt;l2;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> s = a[i]-<span class="string">&#x27;a&#x27;</span> + b[i]-<span class="string">&#x27;a&#x27;</span> + temp;</span><br><span class="line">            temp = s/<span class="number">26</span>;</span><br><span class="line">            c += s%<span class="number">26</span> + <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i==l1)</span><br><span class="line">            <span class="keyword">for</span>(;i&lt;l2;i++)&#123;</span><br><span class="line">                <span class="keyword">int</span> s = b[i]-<span class="string">&#x27;a&#x27;</span> + temp;</span><br><span class="line">                temp = s/<span class="number">26</span>;</span><br><span class="line">                c += s%<span class="number">26</span> +<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">if</span>(i==l2)</span><br><span class="line">            <span class="keyword">for</span>(;i&lt;l1;i++)&#123;</span><br><span class="line">                <span class="keyword">int</span> s = a[i]-<span class="string">&#x27;a&#x27;</span> + temp;</span><br><span class="line">                temp = s/<span class="number">26</span>;</span><br><span class="line">                c += s%<span class="number">26</span> +<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">if</span>(temp==<span class="number">1</span>)c+=<span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">        reverse(c.begin(),c.end());</span><br><span class="line">        i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> l=c.length();</span><br><span class="line"><span class="comment">//清楚前导0</span></span><br><span class="line">        <span class="keyword">while</span>(c[i]==<span class="string">&#x27;a&#x27;</span>)i++;</span><br><span class="line">        <span class="built_in">string</span> ans=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span>(;i&lt;l;i++)ans+=c[i];</span><br><span class="line">        <span class="keyword">if</span>(ans.length()==<span class="number">0</span>)ans=<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h1 id="18-小丑排序"><a href="#18-小丑排序" class="headerlink" title="18.小丑排序"></a>18.小丑排序</h1><details blue><summary> 题目 </summary>              <div class='content'>              <p>【问题描述】</p><p>你在信天翁马戏团（是的，它是由一群小丑组成）从事管理工作，你刚刚写完一个程序的输出是将他们的姓名按长度为非递减的方式排列，名称列表（使每名至少只要它之前的）。然而，你的老板不喜欢这种输出方式，而是希望输出出现更对称，较短的字符串在顶部和底部，而较长的字符串在中间。他的规则是，每一对名称都是在该列表的相对的两端，并且在该组中的第一个名字总是在列表的顶部。比如在下面的第一个例子中，Bo和Pat是第一对，Jean和Kevin是第二对，等等。</p><p>【输入形式】</p><p>输入由1到多个字符串集合组成，最后一行为0表示输入结束，每个集合开始于一个整数n，表示该集合字符串的个数，接下来n行由n个字符串按长度非递减的方式排列，每个集合至少包含一个但不超过15个字符串，每个字符串不超过25个字符。</p><p>【输出形式】</p><p>对于每个集合，第一行输出”set-n”, n从1开始，接下来的若干行对应输入每个集合重新排列的结果，如样例所示。</p><p>【样例输入】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">7</span><br><span class="line">Bo</span><br><span class="line">Pat</span><br><span class="line">Jean</span><br><span class="line">Kevin</span><br><span class="line">Claude</span><br><span class="line">William</span><br><span class="line">Marybeth</span><br><span class="line">6</span><br><span class="line">Jim</span><br><span class="line">Ben</span><br><span class="line">Zoe</span><br><span class="line">Joey</span><br><span class="line">Frederick</span><br><span class="line">Annabelle</span><br><span class="line">5</span><br><span class="line">John</span><br><span class="line">Bill</span><br><span class="line">Fran</span><br><span class="line">Stan</span><br><span class="line">Cece</span><br><span class="line">0</span><br></pre></td></tr></table></figure><p>【样例输出】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set-1</span><br><span class="line">Bo</span><br><span class="line">Jean</span><br><span class="line">Claude</span><br><span class="line">Marybeth</span><br><span class="line">William</span><br><span class="line">Kevin</span><br><span class="line">Pat</span><br><span class="line">set-2</span><br><span class="line">Jim</span><br><span class="line">Zoe</span><br><span class="line">Frederick</span><br><span class="line">Annabelle</span><br><span class="line">Joey</span><br><span class="line">Ben</span><br><span class="line">set-3</span><br><span class="line">John</span><br><span class="line">Fran</span><br><span class="line">Cece</span><br><span class="line">Stan</span><br><span class="line">Bill</span><br></pre></td></tr></table></figure>              </div>            </details><details cyan open><summary> 题解 </summary>              <div class='content'>              <p>其实就是0,3,5…再倒回来到1，分奇偶判断下就行</p>              </div>            </details><details red><summary> 代码 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> index=<span class="number">1</span>,n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n) &amp;&amp; n)&#123;</span><br><span class="line">        <span class="built_in">string</span> s[n];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;s[i];</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;set-%d\n&quot;</span>, index++);</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i+=<span class="number">2</span>)<span class="built_in">cout</span>&lt;&lt;s[i]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">if</span>(i<span class="number">-1</span>&lt;n)i--;</span><br><span class="line">        <span class="keyword">else</span> i-=<span class="number">3</span>;</span><br><span class="line">        <span class="keyword">for</span>(;i&gt;<span class="number">0</span>;i-=<span class="number">2</span>)<span class="built_in">cout</span>&lt;&lt;s[i]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h1 id="19-数圈"><a href="#19-数圈" class="headerlink" title="19.数圈"></a>19.数圈</h1><details blue><summary> 题目 </summary>              <div class='content'>              <p>【问题描述】</p><p>以1为中心，用2,3,4, …, n, …, n*n的数字围绕着中心输出数圈， 如若n=4，则</p><p>7 8 9 10</p><p>6 1 2 11</p><p>5 4 3 12</p><p>16 15 14 13</p><p>【输入形式】</p><p>一个整数n(1&lt;=n&lt;=10)</p><p>【输出形式】</p><p>数圈矩阵</p><p>【样例输入】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure><p>【样例输出】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">21 22 23 24 25</span><br><span class="line">20 7 8 9 10</span><br><span class="line">19 6 1 2 11</span><br><span class="line">18 5 4 3 12</span><br><span class="line">17 16 15 14 13</span><br></pre></td></tr></table></figure>              </div>            </details><details cyan open><summary> 题解 </summary>              <div class='content'>              <p>我们找一找1的位置，找规律绕圈出来就行</p>              </div>            </details><details red><summary> 代码 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">int</span> a[n+<span class="number">1</span>][n+<span class="number">1</span>];</span><br><span class="line">    <span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line">    <span class="keyword">int</span> i=(n<span class="number">-1</span>)/<span class="number">2</span>, j=(n<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line">    a[i][j]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> index=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=n;k++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> q=<span class="number">1</span>;q&lt;=k;q++)</span><br><span class="line">            a[i][++j]=index++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> q=<span class="number">1</span>;q&lt;=k;q++)</span><br><span class="line">            a[++i][j]=index++;</span><br><span class="line">        k++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> q=<span class="number">1</span>;q&lt;=k;q++)</span><br><span class="line">            a[i][--j]=index++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> q=<span class="number">1</span>;q&lt;=k;q++)</span><br><span class="line">            a[--i][j]=index++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[i][j]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h1 id="20-锤子剪刀布"><a href="#20-锤子剪刀布" class="headerlink" title="20.锤子剪刀布"></a>20.锤子剪刀布</h1><details blue><summary> 题目 </summary>              <div class='content'>              <p>【问题描述】</p><p>大家应该都会玩“锤子剪刀布”的游戏。现给出两人的交锋记录，请统计双方的胜、平、负次数，并且给出双方分别出什么手势的胜算最大。</p><p>【输入形式】</p><p>输入第1行给出正整数N（&lt;=105），即双方交锋的次数。随后N行，每行给出一次交锋的信息，即甲、乙双方同时给出的的手势。C代表“锤子”、J代表“剪刀”、B代表“布”，第1个字母代表甲方，第2个代表乙方，中间有1个空格。</p><p>【输出形式】</p><p>输出第1、2行分别给出甲、乙的胜、平、负次数，数字间以1个空格分隔。第3行给出两个字母，分别代表甲、乙获胜次数最多的手势，中间有1个空格。如果解不唯一，则输出按字母序最小的解。</p><p>【样例输入】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10</span><br><span class="line">C J</span><br><span class="line">J B</span><br><span class="line">C B</span><br><span class="line">B B</span><br><span class="line">B C</span><br><span class="line">C C</span><br><span class="line">C B</span><br><span class="line">J B</span><br><span class="line">B C</span><br><span class="line">J J</span><br></pre></td></tr></table></figure><p>【样例输出】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5 3 2</span><br><span class="line">2 3 5</span><br><span class="line">B B</span><br></pre></td></tr></table></figure>              </div>            </details><details cyan open><summary> 题解 </summary>              <div class='content'>              <p>又是一道统计的水题。。。</p>              </div>            </details><details red><summary> 代码 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">P</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> s=<span class="number">0</span>,f=<span class="number">0</span>,p=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> c=<span class="number">0</span>,j=<span class="number">0</span>,b=<span class="number">0</span>;</span><br><span class="line">&#125;a[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">        <span class="keyword">char</span> ch1,ch2;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;ch1&gt;&gt;ch2;</span><br><span class="line">        <span class="keyword">if</span>(ch1 == ch2)a[<span class="number">0</span>].p+=<span class="number">1</span>,a[<span class="number">1</span>].p+=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(ch1 == <span class="string">&#x27;C&#x27;</span> &amp;&amp; ch2 == <span class="string">&#x27;J&#x27;</span>)a[<span class="number">0</span>].s+=<span class="number">1</span>,a[<span class="number">1</span>].f+=<span class="number">1</span>,a[<span class="number">0</span>].c+=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(ch1 == <span class="string">&#x27;J&#x27;</span> &amp;&amp; ch2 == <span class="string">&#x27;B&#x27;</span>)a[<span class="number">0</span>].s+=<span class="number">1</span>,a[<span class="number">1</span>].f+=<span class="number">1</span>,a[<span class="number">0</span>].j+=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(ch1 == <span class="string">&#x27;B&#x27;</span> &amp;&amp; ch2 == <span class="string">&#x27;C&#x27;</span>)a[<span class="number">0</span>].s+=<span class="number">1</span>,a[<span class="number">1</span>].f+=<span class="number">1</span>,a[<span class="number">0</span>].b+=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(ch2 == <span class="string">&#x27;C&#x27;</span> &amp;&amp; ch1 == <span class="string">&#x27;J&#x27;</span>)a[<span class="number">1</span>].s+=<span class="number">1</span>,a[<span class="number">0</span>].f+=<span class="number">1</span>,a[<span class="number">1</span>].c+=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(ch2 == <span class="string">&#x27;J&#x27;</span> &amp;&amp; ch1 == <span class="string">&#x27;B&#x27;</span>)a[<span class="number">1</span>].s+=<span class="number">1</span>,a[<span class="number">0</span>].f+=<span class="number">1</span>,a[<span class="number">1</span>].j+=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(ch2 == <span class="string">&#x27;B&#x27;</span> &amp;&amp; ch1 == <span class="string">&#x27;C&#x27;</span>)a[<span class="number">1</span>].s+=<span class="number">1</span>,a[<span class="number">0</span>].f+=<span class="number">1</span>,a[<span class="number">1</span>].b+=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d %d\n&quot;</span>, a[<span class="number">0</span>].s,a[<span class="number">0</span>].p,a[<span class="number">0</span>].f);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d %d\n&quot;</span>, a[<span class="number">1</span>].s,a[<span class="number">1</span>].p,a[<span class="number">1</span>].f);</span><br><span class="line">    <span class="keyword">if</span>(a[<span class="number">0</span>].b&gt;=a[<span class="number">0</span>].c &amp;&amp; a[<span class="number">0</span>].b&gt;=a[<span class="number">0</span>].j)<span class="built_in">printf</span>(<span class="string">&quot;B &quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(a[<span class="number">0</span>].c&gt;a[<span class="number">0</span>].b &amp;&amp; a[<span class="number">0</span>].c&gt;=a[<span class="number">0</span>].j)<span class="built_in">printf</span>(<span class="string">&quot;C &quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;J &quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(a[<span class="number">1</span>].b&gt;=a[<span class="number">1</span>].c &amp;&amp; a[<span class="number">1</span>].b&gt;=a[<span class="number">1</span>].j)<span class="built_in">printf</span>(<span class="string">&quot;B &quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(a[<span class="number">1</span>].c&gt;a[<span class="number">0</span>].b &amp;&amp; a[<span class="number">1</span>].c&gt;=a[<span class="number">1</span>].j)<span class="built_in">printf</span>(<span class="string">&quot;C &quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;J &quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>              </div>            </details><hr><h1 id="21-新型冠状病毒（COVID19）传播"><a href="#21-新型冠状病毒（COVID19）传播" class="headerlink" title="21.新型冠状病毒（COVID19）传播"></a>21.新型冠状病毒（COVID19）传播</h1><details blue><summary> 题目 </summary>              <div class='content'>              <p>【问题描述】</p><pre><code>   然而，在大洋彼岸的 M 国，人们对COVID19并未引起足够重视，他们的领导人川建国同志甚至对居家隔离、戴口罩以及保持社交距离等措施非常不屑，该国疫情已经完全失控。   在一个风景秀丽的小镇，一天早上，有 N 名晨跑爱好者（编号 1 ～ N ）沿着优雅的江边景观道朝同一方向进行晨跑，第 i 名跑者从位置 Si 处起跑， 且其速度为 Vi。换句话说，对所有的实数 t ≥ 0，在时刻 t 时第 i 名跑者的位置为 Si + Vi ·t。    很不幸的是，其中一名跑者在 t = 0 的时刻感染了病毒，且是无症状感染者，这种病毒只会在同一时刻处在同一位置的跑者之间传播，新感染了病毒的跑者也会感染其他人，很显然，等待足够长的时间，那么病毒会感染 一些特定的跑者。   事后发现其中有一名跑者感染了新冠病毒，如果此人就是在 t = 0 时刻的那名感染者，那么，在 N 名晨跑爱好者中会有多少人感染新冠病毒？</code></pre><p>【输入形式】</p><pre><code>    输入包含三行：</code></pre><p> 第一行包含为两个整数 N 和 K，分别表示运动员的人数以及开始时感染了病毒的跑者编号。</p><p> 第二行包含 N 个正整数 S1、S2、…、SN，用空格隔开，分别表示跑者的起始位置。</p><p> 第三行包含 N 个正整数 V1、V2、…、VN，用空格隔开，分别表示跑者的速度。</p><p>【输出形式】</p><pre><code>     输出为一个整数，表示最终被感染人数。</code></pre><p>【样例输入】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6 3</span><br><span class="line">3 9 8 5 7 5</span><br><span class="line">6 6 5 4 6 3</span><br></pre></td></tr></table></figure><p>【样例输出】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><p>【样例说明】<br>【评分标准】</p><pre><code> 对于50%的评测用例，0 &lt; K ≤ N ≤ 10^2 对于70%的评测用例，0 &lt; K ≤ N ≤ 10^4 对于90%的评测用例，0 &lt; K ≤ N ≤ 10^6 对于100%的评测用例，0 &lt; K ≤ N ≤ 10^7</code></pre>              </div>            </details><details cyan open><summary> 题解 </summary>              <div class='content'>              <p>这题和第九题相对比较有思考量一点</p><p>找出所有感染者的思路较难，所以我们反向寻找，找到安全的人的数目。</p><p>而安全的人有什么特点呢？</p><p>我们将安全的人分为两个部分：一部分人初始位置小于零号感染者；另一部分人初始位置大于零号感染者。</p><p>初始位置小于零号感染者的人要想不被感染，其速度只能小于等于右边所有人的最小速度。因为我们将零号感染者看做在右边。右边速度最小的那个人一定会被零号感染者感染。而左边人的速度要是大于这个最小速度，那么也会被感染。</p><p>所以初始位置大于零号感染者的人要想不被感染，其速度只能大于等于左边所有人的最大速度。</p><p>然后就是各种代码了。你可以像我一样，直接以上面的思路直接模拟</p><p>也可以以速度作为第一关键字，位置作为第二关键字排序，然后找第一个位置大于零号等于位置的编号和最后一个位置小于等于零号位置的编号，这两个编号之间的人（包括编号对应人的本身）就是感染者（为什么？自行理解）</p>              </div>            </details><details red><summary> 代码 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">2</span>][<span class="number">10000005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,k;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i][j]);</span><br><span class="line">    <span class="keyword">int</span> num=n;</span><br><span class="line">    k--;</span><br><span class="line">    <span class="keyword">int</span> ma=<span class="number">0</span>,mi=<span class="number">99999999</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[<span class="number">0</span>][i]&lt;=a[<span class="number">0</span>][k])</span><br><span class="line">            ma=max(ma,a[<span class="number">1</span>][i]);</span><br><span class="line">        <span class="keyword">if</span>(a[<span class="number">0</span>][i]&gt;=a[<span class="number">0</span>][k])</span><br><span class="line">            mi=min(mi,a[<span class="number">1</span>][i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[<span class="number">0</span>][i]&lt;a[<span class="number">0</span>][k] &amp;&amp; a[<span class="number">1</span>][i]&lt;=mi)num--;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a[<span class="number">0</span>][i]&gt;a[<span class="number">0</span>][k] &amp;&amp; a[<span class="number">1</span>][i]&gt;=ma)num--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, num);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h1 id="结"><a href="#结" class="headerlink" title="结"></a>结</h1><p>第二周复盘结束。有什么问题可以评论留言</p>]]></content>
      
      
      <categories>
          
          <category> C++学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> CCF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HNU:小学期软件实训第一周（其实就是刷简单的CCF模拟题）</title>
      <link href="64980.html"/>
      <url>64980.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>一堆模拟题是真的好烦啊！！！！！</p><p>不过还是复习了一点点东西的，比如真正把map实操了，还有初步接触了下stringstream，第一次自己搓单链表……更重要的是在找回以前搞OI时的感觉吧（果然写题是永远是王道）</p><p>吐槽归吐槽，但这还是一篇正经的题解报告QAQ</p><p>另外说个开心的事，出人意料的数模校赛一等奖耶！（尽管没有第一轮就进答辩名单）</p><hr><p>本周作业让我感觉比较有收获的题（从高到低）：</p><p>10.内存管理（单链表写法）    8。买房与选房（思维）</p><hr><h1 id="1-众数"><a href="#1-众数" class="headerlink" title="1.众数"></a>1.众数</h1><details blue><summary> 题目 </summary>              <div class='content'>              <p>【问题描述】</p><p>一组数据中出现最多的数，称为众数。比如</p><p>1 2 3 3</p><p>众数为3。一组数据中也可能有多个众数，以最先出现的作为众数。比如</p><p>2 2 3 3</p><p>众数为2。</p><p>   问题是一组按升序排好的数据，指出它的众数。</p><p>【输入形式】</p><p>有多组测试数据（不超过100组测试数据）。</p><p>每组测试数据占两行，第一行是正整数N：表示这组测试数据中数据项数。</p><p>第二行是N个用空格隔开的正整数，表示这组测试数据的数据元素。每个数据元素都不大于10000。</p><p>N=0，表示输入结束，并且不需要处理。</p><p>40%的测试数据N 1 ≤N≤ 10；</p><p>30%的测试数据N 10 &lt; N≤ 100；</p><p>20%的测试数据N 100 &lt; N≤ 1000；</p><p>10%的测试数据N 1000 &lt; N≤ 10000；</p><p>【输出形式】</p><p>对于每组测试数据，输出一行包含一个正整数：对应的众数。</p><p>【样例输入】</p><p>4<br>1 2 3 3<br>4<br>2 2 3 3<br>0<br>【样例输出】</p><p>3<br>2</p>              </div>            </details><details cyan open><summary> 题解 </summary>              <div class='content'>              <p>很明显这题水分极高，排序都帮忙排好了。如果你想显得不是那么水的话，可以考虑直接一遍迭代</p><p>那如果想稳一点的话就随便用个桶排序原理再找最大即可。基于本题的数据量来讲map倒是不怎么需要用，开个10000大小的数组就行</p><p>桶排序原理：把数字看作桶的编号，然后遇到某个数字就往对应的桶kv[i]++即可。</p>              </div>            </details><details red><summary> 代码 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10001</span>]= &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n))&#123;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line"><span class="keyword">while</span>(n--)&#123;</span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;b);</span><br><span class="line">a[b]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> best = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10000</span>;i++)</span><br><span class="line"><span class="keyword">if</span>(a[i]&gt;a[best])best = i;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;best&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure>              </div>            </details><hr><h1 id="2-错误的里程表"><a href="#2-错误的里程表" class="headerlink" title="2.错误的里程表"></a>2.错误的里程表</h1><details blue><summary> 题目 </summary>              <div class='content'>              <p>【问题描述】</p><p>三月八日，小明买了台新车。但很快小明发现汽车的里程表有问题：里程表上每一位都不显示数字3和数字8，也就是说直接从数字2跳到数字4，直接从数字7跳到数字9。小明纳闷：这车到底行驶里程是多少。</p><p>现在，小明向你求助：根据里程表显示的数字，给出真实的行驶里程。</p><p>【输入形式】</p><p>输入有多组测试数据。</p><p>输入第一行正整数T，表示有多少组测试数据。</p><p>后面有T行，每行一个非负整数，表示里程表显示数字，里面不含有数字3和8。该数字不超过10位。</p><p>40%的测试数据组数T  10≤T≤ 102；</p><p>30%的测试数据组数T  102≤T≤ 103；</p><p>20%的测试数据组数T  103≤T≤ 104；</p><p>10%的测试数据组数T  104≤T≤ 105；</p><p>【输出形式】</p><p>对于每组测试数据，输出一个整数占一行：真实的行程里程。</p><p>【样例输入】</p><p>6<br>0<br>1<br>12<br>159<br>111224459<br>124567976<br>【样例输出】</p><p>0<br>1<br>10<br>103<br>19212007<br>21913077</p>              </div>            </details><details cyan open><summary> 题解 </summary>              <div class='content'>              <p>这题稍微转了个弯，其实就是0-10里面少了3和9，即变成了8个数字就进1</p><p>唉，这不就八进制嘛，简单！</p><p>那接下来就好办了，把这个看起来像十进制的八进制数变成正常的八进制数不就好了。也就是4-7都减去1，9则减去2。然后进行一次八进制求十进制操作就是答案啦！</p>              </div>            </details><details red><summary> 代码 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10001</span>]= &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">while</span>(n--)&#123;</span><br><span class="line"><span class="built_in">string</span> num;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;num;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> l = num.length();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;l;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(num[i]&gt;<span class="string">&#x27;8&#x27;</span>)ans=ans*<span class="number">8</span>+<span class="keyword">int</span>(num[i]-<span class="string">&#x27;0&#x27;</span>)<span class="number">-2</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(num[i]&gt;<span class="string">&#x27;3&#x27;</span>)ans=ans*<span class="number">8</span>+<span class="keyword">int</span>(num[i]-<span class="string">&#x27;0&#x27;</span>)<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span> ans=ans*<span class="number">8</span>+<span class="keyword">int</span>(num[i]-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>              </div>            </details><hr><h1 id="3-拳王阿里"><a href="#3-拳王阿里" class="headerlink" title="3.拳王阿里"></a>3.拳王阿里</h1><details blue><summary> 题目 </summary>              <div class='content'>              <p>【问题描述】</p><pre><code>   阿里是上个世纪美国最著名的拳击手，阿里在20年的时间里多次获得重量级拳王称号。不过不幸的是，他在之后患上了帕金森氏病。他参加了许多比赛，多到连自己都数不清了。有这么一段时间，他总是参加各种不同的比赛，以至于他自己也不知道从第一场比赛开始到最后一场比赛结束到底用了多长时间。他只记得比赛的第一天是星期几（S)，最后一场比赛的最后一天是星期几(E)。他还记得比赛的总天数（包括第一和最后一天）不少于L天，也不多于R天。给定S和E，能否唯一确定参加比赛总天数(包含该段时间内比赛间的间隔天数)？</code></pre><p>【输入形式】</p><pre><code>   输入的第一行包含一个整数T，代表测试数据的组数。接下来是 T 组数据。每组数据仅有一行，首先包含两个字符串S和E，然后包含两个整数L和R。• 1 ≤ T ≤ 10,000        1 ≤ L ≤ R ≤ 100• S, E ∈ {“monday”,“tuesday”,“wednesday”,“thursday”,“friday”,“saturday”, “sunday”}</code></pre><p>【输出形式】</p><pre><code>对于每组数据：</code></pre><p>如果不存在满足条件的天数，输出一行“impossible”；</p><p>如果存在多个满足条件的天数，输出一行“many”；</p><p>否则，输出一行，包含一个整数，代表唯一满足条件的天数。</p><p>【样例输入】</p><p>3<br>saturday sunday 2 4<br>monday wednesday 1 20<br>saturday sunday 3 5<br>【样例输出】</p><p>2<br>many<br>impossible</p>              </div>            </details><details cyan open><summary> 题解 </summary>              <div class='content'>              <p>这题也是一道暴力的题，确定一下合适的天数就行啦。</p><p>首先确定下这两个星期几总共包含了几天，然后对这个得到的天数不断自增7，看看有几次是在L-R里边</p><p>这边星期就可以用<code>map&lt;string, int&gt;</code>来减少代码量啦，可以直接星期对应数字，节约一点敲代码时间</p>              </div>            </details><details red><summary> 代码 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">string</span> s,e;</span><br><span class="line"><span class="keyword">int</span> l,r;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; a;</span><br><span class="line">a[<span class="string">&quot;monday&quot;</span>]=<span class="number">1</span>,a[<span class="string">&quot;tuesday&quot;</span>]=<span class="number">2</span>,a[<span class="string">&quot;wednesday&quot;</span>]=<span class="number">3</span>,a[<span class="string">&quot;thursday&quot;</span>]=<span class="number">4</span>,a[<span class="string">&quot;friday&quot;</span>]=<span class="number">5</span>,a[<span class="string">&quot;saturday&quot;</span>]=<span class="number">6</span>,a[<span class="string">&quot;sunday&quot;</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">while</span>(n--)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;s&gt;&gt;e&gt;&gt;l&gt;&gt;r;</span><br><span class="line"><span class="keyword">int</span> dweek=a[e]-a[s]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(dweek&lt;=<span class="number">0</span>)dweek+=<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(dweek&lt;l)&#123;dweek+=<span class="number">7</span>;<span class="keyword">continue</span>;&#125;</span><br><span class="line"><span class="keyword">if</span>(dweek&gt;r)<span class="keyword">break</span>;</span><br><span class="line">ans+=<span class="number">1</span>,dweek+=<span class="number">7</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ans==<span class="number">0</span>)<span class="built_in">printf</span>(<span class="string">&quot;impossible\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(ans==<span class="number">1</span>)<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,dweek<span class="number">-7</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;many\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>              </div>            </details><hr><h1 id="4-欧洲冠军联赛"><a href="#4-欧洲冠军联赛" class="headerlink" title="4.欧洲冠军联赛"></a>4.欧洲冠军联赛</h1><details blue><summary> 题目 </summary>              <div class='content'>              <p>【问题描述】</p><pre><code>   欧洲冠军联赛常被誉为全世界最具影响力的俱乐部级赛事。在比赛的小组赛阶段，欧洲的各个足球俱乐部被分为八个小组，每个小组中四支球队。每个小组中的球队按照如下规则排序：</code></pre><p>球队会根据比赛结果获得积分。一场比赛的双方被称为主队和客队。如果其中一方进球数多于另一方，那么进球较多的一方获得3 分，另一方获得0 分。如果双方打成平手，则各得1分。</p><p>球队的净胜球数是其进球数减去失球数（不考虑该球队在比赛中作为主队还是客队）。</p><p>积分较高的球队排名更加靠前。</p><p>如果两支球队积分相同，那么净胜球数较多的球队排名靠前。</p><pre><code>  小组的各队伍进行循环赛，即每两支球队之间进行两场比赛，双方交替作为主队。给定一个小组内12 场比赛的结果，请求出小组的出线队伍：即排名第一和第二的两支球队。</code></pre><p>保证答案唯一。</p><p>【输入形式】</p><pre><code>  输入的第一行包含一个整数T，代表测试数据的组数。接下来是 T 组数据。  每组数据共有12 行，每行描述一场比赛，格式为：“主队队名主队进球数vs. 客队进球数客队队名”，其中“主队队名”和“客队队名”为字符串，“主队进球数”和“客队进球数”为两球队在本场比赛中各自的进球数量。    </code></pre><p>1 ≤ T ≤ 50</p><p>球队队名仅包含小写英文字母</p><p>球队队名长度不超过10 个字符</p><p>0 ≤ 进球数 ≤ 100</p><p>【输出形式】</p><pre><code>   对于每组数据，输出一行，包含两个字符串，代表排名第一和第二的球队的队名。</code></pre><p>【样例输入】</p><p>2<br>manutd 8 vs. 2 arsenal<br>lyon 1 vs. 2 manutd<br>fcbarca 0 vs. 0 lyon<br>fcbarca 5 vs. 1 arsenal<br>manutd 3 vs. 1 fcbarca<br>arsenal 6 vs. 0 lyon<br>arsenal 0 vs. 0 manutd<br>manutd 4 vs. 2 lyon<br>arsenal 2 vs. 2 fcbarca<br>lyon 0 vs. 3 fcbarca<br>lyon 1 vs. 0 arsenal<br>fcbarca 0 vs. 1 manutd<br>a 3 vs. 0 b<br>a 0 vs. 0 c<br>a 0 vs. 0 d<br>b 0 vs. 0 a<br>b 4 vs. 0 c<br>b 0 vs. 0 d<br>c 0 vs. 0 a<br>c 0 vs. 0 b<br>c 1 vs. 0 d<br>d 3 vs. 0 a<br>d 0 vs. 0 b<br>d 0 vs. 0 c<br>【样例输出】</p><p>manutd fcbarca<br>d b<br>【样例说明】 </p><p>第一组数据：每支球队的积分与净胜球数分别为：</p><p>manutd：16 分，净胜球数12。</p><p>manutd：8 分，净胜球数 4。</p><p>manutd：5 分，净胜球数 −5。</p><p>manutd：4 分，净胜球数 −11。</p><p>第二组数据：每支球队的积分与净胜球数分别为：</p><p>d：7 分，净胜球数 2。</p><p>b：7 分，净胜球数 1。</p><p>a：7 分，净胜球数 0。</p><p>c：7 分，净胜球数 −3。</p><p>所有球队的积分相同，但是净胜球数较多的队伍排名更加靠前。</p>              </div>            </details><details cyan open><summary> 题解 </summary>              <div class='content'>              <p>从这题开始就有挺多要根据名字来查找信息的题目了。这边到下面都会用到一个技巧，用结构体数组来存取名字，然后用map来存储名字对应的下标，这样将名字和数组下标就构成了一个双向的对应表。</p><p>而除了这个就以下几个要点要搞定：</p><p>排序规则不能写错，确定一个队名是不是存过了之类的，至于净胜球这些细节样例说明已经很明显了，不懂就看代码吧。</p>              </div>            </details><details red><summary> 代码 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">t</span>&#123;</span></span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line"><span class="keyword">int</span> score=<span class="number">0</span>,ball=<span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(t a, t b)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a.score == b.score)<span class="keyword">return</span> a.ball&gt;b.ball;</span><br><span class="line"><span class="keyword">return</span> a.score&gt;b.score;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">while</span>(n--)&#123;</span><br><span class="line"><span class="built_in">string</span> team1,team2,pa;</span><br><span class="line"><span class="keyword">int</span> score1,score2,index=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; teamindex;</span><br><span class="line">t team[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">12</span>;i++)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;team1&gt;&gt;score1&gt;&gt;pa&gt;&gt;score2&gt;&gt;team2;</span><br><span class="line"><span class="keyword">if</span>(index&lt;<span class="number">4</span> &amp;&amp; teamindex.find(team1) == teamindex.end())&#123;</span><br><span class="line">team[index].name = team1;</span><br><span class="line">teamindex[team1] = index;</span><br><span class="line">index++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(index&lt;<span class="number">4</span> &amp;&amp; teamindex.find(team2) == teamindex.end())&#123;</span><br><span class="line">team[index].name = team2;</span><br><span class="line">teamindex[team2] = index;</span><br><span class="line">index++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> i1 = teamindex[team1], i2 = teamindex[team2];</span><br><span class="line"><span class="keyword">if</span>(score1 &gt; score2)&#123;</span><br><span class="line">team[i1].score+=<span class="number">3</span>;</span><br><span class="line">team[i1].ball+=score1-score2;</span><br><span class="line">team[i2].ball-=score1-score2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(score1 == score2)&#123;</span><br><span class="line">team[i1].score+=<span class="number">1</span>;</span><br><span class="line">team[i2].score+=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">team[i2].score+=<span class="number">3</span>;</span><br><span class="line">team[i1].ball+=score1-score2;</span><br><span class="line">team[i2].ball-=score1-score2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">sort(team, team+<span class="number">4</span>, cmp);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;team[<span class="number">0</span>].name&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;team[<span class="number">1</span>].name&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h1 id="5-合法的括号串"><a href="#5-合法的括号串" class="headerlink" title="5.合法的括号串"></a>5.合法的括号串</h1><details blue><summary> 题目 </summary>              <div class='content'>              <p>【问题描述】</p><p>一个合法的括号串，是指只包含括号的串，如果满足如下条件：</p><p>（1）&lt;&gt; () [] {} 这四对括号是合法的；</p><p>（2）如果r是合法括号串，则<r> (r) [r] {r}也是；</p><p>（3）如果r，s是合法括号串，则rs也是；</p><p>所以&lt;&lt;&gt;&gt; , [&lt;&gt;{}(())],[({&lt;&gt;})]是合法的括号串，而)(,[( ])就不是。</p><p>【输入形式】</p><p>输入第一行正整数t (10 ≤ n ≤ 100)，表示有多少组测试数据。</p><p>后面有t行，每行一个只包含8种括号符号的括号串。</p><p>40%的括号串的长度L 2 ≤ L≤ 20；</p><p>30%的括号串的长度L 2 ≤ L≤ 200；</p><p>20%的括号串的长度L 2 ≤ L≤ 2000；</p><p>10%的括号串的长度L 2 ≤ L≤ 20000；</p><p>【输出形式】</p><p>对于每组测试数据，如果括号串是合法的，输出“Yes”（输出没有引号）占一行，否则，输出“No”（输出没有引号）占一行。</p><p>【样例输入】</p><p>6<br>&lt;&lt;&gt;&gt;<br>)(<br>[&lt;&gt;{}(())]<br>[({&lt;&gt;})]<br>[(])<br>&lt;([{<br>【样例输出】</p><p>Yes<br>No<br>Yes<br>Yes<br>No<br>No</p>              </div>            </details><details cyan open><summary> 题解 </summary>              <div class='content'>              <p>学过栈(stack)的都知道，这是栈运用最最经典的题型了。</p><p>简单的说，就是遇到左括号就进栈，遇到右括号就判断一下栈顶元素，如果栈为空或者不是对应左括号就非法，否则出栈。</p><p>最后记得字符串都走完了要注意一下栈是否为空，最后是空的栈才能说明括号完全匹配，该括号串合法</p>              </div>            </details><details red><summary> 代码 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">while</span>(n--)&#123;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; s;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="keyword">bool</span> flag=<span class="literal">true</span>;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;str;</span><br><span class="line"><span class="keyword">int</span> l = str.length();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;l;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(str[i] == <span class="string">&#x27;(&#x27;</span> || str[i] == <span class="string">&#x27;[&#x27;</span> || str[i] == <span class="string">&#x27;&#123;&#x27;</span> || str[i] == <span class="string">&#x27;&lt;&#x27;</span>)s.push(str[i]);</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(s.empty() || (str[i]==<span class="string">&#x27;)&#x27;</span> &amp;&amp; s.top()!=<span class="string">&#x27;(&#x27;</span>) || (str[i]==<span class="string">&#x27;]&#x27;</span> &amp;&amp; s.top()!=<span class="string">&#x27;[&#x27;</span>) || (str[i]==<span class="string">&#x27;&#125;&#x27;</span> &amp;&amp; s.top()!=<span class="string">&#x27;&#123;&#x27;</span>) || (str[i]==<span class="string">&#x27;&gt;&#x27;</span> &amp;&amp; s.top()!=<span class="string">&#x27;&lt;&#x27;</span>))&#123;</span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> s.pop();</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">if</span>(s.empty() &amp;&amp; flag)<span class="built_in">printf</span>(<span class="string">&quot;Yes\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;No\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h1 id="6-世界杯来了"><a href="#6-世界杯来了" class="headerlink" title="6.世界杯来了"></a>6.世界杯来了</h1><details blue><summary> 题目 </summary>              <div class='content'>              <p>【问题描述】</p><pre><code>   2018年俄罗斯世界杯结束了，法国获得冠军，全世界球迷度过了一个非常愉快的夏天。作为中国球迷，不能总是看别人踢球，这不福利来了，根据FIFA（国际足联）及全体成员协会的一致决定，2118年世界杯将在中国举办，作为东道主，中国队将无需参加预选赛而直接参加决赛阶段的比赛。</code></pre><p>   比赛规则如下：</p><p>总共n（n为偶数）个球队参加比赛</p><p>按照分组赛积分排名，前n/2的球队进入淘汰赛</p><p>积分排名的规则如下：球队获胜得3分，平局得1分，失利得0分，按照积分递减、净胜球递减以及进球数递减方式排名</p><p>编写一个程序，根据给出的参赛队伍名单和所有比赛的结果，找出成功进入淘汰赛阶段的球队名单。</p><p>【输入形式】</p><pre><code>   第一行输入包含唯一整数n(1&lt;=n&lt;=50)，参加世界杯决赛的球队数量。接下来的n行是各球队的名字，为长度不超过30个字符的英文字符。接下来的n*(n-1)/2行，每行格式name1-name2 num1:num2（0&lt;=num1, num2&lt;=100），表示对阵球队及比分. </code></pre><p>【输出形式】</p><pre><code>   输入n/2行，表示进入淘汰赛阶段的球队，按照字典序进行排列，每个球队名字占一行。</code></pre><p>【样例输入】</p><p>4<br>A<br>B<br>C<br>D<br>A-B 1:1<br>A-C 2:2<br>A-D 1:0<br>B-C 1:0<br>B-D 0:3<br>C-D 0:3</p><p>【样例输出】</p><p>A<br>D</p>              </div>            </details><details cyan open><summary> 题解 </summary>              <div class='content'>              <p>这题的字符串切割我写复杂了，其实直接find一下就行。</p><p>其实这题和第四题大体上是一样的，不过这里需要注意的是排序。先按常规排序之后再对前n/2个队伍以名字为依据排序（不会吧不会吧，不会还有人不知道字符串可以直接比大小的吗）</p>              </div>            </details><details red><summary> 代码 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">t</span>&#123;</span></span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line"><span class="keyword">int</span> score=<span class="number">0</span>,ball=<span class="number">0</span>,v=<span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp1</span><span class="params">(t a, t b)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a.score == b.score)</span><br><span class="line"><span class="keyword">if</span>(a.ball==b.ball)<span class="keyword">return</span> a.v&gt;b.v;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> a.ball&gt;b.ball;</span><br><span class="line"><span class="keyword">return</span> a.score&gt;b.score;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp2</span><span class="params">(t a, t b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.name&lt;b.name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">split</span><span class="params">(<span class="built_in">string</span> s, <span class="keyword">char</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> l=s.length();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;l;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(s[i]==r)<span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">p</span><span class="params">(<span class="built_in">string</span> s, <span class="keyword">int</span> begin, <span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line"><span class="built_in">string</span> res=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=begin;i&lt;end;i++)&#123;</span><br><span class="line">res+=s[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">change</span><span class="params">(<span class="built_in">string</span> num)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> res=<span class="number">0</span>,l=num.length();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;l;i++)res=res*<span class="number">10</span>+<span class="keyword">int</span>(num[i]-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="built_in">string</span> sname;</span><br><span class="line">t team[<span class="number">50</span>];</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; teamindex;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;sname;</span><br><span class="line">teamindex[sname] = i;</span><br><span class="line">team[i].name = sname;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> all = n*(n<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;all;i++)&#123;</span><br><span class="line"><span class="built_in">string</span> s1,s2;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;s1&gt;&gt;s2;</span><br><span class="line"><span class="keyword">int</span> pos = split(s1, <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line"><span class="built_in">string</span> team1 = p(s1, <span class="number">0</span>, pos);</span><br><span class="line"><span class="built_in">string</span> team2 = p(s1, pos+<span class="number">1</span>, s1.length());</span><br><span class="line">pos = split(s2, <span class="string">&#x27;:&#x27;</span>);</span><br><span class="line"><span class="keyword">int</span> score1 = change(p(s2, <span class="number">0</span>, pos));</span><br><span class="line"><span class="keyword">int</span> score2 = change(p(s2, pos+<span class="number">1</span>, s2.length()));</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i1 = teamindex[team1], i2 = teamindex[team2];</span><br><span class="line">team[i1].v+=score1;</span><br><span class="line">team[i2].v+=score2;</span><br><span class="line"><span class="keyword">if</span>(score1 &gt; score2)&#123;</span><br><span class="line">team[i1].score+=<span class="number">3</span>;</span><br><span class="line">team[i1].ball+=score1-score2;</span><br><span class="line">team[i2].ball-=score1-score2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(score1 == score2)&#123;</span><br><span class="line">team[i1].score+=<span class="number">1</span>;</span><br><span class="line">team[i2].score+=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">team[i2].score+=<span class="number">3</span>;</span><br><span class="line">team[i1].ball+=score1-score2;</span><br><span class="line">team[i2].ball-=score1-score2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">sort(team, team+n, cmp1);</span><br><span class="line">sort(team, team+n/<span class="number">2</span>, cmp2);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n/<span class="number">2</span>;i++)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;team[i].name&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h1 id="7-F1方程式冠军"><a href="#7-F1方程式冠军" class="headerlink" title="7.F1方程式冠军"></a>7.F1方程式冠军</h1><details blue><summary> 题目 </summary>              <div class='content'>              <p>【问题描述】</p><p>  一级方程式F1锦标赛由一系列称为大奖赛的分站赛组成。每一场比赛的车手都根据他们的最后位置获得积分。只有前10名车手按以下顺序获得分数：25、18、15、12、10、8、6、4、2、1。在锦标赛结束时，得分最多的车手是冠军。如果有平分，则冠军是赢的最多的人（即排位第一）。如果还是平分，则选择得到排位第二最多的人，依此类推，直到没有更多的排位进行比较。</p><p>  后来又提出了另一个得分制度，其中冠军是赢的最多的。如果有平手，冠军是得分最多的。如果仍然存在平手，则按原来的得分制度进行，即比较第二、第三、第四、…排位的次数。</p><p>  在本赛季，你会得到所有比赛的结果，你将根据两个得分系统来分别确定冠军。数据保证两套系统都能得到唯一的冠军。</p><p>【输入形式】</p><p>  第一行一个整数t（1&lt;=t&lt;=20），t是分站赛的场次数。之后是每个分站赛的最终排位情况，每个的第一行一个整数n(1&lt;=n&lt;=100)表示排位车手人数，之后n行按排位列出车手的名字，排位从第一到最后，车手的名字为长度不超过50的英文字符，大小写区分。<br>【输出形式】、</p><p>  输出为两行，第一行为按照原始规则确定的冠军，第二行是按照可选规则确定的冠军。</p><p>【样例输入】</p><p>3<br>3<br>apple<br>banana<br>pear<br>2<br>pear<br>banana<br>2<br>apple<br>banana</p><p>【样例输出】</p><p>banana<br>apple</p>              </div>            </details><details cyan open><summary> 题解 </summary>              <div class='content'>              <p>跟第四，第六题一样，录名字，算分数，排序。不过这里有个小坑需要注意一下，这里的排名不止计算到第十名，也就是说排序比较同一排名次数时是得一直往下比直到比出结果的（这个坑了我一个点）</p>              </div>            </details><details red><summary> 代码 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">players</span>&#123;</span></span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line"><span class="keyword">int</span> rank[<span class="number">100</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> score=<span class="number">0</span>;</span><br><span class="line">&#125;player[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> rankscore[<span class="number">10</span>] = &#123;<span class="number">25</span>, <span class="number">18</span>, <span class="number">15</span>, <span class="number">12</span>, <span class="number">10</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp1</span><span class="params">(players a, players b)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a.score==b.score)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a.rank[i]!=b.rank[i])</span><br><span class="line"><span class="keyword">return</span> a.rank[i]&gt;b.rank[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> a.score&gt;b.score;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp2</span><span class="params">(players a, players b)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a.rank[<span class="number">0</span>]==b.rank[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">if</span>(a.score!=b.score)</span><br><span class="line"><span class="keyword">return</span> a.score&gt;b.score;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a.rank[i]!=b.rank[i])</span><br><span class="line"><span class="keyword">return</span> a.rank[i]&gt;b.rank[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> a.rank[<span class="number">0</span>]&gt;b.rank[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t,index=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t);</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; playerindex;</span><br><span class="line"><span class="keyword">while</span>(t--)&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;name;</span><br><span class="line"><span class="keyword">if</span>(playerindex.find(name)==playerindex.end())&#123;</span><br><span class="line">player[index].name = name;</span><br><span class="line"><span class="built_in">memset</span>(player[index].rank, <span class="number">0</span>, <span class="keyword">sizeof</span>(player[index].rank));</span><br><span class="line">playerindex[name] = index++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> id = playerindex[name];</span><br><span class="line">player[id].rank[i]++;</span><br><span class="line">player[id].score+=rankscore[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sort(player, player+index, cmp1);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;player[<span class="number">0</span>].name&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">sort(player, player+index, cmp2);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;player[<span class="number">0</span>].name&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>              </div>            </details><hr><h1 id="8-买房与选房"><a href="#8-买房与选房" class="headerlink" title="8.买房与选房"></a>8.买房与选房</h1><details blue><summary> 题目 </summary>              <div class='content'>              <p>【问题描述】</p><pre><code>   在 X 国许多一线城市住房非常紧张，政府部门制定了相关的政策，重点满足住房刚性需求（住房面积为0，社保缴纳必须超过2年），然后才能照顾改善性需求（住房面积大于0）。   具体的原则为：</code></pre><p>对于刚性需求，缴纳社保月数多者优先</p><p>对于改善性需求，现有自有住房面积小者优先</p><pre><code>   由于房源有限，为公平起见，开发商在不违背上述原则下特意指定同等条件下申报时间同时作为排队的条件，时间越早优先级越高。   最近有一批新楼盘准备开盘，总共有 m （≤1000）套房，所有的网上申报工作都已经完成并保存到二进制文件house.bin中，申请者提交了自己的基本材料，格式为：身份证号（18位，加1位空字符&#39;\0&#39;，共19位）、社保缴纳月数、自有住房面积、申报时间(格式为：MM-DD-YYYY，10位字符串，加1位空字符&#39;\0&#39;，共11位)，社保缴纳月数、自有住房面积均为整数，文件最后为总报名人数 n（≤105）。   申请者可以通过身份证号查询最终的结果。   </code></pre><p>【输入形式】</p><pre><code>   输入的第一行为两个正整数 m（≤1000）和 T （ T ≤ n ），分别表示本次开盘的楼盘可供申请的套数以及查询的组数   接下来的 T 行，每行为一个18位的字符串，表示需要查询的身份证号</code></pre><p>【输出形式】</p><pre><code>   输出为 T 行，对应每个查询的输出结果：   1. 申请者不符合购房条件或排位超出了所推出的房源数量不能中签，则输出&quot;Sorry&quot;;   2. 申请者符合购房条件，且该名次人数为1人，则直接输出一个整数，表示选房顺序号;   3. 申请者符合购房条件，且该名次人数有多人，同时人数不大于所剩房源数量，则直接输出用空格分隔的两个整数，表示选房顺序号区间;   4. 申请者符合购房条件，且该名次人数有多人，同时人数大于所剩房源数量，则输出用/分隔两个整数，如 A/B，表示 B 人中选 A 人，选房顺序为排名倒数 A 名范围。</code></pre><p>【样例输入】</p><p>9 6<br>350102200609166049<br>350102200609163286<br>250342323545313434<br>130502201805070787<br>110101196003074525<br>430102201102181455<br>【样例输出】</p><p>2<br>3 4<br>Sorry<br>6<br>2/3<br>Sorry<br>【代码框架】</p><p>建议复制以下代码框架， 在此基础上完成本题需求。此建议不是必须，你可以忽略。</p><p>#include <iostream></p><p>using namespace std;</p><p>struct people</p><p>{</p><pre><code>char id[19];                  /* 身份证号码 */int social;                     /* 社保缴纳月数 */int area;                       /* 现有住房面积 */char date[11];              /* 申报日期 */</code></pre><p>};</p><p>people* getMess(int &amp;n);</p><p>int main()</p><p>{</p><pre><code>people *person;          /* 指向所有报名人的基本资料首地址，通过调用函数getMess获取 */     int n;                            /* n为报名人数，通过调用函数getMess获取 */person=getMess(n);// ...return 0;</code></pre><p>}</p><p>people* getMess(int &amp;n)            /* 将文件数据读入内存 */</p><p>{</p><pre><code>FILE *fp;fp=fopen(&quot;house.bin&quot;,&quot;rb&quot;);fseek(fp,-1*(long)sizeof(int), 2);fread(&amp;n, sizeof(int),1, fp);rewind(fp);people *tmp=new people[n];fread(tmp, sizeof(people), n, fp);fclose(fp);return tmp;</code></pre><p>}</p><p>【测试用例说明】</p><p>  10%的用例无同等条件的数据，30%的用例只有刚性需求，20%的用例只有改善性需求。   </p>              </div>            </details><details cyan open><summary> 题解 </summary>              <div class='content'>              <p>这题算是栽了，被前面的题目直接名字下标两两对应给套了进去QAQ，然后想着记录下标完再排完排名赋值后再根据下标重排。。。然后改了结构体，然后数据读入出错，然后两小时白给~</p><p>这题其实是应该先排序再做两两对应处理，然后开始查询需要查询的id对应排名，找这个排名的上下界。如果上界在m后或者这人没地社保没交够还想白嫖直接sorry；其它情况下如果上下界相等就是唯一解；如果下界在m前就是稳了，输出上下界；如果排名刚好卡在那就很难受，概率是（m-l+1)/(r-l+1)，按题目说的就不用约分啦。</p><p>另外这题还让我知道了，原来<code>lower_bound</code>和<code>upper_bound</code>也可以加cmp参数QAQ</p>              </div>            </details><details red><summary> 代码 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">people</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> id[<span class="number">19</span>];                  <span class="comment">/* 身份证号码 */</span></span><br><span class="line">    <span class="keyword">int</span> social;                     <span class="comment">/* 社保缴纳月数 */</span></span><br><span class="line">    <span class="keyword">int</span> area;                       <span class="comment">/* 现有住房面积 */</span></span><br><span class="line">    <span class="keyword">char</span> date[<span class="number">11</span>];              <span class="comment">/* 申报日期 */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">people* <span class="title">getMess</span><span class="params">(<span class="keyword">int</span> &amp;n)</span></span>&#123;            <span class="comment">/* 将文件数据读入内存 */</span></span><br><span class="line">    FILE *fp;</span><br><span class="line">    fp=fopen(<span class="string">&quot;house.bin&quot;</span>,<span class="string">&quot;rb&quot;</span>);</span><br><span class="line">    fseek(fp,<span class="number">-1</span>*(<span class="keyword">long</span>)<span class="keyword">sizeof</span>(<span class="keyword">int</span>), <span class="number">2</span>);</span><br><span class="line">    fread(&amp;n, <span class="keyword">sizeof</span>(<span class="keyword">int</span>),<span class="number">1</span>, fp);</span><br><span class="line">    rewind(fp);</span><br><span class="line">    people *tmp=<span class="keyword">new</span> people[n];</span><br><span class="line">    fread(tmp, <span class="keyword">sizeof</span>(people), n, fp);</span><br><span class="line">    fclose(fp);</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(people a, people b)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a.area==<span class="number">0</span> &amp;&amp; a.social&lt;=<span class="number">24</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(b.area==<span class="number">0</span> &amp;&amp; b.social&lt;=<span class="number">24</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(a.area==<span class="number">0</span> &amp;&amp; b.area==<span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span>(a.social!=b.social)</span><br><span class="line"><span class="keyword">return</span> a.social&gt;b.social;</span><br><span class="line"><span class="keyword">if</span>(a.area!=b.area)</span><br><span class="line"><span class="keyword">return</span> a.area&lt;b.area;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">6</span>;i&lt;<span class="number">10</span>;++i)</span><br><span class="line">    <span class="keyword">if</span>(a.date[i]!=b.date[i])<span class="keyword">return</span> a.date[i]&lt;b.date[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;++i)</span><br><span class="line">       <span class="keyword">if</span>(a.date[i]!=b.date[i])<span class="keyword">return</span> a.date[i]&lt;b.date[i];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;<span class="number">5</span>;++i)</span><br><span class="line">        <span class="keyword">if</span>(a.date[i]!=b.date[i])<span class="keyword">return</span> a.date[i]&lt;b.date[i];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    people *person;          <span class="comment">/* 指向所有报名人的基本资料首地址，通过调用函数getMess获取 */</span>     </span><br><span class="line">    <span class="keyword">int</span> n;                            <span class="comment">/* n为报名人数，通过调用函数getMess获取 */</span></span><br><span class="line">    person=getMess(n);</span><br><span class="line">    </span><br><span class="line">sort(person, person+n, cmp);</span><br><span class="line"><span class="comment">//for(int i=0;i&lt;n;i++) cout&lt;&lt;person[i].id&lt;&lt;&quot; &quot;&lt;&lt;person[i].area&lt;&lt;&quot; &quot;&lt;&lt;person[i].social&lt;&lt;&quot; &quot;&lt;&lt;person[i].date&lt;&lt;endl;</span></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; id2pos;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="built_in">string</span> s = person[i].id;</span><br><span class="line">id2pos[s] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m,t;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;m,&amp;t); </span><br><span class="line"><span class="keyword">while</span>(t--)&#123;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line"><span class="keyword">int</span> pos = id2pos[s];</span><br><span class="line"><span class="keyword">int</span> l=lower_bound(person, person+n, person[pos], cmp)-person+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> r=upper_bound(person, person+n, person[pos], cmp)-person;</span><br><span class="line"><span class="keyword">if</span>((person[pos].area==<span class="number">0</span> &amp;&amp; person[pos].social&lt;=<span class="number">24</span>) || l&gt;m)<span class="built_in">printf</span>(<span class="string">&quot;Sorry\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(l == r)<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, l);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(r &lt;= m)<span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, l, r);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d/%d\n&quot;</span>, m-l+<span class="number">1</span>, r-l+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h1 id="9-二叉树遍历，从前序、中序到后序"><a href="#9-二叉树遍历，从前序、中序到后序" class="headerlink" title="9.二叉树遍历，从前序、中序到后序"></a>9.二叉树遍历，从前序、中序到后序</h1><details blue><summary> 题目 </summary>              <div class='content'>              <p>【问题描述】</p><p>二叉树是一种非常重要的数据结构，非常多其他数据结构都是基于二叉树的基础演变而来的。对于二叉树，深度遍历有前序、中序以及后序三种遍历方法。</p><p>三种基本的遍历思想为：</p><p>前序遍历：根结点 —&gt; 左子树 —&gt; 右子树</p><p>中序遍历：左子树—&gt; 根结点 —&gt; 右子树</p><p>后序遍历：左子树 —&gt; 右子树 —&gt; 根结点</p><p>比如，求以下二叉树的各种遍历</p><p>hhh.png</p><p>前序遍历：1  2  4  5  7  8  3  6 </p><p>中序遍历：4  2  7  5  8  1  3  6</p><p>后序遍历：4  7  8  5  2  6  3  1</p><p>需要你编写程序解决的问题是：已知一个二叉树的前序遍历和中序遍历的结果，给出该二叉树的后序遍历的结果。</p><p>【输入形式】</p><p>有多组测试数据，每组测试数据三行，每组测试数据第一行只有一个正整数n，表示二叉树节点的数目，n=0意味着输入结束并且不需要处理。</p><p>每组测试数据第二行是二叉树的前序遍历的结果，是一个长度为n的字符串，每个节点由一个字符表示，字符是大小写英文字母及10个数字,不同的节点用不同的字符表示，也即无论前序遍历和中序遍历的字符串中没有重复的字符。</p><p>每组测试数据第二行是二叉树的中序遍历的结果，也是一个长度为n的字符串。</p><p>40%的测试数据1 ≤ n≤ 10；</p><p>30%的测试数据1 ≤ n≤ 20；</p><p>20%的测试数据1 ≤ n≤ 40；</p><p>10%的测试数据1 ≤ n≤ 62；</p><p>【输出形式】</p><p>对于每组测试数据，输出一行，是一个长度为n的字符串，表示二叉树后序遍历的结果。</p><p>【样例输入】</p><p>8<br>12457836<br>42758136<br>4<br>abcd<br>abcd<br>4<br>abcd<br>dcba<br>0<br>【样例输出】</p><p>47852631<br>dcba<br>dcba</p>              </div>            </details><details cyan open><summary> 题解 </summary>              <div class='content'>              <p>这题啊，二叉树的经典题。要解决也就只需要知道什么是前中后序遍历， 然后知道原理找找数据规律就有了</p><p>前中后序遍历使用递归做的，那求它当然是递归啦！</p>              </div>            </details><details red><summary> 代码 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="built_in">string</span> s1,<span class="built_in">string</span> s2,<span class="keyword">int</span> now,<span class="keyword">int</span> start,<span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(start&gt;=end)<span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=start;i&lt;end;i++)</span><br><span class="line"><span class="keyword">if</span>(s2[i]==s1[now])<span class="keyword">break</span>;</span><br><span class="line">f(s1,s2,now+<span class="number">1</span>,start,i);</span><br><span class="line">f(s1,s2,now+<span class="number">1</span>+(i-start),i+<span class="number">1</span>,end);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;s1[now];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n) &amp;&amp; n)&#123;</span><br><span class="line"><span class="built_in">string</span> s1,s2;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;s1&gt;&gt;s2;</span><br><span class="line">f(s1,s2,<span class="number">0</span>,<span class="number">0</span>,n);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>              </div>            </details><hr><h1 id="10-内存管理"><a href="#10-内存管理" class="headerlink" title="10.内存管理"></a>10.内存管理</h1><details blue><summary> 题目 </summary>              <div class='content'>              <p>【问题描述】</p><pre><code>   离第一个操作系统HNU-OS发布已经没有多少时间了，但它的一些组件还没有完成，内存管理器就是其中之一。根据开发人员的计划，在第一个版本中，内存管理器将非常简单和直观。它将支持三个操作： </code></pre><p>alloc n —— 分配n个字节内存，返回已分配块的正整数标识符x(x初始值为0，每次分配增长1)</p><p>erase x —— 删除标识符x所在的块</p><p>defragment —— 整理空余内存碎片，将所有块尽量靠近内存的开始位置，并保持各自的顺序</p><pre><code>   在此情况下，内存模型非常简单，它是一个m字节的序列，为了方便起见，从第一个字节到第m字节进行编号。   第一个操作alloc n有一个参数n，表示被分配的内存块大小。在处理此操作时，内存中将分配n个连续字节的空闲块。 如果这些块的数量超过一个，则优先选择最接近内存开始(即第一个字节)的块。 所有这些字节都被标记为非空闲，内存管理器返回一个32位整数数字令牌，代表该块的标识符。 如果不可能分配这样大小的空闲块，则返回NULL。   第二个操作erase x以x为参数，表示某个块的标识符。此操作释放系统内存，将此块的字节标记为空闲以供进一步使用。 如果此标识符没有指向先前分配的块(该块尚未被释放)，则返回ILLEGAL_ERASE_ARGUMENT。   最后一个操作defragment没有任何参数，只会使占用的内存部分更接近内存的开始，而不会更改它们各自的顺序。    在当前的实现中，将使用从1开始的连续整数作为标识符。每个成功的alloc操作过程都应该返回接下来的编号。不成功的alloc操作不影响计数。    编写内存管理器的实现，为每个alloc命令输出返回的值，为所有失败的erase命令输出ILLEGAL_ERASE_ARGUMENT。 </code></pre><p>【输入形式】</p><pre><code>   输入数据的第一行包含两个正整数t和m（1&lt;=t&lt;=500, 1&lt;=m&lt;=105)，其中t表示需要内存管理器来处理的操作个数，m表示有效的内存字节大小。接下来的t行每一行代表一个操作。</code></pre><p>【输出形式】</p><pre><code>   输出有多行，每行或者是alloc操作的结果，或者是失败的erase操作的结果ILLEGAL_ERASE_ARGUMENT。其顺序与输入的操作次序一致。</code></pre><p>【样例输入】</p><p>6 10<br>alloc 5<br>alloc 3<br>erase 1<br>alloc 6<br>defragment<br>alloc 6</p><p>【样例输出】</p><p>1<br>2<br>NULL<br>3</p>              </div>            </details><details cyan open><summary> 题解 </summary>              <div class='content'>              <p>HNU-OS可还行……这题实际上用一个长度为m的数组模拟就能过（可能是数据太小了，我写这题的时候构建了一个很极端的数据应该能让这种做法妥妥超时）</p><p>然后我感觉应该用单链表写这题（理论上来讲这题的最优解应该也是单链表），从来没写过单链表的我（只记得原理）硬生生搓了个单链表出来A了这题</p><p>所以这里我不讲暴力模拟的做法，来讲讲单链表的解法（这21道题对我来说意义最大的也是这题）</p><p>开始时我们可以把整个长度看作是一个长度为m，未被占用的块，其id（标识符）不记。对于每个块，无论它是否被使用，都记为单链表的一个节点；</p><p>然后康康它给的三个操作：</p><ul><li>alloc n —— 分配n个字节内存，返回已分配块的正整数标识符x(x初始值为0，每次分配增长1)</li></ul><blockquote><p>这个操作可以将以前已经清除掉且长度合适的空块重新分配。因为不一定是最后的那段。好在我们把未分配也看作成一个空块，与被释放内存的块无本质上的差别。<br>所以这个操作转化成，从头到尾查询第一个可以被插入的空块</p><ul><li>1，假设这个合适的空块长度为l<br>于是乎这个空块不再是空块了，它就被占用了，长度变为了n，有了自己的id——标识符；那如果不是那么刚刚好分配，剩下了l-n呢？我们在这个块的后边插入一个长度为l-n的空块</li><li>2，如果没有合适的空块呢？<br>那当然是返回NULL啊~ </li></ul></blockquote><ul><li>erase x —— 删除标识符x所在的块</li></ul><blockquote><p>这个操作看起来像简单的修改单链表的一个节点的数据，这听起来很容易，然而：<br>如果这个块的前后是空块呢？如果我们不进行合并，那么加alloc操作时遇到了一堆连续的空块，把他们加起来可插入但又无法插入其中的第一个时（插入到后面的会导致顺序出错）就很难受了</p><ul><li>所以在把这个块变成空块之后，要进行前后是否是空块的检验与合并<br>记得变成空块不是只改个占用状态，还要清掉id哦！当然找不到标识符x所在的块时记得返回ILLEGAL_ERASE_ARGUMENT</li></ul></blockquote><ul><li>defragment —— 整理空余内存碎片，将所有块尽量靠近内存的开始位置，并保持各自的顺序</li></ul><blockquote><p>这个操作很明显转换成了，删除单链表中所有的空块，记录长度和l，然后在单链表最后插入一个长度为l的空块</p></blockquote><p>这题里面单链表的时间复杂度和空间复杂度无疑是非常优秀的，在痛心疾首我为什么不先试试暴力的同时窃喜第一次用到了单链表。单链表考一堆细节逻辑操作，我能用单链表把它写出来就很高兴了。</p>              </div>            </details><details red><summary> 代码 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> id;</span><br><span class="line"><span class="keyword">bool</span> used = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">int</span> l=<span class="number">0</span>;</span><br><span class="line">node *next;</span><br><span class="line">&#125;*head, *p, *r;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t,m;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;t, &amp;m);</span><br><span class="line">head = <span class="keyword">new</span> node;</span><br><span class="line">p = <span class="keyword">new</span> node;</span><br><span class="line">head-&gt;next = p;</span><br><span class="line">p-&gt;l = m;</span><br><span class="line">p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,nownum=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(t--)&#123;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line"><span class="keyword">if</span>(s==<span class="string">&quot;alloc&quot;</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">r = head;</span><br><span class="line"><span class="keyword">while</span>(r-&gt;next != <span class="literal">NULL</span>)&#123;</span><br><span class="line">p = r-&gt;next;</span><br><span class="line"><span class="keyword">if</span>(!p-&gt;used &amp;&amp; p-&gt;l&gt;=n)&#123;</span><br><span class="line"><span class="keyword">if</span>(p-&gt;l - n != <span class="number">0</span>)&#123;</span><br><span class="line">node *newnode;</span><br><span class="line">newnode = <span class="keyword">new</span> node;</span><br><span class="line">newnode-&gt;next = p-&gt;next;</span><br><span class="line">newnode-&gt;l = p-&gt;l - n;</span><br><span class="line">p-&gt;next = newnode; </span><br><span class="line">&#125;</span><br><span class="line">p-&gt;id = ++x;</span><br><span class="line">p-&gt;l = n;</span><br><span class="line">p-&gt;used = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">r = p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(r-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;NULL\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s==<span class="string">&quot;erase&quot;</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">r = head;</span><br><span class="line"><span class="keyword">while</span>(r-&gt;next != <span class="literal">NULL</span>)&#123;</span><br><span class="line">p = r-&gt;next;</span><br><span class="line"><span class="keyword">if</span>(p-&gt;id == n)<span class="keyword">break</span>;</span><br><span class="line">r = p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(r-&gt;next == <span class="literal">NULL</span> <span class="keyword">or</span> !p-&gt;used)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ILLEGAL_ERASE_ARGUMENT\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">p-&gt;used = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span>(p-&gt;next != <span class="literal">NULL</span>)&#123;</span><br><span class="line">node *q;</span><br><span class="line">q = p-&gt;next;</span><br><span class="line"><span class="keyword">if</span>(!q-&gt;used)&#123;</span><br><span class="line">p-&gt;next = q-&gt;next;</span><br><span class="line">p-&gt;l += q-&gt;l;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(r != head)&#123;</span><br><span class="line"><span class="keyword">if</span>(!r-&gt;used)&#123;</span><br><span class="line">r-&gt;next = p-&gt;next;</span><br><span class="line">r-&gt;l += p-&gt;l;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">int</span> k=<span class="number">0</span>;</span><br><span class="line">r = head;</span><br><span class="line"><span class="keyword">while</span>(r-&gt;next != <span class="literal">NULL</span>)&#123;</span><br><span class="line">p = r-&gt;next;</span><br><span class="line"><span class="keyword">if</span>(!p-&gt;used)&#123;</span><br><span class="line">r-&gt;next = p-&gt;next;</span><br><span class="line">k += p-&gt;l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(r-&gt;next == <span class="literal">NULL</span>)<span class="keyword">break</span>;</span><br><span class="line">r = p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(k!=<span class="number">0</span>)&#123;</span><br><span class="line">node *newnode;</span><br><span class="line">newnode = <span class="keyword">new</span> node;</span><br><span class="line">r-&gt;next = newnode;</span><br><span class="line">newnode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">newnode-&gt;l = k;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>              </div>            </details><hr><h1 id="11-平均方差"><a href="#11-平均方差" class="headerlink" title="11.平均方差"></a>11.平均方差</h1><details blue><summary> 题目 </summary>              <div class='content'>              <p>【问题描述】</p><p>一个数列的平均方差是指数列中的每个元素与数列的平均值的差的平方和的平均值，比如下面数列：</p><p>1 2 3 4 5 6 7</p><p>其平均值为4，每个元素与平均值的差的平方为</p><p>9 4 1 0 1 4 9</p><p>其平方和为28，所以该数列的平均方差为4。</p><p>对给定的数列，求出其平均方差。</p><p>【输入形式】</p><p>有多组测试数据。</p><p>每组测试数据第一行是一个正整数N，表示数列中元素个数，接下来一行N个用空格分隔开的正整数，表示数列的N个元素，每个元素的值都是不大于500的正整数。</p><p>N=0表示输入结束，并且不需要处理。</p><p>40%的数列元素个数N 1 ≤ N≤ 10；</p><p>30%的数列元素个数N 1 ≤ N≤ 100；</p><p>20%的数列元素个数N 1 ≤ N≤ 1000；</p><p>10%的数列元素个数N 1 ≤ N≤ 10000；</p><p>【输出形式】</p><p>对于每组测试数据，输出一个整数：平均方差。平均方差不是整数的，输出其向下取整的整数。比如平均方差是4.5，输出4。</p><p>【样例输入】</p><p>7<br>1 2 3 4 5 6 7<br>4<br>1 2 3 4<br>0<br>【样例输出】</p><p>4<br>1</p>              </div>            </details><details cyan open><summary> 题解 </summary>              <div class='content'>              <p>emmm，水题，没什么好讲的，过吧。</p>              </div>            </details><details red><summary> 代码 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">double</span> a[<span class="number">10000</span>];</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n) &amp;&amp; n)&#123;</span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line"><span class="keyword">double</span> s=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">s+=a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">double</span> ava = s/(<span class="keyword">double</span>)n;</span><br><span class="line">s=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">s+=(a[i]-ava)*(a[i]-ava);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans=s/n;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h1 id="12-IP地址"><a href="#12-IP地址" class="headerlink" title="12.IP地址"></a>12.IP地址</h1><details blue><summary> 题目 </summary>              <div class='content'>              <p>【问题描述】</p><p>一个IP地址由32位二进制的数组成，比如：</p><p>111111111111111111111111000000002</p><p>为了便于记忆，我们将8个二进制位用一个十进制数表示，一个IP地址由四个十进制数表示，上述的IP地址表示为：</p><p>255.255.255.0</p><p>现在给你一个上述形式的IP地址，请回答IP地址的32个二进制位中，有多少位是1。</p><p>如IP地址为255.255.255.0，其中24位是1。</p><p>【输入形式】</p><p>有多组测试数据。</p><p>测试数据第一行是一个正整数T，表示测试数据组数。</p><p>每组测试数据是一个IP地址，形式为：</p><p>IP1.IP2.IP3.IP4</p><p>其中0 ≤IP1,IP2,IP3,IP4≤ 255,用十进制表示。每个IP地址不保证是实用IP地址。</p><p>40%的测试数据组数T  10≤T≤ 102；</p><p>30%的测试数据组数T  102≤T≤ 103；</p><p>20%的测试数据组数T  103≤T≤ 104；</p><p>10%的测试数据组数T  104≤T≤ 105；</p><p>【输出形式】</p><p>对于每个IP地址，输出一行包含一个非负整数：该IP地址的32个二进制位中，1的位数。</p><p>【样例输入】</p><p>5<br>255.255.255.0<br>127.0.0.1<br>0.0.0.1<br>1.2.3.4<br>0.0.0.0<br>【样例输出】</p><p>24<br>8<br>1<br>5<br>0<br>提示：样例中32位的IP地址为：</p><p>111111111111111111111111000000002</p><p>011111110000000000000000000000012</p><p>000000000000000000000000000000012</p><p>000000010000001000000011000001002</p><p>000000000000000000000000000000002</p>              </div>            </details><details cyan open><summary> 题解 </summary>              <div class='content'>              <p>这题就考察二进制转十进制罢了，不过为了偷懒就直接用了个函数__builtin_popcount，能把十进制数对应二进制的1的数量求出来</p>              </div>            </details><details red><summary> 代码 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> a=<span class="number">0</span>,b=<span class="number">0</span>,c=<span class="number">0</span>,d=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d.%d.%d.%d&quot;</span>, &amp;a,&amp;b,&amp;c,&amp;d);</span><br><span class="line">        <span class="keyword">int</span> ans = __builtin_popcount(a)+__builtin_popcount(b)+__builtin_popcount(c)+__builtin_popcount(d);</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h1 id="13-开关与灯"><a href="#13-开关与灯" class="headerlink" title="13.开关与灯"></a>13.开关与灯</h1><details blue><summary> 题目 </summary>              <div class='content'>              <p>【问题描述】</p><pre><code>    给定n个开关和m个灯，第i个开关只能打开部分灯。矩阵a包含n行m列，当aij=1时表示开关i可以打开灯j，否则aij=0。</code></pre><p>   开始时所有的m个灯都是关着的。</p><p>   开关只能从状态”关”到”开”。这意味着，对于每个可以打开某个灯的开关，无论你按多少次，这个灯都是开的。</p><p>   确保当你按下所有开关时，所有的灯都能打开，考虑是否可以忽略其中某个开关也能打开所有的灯。</p><p>   你的任务是确定是否存在这样的开关可以忽略，而使用其余的n-1个开关来打开所有m个灯。</p><p>【输入形式】</p><pre><code>     输入第1行包含两个整数n和m(1&lt;=n, m&lt;=2000)，表示开关的数量和灯的数量。</code></pre><p>   接下来的n行，每行包含m个字符，字符aij=1时表示开关i可以打开灯j，否则aij=0。</p><p>【输出形式】</p><pre><code>     如果存在这样的可以忽略的开关，而使用其他n-1个开关打开所有的m个灯，输出&quot;YES&quot;，否则输出&quot;NO&quot;。</code></pre><p>【样例输入】</p><p>4 5<br>10101<br>01000<br>00111<br>10000</p><p>【样例输出】</p><p>YES</p>              </div>            </details><details cyan open><summary> 题解 </summary>              <div class='content'>              <p>这题其实一开始的时候想的是二进制取或，但后来想想那个数据量。。。算了</p><p>讲讲思路吧：首先我们要对每一列求和，那么我们得到m个和；然后开始枚举哪个开关扔了，我们用这堆和分别减去它对应的1，如果有一个值为0就说明不行，我们遍历下一个。</p><p>如果一次遍历每个值都不为0，那么就说明这n-1个开关可以开m个灯，也就是YES啦。</p><p>当然你要骗分的话，输出一次YES提交康康对几个点，对的少就换NO提交一次，就一堆分到手啦！</p>              </div>            </details><details red><summary> 代码 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">2000</span>][<span class="number">2000</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line"><span class="keyword">int</span> b[<span class="number">2000</span>];</span><br><span class="line">    <span class="built_in">memset</span>(b,<span class="number">0</span>,<span class="keyword">sizeof</span>(b));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)</span><br><span class="line">            a[i][j]=<span class="keyword">int</span>(s[j]-<span class="string">&#x27;0&#x27;</span>),b[j]=b[j]+a[i][j];</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> j;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;m;j++)</span><br><span class="line"><span class="keyword">if</span>(b[j]-a[i][j]&lt;=<span class="number">0</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span>(j==m)<span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;YES\n&quot;</span>),<span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;NO\n&quot;</span>),<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h1 id="14-可删除的点"><a href="#14-可删除的点" class="headerlink" title="14.可删除的点"></a>14.可删除的点</h1><details blue><summary> 题目 </summary>              <div class='content'>              <p>【问题描述】</p><p>  平面上有n个不同的点，没有在Y轴的点，检查是否存在这样一个点，将其删除后其余所有的点均位于Y轴的同一边。<br>【输入形式】</p><p>  输入第一行包含一个正整数n(2&lt;=n&lt;=105)。</p><p>  接下来的n行，包含所有点的坐标，第i行包含两个整数xi和yi(|xi|、|yi|&lt;=109，xi&lt;&gt;0)。<br>【输出形式】</p><p>  如果存在这样的点，则输入”Yes”，否则输出”No”。<br>【样例输入】</p><p>3<br>1 1<br>-1 -1<br>2 -1</p><p>【样例输出】</p><p>Yes</p>              </div>            </details><details cyan open><summary> 题解 </summary>              <div class='content'>              <p>这题显然y没有什么用处，记录一下x的正负个数，如果有哪一边小于等于1就有可删除的点啦</p>              </div>            </details><details red><summary> 代码 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">2000</span>][<span class="number">2000</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">int</span> l=<span class="number">0</span>,r=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>)l++;</span><br><span class="line">    <span class="keyword">else</span> r++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=<span class="number">1</span> || r&lt;=<span class="number">1</span>)<span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;Yes\n&quot;</span>),<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;No\n&quot;</span>),<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h1 id="15-字符串反转3"><a href="#15-字符串反转3" class="headerlink" title="15.字符串反转3"></a>15.字符串反转3</h1><details blue><summary> 题目 </summary>              <div class='content'>              <p>【问题描述】</p><pre><code>   给出一个字符串，请将其每个单词反转后输出。</code></pre><p>【输入形式】</p><pre><code>  输入第一行为一个正整数N，表示测试用例数，接下来的N行，每行一个字符串。</code></pre><p>【输出形式】</p><pre><code>  输出N行，每行对应一个反转后的字符串。</code></pre><p>【样例输入】</p><p>3<br>olleh !dlrow<br>m’I morf .unh<br>I ekil .tae<br>【样例输出】</p><p>hello world!<br>I’m from hnu.<br>I like eat.</p>              </div>            </details><details cyan open><summary> 题解 </summary>              <div class='content'>              <p>这题如果用getline的话记得关掉cin/cout的缓存（反正就是加速器，不然会有一个点超时），或者用gets（这个我真忘了）</p><p>另外提一句，stringstream真香 &amp;&amp; reverse真香</p>              </div>            </details><details red><summary> 代码 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">2000</span>][<span class="number">2000</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">NULL</span>);</span><br><span class="line"><span class="comment">//关cin和cout缓存</span></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="built_in">cin</span>.ignore();<span class="comment">//忽略换行符</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    getline(<span class="built_in">cin</span>, s);</span><br><span class="line">    <span class="built_in">stringstream</span> ss;</span><br><span class="line">    ss&lt;&lt;s;</span><br><span class="line">    <span class="keyword">while</span>(ss&gt;&gt;s)&#123;</span><br><span class="line">    reverse(s.begin(), s.end());</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h1 id="16-n，-还是n"><a href="#16-n，-还是n" class="headerlink" title="16.n， 还是n"></a>16.n， 还是n</h1><details blue><summary> 题目 </summary>              <div class='content'>              <p>【问题描述】</p><p>输出 包含n 或者是n的倍数的所有数</p><p>【输入形式】</p><p>正整数 m,n（0&lt;m，n&lt;1000000）</p><p>【输出形式】</p><p>从小到大排列的不大于 m 的特殊正整数（包含n，或者是n的倍数）。</p><p>【样例输入1】</p><p>20 7<br>【样例输出1】</p><p>7 14 17<br>【样例输入2】</p><p>200 11<br>【样例输出2】</p><p>11 22 33 44 55 66 77 88 99 110 111 112 113 114 115 116 117 118 119 121 132 143 154 165 176 187 198<br>【样例说明】</p><p>包含n的数可以考虑使用字符串查找解决</p>              </div>            </details><details cyan open><summary> 题解 </summary>              <div class='content'>              <p>这个提示给的是真的是。。。我看到立马去查了下string.find</p><p>这题之后也还有好几题涉及字符串和数字转换，知道string.find和它的用法这题就不剩什么难点了。</p>              </div>            </details><details red><summary> 代码 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">int</span> temp=m;</span><br><span class="line"><span class="built_in">string</span> ms=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">while</span>(temp!=<span class="number">0</span>)&#123;</span><br><span class="line">ms+=<span class="keyword">char</span>(temp%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">temp/=<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">reverse(ms.begin(), ms.end());</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i%m==<span class="number">0</span>)<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,i);</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">temp = i;</span><br><span class="line"><span class="built_in">string</span> is=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">while</span>(temp!=<span class="number">0</span>)&#123;</span><br><span class="line">is+=<span class="keyword">char</span>(temp%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">temp/=<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">reverse(is.begin(), is.end());</span><br><span class="line"><span class="keyword">if</span>(is.find(ms)!=is.npos)<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h1 id="17-字符串排序"><a href="#17-字符串排序" class="headerlink" title="17.字符串排序"></a>17.字符串排序</h1><details blue><summary> 题目 </summary>              <div class='content'>              <p>【问题描述】</p><pre><code>   定义一个字符串的无序度为所有位置后面的字母比该位置的字母小的总数之和。比如&quot;DAABEC&#39;&#39;这个字符串的无序度是5，因为D后面有4个位置比它小（AABC），E后面有1个比它小（C），其它位置后面没有比自己小的。&quot; AACEDGG &quot;的无序度为1（E后面有一个D比它小）。&quot; ZWQM &quot;的无序度为6，每个位置后面所有的字母都比它小。   现在你的任务是给定一些字符串（只由大写字母组成），把他们按照无序度从小到大排序，如果无序度一样，那么就按照输入的相对顺序排序。</code></pre><p>【输入形式】</p><pre><code> 单组测试数据。 第一行有两个整数n(0 &lt; n &lt;= 50)和m (0 &lt; m &lt;= 100)，分别表示输入的字符串的长度和字符串的个数。 接下来m行，每一行包含一个长度为n的字符串，只由大写字母组成。</code></pre><p>【输出形式】</p><pre><code>输出m行，表示排序之后的字符串。</code></pre><p>【样例输入】</p><p>10 6<br>AACATGAAGG<br>TTTTGGCCAA<br>TTTGGCCAAA<br>GATCAGATTT<br>CCCGGGGGGA<br>ATCGATGCAT<br>【样例输出】</p><p>CCCGGGGGGA<br>AACATGAAGG<br>GATCAGATTT<br>ATCGATGCAT<br>TTTTGGCCAA<br>TTTGGCCAAA</p>              </div>            </details><details cyan open><summary> 题解 </summary>              <div class='content'>              <p>无序度这个东西应该叫逆序对吧（都是学过线代的人了）</p><p>求逆序对其实比较好的方法应该是归并排序，但这题计算量撑死50 * 100 * 99 / 2，多大点事啊，暴力算了。。。</p><p>然后排序，没有然后了。。。</p>              </div>            </details><details red><summary> 代码 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ss</span>&#123;</span></span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line"><span class="keyword">int</span> dot=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> pos;</span><br><span class="line">&#125;qaq[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(ss a, ss b)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a.dot == b.dot)<span class="keyword">return</span> a.pos&lt;b.pos;</span><br><span class="line"><span class="keyword">return</span> a.dot&lt;b.dot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">qaq[i].name = s;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n<span class="number">-1</span>;j++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=j+<span class="number">1</span>;k&lt;n;k++)</span><br><span class="line"><span class="keyword">if</span>(s[j]&gt;s[k])</span><br><span class="line">qaq[i].dot++;</span><br><span class="line">qaq[i].pos=i;</span><br><span class="line">&#125;</span><br><span class="line">sort(qaq, qaq+m, cmp);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;qaq[i].name&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h1 id="18-三角形的面积"><a href="#18-三角形的面积" class="headerlink" title="18.三角形的面积"></a>18.三角形的面积</h1><details blue><summary> 题目 </summary>              <div class='content'>              <p>【问题描述】</p><p>已知三角形的三个顶点的坐标，求该三角形的面积。</p><p>【输入形式】</p><p>有多组测试数据。</p><p>每组测试数据占一行，6个用空格分隔开的浮点数：x1,y1,x2,y2,x3,y3。表示三角形三个顶点的坐标。</p><p>一行6个0（形如0 0 0 0 0 0），表示输入结束，并且不需要处理。</p><p>40%的顶点坐标 -10 ≤ xi,yi≤ 10；i=1,2,3</p><p>30%的顶点坐标 -100 ≤ xi,yi≤ 100；i=1,2,3</p><p>20%的顶点坐标 -1000 ≤ xi,yi≤ 1000；i=1,2,3</p><p>10%的顶点坐标 -10000 ≤ xi,yi≤ 10000；i=1,2,3</p><p>【输出形式】</p><p>对于每组测试数据，输出对应三角形面积，保留小数点后6位。</p><p>【样例输入】</p><p>1 2 3 4 -2 8<br>0 0 0 1 1 0<br>0 0 0 0 0 0<br>【样例输出】</p><p>9.000000<br>0.500000<br>Tips：如果使用浮点数，请注意精度问题，推荐使用double</p>              </div>            </details><details cyan open><summary> 题解 </summary>              <div class='content'>              <p>向量叉乘求面积算计算几何的常识了，不过我就纳闷了没化简前错一半，化简后全对？</p><p>这题用海伦公式这种进度贼差的公式都能全对， 这不就很奇怪了嘛。。。</p>              </div>            </details><details red><summary> 代码 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">double</span> a1,b1,a2,b2,a3,b3;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;a1&gt;&gt;b1&gt;&gt;a2&gt;&gt;b2&gt;&gt;a3&gt;&gt;b3)&#123;</span><br><span class="line"><span class="keyword">if</span>(a1==<span class="number">0</span>&amp;&amp;a2==<span class="number">0</span>&amp;&amp;a3==<span class="number">0</span>&amp;&amp;b1==<span class="number">0</span>&amp;&amp;b2==<span class="number">0</span>&amp;&amp;b3==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">double</span> ans = (a1*b2-a1*b3+a2*b3-a2*b1+a3*b1-a3*b2)/<span class="number">2.0</span>;</span><br><span class="line"><span class="keyword">if</span>(ans&lt;<span class="number">0</span>)ans=-ans;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;fixed&lt;&lt;setprecision(<span class="number">6</span>)&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h1 id="19-循环数"><a href="#19-循环数" class="headerlink" title="19.循环数"></a>19.循环数</h1><details blue><summary> 题目 </summary>              <div class='content'>              <p>【问题描述】</p><pre><code>  循环数是n位长度的整数，当乘以从1到n的任何整数时，产生原始数字的“循环”。也就是说，如果考虑最后一个数字之后的数字“绕”回到第一个数字，两个数字中的数字序列将是相同的，尽管它们可能从不同的位置开始。例如，数字142857是循环的，如下表所示：     142857 *1 = 142857    142857 *2 = 285714    142857 *3 = 428571    142857 *4 = 571428    142857 *5 = 714285    142857 *6 = 857142    编写一个程序来确定数字是否是循环数。</code></pre><p>【输入形式】</p><pre><code>   输入一个数，长度在2到60位之间(请注意，前面的零不应该被删除，它们被认为是确定n的大小和计数的一部分，因此，“01”是一个两位数的数字，与“1”是一个一位数的数字不同。) 。</code></pre><p>【输出形式】</p><pre><code>   对于每个输入，输出一行(Yes或No)标识它是否是循环数。 </code></pre><p>【样例输入】</p><p>142857<br>【样例输出】</p><p>Yes</p>              </div>            </details><details cyan open><summary> 题解 </summary>              <div class='content'>              <p>我们把每种轮换都先打个表，然后对询问的数枚举倍数后与表中每一种轮换的值进行比对即可（这样做也不会有前导0的干扰）</p><p>（我不知道stringtream可以直接转换字符串和整型，我一直都是手写转换的）</p><p>另外这题我取巧了，当这个数的数位很大(2的64次方大概19位吧）时我直接判定为no了，毕竟数位太大unsigned long long也存不下</p><p>而数位大于9时说明这个数得乘上10以上的数，位数会+1，如果想保持本身位数不变必须有前导0。前导0越多这个数越难可能是循环数，所以我就取巧了一波。</p>              </div>            </details><details red><summary> 代码 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line"><span class="keyword">int</span> l=s.length();</span><br><span class="line"><span class="keyword">if</span>(l&gt;<span class="number">18</span>)<span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;No\n&quot;</span>),<span class="number">0</span>;</span><br><span class="line"><span class="built_in">string</span> qaq[<span class="number">18</span>];</span><br><span class="line">qaq[<span class="number">0</span>]=s;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;l;i++)&#123;</span><br><span class="line">qaq[i]=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;i+l;j++)</span><br><span class="line">qaq[i]+=s[j%l];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> num=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;l;i++)</span><br><span class="line">num=num*<span class="number">10</span>+s[i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"><span class="keyword">bool</span> flag; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=l;i++)&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> b=num*i;</span><br><span class="line">flag=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span>(b&gt;=<span class="built_in">pow</span>(<span class="number">10</span>,l))<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;l;j++)&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> c=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;l;k++)</span><br><span class="line">c=c*<span class="number">10</span>+qaq[j][k]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(b==c)&#123;</span><br><span class="line">flag=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!flag)<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag)<span class="built_in">printf</span>(<span class="string">&quot;Yes\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;No\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h1 id="20-电能消耗"><a href="#20-电能消耗" class="headerlink" title="20.电能消耗"></a>20.电能消耗</h1><details blue><summary> 题目 </summary>              <div class='content'>              <p>【问题描述】</p><pre><code>  汤姆对他最喜欢的笔记本电脑的耗电量很感兴趣。他的笔记本电脑有三种模式。在正常模式下，笔记本电脑每分钟消耗P1瓦。在汤姆最后一次移动鼠标或触摸键盘后的T1分钟，屏幕保护程序启动，每分钟的功耗变化为P2瓦。最后，从屏幕保护程序启动到T2分钟后，笔记本电脑切换到“睡眠”模式，每分钟消耗P3瓦。 当笔记本电脑处于第二或第三模式时，如果汤姆移动鼠标或触摸键盘，则切换到第一种(正常)模式。 汤姆使用笔记本电脑工作的时间可以分为n个时间间期[l1, r1]、[l2, r2]、...、[ln, rn]。在每个间期，汤姆连续移动鼠标并按下键盘。 在间期之间，汤姆什么都不做。请找出在间期[l1, rn]笔记本电脑的总耗电量。</code></pre><p>【输入形式】</p><pre><code>  第一行包含6个整数n、P1、P2、P3、T1、T2(1&lt;=n&lt;=100，0&lt;=P1、P2、P3&lt;=100，1&lt;=T1、T2&lt;=60)。接下来的n行包含了汤姆工作的期间，第i行是两个用空格分隔的整数li和ri(0&lt;=li&lt;=ri&lt;=1440, 当i&lt;n时ri&lt;li+1）, 表示工作期间的开始时间和结束时间。</code></pre><p>【输出形式】</p><pre><code>  输出总的耗电量。</code></pre><p>【样例输入】</p><p>2 8 4 2 5 10<br>20 30<br>50 100</p><p>【样例输出】</p><p>570</p>              </div>            </details><details cyan open><summary> 题解 </summary>              <div class='content'>              <p>这题按部就班地模拟一遍即可</p>              </div>            </details><details red><summary> 代码 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,p1,p2,p3,t1,t2;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;p1&gt;&gt;p2&gt;&gt;p3&gt;&gt;t1&gt;&gt;t2;</span><br><span class="line"><span class="keyword">int</span> l,r;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;l&gt;&gt;r;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> sum=(r-l)*p1;</span><br><span class="line"><span class="keyword">while</span>(--n)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;l;</span><br><span class="line"><span class="keyword">int</span> t = l-r;</span><br><span class="line"><span class="keyword">if</span>(t&lt;=t1)sum+=t*p1;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(t&lt;=t1+t2)sum+=t1*p1+(t-t1)*p2;</span><br><span class="line"><span class="keyword">else</span> sum+=t1*p1+t2*p2+(t-t1-t2)*p3; </span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;r;</span><br><span class="line">sum+=(r-l)*p1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;sum&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>              </div>            </details><hr><h1 id="21-计算校验码"><a href="#21-计算校验码" class="headerlink" title="21.计算校验码"></a>21.计算校验码</h1><details blue><summary> 题目 </summary>              <div class='content'>              <p>【问题描述】</p><p>传送一个B（B≤16）进制的数值N时，最后加上一个一位（B进制的）校验码，使得N加上校验位后能被B-1整除。比如十进制的数值12310，其校验码就是3，因为十进制数值123310能被9整除。16进制的数7816，其校验码为0，因为16进制的78016是15的倍数。超过十进制后，用字母a表示10，字母b表示11，字母c表示12，字母d表示13，字母e表示14，字母f表示15。</p><p>告诉你进制B，以及一个B进制的正整数N，要求你计算正整数N在B进制下的校验码。</p><p>【输入形式】</p><p>输入第一行正整数t (10 ≤ n ≤ 100)，表示有多少组测试数据。</p><p>后面有t行，每行两个正整数B，N（2≤ B≤16），中间用一个空格隔开，B是10进制整数，N用B进制形式表示。测试数据保证没有非法的B进制数N（也即N中每一位都是在0到B-1之间，没有前导0）。</p><p>40%的测试数据N的位数L 1 ≤ L≤ 10；</p><p>30%的测试数据N的位数L 1 ≤ L≤ 102；</p><p>20%的测试数据N的位数L 1 ≤ L≤ 103；</p><p>10%的测试数据N的位数L 1 ≤ L≤ 104；</p><p>【输出形式】</p><p>对于每组测试数据，输出一位占一行：正整数N在B进制下的校验码。（如果校验码可以为B-1，也可以为0，输出0）。</p><p>【样例输入】</p><p>4<br>10 123<br>16 78<br>16 1234321<br>12 ab<br>【样例输出】</p><p>3<br>0<br>e<br>1<br>【样例说明】</p><p>第一行的4表示有4组测试数据，下面四行，每行一组测试数据。</p><p>第一组测试数据 10进制数123 最后添加检验码3，10进制数1233是9（=10-1）的倍数</p><p>第二组测试数据 16进制数78 最后添加检验码0，16进制数780是15（=16-1）的倍数</p><p>第三组测试数据 16进制数1234321 最后添加检验码e（=14），16进制数1234321e是15（=16-1）的倍数</p><p>第四组测试数据 12进制数ab 最后添加检验码1，12进制数ab1是11（12-1）的倍数</p><p>【Tips】</p><p>B进制的数能被B-1整除，当且仅当各位数字和能被B-1整除。</p><p>第一组测试数据 10进制数123 最后添加检验码3，10进制数1233各位数字和是9，是9的倍数</p><p>第二组测试数据 16进制数78 最后添加检验码0，16进制数780各位数字和是15，是15的倍数</p><p>第三组测试数据 16进制数1234321 最后添加检验码e，16进制数1234321e各位数字和是30，是15的倍数</p><p>第四组测试数据 12进制数ab 最后添加检验码1，12进制数ab1各位数字和是22，是11的倍数</p>              </div>            </details><details cyan open><summary> 题解 </summary>              <div class='content'>              <p>刚开始看错了题目好多次。。。</p><p>先算出前面几位对应的十进制后暴力枚举最后一位，然后就那样了。。。</p>              </div>            </details><details red><summary> 代码 </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; a;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">char</span> i=<span class="string">&#x27;0&#x27;</span>;i&lt;=<span class="string">&#x27;9&#x27;</span>;i++)</span><br><span class="line">a[i] = i-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">char</span> i=<span class="string">&#x27;a&#x27;</span>;i&lt;=<span class="string">&#x27;f&#x27;</span>;i++)</span><br><span class="line">a[i] = i-<span class="string">&#x27;a&#x27;</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">while</span>(t--)&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;s;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> num=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> l=s.length();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;l;i++)</span><br><span class="line">num =(num*n+a[s[i]])%(n<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line"><span class="keyword">if</span>((num*n+i)%(n<span class="number">-1</span>)==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span>(i&lt;<span class="number">10</span>)<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, i);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>, i<span class="number">-10</span>+<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h1 id="结"><a href="#结" class="headerlink" title="结"></a>结</h1><p>写到这儿完，已经深夜三点。第一周的复盘就此结束。本来以为下午晚上写写两三天就能写完，然而还是很拖拉。而且模拟题真的代码是又臭又长。</p><p>有什么问题可以评论留言</p><p>另外貌似有个助教也写了题解集，可以参考参考<a href="https://blog.csdn.net/qq_42136832/article/details/118571185">[湖南大学程序设计实训训练作业一]作业一汇总篇</a></p>]]></content>
      
      
      <categories>
          
          <category> C++学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> CCF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>严肃: 严防盗站，志此以告</title>
      <link href="10853.html"/>
      <url>10853.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>虽然说博客包括源码什么的都在github上公开，但<b style="color: red;">直接盗用别人的博客源码建站而且还没有跟博主征求同意</b>是不是特别过分啊！</p><p>好吧，你说你借鉴，那文章一篇不删借鉴个鬼？也没见你加新文章啊</p><p>再者我博客内的绝大部分图片都是放在oss上的，<b style="color: orange;">访问都是会增加流量的，一定程度上直接搬走也是在增加我的博客消费负担</b></p><p>我不介意我的文章没有人看，<b style="color: yellow;">但很介意这种行为（就是偷窃！）</b></p><p><b style="color: orange;">本来也没想给我的站点图片资源啥的加防盗链的，别人看到好图还可以直接扒一下；看到这个情况我也只能开防盗链了。</b></p><p>盗站的人请好自为之，我也不想公开你的站点ip。看到你盗完的站点图片全挂了你应该会过来也能看到这篇警告的吧</p><hr><p>本来是打算期末完再动博客的，结果好友发现了这样一件事让我真的很气愤，就写了这篇警告</p>]]></content>
      
      
      <categories>
          
          <category> 贰猹随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Diary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>欧拉函数算法笔记</title>
      <link href="64036.html"/>
      <url>64036.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="欧拉函数的定义"><a href="#欧拉函数的定义" class="headerlink" title="欧拉函数的定义"></a>欧拉函数的定义</h2><p>欧拉函数（Euler’s totient function），即 $\varphi(n)$，表示的是小于等于 $n$ 和 $n$ 互质的数的个数。</p><p>比如说 $\varphi(1) = 1$。</p><p>$\varphi(8) = 4$，小于8且与8互素的数是1,3,5,7。</p><p>当 n 是质数的时候，显然有 $\varphi(n) = n - 1$。</p><h2 id="欧拉函数的一些性质"><a href="#欧拉函数的一些性质" class="headerlink" title="欧拉函数的一些性质"></a>欧拉函数的一些性质</h2><ul><li><p>欧拉函数是积性函数。</p><p>  积性是什么意思呢？如果有 $\gcd(a, b) = 1$，那么 $\varphi(a \times b) = \varphi(a) \times \varphi(b)$。</p><p>  特别地，当 $n$ 是奇数时 $\varphi(2n) = \varphi(n)$。</p></li><li><p>$n = \sum_{d \mid n}{\varphi(d)}$。</p><p>  利用 <a href="https://oi-wiki.org/math/mobius/">莫比乌斯反演</a> 相关知识可以得出。</p><p>  也可以这样考虑：如果 $\gcd(k, n) = d$，那么 $\gcd(\dfrac{k}{d},\dfrac{n}{d}) = 1, （ k &lt; n ）$。</p><p>  如果我们设 $f(x)$ 表示 $\gcd(k, n) = x$ 的数的个数，那么 $n = \sum_{i = 1}^n{f(i)}$。</p><p>  根据上面的证明，我们发现，$f(x) = \varphi(\dfrac{n}{x})$，从而 $n = \sum_{d \mid n}\varphi(\dfrac{n}{d})$。注意到约数 $d$ 和 $\dfrac{n}{d}$ 具有对称性，所以上式化为 $n = \sum_{d \mid n}\varphi(d)$。</p></li><li><p>若 $n = p^k$，其中 $p$ 是质数，那么 $\varphi(n) = p^k - p^{k - 1}$。<br>  （根据定义可知）</p></li></ul><ul><li><p>由唯一分解定理，设 $n = \prod_{i=1}^{n}p_i^{k_i}$，其中 $p_i$ 是质数，有 $\varphi(n) = n \times \prod_{i = 1}^s{\dfrac{p_i - 1}{p_i}}$。</p><p>  证明：</p><ul><li><p>引理：设 $p$ 为任意质数，那么 $\varphi(p^k)=p^{k-1}\times(p-1)$。</p><p>  证明：显然对于从 1 到 $p^k$ 的所有数中，除了 $p^{k-1}$ 个 $p$ 的倍数以外其它数都与 $p^k$ 互素，故 $\varphi(p^k)=p^k-p^{k-1}=p^{k-1}\times(p-1)$，证毕。</p><p>接下来我们证明 $\varphi(n) = n \times \prod_{i = 1}^s{\dfrac{p_i - 1}{p_i}}$。由唯一分解定理与 $\varphi(x)$ 函数的积性</p></li></ul></li></ul><p>$$<br>\begin{aligned}<br>    \varphi(n) &amp;= \prod_{i=1}^{s} \varphi(p_i^{k_i}) \\<br>    &amp;= \prod_{i=1}^{s} (p_i-1)\times {p_i}^{k_i-1}\\<br>    &amp;=\prod_{i=1}^{s} {p_i}^{k_i} \times(1 - \frac{1}{p_i})\\<br>    &amp;=n~ \prod_{i=1}^{s} (1- \frac{1}{p_i})<br>    &amp;\square<br>\end{aligned}<br>$$</p><h2 id="如何求欧拉函数值"><a href="#如何求欧拉函数值" class="headerlink" title="如何求欧拉函数值"></a>如何求欧拉函数值</h2><h3 id="基于素因数分解求欧拉函数的算法"><a href="#基于素因数分解求欧拉函数的算法" class="headerlink" title="基于素因数分解求欧拉函数的算法"></a>基于素因数分解求欧拉函数的算法</h3><p>如果只要求一个数的欧拉函数值，那么直接根据定义质因数分解的同时求就好了。这个过程可以用 <a href="./pollard-rho.md">Pollard Rho</a> 算法优化。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">euler_phi</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> m = <span class="keyword">int</span>(<span class="built_in">sqrt</span>(n + <span class="number">0.5</span>));</span><br><span class="line">  <span class="keyword">int</span> ans = n;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= m; i++)</span><br><span class="line">    <span class="keyword">if</span> (n % i == <span class="number">0</span>) &#123;</span><br><span class="line">      ans = ans / i * (i - <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">while</span> (n % i == <span class="number">0</span>) n /= i;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">if</span> (n &gt; <span class="number">1</span>) ans = ans / n * (n - <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：如果将上面的程序改成如下形式，会提升一点效率：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">euler_phi</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> ans = n;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i * i &lt;= n; i++)</span><br><span class="line">    <span class="keyword">if</span> (n % i == <span class="number">0</span>) &#123;</span><br><span class="line">      ans = ans / i * (i - <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">while</span> (n % i == <span class="number">0</span>) n /= i;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">if</span> (n &gt; <span class="number">1</span>) ans = ans / n * (n - <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="利用埃氏筛法，实现欧拉函数值的预处理"><a href="#利用埃氏筛法，实现欧拉函数值的预处理" class="headerlink" title="利用埃氏筛法，实现欧拉函数值的预处理"></a>利用埃氏筛法，实现欧拉函数值的预处理</h3><p>可以求多个数的欧拉函数。</p><p>利用埃氏筛法，每次发现素因子时就把它的倍数的欧拉函数乘上 (p-1)/p ，这样就可以一次性求出1~n的欧拉函数值的表了。实现如下:</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>  <span class="keyword">int</span> euler[MAX_N];</span><br><span class="line"><span class="number">2</span>  <span class="function"><span class="keyword">void</span> <span class="title">euler_phi2</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="number">3</span><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAX_N; i++) euler[i] = i;</span><br><span class="line"><span class="number">4</span><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; MAX_N; i++) &#123;</span><br><span class="line"><span class="number">5</span><span class="keyword">if</span> (euler[i] == i) &#123;</span><br><span class="line"><span class="number">6</span><span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; MAX_N; j += i) </span><br><span class="line"><span class="number">7</span>euler[j] = euler[j] / i * (i - <span class="number">1</span>);</span><br><span class="line"><span class="number">8</span>&#125;</span><br><span class="line"><span class="number">9</span>&#125;</span><br><span class="line"><span class="number">10</span> &#125;</span><br></pre></td></tr></table></figure><h3 id="容斥原理求欧拉函数"><a href="#容斥原理求欧拉函数" class="headerlink" title="容斥原理求欧拉函数"></a>容斥原理求欧拉函数</h3><p>若将 $N$ 分解为不同素数的乘积，即：</p><p>$$<br>N=p_{1}^{r_{1}} p_{2}^{r_{2}} \ldots p_{k}^{r_{k}}<br>$$</p><p>设 1 到 $N$ 的 $N$ 个数中为 $p_{i}$ 倍数的集合为 $A_{i},\left|A_{i}\right|=\left|\frac{N}{p_{i}}\right|(i=1,2, \ldots, k)$ 。</p><p>对于 $p_{i} \neq p_{j}, A_{i} \cap A_{j}$ 既是 $p_{i}$ 的倍数也是 $p_{j}$,的倍数, 即可得</p><p>$$<br>\left.\left|A_{i} \cap A_{j}\right|=\mid \frac{N}{p_{i} p_{j}}\right\rfloor(1 \leq i, j \leq k, i \neq j)<br>$$</p><p>人在去除 $\left|A_{i}\right|$ 和 $\left|A_{j}\right|$ 的时候， $p_{i}$ 和 $p_{j}$ 的倍数被去除去了两次，需要再把 $\left|A_{i} \cap A_{j}\right|$ 加回来。</p><p>$$<br>\begin{array}{l}<br>\varphi(N)=\left|\overline{A_{1}} \cap \overline{A_{2}} \cap \cdots \cap \overline{A_{k}}\right| \\<br>    =N-\left(\frac{N}{p_{1}}+\frac{N}{p_{2}}+\cdots+\frac{N}{p_{k}}\right)+\left(\frac{N}{p_{1} p_{2}}+\frac{N}{p_{2} p_{3}}+\cdots+\frac{N}{p_{1} p_{k}}\right) \ldots \pm\left(\frac{N}{p_{1} p_{2} \ldots p_{k}}\right) \\<br>    =N\left(1-\frac{1}{p_{1}}\right)\left(1-\frac{1}{p_{2}}\right) \ldots\left(1-\frac{1}{p_{k}}\right)<br>\end{array}<br>$$</p><h2 id="欧拉定理"><a href="#欧拉定理" class="headerlink" title="欧拉定理"></a>欧拉定理</h2><p>与欧拉函数紧密相关的一个定理就是欧拉定理。其描述如下：</p><p>若 $\gcd(a, m) = 1$，则 $a^{\varphi(m)} \equiv 1 \pmod{m}$。</p><h2 id="扩展欧拉定理"><a href="#扩展欧拉定理" class="headerlink" title="扩展欧拉定理"></a>扩展欧拉定理</h2><p>当然也有扩展欧拉定理</p><p>$$<br>a^b\equiv<br>\begin{cases}<br>a^{b\bmod\varphi(p)},,&amp;\gcd(a,,p)=1\\<br>a^b,&amp;\gcd(a,,p)\ne1,,b&lt;\varphi(p)\\<br>a^{b\bmod\varphi(p)+\varphi(p)},&amp;\gcd(a,,p)\ne1,,b\ge\varphi(p)<br>\end{cases}<br>\pmod p<br>$$</p>]]></content>
      
      
      <categories>
          
          <category> C++学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速幂算法笔记</title>
      <link href="4524.html"/>
      <url>4524.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>【引自<a href="https://oi-wiki.org/">OI Wiki</a>】</p><p>因为以后可能会增加一点自己的理解，所以不打算每次都去查原帖，故在此直接做笔记和更改</p><hr><h1 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h1><p>快速幂，二进制取幂（Binary Exponentiation，也称平方法），是一个在 $\Theta(\log n)$ 的时间内计算 $a^n$ 的小技巧，而暴力的计算需要 $\Theta(n)$ 的时间。而这个技巧也常常用在非计算的场景，因为它可以应用在任何具有结合律的运算中。其中显然的是它可以应用于模意义下取幂、矩阵幂等运算，我们接下来会讨论。</p><h2 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h2><p>计算 $a$ 的 $n$ 次方表示将 $n$ 个 $a$ 乘在一起：$a^{n} = \underbrace{a \times a \cdots \times a}_{n\text{ 个 a}}$。然而当 $a,n$ 太大的时侯，这种方法就不太适用了。不过我们知道：$a^{b+c} = a^b \cdot a^c,a^{2b} = a^b \cdot a^b = (a^b)^2$。二进制取幂的想法是，我们将取幂的任务按照指数的 <strong>二进制表示</strong> 来分割成更小的任务。</p><p>首先我们将 $n$ 表示为 2 进制，举一个例子：</p><p>$$<br>3^{13} = 3^{(1101)_2} = 3^8 \cdot 3^4 \cdot 3^1<br>$$</p><p>因为 $n$ 有 $\lfloor \log_2 n \rfloor + 1$ 个二进制位，因此当我们知道了 $a^1, a^2, a^4, a^8, \dots, a^{2^{\lfloor \log_2 n \rfloor}}$ 后，我们只用计算 $\Theta(\log n)$ 次乘法就可以计算出 $a^n$。</p><p>于是我们只需要知道一个快速的方法来计算上述 3 的 $2^k$ 次幂的序列。这个问题很简单，因为序列中（除第一个）任意一个元素就是其前一个元素的平方。举一个例子：</p><p>$$<br>\begin{align}<br>3^1 &amp;= 3  \\<br>3^2 &amp;= \left(3^1\right)^2 = 3^2 = 9  \\<br>3^4 &amp;= \left(3^2\right)^2 = 9^2 = 81  \\<br>3^8 &amp;= \left(3^4\right)^2 = 81^2 = 6561<br>\end{align}<br>$$</p><p>因此为了计算 $3^{13}$，我们只需要将对应二进制位为 1 的整系数幂乘起来就行了：</p><p>$$<br>3^{13} = 6561 \cdot 81 \cdot 3 = 1594323<br>$$</p><p>将上述过程说得形式化一些，如果把 $n$ 写作二进制为 $(n_tn_{t-1}\cdots n_1n_0)_2$，那么有：</p><p>$$<br>n = n_t2^t + n_{t-1}2^{t-1} + n_{t-2}2^{t-2} + \cdots + n_12^1 + n_02^0<br>$$</p><p>其中 $n_i\in{0,1}$。那么就有</p><p>$$<br>\begin{aligned}<br>a^n &amp; = (a^{n_t 2^t + \cdots + n_0 2^0})\\<br>&amp; = a^{n_0 2^0} \times a^{n_1 2^1}\times \cdots \times a^{n_t2^t}<br>\end{aligned}<br>$$</p><p>根据上式我们发现，原问题被我们转化成了形式相同的子问题的乘积，并且我们可以在常数时间内从 $2^i$ 项推出 $2^{i+1}$ 项。</p><p>这个算法的复杂度是 $\Theta(\log n)$ 的，我们计算了 $\Theta(\log n)$ 个 $2^k$ 次幂的数，然后花费 $\Theta(\log n)$ 的时间选择二进制为 1 对应的幂来相乘。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>首先我们可以直接按照上述递归方法实现：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">binpow</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a, <span class="keyword">long</span> <span class="keyword">long</span> b)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (b == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">long</span> <span class="keyword">long</span> res = binpow(a, b / <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">if</span> (b % <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> res * res * a;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> res * res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二种实现方法是非递归式的。它在循环的过程中将二进制位为 1 时对应的幂累乘到答案中。尽管两者的理论复杂度是相同的，但第二种在实践过程中的速度是比第一种更快的，因为递归会花费一定的开销。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">binpow</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a, <span class="keyword">long</span> <span class="keyword">long</span> b)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> (b &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (b &amp; <span class="number">1</span>) res = res * a;</span><br><span class="line">    a = a * a;</span><br><span class="line">    b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>模板：<a href="https://www.luogu.com.cn/problem/P1226">Luogu P1226</a></p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="模意义下取幂"><a href="#模意义下取幂" class="headerlink" title="模意义下取幂"></a>模意义下取幂</h3><details blue open><summary> 题目描述 </summary>              <div class='content'>              <p>计算 $x^n\bmod m$。</p>              </div>            </details><p>这是一个非常常见的应用，例如它可以用于计算模意义下的乘法逆元。</p><p>既然我们知道取模的运算不会干涉乘法运算，因此我们只需要在计算的过程中取模即可。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">binpow</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a, <span class="keyword">long</span> <span class="keyword">long</span> b, <span class="keyword">long</span> <span class="keyword">long</span> m)</span> </span>&#123;</span><br><span class="line">  a %= m;</span><br><span class="line">  <span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> (b &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (b &amp; <span class="number">1</span>) res = res * a % m;</span><br><span class="line">    a = a * a % m;</span><br><span class="line">    b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：根据费马小定理，如果 $m$ 是一个质数，我们可以计算 $x^{n\bmod (m-1)}$ 来加速算法过程。</p><h3 id="计算斐波那契数"><a href="#计算斐波那契数" class="headerlink" title="计算斐波那契数"></a>计算斐波那契数</h3><details blue open><summary> 题目描述 </summary>              <div class='content'>              <p>计算斐波那契数列第 $n$ 项 $F_n$。</p>              </div>            </details><p>根据斐波那契数列的递推式 $F_n = F_{n-1} + F_{n-2}$，我们可以构建一个 $2\times 2$ 的矩阵来表示从 $F_i,F_{i+1}$ 到 $F_{i+1},F_{i+2}$ 的变换。于是在计算这个矩阵的 $n$ 次幂的时侯，我们使用快速幂的思想，可以在 $\Theta(\log n)$ 的时间内计算出结果。对于更多的细节参见 <a href="./fibonacci.md">斐波那契数列</a>。</p><h3 id="多次置换"><a href="#多次置换" class="headerlink" title="多次置换"></a>多次置换</h3><details blue open><summary> 题目描述 </summary>              <div class='content'>              <p>给你一个长度为 $n$ 的序列和一个置换，把这个序列置换 $k$ 次。</p>              </div>            </details><p>简单地把这个置换取 $k$ 次幂，然后把它应用到序列 $n$ 上即可。时间复杂度是 $O(n \log k)$ 的。</p><p>注意：给这个置换建图，然后在每一个环上分别做 $k$ 次幂（事实上做一下 $k$ 对环长取模的运算即可）可以取得更高效的算法，达到 $O(n)$ 的复杂度。</p><h3 id="加速几何中对点集的操作"><a href="#加速几何中对点集的操作" class="headerlink" title="加速几何中对点集的操作"></a>加速几何中对点集的操作</h3><blockquote><p>三维空间中，$n$ 个点 $p_i$，要求将 $m$ 个操作都应用于这些点。包含 3 种操作：</p><ol><li>沿某个向量移动点的位置（Shift）。</li><li>按比例缩放这个点的坐标（Scale）。</li><li>绕某个坐标轴旋转（Rotate）。</li></ol><p>还有一个特殊的操作，就是将一个操作序列重复 $k$ 次（Loop），这个序列中也可能有 Loop 操作（Loop 操作可以嵌套）。现在要求你在低于 $O(n \cdot \textit{length})$ 的时间内将这些变换应用到这个 $n$ 个点，其中 $\textit{length}$ 表示把所有的 Loop 操作展开后的操作序列的长度。</p></blockquote><p>让我们来观察一下这三种操作对坐标的影响：</p><ol><li>Shift 操作：将每一维的坐标分别加上一个常量；</li><li>Scale 操作：把每一维坐标分别乘上一个常量；</li><li>Rotate 操作：这个有点复杂，我们不打算深入探究，不过我们仍然可以使用一个线性组合来表示新的坐标。</li></ol><p>可以看到，每一个变换可以被表示为对坐标的线性运算，因此，一个变换可以用一个 $4\times 4$ 的矩阵来表示：</p><p>$$<br>\begin{bmatrix}<br>a_{11} &amp; a_ {12} &amp; a_ {13} &amp; a_ {14} \\<br>a_{21} &amp; a_ {22} &amp; a_ {23} &amp; a_ {24} \\<br>a_{31} &amp; a_ {32} &amp; a_ {33} &amp; a_ {34} \\<br>a_{41} &amp; a_ {42} &amp; a_ {43} &amp; a_ {44} \\<br>\end{bmatrix}<br>$$</p><p>使用这个矩阵就可以将一个坐标（向量）进行变换，得到新的坐标（向量）：</p><p>$$<br>\begin{bmatrix}<br>a_{11} &amp; a_ {12} &amp; a_ {13} &amp; a_ {14} \\<br>a_{21} &amp; a_ {22} &amp; a_ {23} &amp; a_ {24} \\<br>a_{31} &amp; a_ {32} &amp; a_ {33} &amp; a_ {34} \\<br>a_{41} &amp; a_ {42} &amp; a_ {43} &amp; a_ {44} \\<br>\end{bmatrix}\cdot<br>\begin{bmatrix} x \ y \ z \ 1 \end{bmatrix}<br> = \begin{bmatrix} x’ \ y’ \ z’ \ 1 \end{bmatrix}<br>$$</p><p>你可能会问，为什么一个三维坐标会多一个 1 出来？原因在于，如果没有这个多出来的 1，我们没法使用矩阵的线性变换来描述 Shift 操作。</p><p>接下来举一些简单的例子来说明我们的思路：</p><ol><li><p>Shift 操作：让 $x$ 坐标方向的位移为 $5$，$y$ 坐标的位移为 $7$，$z$ 坐标的位移为 $9$：</p><p> $$<br> \begin{bmatrix}<br> 1 &amp; 0 &amp; 0 &amp; 5 \\<br> 0 &amp; 1 &amp; 0 &amp; 7 \\<br> 0 &amp; 0 &amp; 1 &amp; 9 \\<br> 0 &amp; 0 &amp; 0 &amp; 1 \\<br> \end{bmatrix}<br> $$</p></li><li><p>Scale 操作：把 $x$ 坐标拉伸 10 倍，$y,z$ 坐标拉伸 5 倍：</p><p> $$<br> \begin{bmatrix}<br> 10 &amp; 0 &amp; 0 &amp; 0 \\<br> 0 &amp; 5 &amp; 0 &amp; 0 \\<br> 0 &amp; 0 &amp; 5 &amp; 0 \\<br> 0 &amp; 0 &amp; 0 &amp; 1 \\<br> \end{bmatrix}<br> $$</p></li><li><p>Rotate 操作：绕 $x$ 轴旋转 $\theta$ 弧度，遵循右手定则（逆时针方向）</p><p> $$<br> \begin{bmatrix}<br> 1 &amp; 0 &amp; 0 &amp; 0 \\<br> 0 &amp; \cos \theta &amp; \sin \theta &amp; 0 \\<br> 0 &amp; -\sin \theta &amp; \cos \theta &amp; 0 \\<br> 0 &amp; 0 &amp; 0 &amp; 1 \\<br> \end{bmatrix}<br> $$</p></li></ol><p>现在，每一种操作都被表示为了一个矩阵，变换序列可以用矩阵的乘积来表示，而一个 Loop 操作相当于取一个矩阵的 k 次幂。这样可以用 $O(m \log k)$ 计算出整个变换序列最终形成的矩阵。最后将它应用到 $n$ 个点上，总复杂度 $O(n + m \log k)$。</p><h3 id="定长路径计数"><a href="#定长路径计数" class="headerlink" title="定长路径计数"></a>定长路径计数</h3><details blue open><summary> 题目描述 </summary>              <div class='content'>              <p>给一个有向图（边权为 1），求任意两点 $u,v$ 间从 $u$ 到 $v$，长度为 $k$ 的路径的条数。</p>              </div>            </details><p>我们把该图的邻接矩阵 M 取 k 次幂，那么 $M_{i,j}$ 就表示从 $i$ 到 $j$ 长度为 $k$ 的路径的数目。该算法的复杂度是 $O(n^3 \log k)$。有关该算法的细节请参见 <a href="./matrix.md">矩阵</a> 页面。</p><h3 id="模意义下大整数乘法"><a href="#模意义下大整数乘法" class="headerlink" title="模意义下大整数乘法"></a>模意义下大整数乘法</h3><blockquote><p>计算 $a\times b\bmod m,,,a,b\le m\le 10^{18}$。</p></blockquote><p>与二进制取幂的思想一样，这次我们将其中的一个乘数表示为若干个 2 的整数次幂的和的形式。因为在对一个数做乘 2 并取模的运算的时侯，我们可以转化为加减操作防止溢出。这样仍可以在 $O (\log_2 m)$ 的时内解决问题。递归方法如下：</p><p>$$<br>a \cdot b = \begin{cases}<br>0 &amp;\text{if }a = 0 \\<br>2 \cdot \frac{a}{2} \cdot b &amp;\text{if }a &gt; 0 \text{ and }a \text{ even} \\<br>2 \cdot \frac{a-1}{2} \cdot b + b &amp;\text{if }a &gt; 0 \text{ and }a \text{ odd}<br>\end{cases}<br>$$</p><h4 id="快速乘"><a href="#快速乘" class="headerlink" title="快速乘"></a>快速乘</h4><p>但是 $O(\log_2 m)$ 的“龟速乘”还是太慢了，这在很多对常数要求比较高的算法比如 Miller_Rabin 和 Pollard-Rho 中，就显得不够用了。所以我们要介绍一种可以处理模数在 <code>long long</code> 范围内、不需要使用黑科技 <code>__int128</code> 的、复杂度为 $O(1)$ 的“快速乘”。</p><p>我们发现：</p><p>$$<br>a\times b\bmod m=a\times b-\left\lfloor \dfrac{ab}m \right\rfloor\times m<br>$$</p><p>我们巧妙运用 <code>unsigned long long</code> 的自然溢出：</p><p>$$<br>a\times b\bmod m=a\times b-\left\lfloor \dfrac{ab}m \right\rfloor\times m=\left(a\times b-\left\lfloor \dfrac{ab}m \right\rfloor\times m\right)\bmod 2^{64}<br>$$</p><p>于是在算出 $\left\lfloor\dfrac{ab}m\right\rfloor$ 后，两边的乘法和中间的减法部分都可以使用 <code>unsigned long long</code> 直接计算，现在我们只需要解决如何计算 $\left\lfloor\dfrac {ab}m\right\rfloor$。</p><p>我们考虑先使用 <code>long double</code> 算出 $\dfrac ap$ 再乘上 $b$。</p><p>既然使用了 <code>long double</code>，就无疑会有进度误差。极端情况就是第一个有效数字在小数点后一位。因为 <code>sizeof(long double)=16</code>，即 <code>long double</code> 的进度是 $64$ 位有效数字。所以 $\dfrac ap$ 从第 $65$ 位开始出错，误差范围为 $\left(-2^{-64},2^{64}\right)$。乘上 $b$ 这个 $64$ 位整数，误差范围为 $(-0.5,0.5)$，再加上 $0.5$ 误差范围为 $(0,1)$，取整后误差范围位 ${0,1}$。于是乘上 $-m$ 后，误差范围变成 ${0,-m}$，我们需要判断这两种情况。</p><p>因为 $m$ 在 <code>long long</code> 范围内，所以如果计算结果 $r$ 在 $[0,m)$ 时，直接返回 $r$，否则返回 $r+m$，当然你也可以直接返回 $(r+m)\bmod m$。</p><p>代码实现如下：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">binmul</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a, <span class="keyword">long</span> <span class="keyword">long</span> b, <span class="keyword">long</span> <span class="keyword">long</span> m)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> c =</span><br><span class="line">      (<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span>)a * b - (<span class="keyword">unsigned</span>)((<span class="keyword">long</span> <span class="keyword">double</span>)a / m * b + <span class="number">0.5L</span>) * m;</span><br><span class="line">  <span class="keyword">if</span> (c &lt; m) <span class="keyword">return</span> c;</span><br><span class="line">  <span class="keyword">return</span> c + m;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="高精度快速幂"><a href="#高精度快速幂" class="headerlink" title="高精度快速幂"></a>高精度快速幂</h3><p>例题【NOIP2003 普及组改编·麦森数】（<a href="https://www.luogu.com.cn/problem/P1045">原题在此</a>）</p><details blue open><summary> 题目描述 </summary>              <div class='content'>              <p>给你一个长度为 $n$ 的序列和一个置换，把这个序列置换 $k$ 次。</p>              </div>            </details><p>代码实现如下：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">505</span>], b[<span class="number">505</span>], t[<span class="number">505</span>], i, j;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mult</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> y[])</span>  <span class="comment">// 高精度乘法</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">memset</span>(t, <span class="number">0</span>, <span class="keyword">sizeof</span>(t));</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= x[<span class="number">0</span>]; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= y[<span class="number">0</span>]; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (i + j - <span class="number">1</span> &gt; <span class="number">100</span>) <span class="keyword">continue</span>;</span><br><span class="line">      t[i + j - <span class="number">1</span>] += x[i] * y[j];</span><br><span class="line">      t[i + j] += t[i + j - <span class="number">1</span>] / <span class="number">10</span>;</span><br><span class="line">      t[i + j - <span class="number">1</span>] %= <span class="number">10</span>;</span><br><span class="line">      t[<span class="number">0</span>] = i + j;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">memcpy</span>(b, t, <span class="keyword">sizeof</span>(b));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ksm</span><span class="params">(<span class="keyword">int</span> p)</span>  <span class="comment">// 快速幂</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (p == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="built_in">memcpy</span>(b, a, <span class="keyword">sizeof</span>(b));</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  ksm(p / <span class="number">2</span>);</span><br><span class="line">  mult(b, b);</span><br><span class="line">  <span class="keyword">if</span> (p % <span class="number">2</span> == <span class="number">1</span>) mult(b, a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> p;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;p);</span><br><span class="line">  a[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">  a[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">  b[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">  b[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">  ksm(p);</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">100</span>; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, b[i] - <span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, b[i]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h2><ul><li><p><a href="http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=24&page=show_problem&problem=3671">UVa 1230 - MODEX</a></p></li><li><p><a href="http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=24&page=show_problem&problem=310">UVa 374 - Big Mod</a></p></li><li><p><a href="https://uva.onlinejudge.org/index.php?option=onlinejudge&page=show_problem&problem=1970">UVa 11029 - Leading and Trailing</a></p></li><li><p><a href="http://codeforces.com/problemset/problem/630/I">Codeforces - Parking Lot</a></p></li><li><p><a href="http://www.spoj.com/problems/LASTDIG/">SPOJ - The last digit</a></p></li><li><p><a href="http://www.spoj.com/problems/LOCKER/">SPOJ - Locker</a></p></li><li><p><a href="https://icpcarchive.ecs.baylor.edu/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=1723">LA - 3722 Jewel-eating Monsters</a></p></li><li><p><a href="http://www.spoj.com/problems/ZSUM/">SPOJ - Just add it</a></p><p>  <strong>本页面部分内容译自博文 <a href="http://e-maxx.ru/algo/binary_pow">Бинарное возведение в степень</a> 与其英文翻译版 <a href="https://cp-algorithms.com/algebra/binary-exp.html">Binary Exponentiation</a>。其中俄文版版权协议为 Public Domain + Leave a Link；英文版版权协议为 CC-BY-SA 4.0。</strong></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> C++学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【转载】基于Butterfly的外挂标签引入</title>
      <link href="32088.html"/>
      <url>32088.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><blockquote><p>本文转载自店长的<a href="https://akilar.top/posts/615e2dec/">Akilarの糖果屋-基于Butterfly的外挂标签引入</a>，已获得作者许可。<br>本教程只用于猹自己写文的时候做参考（这么多样式猹记不住）<br>另外说明，本转载并不完整，一部分需要其他魔改引入支持的内容已经删除，如有需要请查看店长原帖<br>以下为转载内容</p></blockquote><hr><div class="tip home"><p>如有使用了本站的右键菜单教程的读者，请确保自己的配置内容为最新。2020年11月15日之前的教程中的css样式和本帖的部分标签有冲突。请及时更新。</p><p>同理，若您在使用本帖教程后，发现样式无法完全还原，请重点排查您的其余第三方魔改css样式，例如css中是否存在**.circle<strong>、</strong>.square**等易重class名。</p></div><details red><summary> 点开查看开发记录 </summary>              <div class='content'>              <div class="note blue icon modern"><i class="note-icon fas fa-bullhorn"></i><p>本文所涉及的样式，主要参考的是各类已有主题，并对相应styl文件进行样式修改以及添加夜间模式适配。已尽可能追根溯源找到了各部分魔改内容最初的作者，如有错误和遗漏还请联系我修改。</p></div><div class="timeline"><p class='p h2'>开发记录</p><div class="timenode"><div class="meta"><p><p>2020-11-14:内测版v0.05</p></p></div><div class="body"><ol><li>主要使用了<a href="https://github.com/volantis-x/hexo-theme-volantis">Volantis</a>的标签样式。引入<code>[tag].js</code>，并针对<code>butterfly</code>主题修改了相应的<code>[tag].styl</code>。在此鸣谢<code>Volantis</code>主题众开发者。</li><li>主要参考内容</li></ol><ul><li><a href="https://volantis.js.org/tag-plugins/">Volantis文档:内置标签插件</a></li><li><a href="https://butterfly.js.org/posts/4aa8abbe/#%E6%A8%99%E7%B1%A4%E5%A4%96%E6%8E%9B%EF%BC%88Tag-Plugins%EF%BC%89">Butterfly 安装文档:标签外挂（Tag Plugins）</a></li><li><a href="https://lovelijunyi.gitee.io/posts/c898.html">小弋の生活馆全样式预览</a></li><li><a href="https://github.com/l-lin/font-awesome-animation">l-lin-font-awesome-animation</a></li><li><a href="https://www.antmoe.com/posts/3b43914f/">小康的butterfly主题使用文档</a></li></ul></div></div><div class="timenode"><div class="meta"><p><p>2020-11-15:正式版v1.0</p></p></div><div class="body"><ol><li>基本完成Volantis外挂标签移植。</li><li>移除了btn标签，因为存在冲突。而且不如butterfly自带的button样式好看。</li><li>适配了folding标签的夜间模式。</li><li>打包了静态资源文件，上传蓝奏云。</li></ol></div></div><div class="timenode"><div class="meta"><p><p>2020-11-16:正式版v1.1</p></p></div><div class="body"><ol><li>新增tip.js，将小康大佬的渐变色上标标签写法从HTML的方式改成用标签语法编写。</li><li>新增动态标签样式anima，使用了fontawesome-animation项目。</li><li>新增标签内容夜间模式适配。</li></ol></div></div><div class="timenode"><div class="meta"><p><p>2020-12-03:正式版v1.2</p></p></div><div class="body"><ol><li>新增当初弃用的issues.js标签，以配合友链魔改教程中的issues自动更新功能。</li><li>更新了静态资源文件，请之前的读者重新覆盖安装。</li><li>修改了<code>fontawesome-animation.min.css</code>的引入方式，改成使用<code>@import</code>注入<code>index.css</code>。</li></ol></div></div><div class="timenode"><div class="meta"><p><p>2020-12-07:正式版v1.21</p></p></div><div class="body"><ol><li>资源文件无任何改动。</li><li>更新了动态标签的使用说明。补全参数配置，更换示例。使得教程更加通俗易懂。</li></ol></div></div><div class="timenode"><div class="meta"><p><p>2020-12-13:正式版v1.3</p></p></div><div class="body"><ol><li>新增Butterfly_v3.4.0的配置文件。</li><li>请读者根据自己的主题版本选择替换。</li></ol></div></div><div class="timenode"><div class="meta"><p><p>2020-12-17:正式版v1.4</p></p></div><div class="body"><ol><li>新增两个样式标签poem和icon</li><li>修复了folding标签嵌套字体逐级放大的bug。</li><li>不再更新v3.4.0以下版本的适配内容。</li></ol></div></div><div class="timenode"><div class="meta"><p><p>2020-12-31:正式版v1.5</p></p></div><div class="body"><ol><li>新增两个样式标签，github徽标ghbdage和特效标签wow</li><li>移除静态资源中的<code>fontawesome-animation.min.css</code>以及<code>issues.js</code>，改为CDN引用。</li><li>本帖不专门提供特效标签wow的配置方案，若有需要，请查看站内教程<a href="/posts/abab51cf/">使用wowjs给博客添加动画效果</a></li></ol></div></div><div class="timenode"><div class="meta"><p><p>2021-02-24:正式版v1.6</p></p></div><div class="body"><ol><li>新增一个样式标签，进度条progress</li></ol></div></div></div>              </div>            </details><details cyan open><summary> 点开查看配置教程 </summary>              <div class='content'>              <ol><li>下载资源文件<br><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/Akilarlxh/Tag_Plugins"><img src="https://github-readme-stats.vercel.app/api/pin/?username=Akilarlxh&repo=Tag_Plugins&theme=vue&show_owner=true"/></a></li><li>将下载的<code>Tag_Plugins.zip</code>解压得到<code>butterfly</code>文件夹。</li><li>将<code>butterfly</code>文件夹复制到<code>[Blogroot]\themes\</code>目录下，覆盖当前的<code>butterfly</code>主题文件夹，提示重复则选择替换。(如果担心覆盖自己的其他魔改内容，可以根据静态文件内容自主比对修改)</li><li>修改<code>[Blogroot]\_config.butterfly.yml</code>的<code>inject</code>配置项，添加<code>CDN</code>依赖项。由于<code>issues</code>写入<code>timeline</code>和<code>site-card</code>标签要用到<code>jquery</code>，请务必根据注释指示的版本决定是否添加。<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;https://cdn.jsdelivr.net/gh/l-lin/font-awesome-animation/dist/font-awesome-animation.min.css&quot;</span>  <span class="string">media=&quot;defer&quot;</span> <span class="string">onload=&quot;this.media=&#x27;all&#x27;&quot;&gt;</span>  <span class="comment">#动画标签anima的依赖</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">defer</span> <span class="string">src=&quot;https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line">    <span class="comment"># 自butterfly_v3.4.0+开始，主题基本实现去jquery化，需要自己添加引用，请读者根据版本自行决定是否添加这行引用。</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">defer</span> <span class="string">src=&quot;https://cdn.jsdelivr.net/npm/hexo-theme-volantis@latest/source/js/issues.min.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line">    <span class="comment">#数据集合标签issues的依赖</span></span><br></pre></td></tr></table></figure></li><li>外挂标签使用方案请参阅下文。</li></ol>              </div>            </details><h1 id="行内文本样式-text"><a href="#行内文本样式-text" class="headerlink" title="行内文本样式 text"></a>行内文本样式 text</h1><div class="tabs" id="text"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#text-1">标签语法</button></li><li class="tab active"><button type="button" data-href="#text-2">样式预览</button></li><li class="tab"><button type="button" data-href="#text-3">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="text-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% u 文本内容 %&#125;</span><br><span class="line">&#123;% emp 文本内容 %&#125;</span><br><span class="line">&#123;% wavy 文本内容 %&#125;</span><br><span class="line">&#123;% del 文本内容 %&#125;</span><br><span class="line">&#123;% kbd 文本内容 %&#125;</span><br><span class="line">&#123;% psw 文本内容 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="text-2"><ol><li>带 <u>下划线</u> 的文本</li><li>带 <emp>着重号</emp> 的文本</li><li>带 <wavy>波浪线</wavy> 的文本</li><li>带 <del>删除线</del> 的文本</li><li>键盘样式的文本 <kbd>command</kbd> + <kbd>D</kbd></li><li>密码样式的文本：<psw>这里没有验证码</psw></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="text-3"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 带 &#123;% u 下划线 %&#125; 的文本</span><br><span class="line"><span class="bullet">2.</span> 带 &#123;% emp 着重号 %&#125; 的文本</span><br><span class="line"><span class="bullet">3.</span> 带 &#123;% wavy 波浪线 %&#125; 的文本</span><br><span class="line"><span class="bullet">4.</span> 带 &#123;% del 删除线 %&#125; 的文本</span><br><span class="line"><span class="bullet">5.</span> 键盘样式的文本 &#123;% kbd command %&#125; + &#123;% kbd D %&#125;</span><br><span class="line"><span class="bullet">6.</span> 密码样式的文本：&#123;% psw 这里没有验证码 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="行内文本-span"><a href="#行内文本-span" class="headerlink" title="行内文本 span"></a>行内文本 span</h1><div class="tabs" id="span"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#span-1">标签语法</button></li><li class="tab"><button type="button" data-href="#span-2">配置参数</button></li><li class="tab active"><button type="button" data-href="#span-3">样式预览</button></li><li class="tab"><button type="button" data-href="#span-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="span-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% span 样式参数(参数以空格划分), 文本内容 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="span-2"><ol><li>字体: logo, code</li><li>颜色: <span class='p red'>red</span>,<span class='p yellow'>yellow</span>,<span class='p green'>green</span>,<span class='p cyan'>cyan</span>,<span class='p blue'>blue</span>,<span class='p gray'>gray</span></li><li>大小: small, h4, h3, h2, h1, large, huge, ultra</li><li>对齐方向: left, center, right</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="span-3"><ul><li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<span class='p red'>红色</span>、<span class='p yellow'>黄色</span>、<span class='p green'>绿色</span>、<span class='p cyan'>青色</span>、<span class='p blue'>蓝色</span>、<span class='p gray'>灰色</span>。</li><li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。<br><span class='p center logo large'>Volantis</span><br><span class='p center small'>A Wonderful Theme for Hexo</span></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="span-4"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> 彩色文字</span><br><span class="line">在一段话中方便插入各种颜色的标签，包括：&#123;% span red, 红色 %&#125;、&#123;% span yellow, 黄色 %&#125;、&#123;% span green, 绿色 %&#125;、&#123;% span cyan, 青色 %&#125;、&#123;% span blue, 蓝色 %&#125;、&#123;% span gray, 灰色 %&#125;。</span><br><span class="line"><span class="bullet">-</span> 超大号文字</span><br><span class="line">文档「开始」页面中的标题部分就是超大号文字。</span><br><span class="line">&#123;% span center logo large, Volantis %&#125;</span><br><span class="line">&#123;% span center small, A Wonderful Theme for Hexo %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="段落文本-p"><a href="#段落文本-p" class="headerlink" title="段落文本 p"></a>段落文本 p</h1><div class="tabs" id="p"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#p-1">标签语法</button></li><li class="tab"><button type="button" data-href="#p-2">配置参数</button></li><li class="tab active"><button type="button" data-href="#p-3">样式预览</button></li><li class="tab"><button type="button" data-href="#p-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="p-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% p 样式参数(参数以空格划分), 文本内容 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="p-2"><ol><li>字体: logo, code</li><li>颜色: <span class='p red'>red</span>,<span class='p yellow'>yellow</span>,<span class='p green'>green</span>,<span class='p cyan'>cyan</span>,<span class='p blue'>blue</span>,<span class='p gray'>gray</span></li><li>大小: small, h4, h3, h2, h1, large, huge, ultra</li><li>对齐方向: left, center, right</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="p-3"><ul><li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<p class='p red'>红色</p>、<p class='p yellow'>黄色</p>、<p class='p green'>绿色</p>、<p class='p cyan'>青色</p>、<p class='p blue'>蓝色</p>、<p class='p gray'>灰色</p>。</li><li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。<p class='p center logo large'>Volantis</p><p class='p center small'>A Wonderful Theme for Hexo</p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="p-4"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> 彩色文字</span><br><span class="line">在一段话中方便插入各种颜色的标签，包括：&#123;% p red, 红色 %&#125;、&#123;% p yellow, 黄色 %&#125;、&#123;% p green, 绿色 %&#125;、&#123;% p cyan, 青色 %&#125;、&#123;% p blue, 蓝色 %&#125;、&#123;% p gray, 灰色 %&#125;。</span><br><span class="line"><span class="bullet">-</span> 超大号文字</span><br><span class="line">文档「开始」页面中的标题部分就是超大号文字。</span><br><span class="line">&#123;% p center logo large, Volantis %&#125;</span><br><span class="line">&#123;% p center small, A Wonderful Theme for Hexo %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="引用-note"><a href="#引用-note" class="headerlink" title="引用 note"></a>引用 note</h1><div class="note warning flat"><p>最新版<code>butterfly</code>标签支持引用<code>fontawesome V5</code>图标，效果上已经优于<code>volantis</code>的note标签。故不再额外引入<code>volantis的note样式</code>。<del>做样式适配好麻烦的啊，能偷懒就偷懒吧</del></p></div><div class="note blue icon modern"><i class="note-icon fas fa-bullhorn"></i><p>以下是<code>butterfly</code>主题的note写法。</p></div><div class="tabs" id="note"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#note-1">通用配置</button></li><li class="tab"><button type="button" data-href="#note-2">语法格式</button></li><li class="tab"><button type="button" data-href="#note-3">配置参数</button></li><li class="tab active"><button type="button" data-href="#note-4">样式预览</button></li><li class="tab"><button type="button" data-href="#note-5">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="note-1"><p>修改主题配置文件</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">note:</span></span><br><span class="line">  <span class="comment"># Note tag style values:</span></span><br><span class="line">  <span class="comment">#  - simple    bs-callout old alert style. Default.</span></span><br><span class="line">  <span class="comment">#  - modern    bs-callout new (v2-v3) alert style.</span></span><br><span class="line">  <span class="comment">#  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span></span><br><span class="line">  <span class="comment">#  - disabled  disable all CSS styles import of note tag.</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">simple</span></span><br><span class="line">  <span class="attr">icons:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">border_radius:</span> <span class="number">3</span></span><br><span class="line">  <span class="comment"># Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span></span><br><span class="line">  <span class="comment"># Offset also applied to label tag variables. This option can work with disabled note tag.</span></span><br><span class="line">  <span class="attr">light_bg_offset:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p><code>Note</code>标签外挂有两种用法。<code>icons</code>和<code>light_bg_offset</code>只对方法一生效。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-2"><details cyan><summary> 方法一 </summary>              <div class='content'>              <figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note [class] [no-icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details blue><summary> 方法二 </summary>              <div class='content'>              <figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note [color] [icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-3"><details cyan><summary> 方法一 </summary>              <div class='content'>              <table><thead><tr><th align="left">参数</th><th align="left">用法</th></tr></thead><tbody><tr><td align="left">class</td><td align="left">【可选】标识，不同的标识有不同的配色<br>（ default / primary / success / info / warning / danger ）</td></tr><tr><td align="left">no-icon</td><td align="left">【可选】不显示 icon</td></tr><tr><td align="left">style</td><td align="left">【可选】可以覆盖配置中的 style<br>（simple/modern/flat/disabled）</td></tr></tbody></table>              </div>            </details><details blue><summary> 方法二 </summary>              <div class='content'>              <table><thead><tr><th align="left">参数</th><th align="left">用法</th></tr></thead><tbody><tr><td align="left">class</td><td align="left">【可选】标识，不同的标识有不同的配色<br>（ default / primary / success / info / warning / danger ）</td></tr><tr><td align="left">no-icon</td><td align="left">【可选】可配置自定义 icon (只支持 fontawesome 图标, 也可以配置 no-icon )</td></tr><tr><td align="left">style</td><td align="left">【可选】可以覆盖配置中的 style<br>（simple/modern/flat/disabled）</td></tr></tbody></table>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="note-4"><details cyan><summary> 方法一 </summary>              <div class='content'>              <ol><li><p><code>simple</code>样式</p><div class="note simple"><p>默认 提示块标签</p></div><div class="note default simple"><p>default 提示块标签</p></div><div class="note primary simple"><p>primary 提示块标签</p></div><div class="note success simple"><p>success 提示块标签</p></div><div class="note info simple"><p>info 提示块标签</p></div><div class="note warning simple"><p>warning 提示块标签</p></div><div class="note danger simple"><p>danger 提示块标签</p></div></li><li><p><code>modern</code>样式</p><div class="note modern"><p>默认 提示块标签</p></div><div class="note default modern"><p>default 提示块标签</p></div><div class="note primary modern"><p>primary 提示块标签</p></div><div class="note success modern"><p>success 提示块标签</p></div><div class="note info modern"><p>info 提示块标签</p></div><div class="note warning modern"><p>warning 提示块标签</p></div><div class="note danger modern"><p>danger 提示块标签</p></div></li><li><p><code>flat</code>样式</p><div class="note flat"><p>默认 提示块标签</p></div><div class="note default flat"><p>default 提示块标签</p></div><div class="note primary flat"><p>primary 提示块标签</p></div><div class="note success flat"><p>success 提示块标签</p></div><div class="note info flat"><p>info 提示块标签</p></div><div class="note warning flat"><p>warning 提示块标签</p></div><div class="note danger flat"><p>danger 提示块标签</p></div></li><li><p><code>disabled</code>样式</p><div class="note disabled"><p>默认 提示块标签</p></div><div class="note default disabled"><p>default 提示块标签</p></div><div class="note primary disabled"><p>primary 提示块标签</p></div><div class="note success disabled"><p>success 提示块标签</p></div><div class="note info disabled"><p>info 提示块标签</p></div><div class="note warning disabled"><p>warning 提示块标签</p></div><div class="note danger disabled"><p>danger 提示块标签</p></div></li><li><p><code>no-icon</code>样式</p><div class="note no-icon flat"><p>默认 提示块标签</p></div><div class="note default no-icon flat"><p>default 提示块标签</p></div><div class="note primary no-icon flat"><p>primary 提示块标签</p></div><div class="note success no-icon flat"><p>success 提示块标签</p></div><div class="note info no-icon flat"><p>info 提示块标签</p></div><div class="note warning no-icon flat"><p>warning 提示块标签</p></div><div class="note danger no-icon flat"><p>danger 提示块标签</p></div></li></ol>              </div>            </details><details blue><summary> 方法二 </summary>              <div class='content'>              <ol><li><p>simple样式</p><div class="note icon simple"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon simple"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了….</p></div><div class="note pink icon simple"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon simple"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon simple"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon simple"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon simple"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div></li><li><p>modern样式</p><div class="note icon modern"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon modern"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了….</p></div><div class="note pink icon modern"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon modern"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon modern"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon modern"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon modern"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div></li><li><p>flat样式</p><div class="note icon flat"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon flat"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了….</p></div><div class="note pink icon flat"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon flat"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon flat"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon flat"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon flat"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div></li></ol><ol start="4"><li><p>disabled样式</p><div class="note icon disabled"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon disabled"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了….</p></div><div class="note pink icon disabled"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon disabled"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon disabled"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon disabled"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon disabled"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div></li><li><p>no-icon样式</p><div class="note no-icon flat"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue no-icon flat"><p>2021年快到了….</p></div><div class="note pink no-icon flat"><p>小心开车 安全至上</p></div><div class="note red no-icon flat"><p>这是三片呢？还是四片？</p></div><div class="note orange no-icon flat"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple no-icon flat"><p>剪刀石头布</p></div><div class="note green no-icon flat"><p>前端最讨厌的浏览器</p></div></li></ol>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-5"><details cyan><summary> 方法一 </summary>              <div class='content'>              <ol><li><p><code>simple</code>样式</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note simple %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default simple %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary simple %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success simple %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info simple %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning simple %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger simple %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>modern</code>样式</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note modern %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default modern %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary modern %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success modern %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info modern %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning modern %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger modern %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>flat</code>样式</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note flat %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default flat %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary flat %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success flat %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info flat %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning flat %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger flat %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>disabled</code>样式</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note disabled %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default disabled %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary disabled %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success disabled %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info disabled %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning disabled %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger disabled %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>no-icon</code>样式</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note no-icon %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default no-icon %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary no-icon %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success no-icon %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info no-icon %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning no-icon %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger no-icon %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></li></ol>              </div>            </details><details blue><summary> 方法二 </summary>              <div class='content'>              <ol><li><p><code>simple</code>样式</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; simple %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; simple %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; simple %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; simple%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; simple %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; simple %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; simple %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>modern</code>样式</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; modern %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; modern %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; modern%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; modern %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; modern %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; modern %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>flat</code>样式</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; flat %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; flat %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; flat %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; flat%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; flat %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; flat %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; flat %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>disabled</code>样式</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; disabled %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; disabled %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; disabled %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; disabled %&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; disabled %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; disabled %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; disabled %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>no-icon</code>样式</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note no-icon %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue no-icon %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink no-icon %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red no-icon %&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange no-icon %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple no-icon %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green no-icon %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></li></ol>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="上标标签-tip"><a href="#上标标签-tip" class="headerlink" title="上标标签 tip"></a>上标标签 tip</h1><div class="tip cogs"><p>主要样式参考自<a href="https://www.antmoe.com/posts/3b43914f/">小康的butterfly渐变背景标签</a>,自己写了个<code>tip.js</code>来渲染标签，精简了一下代码。</p></div><div class="tabs" id="tip"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#tip-1">标签语法</button></li><li class="tab"><button type="button" data-href="#tip-2">配置参数</button></li><li class="tab active"><button type="button" data-href="#tip-3">样式预览</button></li><li class="tab"><button type="button" data-href="#tip-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="tip-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% tip [参数，可选] %&#125;文本内容&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tip-2"><ol><li>样式: success,error,warning,bolt,ban,home,sync,cogs,key,bell</li><li>自定义图标: 支持fontawesome。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="tip-3"><div class="tip "><p>默认情况</p></div><div class="tip success"><p>success</p></div><div class="tip error"><p>error</p></div><div class="tip warning"><p>warning</p></div><div class="tip bolt"><p>bolt</p></div><div class="tip ban"><p>ban</p></div><div class="tip home"><p>home</p></div><div class="tip sync"><p>sync</p></div><div class="tip cogs"><p>cogs</p></div><div class="tip key"><p>key</p></div><div class="tip bell"><p>bell</p></div><div class="tip fa-atom"><p>自定义font awesome图标</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tip-4"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% tip %&#125;默认情况&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip success %&#125;success&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip error %&#125;error&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip warning %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip bolt %&#125;bolt&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban %&#125;ban&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip home %&#125;home&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip sync %&#125;sync&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip cogs %&#125;cogs&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip key %&#125;key&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip bell %&#125;bell&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip fa-atom %&#125;自定义font awesome图标&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="动态标签-anima"><a href="#动态标签-anima" class="headerlink" title="动态标签 anima"></a>动态标签 anima</h1><div class="tip faa-horizontal animated"><p>动态标签的实质是引用了<a href="https://github.com/l-lin/font-awesome-animation">font-awesome-animation</a>的css样式，不一定局限于tip标签，也可以是其他标签。<br>只不过这里<code>tip.js</code>是我自己写的，所以我清楚它会怎么被渲染成html，才用的这个写法。<br>可以熟读文档，使用html语言来编写其他标签类型。</p></div><div class="tabs" id="tip"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#tip-1">标签语法</button></li><li class="tab"><button type="button" data-href="#tip-2">配置参数</button></li><li class="tab active"><button type="button" data-href="#tip-3">样式预览</button></li><li class="tab"><button type="button" data-href="#tip-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="tip-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% tip [参数，可选] %&#125;文本内容&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tip-2"><div class="note blue icon simple"><i class="note-icon fas fa-bullhorn"></i><p>更多详情请参看<a href="http://l-lin.github.io/font-awesome-animation/">font-awesome-animation文档</a></p><ol><li>将所需的CSS类添加到图标（或DOM中的任何元素）。</li><li>对于父级悬停样式，需要给目标元素添加指定CSS类，同时还要给目标元素的父级元素添加CSS类<code>faa-parent animated-hover</code>。（详情见示例及示例源码）<br>You can regulate the speed of the animation by adding the CSS class or . faa-fastfaa-slow</li><li>可以通过给目标元素添加CSS类<code>faa-fast</code>或<code>faa-slow</code>来控制动画快慢。</li></ol></div><table><thead><tr><th align="left">On DOM load<br>当页面加载时<br>显示动画</th><th align="left">On hover<br>当鼠标悬停时<br>显示动画</th><th align="left">On parent hover<br>当鼠标悬停<br>在父级元素时<br>显示动画</th></tr></thead><tbody><tr><td align="left"><span><i class="fas fa-wrench faa-wrench animated"></i>&nbsp;faa-wrench animated</span></td><td align="left"><span><i class="fas fa-wrench faa-wrench animated-hover"></i>&nbsp;faa-wrench animated-hover</span></td><td align="left"><span class="faa-parent animated-hover"><i class="fas fa-wrench faa-wrench"></i>&nbsp;faa-wrench</span></td></tr><tr><td align="left"><span><i class="fas fa-bell faa-ring animated"></i>&nbsp;faa-ring animated</span></td><td align="left"><span><i class="fas fa-bell faa-ring animated-hover"></i>&nbsp;faa-ring animated-hover</span></td><td align="left"><span class="faa-parent animated-hover"><i class="fas fa-bell faa-ring"></i>&nbsp;faa-ring</span></td></tr><tr><td align="left"><span><i class="fas fa-envelope faa-horizontal animated"></i>&nbsp;faa-horizontal animated</span></td><td align="left"><span><i class="fas fa-envelope faa-horizontal animated-hover"></i>&nbsp;faa-horizontal animated-hover</span></td><td align="left"><span class="faa-parent animated-hover"><i class="fas fa-envelope faa-horizontal"></i>&nbsp;faa-horizontal</span></td></tr><tr><td align="left"><span><i class="fas fa-thumbs-up faa-vertical animated"></i>&nbsp;faa-vertical animated</span></td><td align="left"><span><i class="fas fa-thumbs-up faa-vertical animated-hover"></i>&nbsp;faa-vertical animated-hover</span></td><td align="left"><span class="faa-parent animated-hover"><i class="fas fa-thumbs-up faa-vertical"></i>&nbsp;faa-vertical</span></td></tr><tr><td align="left"><span><i class="fas fa-exclamation-triangle faa-flash animated"></i>&nbsp;faa-flash animated</span></td><td align="left"><span><i class="fas fa-exclamation-triangle faa-flash animated-hover"></i>&nbsp;faa-flash animated-hover</span></td><td align="left"><span class="faa-parent animated-hover"><i class="fas fa-exclamation-triangle faa-flash"></i>&nbsp;faa-flash</span></td></tr><tr><td align="left"><span><i class="fas fa-thumbs-up faa-bounce animated"></i>&nbsp;faa-bounce animated</span></td><td align="left"><span><i class="fas fa-thumbs-up faa-bounce animated-hover"></i>&nbsp;faa-bounce animated-hover</span></td><td align="left"><span class="faa-parent animated-hover"><i class="fas fa-thumbs-up faa-bounce"></i>&nbsp;faa-bounce</span></td></tr><tr><td align="left"><span><i class="fas fa-spinner faa-spin animated"></i>&nbsp;faa-spin animated</span></td><td align="left"><span><i class="fas fa-spinner faa-spin animated-hover"></i>&nbsp;faa-spin animated-hover</span></td><td align="left"><span class="faa-parent animated-hover"><i class="fas fa-spinner faa-spin"></i>&nbsp;faa-spin</span></td></tr><tr><td align="left"><span><i class="fas fa-plane faa-tada animated"></i>&nbsp;faa-tada animated</span></td><td align="left"><span><i class="fas fa-plane faa-tada animated-hover"></i>&nbsp;faa-tada animated-hover</span></td><td align="left"><span class="faa-parent animated-hover"><i class="fas fa-plane faa-tada"></i>&nbsp;faa-tada</span></td></tr><tr><td align="left"><span><i class="fas fa-heart faa-pulse animated"></i>&nbsp;faa-pulse animated</span></td><td align="left"><span><i class="fas fa-heart faa-pulse animated-hover"></i>&nbsp;faa-pulse animated-hover</span></td><td align="left"><span class="faa-parent animated-hover"><i class="fas fa-heart faa-pulse"></i>&nbsp;faa-pulse</span></td></tr><tr><td align="left"><span><i class="fas fa-envelope faa-shake animated"></i>&nbsp;faa-shake animated</span></td><td align="left"><span><i class="fas fa-envelope faa-shake animated-hover"></i>&nbsp;faa-shake animated-hover</span></td><td align="left"><span class="faa-parent animated-hover"><i class="fas fa-envelope faa-shake"></i>&nbsp;faa-shake</span></td></tr><tr><td align="left"><span><i class="fas fa-trophy faa-tada animated"></i>&nbsp;faa-tada animated</span></td><td align="left"><span><i class="fas fa-trophy faa-tada animated-hover"></i>&nbsp;faa-tada animated-hover</span></td><td align="left"><span class="faa-parent animated-hover"><i class="fas fa-trophy faa-tada"></i>&nbsp;faa-tada</span></td></tr><tr><td align="left"><span><i class="fas fa-space-shuttle faa-passing animated"></i>&nbsp;faa-passing animated</span></td><td align="left"><span><i class="fas fa-space-shuttle faa-passing animated-hover"></i>&nbsp;faa-passing animated-hover</span></td><td align="left"><span class="faa-parent animated-hover"><i class="fas fa-space-shuttle faa-passing"></i>&nbsp;faa-passing</span></td></tr><tr><td align="left"><span><i class="fas fa-space-shuttle faa-passing-reverse animated"></i>&nbsp;faa-passing-reverse animated</span></td><td align="left"><span><i class="fas fa-space-shuttle faa-passing-reverse animated-hover"></i>&nbsp;faa-passing-reverse animated-hover</span></td><td align="left"><span class="faa-parent animated-hover"><i class="fas fa-space-shuttle faa-passing-reverse"></i>&nbsp;faa-passing-reverse</span></td></tr><tr><td align="left"><span><i class="fas fa-circle faa-burst animated"></i>&nbsp;faa-burst animated</span></td><td align="left"><span><i class="fas fa-circle faa-burst animated-hover"></i>&nbsp;faa-burst animated-hover</span></td><td align="left"><span class="faa-parent animated-hover"><i class="fas fa-circle faa-burst"></i>&nbsp;faa-burst</span></td></tr><tr><td align="left"><span><i class="fas fa-star faa-falling animated"></i>&nbsp;faa-falling animated</span></td><td align="left"><span><i class="fas fa-star faa-falling animated-hover"></i>&nbsp;faa-falling animated-hover</span></td><td align="left"><span class="faa-parent animated-hover"><i class="fas fa-star faa-falling"></i>&nbsp;faa-falling</span></td></tr><tr><td align="left"><span><i class="fas fa-rocket faa-rising animated"></i>&nbsp;faa-rising animated</span></td><td align="left"><span><i class="fas fa-rocket faa-rising animated-hover"></i>&nbsp;faa-rising animated-hover</span></td><td align="left"><span class="faa-parent animated-hover"><i class="fas fa-rocket faa-rising"></i>&nbsp;faa-rising</span></td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="tip-3"><ol><li><p>On DOM load（当页面加载时显示动画）</p><div class="tip warning faa-horizontal animated"><p>warning</p></div><div class="tip ban faa-flash animated"><p>ban</p></div></li><li><p>调整动画速度。</p><div class="tip warning faa-horizontal animated faa-fast"><p>warning</p></div><div class="tip ban faa-flash animated faa-slow"><p>ban</p></div></li><li><p>On hover（当鼠标悬停时显示动画）</p><div class="tip warning faa-horizontal animated-hover"><p>warning</p></div><div class="tip ban faa-flash animated-hover"><p>ban</p></div></li><li><p>On parent hover（当鼠标悬停在父级元素时显示动画）</p><div class="tip warning faa-parent animated-hover"><p class="faa-horizontal">warning</p></div><div class="tip ban faa-parent animated-hover"><p class="faa-flash">ban</p></div></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tip-4"><ol><li><p>On DOM load（当页面加载时显示动画）</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure></li><li><p>调整动画速度</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated faa-fast %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated faa-slow %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure></li><li><p>On hover（当鼠标悬停时显示动画）</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated-hover %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated-hover %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure></li><li><p>On parent hover（当鼠标悬停在父级元素时显示动画）</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% tip warning faa-parent animated-hover %&#125;<span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;faa-horizontal&quot;</span>&gt;</span></span>warning<span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-parent animated-hover %&#125;<span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;faa-flash&quot;</span>&gt;</span></span>ban<span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="复选列表-checkbox"><a href="#复选列表-checkbox" class="headerlink" title="复选列表 checkbox"></a>复选列表 checkbox</h1><div class="tabs" id="checkbox"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#checkbox-1">标签语法</button></li><li class="tab"><button type="button" data-href="#checkbox-2">配置参数</button></li><li class="tab active"><button type="button" data-href="#checkbox-3">样式预览</button></li><li class="tab"><button type="button" data-href="#checkbox-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="checkbox-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% checkbox 样式参数（可选）, 文本（支持简单md） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="checkbox-2"><ol><li>样式: plus, minus, times</li><li>颜色: <span class='p red'>red</span>,<span class='p yellow'>yellow</span>,<span class='p green'>green</span>,<span class='p cyan'>cyan</span>,<span class='p blue'>blue</span>,<span class='p gray'>gray</span></li><li>选中状态: checked</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="checkbox-3"><div class='checkbox'><input type="checkbox" />            <p>纯文本测试</p>            </div><div class='checkbox checked'><input type="checkbox" checked="checked"/>            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/">markdown</a> 语法</p>            </div><div class='checkbox red'><input type="checkbox" />            <p>支持自定义颜色</p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>绿色 + 默认选中</p>            </div><div class='checkbox yellow checked'><input type="checkbox" checked="checked"/>            <p>黄色 + 默认选中</p>            </div><div class='checkbox cyan checked'><input type="checkbox" checked="checked"/>            <p>青色 + 默认选中</p>            </div><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>蓝色 + 默认选中</p>            </div><div class='checkbox plus green checked'><input type="checkbox" checked="checked"/>            <p>增加</p>            </div><div class='checkbox minus yellow checked'><input type="checkbox" checked="checked"/>            <p>减少</p>            </div><div class='checkbox times red checked'><input type="checkbox" checked="checked"/>            <p>叉</p>            </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="checkbox-4"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% checkbox 纯文本测试 %&#125;</span><br><span class="line">&#123;% checkbox checked, 支持简单的 [<span class="string">markdown</span>](<span class="link">https://guides.github.com/features/mastering-markdown/</span>) 语法 %&#125;</span><br><span class="line">&#123;% checkbox red, 支持自定义颜色 %&#125;</span><br><span class="line">&#123;% checkbox green checked, 绿色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox yellow checked, 黄色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox cyan checked, 青色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox blue checked, 蓝色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox plus green checked, 增加 %&#125;</span><br><span class="line">&#123;% checkbox minus yellow checked, 减少 %&#125;</span><br><span class="line">&#123;% checkbox times red checked, 叉 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="单选列表-radio"><a href="#单选列表-radio" class="headerlink" title="单选列表 radio"></a>单选列表 radio</h1><div class="tabs" id="radio"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#radio-1">标签语法</button></li><li class="tab"><button type="button" data-href="#radio-2">配置参数</button></li><li class="tab active"><button type="button" data-href="#radio-3">样式预览</button></li><li class="tab"><button type="button" data-href="#radio-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="radio-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% radio 样式参数（可选）, 文本（支持简单md） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="radio-2"><ol><li>颜色: <span class='p red'>red</span>,<span class='p yellow'>yellow</span>,<span class='p green'>green</span>,<span class='p cyan'>cyan</span>,<span class='p blue'>blue</span>,<span class='p gray'>gray</span></li><li>选中状态: checked</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="radio-3"><div class='checkbox'><input type="radio" />            <p>纯文本测试</p>            </div><div class='checkbox checked'><input type="radio" checked="checked"/>            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/">markdown</a> 语法</p>            </div><div class='checkbox red'><input type="radio" />            <p>支持自定义颜色</p>            </div><div class='checkbox green'><input type="radio" />            <p>绿色</p>            </div><div class='checkbox yellow'><input type="radio" />            <p>黄色</p>            </div><div class='checkbox cyan'><input type="radio" />            <p>青色</p>            </div><div class='checkbox blue'><input type="radio" />            <p>蓝色</p>            </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="radio-4"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% radio 纯文本测试 %&#125;</span><br><span class="line">&#123;% radio checked, 支持简单的 [<span class="string">markdown</span>](<span class="link">https://guides.github.com/features/mastering-markdown/</span>) 语法 %&#125;</span><br><span class="line">&#123;% radio red, 支持自定义颜色 %&#125;</span><br><span class="line">&#123;% radio green, 绿色 %&#125;</span><br><span class="line">&#123;% radio yellow, 黄色 %&#125;</span><br><span class="line">&#123;% radio cyan, 青色 %&#125;</span><br><span class="line">&#123;% radio blue, 蓝色 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="时间轴-timeline"><a href="#时间轴-timeline" class="headerlink" title="时间轴 timeline"></a>时间轴 timeline</h1><div class="tabs" id="timeline"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#timeline-1">标签语法</button></li><li class="tab active"><button type="button" data-href="#timeline-2">样式预览</button></li><li class="tab"><button type="button" data-href="#timeline-3">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="timeline-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% timeline 时间线标题（可选） %&#125;</span><br><span class="line">&#123;% timenode 时间节点（标题） %&#125;</span><br><span class="line">正文内容</span><br><span class="line">&#123;% endtimenode %&#125;</span><br><span class="line">&#123;% timenode 时间节点（标题） %&#125;</span><br><span class="line">正文内容</span><br><span class="line">&#123;% endtimenode %&#125;</span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="timeline-2"><div class="timeline"><div class="timenode"><div class="meta"><p><p>2020-07-24 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases">2.6.6 -&gt; 3.0</a></p></p></div><div class="body"><ol><li>如果有 <code>hexo-lazyload-image</code> 插件，需要删除并重新安装最新版本，设置 <code>lazyload.isSPA: true</code>。</li><li>2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 <code>use_cdn: true</code> 则需要删除。</li><li>2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。</li><li>2.x 版本的置顶 <code>top: true</code> 改为了 <code>pin: true</code>，并且同样适用于 <code>layout: page</code> 的页面。</li><li>如果使用了 <code>hexo-offline</code> 插件，建议卸载，3.0 版本默认开启了 pjax 服务。</li></ol></div></div><div class="timenode"><div class="meta"><p><p>2020-05-15 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6">2.6.3 -&gt; 2.6.6</a></p></p></div><div class="body"><p>不需要额外处理。</p></div></div><div class="timenode"><div class="meta"><p><p>2020-04-20 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3">2.6.2 -&gt; 2.6.3</a></p></p></div><div class="body"><ol><li>全局搜索 <code>seotitle</code> 并替换为 <code>seo_title</code>。</li><li>group 组件的索引规则有变，使用 group 组件的文章内，<code>group: group_name</code> 对应的组件名必须是 <code>group_name</code>。</li><li>group 组件的列表名优先显示文章的 <code>short_title</code> 其次是 <code>title</code>。</li></ol></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="timeline-3"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% timeline %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% timenode 2020-07-24 [<span class="string">2.6.6 -&gt; 3.0</span>](<span class="link">https://github.com/volantis-x/hexo-theme-volantis/releases</span>) %&#125;</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 如果有 <span class="code">`hexo-lazyload-image`</span> 插件，需要删除并重新安装最新版本，设置 <span class="code">`lazyload.isSPA: true`</span>。</span><br><span class="line"><span class="bullet">2.</span> 2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 <span class="code">`use_cdn: true`</span> 则需要删除。</span><br><span class="line"><span class="bullet">3.</span> 2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。</span><br><span class="line"><span class="bullet">4.</span> 2.x 版本的置顶 <span class="code">`top: true`</span> 改为了 <span class="code">`pin: true`</span>，并且同样适用于 <span class="code">`layout: page`</span> 的页面。</span><br><span class="line"><span class="bullet">5.</span> 如果使用了 <span class="code">`hexo-offline`</span> 插件，建议卸载，3.0 版本默认开启了 pjax 服务。</span><br><span class="line"></span><br><span class="line">&#123;% endtimenode %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% timenode 2020-05-15 [<span class="string">2.6.3 -&gt; 2.6.6</span>](<span class="link">https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6</span>) %&#125;</span><br><span class="line"></span><br><span class="line">不需要额外处理。</span><br><span class="line"></span><br><span class="line">&#123;% endtimenode %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% timenode 2020-04-20 [<span class="string">2.6.2 -&gt; 2.6.3</span>](<span class="link">https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3</span>) %&#125;</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 全局搜索 <span class="code">`seotitle`</span> 并替换为 <span class="code">`seo_title`</span>。</span><br><span class="line"><span class="bullet">2.</span> group 组件的索引规则有变，使用 group 组件的文章内，<span class="code">`group: group_name`</span> 对应的组件名必须是 <span class="code">`group_name`</span>。</span><br><span class="line"><span class="bullet">2.</span> group 组件的列表名优先显示文章的 <span class="code">`short_title`</span> 其次是 <span class="code">`title`</span>。</span><br><span class="line"></span><br><span class="line">&#123;% endtimenode %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="链接卡片-link"><a href="#链接卡片-link" class="headerlink" title="链接卡片 link"></a>链接卡片 link</h1><div class="tabs" id="link"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#link-1">标签语法</button></li><li class="tab active"><button type="button" data-href="#link-2">样式预览</button></li><li class="tab"><button type="button" data-href="#link-3">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="link-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% link 标题, 链接, 图片链接（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="link-2"><div class="tag link"><a class="link-card" title="糖果屋教程贴" href="https://akilar.top/posts/615e2dec/"><div class="left"><img src="https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io/img/siteicon/favicon.ico"/></div><div class="right"><p class="text">糖果屋教程贴</p><p class="url">https://akilar.top/posts/615e2dec/</p></div></a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="link-3"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% link 糖果屋教程贴, https://akilar.top/posts/615e2dec/, https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io/img/siteicon/favicon.ico %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="按钮-btns"><a href="#按钮-btns" class="headerlink" title="按钮 btns"></a>按钮 btns</h1><div class="note blue icon simple"><i class="note-icon fas fa-bullhorn"></i><p><code>Volantis</code>的按钮使用的是<code>btn</code>和<code>btns</code>标签。<code>btns</code>和<code>butterfly</code>的<code>button</code>不冲突，但是<code>btn</code>会被强制渲染，导致部分参数失效,而且<code>btn</code>的效果还是<code>butterfly</code>的<code>button</code>更好看些。所以就只适配了<code>btns</code>。</p></div><div class="tabs" id="btn"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#btn-1">标签语法</button></li><li class="tab"><button type="button" data-href="#btn-2">参数配置</button></li><li class="tab active"><button type="button" data-href="#btn-3">样式预览</button></li><li class="tab"><button type="button" data-href="#btn-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="btn-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% btns 样式参数 %&#125;</span><br><span class="line">&#123;% cell 标题, 链接, 图片或者图标 %&#125;</span><br><span class="line">&#123;% cell 标题, 链接, 图片或者图标 %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="btn-2"><ol><li>圆角样式：rounded, circle</li><li>增加文字样式：可以在容器内增加 <code>&lt;b&gt;标题&lt;/b&gt; </code>和<code> &lt;p&gt;描述文字&lt;/p&gt;</code></li><li>布局方式：<br>默认为自动宽度，适合视野内只有一两个的情况。</li></ol><table><thead><tr><th align="left">参数</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">wide</td><td align="left">宽一点的按钮</td></tr><tr><td align="left">fill</td><td align="left">填充布局，自动铺满至少一行，多了会换行</td></tr><tr><td align="left">center</td><td align="left">居中，按钮之间是固定间距</td></tr><tr><td align="left">around</td><td align="left">居中分散</td></tr><tr><td align="left">grid2</td><td align="left">等宽最多2列，屏幕变窄会适当减少列数</td></tr><tr><td align="left">grid3</td><td align="left">等宽最多3列，屏幕变窄会适当减少列数</td></tr><tr><td align="left">grid4</td><td align="left">等宽最多4列，屏幕变窄会适当减少列数</td></tr><tr><td align="left">grid5</td><td align="left">等宽最多5列，屏幕变窄会适当减少列数</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="btn-3"><ol><li><p>如果需要显示类似「团队成员」之类的一组含有头像的链接：</p><div class="btns circle grid5">         <a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a>       </div></li><li><p>或者含有图标的按钮：</p><div class="btns rounded grid5">         <a class="button" href='/' title='下载源码'><i class='fas fa-download'></i>下载源码</a><a class="button" href='/' title='查看文档'><i class='fas fa-book-open'></i>查看文档</a>       </div></li><li><p>圆形图标 + 标题 + 描述 + 图片 + 网格5列 + 居中</p><div class="btns circle center grid5">         <a href='https://apps.apple.com/cn/app/heart-mate-pro-hrm-utility/id1463348922?ls=1'><i class='fab fa-apple'></i><b>心率管家</b><p class='p red'>专业版</p><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/qrcode/heartmate_pro.png'></a><a href='https://apps.apple.com/cn/app/heart-mate-lite-hrm-utility/id1475747930?ls=1'><i class='fab fa-apple'></i><b>心率管家</b><p class='p green'>免费版</p><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/qrcode/heartmate_lite.png'></a>       </div></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="btn-4"><ol><li>如果需要显示类似「团队成员」之类的一组含有头像的链接：<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% btns circle grid5 %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure></li><li>或者含有图标的按钮：<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% btns rounded grid5 %&#125;</span><br><span class="line">&#123;% cell 下载源码, /, fas fa-download %&#125;</span><br><span class="line">&#123;% cell 查看文档, /, fas fa-book-open %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure></li><li>圆形图标 + 标题 + 描述 + 图片 + 网格5列 + 居中<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% btns circle center grid5 %&#125;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;https://apps.apple.com/cn/app/heart-mate-pro-hrm-utility/id1463348922?ls=1&#x27;</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&#x27;fab fa-apple&#x27;</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span></span>心率管家<span class="xml"><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line">  &#123;% p red, 专业版 %&#125;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/qrcode/heartmate_pro.png&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;https://apps.apple.com/cn/app/heart-mate-lite-hrm-utility/id1475747930?ls=1&#x27;</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&#x27;fab fa-apple&#x27;</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span></span>心率管家<span class="xml"><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line">  &#123;% p green, 免费版 %&#125;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/qrcode/heartmate_lite.png&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="github卡片-ghcard"><a href="#github卡片-ghcard" class="headerlink" title="github卡片 ghcard"></a>github卡片 ghcard</h1><div class="note blue icon modern"><i class="note-icon fas fa-bullhorn"></i><p>ghcard使用了<code>github-readme-stats</code>的API，支持直接使用markdown语法来写。</p></div><div class="tabs" id="ghcard"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#ghcard-1">标签语法</button></li><li class="tab"><button type="button" data-href="#ghcard-2">配置参数</button></li><li class="tab active"><button type="button" data-href="#ghcard-3">样式预览</button></li><li class="tab"><button type="button" data-href="#ghcard-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="ghcard-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% ghcard 用户名, 其它参数（可选） %&#125;</span><br><span class="line">&#123;% ghcard 用户名/仓库, 其它参数（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="ghcard-2"><p>更多参数可以参考：<br><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/anuraghazra/github-readme-stats"><img src="https://github-readme-stats.vercel.app/api/pin/?username=anuraghazra&repo=github-readme-stats&show_owner=true"/></a><br>使用<code>,</code>分割各个参数。写法为：<code>参数名=参数值</code><br>以下只写几个常用参数值。</p><table><thead><tr><th align="left">参数名</th><th align="left">取值</th><th align="left">释义</th></tr></thead><tbody><tr><td align="left">hide</td><td align="left">stars,commits,prs,issues,contribs</td><td align="left">隐藏指定统计</td></tr><tr><td align="left">count_private</td><td align="left">true</td><td align="left">将私人项目贡献添加到总提交计数中</td></tr><tr><td align="left">show_icons</td><td align="left">true</td><td align="left">显示图标</td></tr><tr><td align="left">theme</td><td align="left">请查阅<a href="https://github.com/anuraghazra/github-readme-stats/blob/master/themes/README.md">Available Themes</a></td><td align="left">主题</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="ghcard-3"><ol><li>用户信息卡片</li></ol><table><thead><tr><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/xaoxuu"><img src="https://github-readme-stats.vercel.app/api/?username=xaoxuu&show_owner=true"/></a></th><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/xaoxuu"><img src="https://github-readme-stats.vercel.app/api/?username=xaoxuu&theme=vue&show_owner=true"/></a></th></tr></thead><tbody><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/xaoxuu"><img src="https://github-readme-stats.vercel.app/api/?username=xaoxuu&theme=buefy&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/xaoxuu"><img src="https://github-readme-stats.vercel.app/api/?username=xaoxuu&theme=solarized-light&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/xaoxuu"><img src="https://github-readme-stats.vercel.app/api/?username=xaoxuu&theme=onedark&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/xaoxuu"><img src="https://github-readme-stats.vercel.app/api/?username=xaoxuu&theme=solarized-dark&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/xaoxuu"><img src="https://github-readme-stats.vercel.app/api/?username=xaoxuu&theme=algolia&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/xaoxuu"><img src="https://github-readme-stats.vercel.app/api/?username=xaoxuu&theme=calm&show_owner=true"/></a></td></tr></tbody></table><ol start="2"><li>仓库信息卡片</li></ol><table><thead><tr><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&show_owner=true"/></a></th><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=vue&show_owner=true"/></a></th></tr></thead><tbody><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=buefy&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=solarized-light&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=onedark&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=solarized-dark&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=algolia&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=calm&show_owner=true"/></a></td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="ghcard-4"><ol><li><p>用户信息卡片</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">| &#123;% ghcard xaoxuu %&#125; | &#123;% ghcard xaoxuu, theme=vue %&#125; |</span><br><span class="line">| -- | -- |</span><br><span class="line">| &#123;% ghcard xaoxuu, theme=buefy %&#125; | &#123;% ghcard xaoxuu, theme=solarized-light %&#125; |</span><br><span class="line">| &#123;% ghcard xaoxuu, theme=onedark %&#125; | &#123;% ghcard xaoxuu, theme=solarized-dark %&#125; |</span><br><span class="line">| &#123;% ghcard xaoxuu, theme=algolia %&#125; | &#123;% ghcard xaoxuu, theme=calm %&#125; |</span><br></pre></td></tr></table></figure></li><li><p>仓库信息卡片</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=vue %&#125; |</span><br><span class="line">| -- | -- |</span><br><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis, theme=buefy %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=solarized-light %&#125; |</span><br><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis, theme=onedark %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=solarized-dark %&#125; |</span><br><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis, theme=algolia %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=calm %&#125; |</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="github徽标-ghbdage"><a href="#github徽标-ghbdage" class="headerlink" title="github徽标 ghbdage"></a>github徽标 ghbdage</h1><div class="tip cogs"><p>关于ghbdage参数的更多具体用法可以参看站内教程：<a href="/posts/e87ad7f8">添加github徽标</a></p></div><div class="tabs" id="ghbdage"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#ghbdage-1">标签语法</button></li><li class="tab"><button type="button" data-href="#ghbdage-2">配置参数</button></li><li class="tab active"><button type="button" data-href="#ghbdage-3">样式预览</button></li><li class="tab"><button type="button" data-href="#ghbdage-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="ghbdage-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% bdage [right],[left],[logo]||[color],[link],[title]||[option] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="ghbdage-2"><ol><li><code>left</code>：徽标左边的信息，必选参数。</li><li><code>right</code>: 徽标右边的信息，必选参数，</li><li><code>logo</code>：徽标图标，图标名称详见<a href="https://simpleicons.org/">simpleicons</a>，可选参数。</li><li><code>color</code>：徽标右边的颜色，可选参数。</li><li><code>link</code>：指向的链接，可选参数。</li><li><code>title</code>：徽标的额外信息，可选参数。主要用于优化SEO，但<code>object</code>标签不会像<code>a</code>标签一样在鼠标悬停显示<code>title</code>信息。</li><li><code>option</code>：自定义参数，支持<a href="https://shields.io/">shields.io</a>的全部API参数支持，具体参数可以参看上文中的拓展写法示例。形式为<code>name1=value2&amp;name2=value2</code>。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="ghbdage-3"><div class="note info modern"><p>本外挂标签的参数分为三组，用<code>||</code>分割。</p></div>1. 基本参数<br><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Butterfly-Theme-orange?logo=&color=orange&link=&"></object><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Hexo-Frame-orange?logo=hexo&color=orange&link=&"></object>2. 信息参数<br><object class="ghbdage" style="margin-inline:5px" title="本站使用JsDelivr为静态资源提供CDN加速" standby="loading..." data="https://img.shields.io/badge/JsDelivr-CDN-orange?logo=jsDelivr&color=abcdef&link=https://metroui.org.ua/index.html&"></object><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/GitHub-Source-orange?logo=GitHub&color=orange&link=https://github.com/&"></object>3. 拓展参数<br><object class="ghbdage" style="margin-inline:5px" title="本站采用双线部署，默认线路托管于Vercel" standby="loading..." data="https://img.shields.io/badge/Vercel-Hosted-orange?logo=Vercel&color=brightgreen&link=https://vercel.com/&style=social&logoWidth=40"></object><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Vercel-Hosted-orange?logo=Vercel&color=orange&link=&style=social&logoWidth=40&logoColor=violet"></object><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="ghbdage-4"><div class="note info modern"><p>本外挂标签的参数分为三组，用<code>||</code>分割。</p></div>1. 基本参数,定义徽标左右文字和图标<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% bdage Theme,Butterfly %&#125;</span><br><span class="line">&#123;% bdage Frame,Hexo,hexo %&#125;</span><br></pre></td></tr></table></figure>2. 信息参数，定义徽标右侧内容背景色，指向链接<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% bdage CDN,JsDelivr,jsDelivr||abcdef,https://metroui.org.ua/index.html,本站使用JsDelivr为静态资源提供CDN加速 %&#125;</span><br><span class="line">//如果是跨顺序省略可选参数，仍然需要写个逗号,用作分割</span><br><span class="line">&#123;% bdage Source,GitHub,GitHub||,https://github.com/ %&#125;</span><br></pre></td></tr></table></figure>3. 拓展参数，支持shields的API的全部参数内容<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% bdage Hosted,Vercel,Vercel||brightgreen,https://vercel.com/,本站采用双线部署，默认线路托管于Vercel||style=social&amp;logoWidth=20 %&#125;</span><br><span class="line">//如果是跨顺序省略可选参数组，仍然需要写双竖线||用作分割</span><br><span class="line">&#123;% bdage Hosted,Vercel,Vercel||||style=social&amp;logoWidth=20&amp;logoColor=violet %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="网站卡片-sites"><a href="#网站卡片-sites" class="headerlink" title="网站卡片 sites"></a>网站卡片 sites</h1><div class="tabs" id="site"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#site-1">标签语法</button></li><li class="tab active"><button type="button" data-href="#site-2">样式预览</button></li><li class="tab"><button type="button" data-href="#site-3">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="site-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% sitegroup %&#125;</span><br><span class="line">&#123;% site 标题, url=链接, screenshot=截图链接, avatar=头像链接（可选）, description=描述（可选） %&#125;</span><br><span class="line">&#123;% site 标题, url=链接, screenshot=截图链接, avatar=头像链接（可选）, description=描述（可选） %&#125;</span><br><span class="line">&#123;% endsitegroup %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="site-2"><div class="site-card-group"><a class="site-card" href="https://xaoxuu.com"><div class="img"><img src="https://i.loli.net/2020/08/21/VuSwWZ1xAeUHEBC.jpg"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png"/><span class="title">xaoxuu</span><span class="desc">简约风格</span></div></a><a class="site-card" href="https://inkss.cn"><div class="img"><img src="https://i.loli.net/2020/08/21/Vzbu3i8fXs6Nh5Y.jpg"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/inkss/common@master/static/web/avatar.jpg"/><span class="title">inkss</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://blog.mhuig.top"><div class="img"><img src="https://i.loli.net/2020/08/22/d24zpPlhLYWX6D1.png"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/MHuiG/imgbed@master/data/p.png"/><span class="title">MHuiG</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://colsrch.top"><div class="img"><img src="https://i.loli.net/2020/08/22/dFRWXm52OVu8qfK.png"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/avatar.jpg"/><span class="title">Colsrch</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://linhk1606.github.io"><div class="img"><img src="https://i.loli.net/2020/08/21/3PmGLCKicnfow1x.png"/></div><div class="info"><img src="https://i.loli.net/2020/02/09/PN7I5RJfFtA93r2.png"/><span class="title">Linhk1606</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="site-3"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% sitegroup %&#125;</span><br><span class="line">&#123;% site xaoxuu, url=https://xaoxuu.com, screenshot=https://i.loli.net/2020/08/21/VuSwWZ1xAeUHEBC.jpg, avatar=https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png, description=简约风格 %&#125;</span><br><span class="line">&#123;% site inkss, url=https://inkss.cn, screenshot=https://i.loli.net/2020/08/21/Vzbu3i8fXs6Nh5Y.jpg, avatar=https://cdn.jsdelivr.net/gh/inkss/common@master/static/web/avatar.jpg, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site MHuiG, url=https://blog.mhuig.top, screenshot=https://i.loli.net/2020/08/22/d24zpPlhLYWX6D1.png, avatar=https://cdn.jsdelivr.net/gh/MHuiG/imgbed@master/data/p.png, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site Colsrch, url=https://colsrch.top, screenshot=https://i.loli.net/2020/08/22/dFRWXm52OVu8qfK.png, avatar=https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/avatar.jpg, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site Linhk1606, url=https://linhk1606.github.io, screenshot=https://i.loli.net/2020/08/21/3PmGLCKicnfow1x.png, avatar=https://i.loli.net/2020/02/09/PN7I5RJfFtA93r2.png, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% endsitegroup %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="行内图片-inlineimage"><a href="#行内图片-inlineimage" class="headerlink" title="行内图片 inlineimage"></a>行内图片 inlineimage</h1><div class="tabs" id="inlineimage"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#inlineimage-1">标签语法</button></li><li class="tab"><button type="button" data-href="#inlineimage-2">参数配置</button></li><li class="tab active"><button type="button" data-href="#inlineimage-3">样式预览</button></li><li class="tab"><button type="button" data-href="#inlineimage-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="inlineimage-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% inlineimage 图片链接, height=高度（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="inlineimage-2"><ol><li>高度：height=20px</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="inlineimage-3"><p>这是 <img no-lazy class="inline" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/0000.gif" style="height:1.5em"/> 一段话。</p><p>这又是 <img no-lazy class="inline" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif" style="height:40px;"/> 一段话。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="inlineimage-4"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">这是 &#123;% inlineimage https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/0000.gif %&#125; 一段话。</span><br><span class="line"></span><br><span class="line">这又是 &#123;% inlineimage https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif, height=40px %&#125; 一段话。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="单张图片-image"><a href="#单张图片-image" class="headerlink" title="单张图片 image"></a>单张图片 image</h1><div class="tabs" id="image"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#image-1">标签语法</button></li><li class="tab"><button type="button" data-href="#image-2">参数配置</button></li><li class="tab active"><button type="button" data-href="#image-3">样式预览</button></li><li class="tab"><button type="button" data-href="#image-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="image-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% image 链接, width=宽度（可选）, height=高度（可选）, alt=描述（可选）, bg=占位颜色（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="image-2"><ol><li>图片宽度高度：width=300px, height=32px</li><li>图片描述：alt=图片描述（butterfly需要在主题配置文件中开启图片描述）</li><li>占位背景色：bg=#f2f2f2</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="image-3"><ol><li><p>添加描述：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="每天下课回宿舍的路，没有什么故事。"/></div><span class="image-caption">每天下课回宿舍的路，没有什么故事。</span></div></li><li><p>指定宽度：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" style="width:400px;"/></div></div></li><li><p>指定宽度并添加描述：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="每天下课回宿舍的路，没有什么故事。" style="width:400px;"/></div><span class="image-caption">每天下课回宿舍的路，没有什么故事。</span></div></li><li><p>设置占位背景色：</p><div class="img-wrap"><div class="img-bg" style="background:#1D0C04"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="优化不同宽度浏览的观感" style="width:400px;"/></div><span class="image-caption">优化不同宽度浏览的观感</span></div></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="image-4"><ol><li><p>添加描述：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, alt=每天下课回宿舍的路，没有什么故事。 %&#125;</span><br></pre></td></tr></table></figure></li><li><p>指定宽度：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px %&#125;</span><br></pre></td></tr></table></figure></li><li><p>指定宽度并添加描述：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px, alt=每天下课回宿舍的路，没有什么故事。 %&#125;</span><br></pre></td></tr></table></figure></li><li><p>设置占位背景色：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px, bg=#1D0C04, alt=优化不同宽度浏览的观感 %&#125;</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="音频-audio"><a href="#音频-audio" class="headerlink" title="音频 audio"></a>音频 audio</h1><div class="tabs" id="audio"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#audio-1">标签语法</button></li><li class="tab active"><button type="button" data-href="#audio-2">样式预览</button></li><li class="tab"><button type="button" data-href="#audio-3">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="audio-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% audio 音频链接 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="audio-2"><div class="audio"><audio controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/Lumia1020.mp3' type='audio/mp3'>Your browser does not support the audio tag.</audio></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="audio-3"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% audio https://github.com/volantis-x/volantis-docs/releases/download/assets/Lumia1020.mp3 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="视频-video"><a href="#视频-video" class="headerlink" title="视频 video"></a>视频 video</h1><div class="tabs" id="video"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#video-1">标签语法</button></li><li class="tab"><button type="button" data-href="#video-2">参数配置</button></li><li class="tab active"><button type="button" data-href="#video-3">样式预览</button></li><li class="tab"><button type="button" data-href="#video-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="video-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% video 视频链接 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="video-2"><ol><li>对其方向：left, center, right</li><li>列数：逗号后面直接写列数，支持 1 ～ 4 列。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="video-3"><ol><li><p>100%宽度</p><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div></li><li><p>50%宽度</p><div class="videos" col='2'><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div></div></li><li><p>25%宽度</p><div class="videos" col='4'><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div></div></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="video-4"><ol><li>100%宽度<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br></pre></td></tr></table></figure></li><li>50%宽度<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% videos, 2 %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% endvideos %&#125;</span><br></pre></td></tr></table></figure></li><li>25%宽度<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% videos, 4 %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% endvideos %&#125;</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="相册-gallery"><a href="#相册-gallery" class="headerlink" title="相册 gallery"></a>相册 gallery</h1><div class="note blue icon disabled"><i class="note-icon fas fa-bullhorn"></i><p><code>Butterfly</code>自带<code>gallery</code>相册，而且会根据图片大小自动调整排版，效果比<code>Volantis</code>的<code>gallery</code>更好，故不再收录<code>Volantis</code>的<code>gallery</code>标签。</p></div><div class="note flat"><p>以下为<code>Butterfly</code>自带的<code>gallery</code>标签写法。相册图库和相册配合使用。</p></div><div class="tabs" id="gallery"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#gallery-1">标签语法</button></li><li class="tab"><button type="button" data-href="#gallery-2">参数配置</button></li><li class="tab active"><button type="button" data-href="#gallery-3">样式预览</button></li><li class="tab"><button type="button" data-href="#gallery-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="gallery-1"><ol><li>gallerygroup 相册图库<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li><li>gallery 相册<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">markdown 圖片格式</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="gallery-2"><ul><li>gallerygroup 相册图库</li></ul><table><thead><tr><th align="left">参数名</th><th align="left">释义</th></tr></thead><tbody><tr><td align="left">name</td><td align="left">图库名字</td></tr><tr><td align="left">description</td><td align="left">图库描述</td></tr><tr><td align="left">link</td><td align="left">链接到对应相册的地址</td></tr><tr><td align="left">img-url</td><td align="left">图库封面</td></tr></tbody></table><div class="note info flat"><p>思维拓展一下，相册图库的实质其实就是个快捷方式，可以自定义添加描述、封面、链接。那么我们未必要把它当做一个相册，完全可以作为一个链接卡片，链接到视频、QQ、友链都是不错的选择。</p></div><ul><li>gallery 相册<br>区别于旧版的Gallery相册,新的Gallery相册会自动根据图片长度进行排版，书写也更加方便，与markdown格式一样。可根据需要插入到相应的md。无需再自己配置长宽。<strong>建议在粘贴时故意使用长短、大小、横竖不一的图片</strong>，会有更好的效果。（尺寸完全相同的图片只会平铺输出，效果很糟糕）</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="gallery-3"><ul><li>gallerygroup 相册图库</li></ul><div class="gallery-group-main">  <figure class="gallery-group">  <img class="gallery-group-img" src='https://cdn.jsdelivr.net/gh/Akilarlxh/Picgo@v2.3/tencent/MC/1.jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">MC</div>  <p>在Rikkaの六花服务器里留下的足迹</p>  <a href='/gallery/MC/'></a>  </figcaption>  </figure>    <figure class="gallery-group">  <img class="gallery-group-img" src='https://cdn.jsdelivr.net/gh/Akilarlxh/Picgo@v2.3/tencent/Gundam/20200907110508327.png' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">Gundam</div>  <p>哦咧哇gundam哒！</p>  <a href='/gallery/Gundam/'></a>  </figcaption>  </figure>    <figure class="gallery-group">  <img class="gallery-group-img" src='https://cdn.jsdelivr.net/gh/Akilarlxh/Picgo@v2.3/tencent/I-am-Akilar/20200907113116651.png' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">I-am-Akilar</div>  <p>某种意义上也算自拍吧</p>  <a href='/gallery/I-am-Akilar/'></a>  </figcaption>  </figure>  </div><ul><li>gallery 相册</li></ul><div class="justified-gallery"><p><img src="https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg"><br><img src="https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg"><br><img src="https://i.loli.net/2019/12/25/gEy5Zc1Ai6VuO4N.jpg"><br><img src="https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg"><br><img src="https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg"><br><img src="https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg"><br><img src="https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg"><br><img src="https://i.loli.net/2019/12/25/2tu9JC8ewpBFagv.jpg"></p>          </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="gallery-4"><div class="note info flat"><p>对于很多同学提问的<code>gallerygroup</code>和<code>gallery</code>相册页的链接问题。这里说下我个人的使用习惯。<br>一般使用相册图库的话，可以在导航栏加一个gallery的page(<strong>使用指令<code>hexo new page gallery</code>添加</strong>)，里面放相册图库作为封面。然后在<code>[Blogroot]/source/gallery/</code>下面建立相应的文件夹，例如若按照这里的示例，若欲使用<code>/gallery/MC/</code>路径访问MC相册，则需要新建<code>[Blogroot]/source/gallery/MC/index.md</code>，并在里面填入<code>gallery</code>相册内容。</p></div><ol><li>gallerygroup 相册图库<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% galleryGroup MC 在Rikkaの六花服务器里留下的足迹 &#x27;/gallery/MC/&#x27; https://cdn.jsdelivr.net/gh/Akilarlxh/Picgo@v2.3/tencent/MC/1.jpg %&#125;</span><br><span class="line">&#123;% galleryGroup Gundam 哦咧哇gundam哒！ &#x27;/gallery/Gundam/&#x27; https://cdn.jsdelivr.net/gh/Akilarlxh/Picgo@v2.3/tencent/Gundam/20200907110508327.png %&#125;</span><br><span class="line">&#123;% galleryGroup I-am-Akilar 某种意义上也算自拍吧 &#x27;/gallery/I-am-Akilar/&#x27; https://cdn.jsdelivr.net/gh/Akilarlxh/Picgo@v2.3/tencent/I-am-Akilar/20200907113116651.png %&#125;</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li><li>gallery 相册<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">![](https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg)</span><br><span class="line">![](https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg)</span><br><span class="line">![](https://i.loli.net/2019/12/25/gEy5Zc1Ai6VuO4N.jpg)</span><br><span class="line">![](https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg)</span><br><span class="line">![](https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg)</span><br><span class="line">![](https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg)</span><br><span class="line">![](https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg)</span><br><span class="line">![](https://i.loli.net/2019/12/25/2tu9JC8ewpBFagv.jpg)</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="折叠框-folding"><a href="#折叠框-folding" class="headerlink" title="折叠框 folding"></a>折叠框 folding</h1><div class="note blue icon disabled"><i class="note-icon fas fa-bullhorn"></i><p><code>Butterfly</code>虽然也有内置折叠框<code>hideToggle</code>标签，但是<code>Volantis</code>的<code>folding</code>折叠框更好看一些。</p></div><div class="tabs" id="folding"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#folding-1">标签语法</button></li><li class="tab"><button type="button" data-href="#folding-2">配置参数</button></li><li class="tab active"><button type="button" data-href="#folding-3">样式预览</button></li><li class="tab"><button type="button" data-href="#folding-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="folding-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% folding 参数（可选）, 标题 %&#125;</span><br><span class="line">![](https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg)</span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="folding-2"><ol><li>颜色：blue, cyan, green, yellow, red</li><li>状态：状态填写 open 代表默认打开。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="folding-3"><details ><summary> 查看图片测试 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg"></p>              </div>            </details><details cyan open><summary> 查看默认打开的折叠框 </summary>              <div class='content'>              <p>这是一个默认打开的折叠框。</p>              </div>            </details><details green><summary> 查看代码测试 </summary>              <div class='content'>              <figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![](https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg)</span><br></pre></td></tr></table></figure>              </div>            </details><details yellow><summary> 查看列表测试 </summary>              <div class='content'>              <ul><li>haha</li><li>hehe</li></ul>              </div>            </details><details red><summary> 查看嵌套测试 </summary>              <div class='content'>              <details blue><summary> 查看嵌套测试2 </summary>              <div class='content'>              <details ><summary> 查看嵌套测试3 </summary>              <div class='content'>              <p>hahaha <span><img src='https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/tieba/%E6%BB%91%E7%A8%BD.png' style='height:24px'></span></p>              </div>            </details>              </div>            </details>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="folding-4"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% folding 查看图片测试 %&#125;</span><br><span class="line"></span><br><span class="line">![](https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg)</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding cyan open, 查看默认打开的折叠框 %&#125;</span><br><span class="line"></span><br><span class="line">这是一个默认打开的折叠框。</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding green, 查看代码测试 %&#125;</span><br><span class="line">假装这里有代码块（代码块没法嵌套代码块）</span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding yellow, 查看列表测试 %&#125;</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> haha</span><br><span class="line"><span class="bullet">-</span> hehe</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding red, 查看嵌套测试 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding blue, 查看嵌套测试2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding 查看嵌套测试3 %&#125;</span><br><span class="line"></span><br><span class="line">hahaha <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/tieba/%E6%BB%91%E7%A8%BD.png&#x27;</span> <span class="attr">style</span>=<span class="string">&#x27;height:24px&#x27;</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="分栏-tab"><a href="#分栏-tab" class="headerlink" title="分栏 tab"></a>分栏 tab</h1><div class="note blue icon disabled"><i class="note-icon fas fa-bullhorn"></i><p><code>Butterfly</code>的<code>tab</code>标签和<code>Volantis</code>的<code>tab</code>标签都是移值自<code>NexT</code>主题，所以写法和效果一模一样。</p></div><div class="tabs" id="folding"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#folding-1">标签语法</button></li><li class="tab"><button type="button" data-href="#folding-2">配置参数</button></li><li class="tab active"><button type="button" data-href="#folding-3">样式预览</button></li><li class="tab"><button type="button" data-href="#folding-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="folding-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% tabs Unique name, [index] %&#125;</span><br><span class="line">&lt;!-- tab [Tab caption] [@icon] --&gt;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="folding-2"><ol><li>Unique name :<ul><li>选项卡块标签的唯一名称，不带逗号。</li><li>将在#id中用作每个标签及其索引号的前缀。</li><li>如果名称中包含空格，则对于生成#id，所有空格将由破折号代替。</li><li>仅当前帖子/页面的URL必须是唯一的！</li></ul></li><li>[index]:<ul><li>活动选项卡的索引号。</li><li>如果未指定，将选择第一个标签（1）。</li><li>如果index为-1，则不会选择任何选项卡。</li><li>可选参数。</li></ul></li><li>[Tab caption]:<ul><li>当前选项卡的标题。</li><li>如果未指定标题，则带有制表符索引后缀的唯一名称将用作制表符的标题。</li><li>如果未指定标题，但指定了图标，则标题将为空。</li><li>可选参数。</li></ul></li><li>[@icon]:<ul><li>FontAwesome图标名称（全名，看起来像“ fas fa-font”）</li><li>可以指定带空格或不带空格；</li><li>例如’Tab caption @icon’ 和 ‘Tab caption@icon’.</li><li>可选参数。</li></ul></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="folding-3"><div class="note primary flat"><p>Demo 1 - 预设选择第一个【默认】</p></div><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">test1 1</button></li><li class="tab"><button type="button" data-href="#test1-2">test1 2</button></li><li class="tab"><button type="button" data-href="#test1-3">test1 3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><div class="note primary flat"><p>Demo 2 - 预设选择tabs</p></div><div class="tabs" id="test2"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test2-1">test2 1</button></li><li class="tab"><button type="button" data-href="#test2-2">test2 2</button></li><li class="tab active"><button type="button" data-href="#test2-3">test2 3</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test2-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test2-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="test2-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><div class="note primary flat"><p>Demo 3 - 没有预设值</p></div><div class="tabs" id="test3"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test3-1">test3 1</button></li><li class="tab"><button type="button" data-href="#test3-2">test3 2</button></li><li class="tab"><button type="button" data-href="#test3-3">test3 3</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test3-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><div class="note primary flat"><p>Demo 4 - 自定义Tab名 + 只有icon + icon和Tab名</p></div><div class="tabs" id="test4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test4-1">第一个Tab</button></li><li class="tab"><button type="button" data-href="#test4-2"><i class="fab fa-apple-pay" style="text-align: center;"></i></button></li><li class="tab"><button type="button" data-href="#test4-3"><i class="fas fa-bomb"></i>炸弹</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><strong>tab名字为第一个Tab</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-2"><p><strong>只有图标 没有Tab名字</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-3"><p><strong>名字+icon</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="folding-4"><div class="note primary flat"><p>Demo 1 - 预设选择第一个【默认】</p></div><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% tabs test1 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><div class="note primary flat"><p>Demo 2 - 预设选择tabs</p></div><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% tabs test2, 3 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><div class="note primary flat"><p>Demo 3 - 没有预设值</p></div><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% tabs test3, -1 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><div class="note primary flat"><p>Demo 4 - 自定义Tab名 + 只有icon + icon和Tab名</p></div><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% tabs test4 %&#125;</span><br><span class="line">&lt;!-- tab 第一个Tab --&gt;</span><br><span class="line"><span class="strong">**tab名字为第一个Tab**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab @fab fa-apple-pay --&gt;</span><br><span class="line"><span class="strong">**只有图标 没有Tab名字**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 炸弹@fas fa-bomb --&gt;</span><br><span class="line"><span class="strong">**名字+icon**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="数据集合-issues"><a href="#数据集合-issues" class="headerlink" title="数据集合 issues"></a>数据集合 issues</h1><div class="tabs" id="issues"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#issues-1">标签语法</button></li><li class="tab"><button type="button" data-href="#issues-2">参数配置</button></li><li class="tab active"><button type="button" data-href="#issues-3">样式预览</button></li><li class="tab"><button type="button" data-href="#issues-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="issues-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% issues type | api=url | group=key:value1,value2（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="issues-2"><p><span class='p center logo large'>type(类型)：</span><br>根据需求不同，会将 issues 内容解析成不同的 HTML 标签，目前支持的类型有：</p><ol><li><p>时间轴<code>timeline</code>: 解析成<code>timeline</code>标签，<code>issue</code>的标题对应<code>timeline</code>的时间，<code>issue</code>的内容对应<code>timeline</code>的内容。</p></li><li><p>网站卡片<code>sites</code>: 解析成<code>sites</code>标签，需要有<code>JSON</code>代码块,各参数对应<code>sites</code>标签参数:</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;screenshot&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;avatar&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;「keywords」&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">参数</th><th align="left">释义</th></tr></thead><tbody><tr><td align="left">title</td><td align="left">网站名称</td></tr><tr><td align="left">screenshot</td><td align="left">网站预览图</td></tr><tr><td align="left">url</td><td align="left">网站链接，需要添加<br><code>https://</code>协议组成完整域名。<br>否则可能被识别成站点相对路径。</td></tr><tr><td align="left">avatar</td><td align="left">站长头像</td></tr><tr><td align="left">「keywords」</td><td align="left">分组依据，<br>未必要叫「keywords」，<br>详见下文group(分组)</td></tr></tbody></table></li></ol><p><span class='p center logo large'>api(接口)：</span><br>url为可以调的通的API，例如：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">api&#x3D;https:&#x2F;&#x2F;gitee.com&#x2F;api&#x2F;v5&#x2F;repos&#x2F;xaoxuu&#x2F;friends&#x2F;issues?sort&#x3D;updated&amp;state&#x3D;open&amp;page&#x3D;1&amp;per_page&#x3D;100&amp;labels&#x3D;active</span><br><span class="line">api&#x3D;https:&#x2F;&#x2F;api.github.com&#x2F;repos&#x2F;xaoxuu&#x2F;friends&#x2F;issues?sort&#x3D;updated&amp;state&#x3D;open&amp;page&#x3D;1&amp;per_page&#x3D;100&amp;labels&#x3D;active</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">参数</th><th align="left">释义</th></tr></thead><tbody><tr><td align="left"><a href="https://gitee.com/api/v5/">https://gitee.com/api/v5/</a></td><td align="left">gitee仓库的api</td></tr><tr><td align="left"><a href="https://api.github.com/">https://api.github.com/</a></td><td align="left">github仓库的api</td></tr><tr><td align="left">repos/xaoxuu/friends/issues</td><td align="left">repos/用户名/仓库名/issues</td></tr><tr><td align="left">sort=updated&amp;state=open</td><td align="left">界定哪些类型的<code>issues</code>会<br>被读取过来渲染成相应的标签</td></tr><tr><td align="left">page=1&amp;per_page=100</td><td align="left">读取前100条issues</td></tr><tr><td align="left">labels=active</td><td align="left">控制默认的issue不显示，<br>只有自己审核通过<br>添加了active标签之后才会显示</td></tr></tbody></table><p><span class='p center logo large'>group(分组)：</span><br><code>sites</code>类型的<code>issues</code>默认不分组，如果需要分组，可指定分组依据<code>「keywords」</code>，和分组白名单<code>「value1」</code>、<code>「value2」</code>等，例如：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">group=version:v4,v3,v2</span></span><br><span class="line"><span class="comment"># 此处的version就是上文中的「keywords」</span></span><br></pre></td></tr></table></figure><p>这个参数的作用就是，筛选出<code>JSON</code>中包含<code>&quot;version&quot;: &quot;v4&quot;</code>或者<code>&quot;version&quot;:&quot;v3&quot;</code>或者<code>&quot;version&quot;: &quot;v2&quot;</code>的数据，并分组显示。</p><p><span class='p center logo large'>仓库ISSUES模板配置</span></p><details green><summary> Github仓库配置方案 </summary>              <div class='content'>              <ol><li><p>新建一个仓库，仓库名随意，这里我命名为<code>friend_link</code>,<br>新建文件<code>friend_link\.github\ISSUE_TEMPLATE.md</code>,<br>并在其中输入以下内容作为<code>issues</code>模板。</p><div class="tip warning faa-horizontal animated fa-slow"><p>其中的json代码块前面的反斜杠记得删去。此处这么写主要是为了转义，否则无法嵌套代码块。</p></div><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">name: 友链模板</span><br><span class="line">about: 请根据指示规范填写友链格式。</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">&lt;!-- 请在下方代码块的双引号中填写 --&gt;</span><br><span class="line">\<span class="code">```json</span></span><br><span class="line"><span class="code">&#123;</span></span><br><span class="line"><span class="code">    &quot;title&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="code">    &quot;screenshot&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="code">    &quot;url&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="code">    &quot;avatar&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="code">    &quot;description&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="code">    &quot;keywords&quot;: &quot;&quot;</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code">\```</span></span><br><span class="line"></span><br><span class="line">&lt;!--</span><br><span class="line">&quot;title&quot;: &quot;站点名称&quot;,</span><br><span class="line">&quot;screenshot&quot;: &quot;站点预览图链接&quot;,</span><br><span class="line">&quot;url&quot;: &quot;站点链接&quot;,</span><br><span class="line">&quot;avatar&quot;: &quot;头像链接&quot;,</span><br><span class="line">&quot;description&quot;: &quot;站点描述&quot;,</span><br><span class="line">&quot;keywords&quot;: &quot;关键词，作为分组名&quot;</span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 示例 --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--</span><br><span class="line">&quot;title&quot;: &quot;Akilarの糖果屋&quot;,</span><br><span class="line">&quot;screenshot&quot;: &quot;https://cdn.jsdelivr.net/gh/Akilarlxh/ScreenShot@gh-pages/akilar.top.jpg&quot;,</span><br><span class="line">&quot;url&quot;: &quot;https://akilar.top/&quot;,</span><br><span class="line">&quot;avatar&quot;: &quot;https://akilar.top/img/siteicon/favicon.png&quot;,</span><br><span class="line">&quot;description&quot;: &quot;期待您的光临！&quot;,</span><br><span class="line">&quot;keywords&quot;: &quot;糖果屋&quot;</span><br><span class="line">--&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>新建active label</p><p><img src="https://cdn.jsdelivr.net/gh/Akilarlxh/Picgo/assets/d63b5c0c.png" alt="新建label用于控制审核结果"></p><p><img src="https://cdn.jsdelivr.net/gh/Akilarlxh/Picgo/assets/6311f960.png" alt="配置名称描述颜色"></p></li><li><p>提交示例</p><p><img src="https://cdn.jsdelivr.net/gh/Akilarlxh/Picgo/assets/f87ebfd3.png" alt="填写规范"><br><img src="https://cdn.jsdelivr.net/gh/Akilarlxh/Picgo/assets/efdfc67d.png" alt="审核通过"></p></li><li><p>从审核通过到页面读取有一段api的缓存期，稍微有点耐心。</p></li></ol>              </div>            </details><details yellow><summary> Gitee仓库配置方案 </summary>              <div class='content'>              <ol><li><p>新建一个仓库，仓库名随意，这里我命名为<code>friend_link</code>,<br>新建文件<code>friend_link\.gitee\ISSUE_TEMPLATE.md</code>,<br>并在其中输入以下内容作为<code>issues</code>模板。</p><div class="tip warning faa-horizontal animated fa-slow"><p>其中的json代码块前面的反斜杠记得删去。此处这么写主要是为了转义，否则无法嵌套代码块。</p></div><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">name: 友链模板</span><br><span class="line">about: 请根据指示规范填写友链格式。</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">&lt;!-- 请在下方代码块的双引号中填写 --&gt;</span><br><span class="line">\<span class="code">```json</span></span><br><span class="line"><span class="code">&#123;</span></span><br><span class="line"><span class="code">    &quot;title&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="code">    &quot;screenshot&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="code">    &quot;url&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="code">    &quot;avatar&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="code">    &quot;description&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="code">    &quot;keywords&quot;: &quot;&quot;</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code">\```</span></span><br><span class="line"></span><br><span class="line">&lt;!--</span><br><span class="line">&quot;title&quot;: &quot;站点名称&quot;,</span><br><span class="line">&quot;screenshot&quot;: &quot;站点预览图链接&quot;,</span><br><span class="line">&quot;url&quot;: &quot;站点链接&quot;,</span><br><span class="line">&quot;avatar&quot;: &quot;头像链接&quot;,</span><br><span class="line">&quot;description&quot;: &quot;站点描述&quot;,</span><br><span class="line">&quot;keywords&quot;: &quot;关键词，作为分组名&quot;</span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 示例 --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--</span><br><span class="line">&quot;title&quot;: &quot;Akilarの糖果屋&quot;,</span><br><span class="line">&quot;screenshot&quot;: &quot;https://cdn.jsdelivr.net/gh/Akilarlxh/ScreenShot@gh-pages/akilar.top.jpg&quot;,</span><br><span class="line">&quot;url&quot;: &quot;https://akilar.top/&quot;,</span><br><span class="line">&quot;avatar&quot;: &quot;https://akilar.top/img/siteicon/favicon.png&quot;,</span><br><span class="line">&quot;description&quot;: &quot;期待您的光临！&quot;,</span><br><span class="line">&quot;keywords&quot;: &quot;糖果屋&quot;</span><br><span class="line">--&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>新建active标签</p><p><img src="https://cdn.jsdelivr.net/gh/Akilarlxh/Picgo/assets/7522911b.png" alt="新建标签用于控制审核结果"></p></li></ol><ol start="3"><li><p>提交示例</p><p><img src="https://cdn.jsdelivr.net/gh/Akilarlxh/Picgo/assets/dd334eea.png" alt="填写规范"><br><img src="https://cdn.jsdelivr.net/gh/Akilarlxh/Picgo/assets/72d06ae1.png" alt="审核通过"></p></li><li><p>从审核通过到页面读取有一段api的缓存期，稍微有点耐心。</p></li></ol>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="issues-3"><ol><li><p>时间轴标签<code>timeline</code>渲染（对应仓库已关）<br>对应的仓库<code>issues</code>链接:</p><div class="tag link"><a class="link-card" title="xaoxuu/timeline" href="https://gitee.com/xaoxuu/timeline/issues"><div class="left"><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets@master/logo/256/safari.png"/></div><div class="right"><p class="text">xaoxuu/timeline</p><p class="url">https://gitee.com/xaoxuu/timeline/issues</p></div></a></div></li><li><p>网站卡片标签<code>sites</code>渲染</p></li></ol><ul><li><p>gitee仓库示例（对应仓库已关）</p><p>对应的仓库<code>issues</code>链接:</p><div class="tag link"><a class="link-card" title="xaoxuu/friends" href="https://gitee.com/xaoxuu/friends/issues"><div class="left"><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets@master/logo/256/safari.png"/></div><div class="right"><p class="text">xaoxuu/friends</p><p class="url">https://gitee.com/xaoxuu/friends/issues</p></div></a></div></li><li><p>github仓库示例</p><p>对应的仓库<code>issues</code>链接:</p><div class="tag link"><a class="link-card" title="xaoxuu/friends" href="https://github.com/xaoxuu/friends/issues"><div class="left"><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets@master/logo/256/safari.png"/></div><div class="right"><p class="text">xaoxuu/friends</p><p class="url">https://github.com/xaoxuu/friends/issues</p></div></a></div><p>渲染后的标签：</p><div class="issues-api sites"api="https://api.github.com/repos/xaoxuu/friends/issues?sort=updated&state=open&page=1&per_page=100&labels=active"></div></li></ul><ol start="3"><li><p>网站卡片标签<code>sites</code>分组渲染<br>这是<code>Volantis</code>主题官网的「示例博客」页面的数据：<br>对应的仓库<code>issues</code>链接:</p><div class="tag link"><a class="link-card" title="如何参与项目" href="https://github.com/volantis-x/examples/issues"><div class="left"><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets@master/logo/256/safari.png"/></div><div class="right"><p class="text">如何参与项目</p><p class="url">https://github.com/volantis-x/examples/issues</p></div></a></div><p>渲染后的标签：</p><div class="issues-api sites"api="https://api.github.com/repos/volantis-x/examples/issues?sort=updated&state=open&page=1&per_page=100"group="version:版本：^4.0,版本：^3.0,版本：^2.0"></div></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="issues-4"><ol><li><p>时间轴标签<code>timeline</code>渲染</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% issues timeline | api=https://gitee.com/api/v5/repos/xaoxuu/timeline/issues?state=open&amp;creator=xaoxuu&amp;sort=created&amp;direction=desc&amp;page=1&amp;per<span class="emphasis">_page=100 %&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>网站卡片标签<code>sites</code>渲染</p></li></ol><ul><li><p>gitee仓库示例</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% issues sites | api=https://gitee.com/api/v5/repos/xaoxuu/friends/issues?sort=updated&amp;state=open&amp;page=1&amp;per<span class="emphasis">_page=100&amp;labels=active %&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>github仓库示例</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% issues sites | api=https://api.github.com/repos/xaoxuu/friends/issues?sort=updated&amp;state=open&amp;page=1&amp;per<span class="emphasis">_page=100&amp;labels=active %&#125;</span></span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li><p>网站卡片标签<code>sites</code>分组渲染<br>这是<code>Volantis</code>主题官网的「示例博客」页面的数据：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% issues sites | api=https://api.github.com/repos/volantis-x/examples/issues?sort=updated&amp;state=open&amp;page=1&amp;per<span class="emphasis">_page=100 | group=version:版本：^4.0,版本：^3.0,版本：^2.0 %&#125;</span></span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="诗词标签-poem"><a href="#诗词标签-poem" class="headerlink" title="诗词标签 poem"></a>诗词标签 poem</h1><div class="tabs" id="poem"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#poem-1">标签语法</button></li><li class="tab"><button type="button" data-href="#poem-2">参数配置</button></li><li class="tab active"><button type="button" data-href="#poem-3">样式预览</button></li><li class="tab"><button type="button" data-href="#poem-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="poem-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% poem [title],[author] %&#125;</span><br><span class="line">诗词内容</span><br><span class="line">&#123;% endpoem %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="poem-2"><ol><li>title：诗词标题</li><li>author：作者，可以不写</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="poem-3"><div class='poem'><div class='poem-title'>水调歌头</div><div class='poem-author'>苏轼</div><p>明月几时有？把酒问青天。<br>不知天上宫阙，今夕是何年？<br>我欲乘风归去，又恐琼楼玉宇，高处不胜寒。<br>起舞弄清影，何似在人间？<br>转朱阁，低绮户，照无眠。<br>不应有恨，何事长向别时圆？<br>人有悲欢离合，月有阴晴圆缺，此事古难全。<br>但愿人长久，千里共婵娟。</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="poem-4"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% poem 水调歌头,苏轼 %&#125;</span><br><span class="line">丙辰中秋，欢饮达旦，大醉，作此篇，兼怀子由。</span><br><span class="line">明月几时有？把酒问青天。</span><br><span class="line">不知天上宫阙，今夕是何年？</span><br><span class="line">我欲乘风归去，又恐琼楼玉宇，高处不胜寒。</span><br><span class="line">起舞弄清影，何似在人间？</span><br><span class="line"></span><br><span class="line">转朱阁，低绮户，照无眠。</span><br><span class="line">不应有恨，何事长向别时圆？</span><br><span class="line">人有悲欢离合，月有阴晴圆缺，此事古难全。</span><br><span class="line">但愿人长久，千里共婵娟。</span><br><span class="line">&#123;% endpoem %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="进度条-progress"><a href="#进度条-progress" class="headerlink" title="进度条 progress"></a>进度条 progress</h1><div class="note info morden flat"><p>进度条标签参考<a href="https://rongbuqiu.com/jdt.html">沂佰孜猫-给HEXO文章添加彩色进度条</a>。<br>源样式提取自<a href="https://zwying0814.gitbook.io/cuteen/">Cuteen</a>主题。</p></div><div class="tabs" id="progress"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#progress-1">标签语法</button></li><li class="tab"><button type="button" data-href="#progress-2">参数配置</button></li><li class="tab active"><button type="button" data-href="#progress-3">样式预览</button></li><li class="tab"><button type="button" data-href="#progress-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="progress-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% progress [width] [color] [text] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="progress-2"><p><code>width</code>: 0到100的阿拉伯数字<br><code>color</code>: 颜色，取值有<span class='p red'>red</span>,<span class='p yellow'>yellow</span>,<span class='p green'>green</span>,<span class='p cyan'>cyan</span>,<span class='p blue'>blue</span>,<span class='p gray'>gray</span><br><code>text</code>:进度条上的文字内容</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="progress-3"><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-red"  style="width: 10%" aria-valuenow="10" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-yellow"  style="width: 30%" aria-valuenow="30" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-green"  style="width: 50%" aria-valuenow="50" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-cyan"  style="width: 70%" aria-valuenow="70" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-blue"  style="width: 90%" aria-valuenow="90" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-gray"  style="width: 100%" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="progress-4"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% progress 10 red 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 30 yellow 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 50 green 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 70 cyan 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 90 blue 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 100 gray 进度条样式预览 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Course </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人哔哔: 我的butterfly魔改记录</title>
      <link href="10567.html"/>
      <url>10567.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>其实butterfly确实是hexo主题里为数不多的<b style="color:red">优雅</b><del>（花里胡哨）</del>的主题了</p><p>但看了<a href="https://zfe.space/">@冰卡诺老师</a>和<a href="https://akilar.top/">@Aki店长</a>的博客后，十分感慨：<b style="color:cyan">人与人的butterfly不能一概而论</b></p><p>所以，学习<del>（白嫖）</del>着他们的教程，我也开始走上魔改bf之路</p><hr><blockquote><p>但店长说的好：<b style="color:cyan">魔改一时爽，升级火葬场</b></p></blockquote><p>记录魔改历程也是为了以后主题更新能找到回家的路（毕竟主题更新相当于把大部分魔改推倒重来）</p><p>所以也记录和备份我修改/添加过的文件，方便查询（不含标签外挂）</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root</span><br><span class="line">├─source</span><br><span class="line">│   ├─_data</span><br><span class="line">│   │   └─slider.yml</span><br><span class="line">└─themes</span><br><span class="line">    └─butterfly</span><br><span class="line">        ├─layout</span><br><span class="line">        │   ├─includes</span><br><span class="line">        │   │   ├─post</span><br><span class="line">        │   │   │   └─post-copyright.pug</span><br><span class="line">        │   │   ├─page</span><br><span class="line">        │   │   │   └─flink.pug</span><br><span class="line">        │   ├─index.pug</span><br><span class="line">        │   └─sliderbar.pug</span><br><span class="line">        └─source</span><br><span class="line">            ├─css</span><br><span class="line">            │   ├─_layout</span><br><span class="line">            │   │   ├─categoryBar.styl</span><br><span class="line">            │   │   ├─swiperstyle.styl</span><br><span class="line">            │   │   └─post.styl</span><br><span class="line">            │   ├─_page</span><br><span class="line">            │   │   └─flink.styl</span><br><span class="line">            │   ├─commentsbar.css</span><br><span class="line">            │   ├─index.styl</span><br><span class="line">            │   ├─moments.css</span><br><span class="line">            │   └─add.css</span><br><span class="line">            └─js</span><br><span class="line">                ├─swiper_init.js</span><br><span class="line">                ├─moments.js</span><br><span class="line">                └─kernel.js</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1 id="主题源码修改部分"><a href="#主题源码修改部分" class="headerlink" title="主题源码修改部分"></a>主题源码修改部分</h1><h2 id="留言板动态弹出信封样式"><a href="#留言板动态弹出信封样式" class="headerlink" title="留言板动态弹出信封样式"></a>留言板动态弹出信封样式</h2><blockquote><p>参考教程：店长的<a href="https://akilar.top/posts/e2d3c450/">Envelope Style Comments Bar</a></p></blockquote><p>新增的主题源码：<br><code>[root]\themes\butterfly\source\css\commentsbar.css</code></p><hr><h2 id="友链样式魔改"><a href="#友链样式魔改" class="headerlink" title="友链样式魔改"></a>友链样式魔改</h2><blockquote><p>参考教程：店长的<a href="https://akilar.top/posts/57291286/">Friend Link Card Beautify</a></p></blockquote><p>修改的主题源码：<br><code>[root]\themes\butterfly\layout\includes\page\flink.pug</code><br><code>[root]\themes\butterfly\source\css\_page\flink.styl</code></p><hr><h2 id="首页磁贴"><a href="#首页磁贴" class="headerlink" title="首页磁贴"></a>首页磁贴</h2><blockquote><p>参考教程：店长的<a href="https://akilar.top/posts/a9131002/">Categories Magnet</a></p></blockquote><p>修改的主题源码：<br><code>[root]\themes\butterfly\layout\index.pug</code></p><p>新增的主题源码：<br><code>[root]\themes\butterfly\source\css\_layout\categoryBar.styl</code></p><hr><h2 id="首页置顶轮播图"><a href="#首页置顶轮播图" class="headerlink" title="首页置顶轮播图"></a>首页置顶轮播图</h2><blockquote><p>参考教程：店长的<a href="https://akilar.top/posts/8e1264d1/">Slider Bar</a></p></blockquote><p>新增的主题源码：<br><code>[root]\themes\butterfly\layout\includes\sliderbar.pug</code><br><code>[root]\themes\butterfly\source\js\swiper_init.js</code><br><code>[root]\themes\butterfly\source\css\_layout\swiperstyle.styl</code></p><p>修改的主题源码：<br><code>[root]\themes\butterfly\source\css\index.styl</code></p><p>新增配置文件：<br><code>[root]\source\_data\slider.yml</code></p><hr><h2 id="版权信息美化"><a href="#版权信息美化" class="headerlink" title="版权信息美化"></a>版权信息美化</h2><blockquote><p>参考教程：Nesxc的<a href="https://www.nesxc.com/post/hexocc.html">butterfly版权美化教程</a></p></blockquote><p>修改的主题源码：<br><code>[root]\themes\butterfly\layout\includes\post\post-copyright.pug</code><br><code>[root]\themes\butterfly\source\css\_layout\post.styl</code></p><hr><h2 id="拒绝IE-从我做起"><a href="#拒绝IE-从我做起" class="headerlink" title="拒绝IE,从我做起"></a>拒绝IE,从我做起</h2><blockquote><p>参考教程: Nesxc的<a href="https://www.nesxc.com/post/noie.html">Butterfly检测IE内核跳转教程</a></p></blockquote><p>新增的主题源码：<br><code>[root]\themes\butterfly\source\js\kernel.js</code><br><code>[root]\themes\butterfly\source\kernel.html</code></p><hr><h2 id="友链朋友圈样式调整"><a href="#友链朋友圈样式调整" class="headerlink" title="友链朋友圈样式调整"></a>友链朋友圈样式调整</h2><blockquote><p>如果想整友链朋友圈，参考教程：冰老师的<a href="https://zfe.space/post/friend-link-circle.html">基于 hexo 的友链朋友圈 Beta1.5</a></p></blockquote><p>以下是我自己的修改(其实那个css可以整进js里的，只不过懒得一个个去调，干脆自己引入了)</p><p>新增的主题源码:<br><code>[root]\themes\butterfly\source\js\moments.js</code><br><code>[root]\themes\butterfly\source\css\moments.css</code></p><p>js源码修改（做了重新布局，冰老师的UI好丑）：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> requests_url = <span class="string">&#x27;https://hexo-circle-of-friends-api-2x-ercha.vercel.app/api&#x27;</span>; <span class="comment">//api地址</span></span><br><span class="line"><span class="keyword">var</span> orign_data = []; <span class="comment">//api请求所得到的源数据</span></span><br><span class="line"><span class="keyword">var</span> maxnumber = <span class="number">20</span>; <span class="comment">//页面展示文章数量</span></span><br><span class="line"><span class="keyword">var</span> addnumber = <span class="number">10</span>; <span class="comment">//每次加载增加的篇数</span></span><br><span class="line"><span class="keyword">var</span> opentype = <span class="string">&#x27;_blank&#x27;</span>;  <span class="comment">//&#x27;_blank&#x27;打开新标签,&#x27;_self&#x27;本窗口打开</span></span><br><span class="line"><span class="keyword">var</span> nofollow = <span class="literal">true</span>; <span class="comment">//禁止搜索引擎抓取</span></span><br><span class="line"><span class="comment">// 自定义loading图 例如: var loadingCutom = &#x27;&lt;i class=&quot;fa fa-spinner fa-spin&quot;&gt;&lt;/i&gt;&#x27;</span></span><br><span class="line"><span class="comment">// 自定义loading图 例如: var loadingCutom = &#x27;&lt;img src=&quot;你的图片地址&quot; alt=&quot;加载中...&quot;&gt;&#x27;</span></span><br><span class="line"><span class="keyword">var</span> loadingCutom = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//处理数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;moments_container&#x27;</span>))&#123;</span><br><span class="line">  <span class="comment">//添加加载动画</span></span><br><span class="line">  <span class="keyword">var</span> loading_pic = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;moments_container&#x27;</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 判断loadingCutom值是否为空</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> loadingCutom == <span class="string">&quot;undefined&quot;</span> || loadingCutom == <span class="literal">null</span> || loadingCutom === <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">    loading_pic.innerHTML = <span class="string">&#x27;&lt;style&gt;.loader &#123; color: #d9dad8; font-size: 90px; text-indent: -9999em; overflow: hidden; width: 1em; height: 1em; border-radius: 50%; margin: 72px auto; position: relative; -webkit-transform: translateZ(0); -ms-transform: translateZ(0); transform: translateZ(0); -webkit-animation: load6 1.7s infinite ease, round 1.7s infinite ease; animation: load6 1.7s infinite ease, round 1.7s infinite ease; &#125; @-webkit-keyframes load6 &#123; 0% &#123; box-shadow: 0 -0.83em 0 -0.4em, 0 -0.83em 0 -0.42em, 0 -0.83em 0 -0.44em, 0 -0.83em 0 -0.46em, 0 -0.83em 0 -0.477em; &#125; 5%, 95% &#123; box-shadow: 0 -0.83em 0 -0.4em, 0 -0.83em 0 -0.42em, 0 -0.83em 0 -0.44em, 0 -0.83em 0 -0.46em, 0 -0.83em 0 -0.477em; &#125; 10%, 59% &#123; box-shadow: 0 -0.83em 0 -0.4em, -0.087em -0.825em 0 -0.42em, -0.173em -0.812em 0 -0.44em, -0.256em -0.789em 0 -0.46em, -0.297em -0.775em 0 -0.477em; &#125; 20% &#123; box-shadow: 0 -0.83em 0 -0.4em, -0.338em -0.758em 0 -0.42em, -0.555em -0.617em 0 -0.44em, -0.671em -0.488em 0 -0.46em, -0.749em -0.34em 0 -0.477em; &#125; 38% &#123; box-shadow: 0 -0.83em 0 -0.4em, -0.377em -0.74em 0 -0.42em, -0.645em -0.522em 0 -0.44em, -0.775em -0.297em 0 -0.46em, -0.82em -0.09em 0 -0.477em; &#125; 100% &#123; box-shadow: 0 -0.83em 0 -0.4em, 0 -0.83em 0 -0.42em, 0 -0.83em 0 -0.44em, 0 -0.83em 0 -0.46em, 0 -0.83em 0 -0.477em; &#125; &#125; @keyframes load6 &#123; 0% &#123; box-shadow: 0 -0.83em 0 -0.4em, 0 -0.83em 0 -0.42em, 0 -0.83em 0 -0.44em, 0 -0.83em 0 -0.46em, 0 -0.83em 0 -0.477em; &#125; 5%, 95% &#123; box-shadow: 0 -0.83em 0 -0.4em, 0 -0.83em 0 -0.42em, 0 -0.83em 0 -0.44em, 0 -0.83em 0 -0.46em, 0 -0.83em 0 -0.477em; &#125; 10%, 59% &#123; box-shadow: 0 -0.83em 0 -0.4em, -0.087em -0.825em 0 -0.42em, -0.173em -0.812em 0 -0.44em, -0.256em -0.789em 0 -0.46em, -0.297em -0.775em 0 -0.477em; &#125; 20% &#123; box-shadow: 0 -0.83em 0 -0.4em, -0.338em -0.758em 0 -0.42em, -0.555em -0.617em 0 -0.44em, -0.671em -0.488em 0 -0.46em, -0.749em -0.34em 0 -0.477em; &#125; 38% &#123; box-shadow: 0 -0.83em 0 -0.4em, -0.377em -0.74em 0 -0.42em, -0.645em -0.522em 0 -0.44em, -0.775em -0.297em 0 -0.46em, -0.82em -0.09em 0 -0.477em; &#125; 100% &#123; box-shadow: 0 -0.83em 0 -0.4em, 0 -0.83em 0 -0.42em, 0 -0.83em 0 -0.44em, 0 -0.83em 0 -0.46em, 0 -0.83em 0 -0.477em; &#125; &#125; @-webkit-keyframes round &#123; 0% &#123; -webkit-transform: rotate(0deg); transform: rotate(0deg); &#125; 100% &#123; -webkit-transform: rotate(360deg); transform: rotate(360deg); &#125; &#125; @keyframes round &#123; 0% &#123; -webkit-transform: rotate(0deg); transform: rotate(0deg); &#125; 100% &#123; -webkit-transform: rotate(360deg); transform: rotate(360deg); &#125; &#125;&lt;/style&gt;&lt;center&gt;&lt;span id=&quot;moments_loading&quot;&gt;&lt;div class=&quot;loader&quot;&gt;&lt;/div&gt;&lt;/span&gt;&lt;/center&gt;&#x27;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    loading_pic.innerHTML = <span class="string">&#x27;&lt;center&gt;&lt;span id=&quot;moments_loading&quot;&gt;&#x27;</span>+loadingCutom+<span class="string">&#x27;&lt;/span&gt;&lt;/center&gt;&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fetch(requests_url).then(</span><br><span class="line">      data =&gt; data.json()</span><br><span class="line">  ).then(</span><br><span class="line">      data =&gt; &#123;</span><br><span class="line">        orign_data = data;</span><br><span class="line">        data_handle(nofollow,orign_data, maxnumber)</span><br><span class="line">      &#125;</span><br><span class="line">  )&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> data_handle = <span class="function">(<span class="params">nofollow,data, maxnumber</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> today = todaypost();</span><br><span class="line">  <span class="keyword">var</span> Datetody = <span class="keyword">new</span> <span class="built_in">Date</span>(today);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> item = <span class="number">0</span>; item &lt; data[<span class="number">1</span>].length; item++) &#123;</span><br><span class="line">    <span class="keyword">var</span> Datedate = <span class="keyword">new</span> <span class="built_in">Date</span>(data[<span class="number">1</span>][item][<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">if</span> (Datedate &gt; Datetody) &#123;</span><br><span class="line">      data[<span class="number">1</span>].splice(item--, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> today_post = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> error = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> unique_live_link;</span><br><span class="line">  <span class="keyword">var</span> datalist = data[<span class="number">1</span>].slice(<span class="number">0</span>, maxnumber);</span><br><span class="line">  <span class="keyword">var</span> listlenth = data[<span class="number">1</span>].length;</span><br><span class="line">  <span class="keyword">var</span> user_lenth = data[<span class="number">0</span>].length;</span><br><span class="line">  <span class="keyword">var</span> datalist_slice = slice_month(datalist);</span><br><span class="line">  <span class="keyword">var</span> last_update_time = timezoon(datalist_slice);</span><br><span class="line">  <span class="keyword">var</span> link_list = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> item <span class="keyword">of</span> data[<span class="number">1</span>]) &#123;</span><br><span class="line">    <span class="keyword">if</span> (item[<span class="number">1</span>] === today) &#123;</span><br><span class="line">      today_post += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    link_list.push(item[<span class="number">3</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> arr = unique(link_list);</span><br><span class="line">  unique_live_link = arr.length;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> item <span class="keyword">of</span> data[<span class="number">0</span>]) &#123;</span><br><span class="line">    <span class="keyword">if</span> (item[<span class="number">3</span>] === <span class="string">&#x27;true&#x27;</span>) &#123;</span><br><span class="line">      error += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> html_item = <span class="string">&#x27;&lt;h2&gt;统计信息&lt;/h2&gt;&#x27;</span>;</span><br><span class="line">  html_item += <span class="string">&#x27;&lt;div id=&quot;info_user_pool&quot; class=&quot;moments-item info_user_pool&quot; style=&quot;&quot;&gt;&#x27;</span>;</span><br><span class="line">  html_item += <span class="string">&#x27;&lt;div class=&quot;moments_chart&quot;&gt;&lt;span class=&quot;moments_post_info_title&quot;&gt;当前友链数：&lt;/span&gt;&lt;span class=&quot;moments_post_info_number&quot;&gt;&#x27;</span> + user_lenth + <span class="string">&#x27; 个&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;moments_post_info_title&quot;&gt;失败数：&lt;/span&gt;&lt;span class=&quot;moments_post_info_number&quot;&gt;&#x27;</span> + error + <span class="string">&#x27; 个&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&#x27;</span>;</span><br><span class="line">  html_item += <span class="string">&#x27;&lt;div class=&quot;moments_chart&quot;&gt;&lt;span class=&quot;moments_post_info_title&quot;&gt;活跃友链数：&lt;/span&gt;&lt;span class=&quot;moments_post_info_number&quot;&gt;&#x27;</span> + unique_live_link + <span class="string">&#x27; 个&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;moments_post_info_title&quot;&gt;当前库存：&lt;/span&gt;&lt;span class=&quot;moments_post_info_number&quot;&gt;&#x27;</span> + listlenth + <span class="string">&#x27; 篇&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&#x27;</span>;</span><br><span class="line">  html_item += <span class="string">&#x27;&lt;div class=&quot;moments_chart&quot;&gt;&lt;span class=&quot;moments_post_info_title&quot;&gt;今日更新：&lt;/span&gt;&lt;span class=&quot;moments_post_info_number&quot;&gt;&#x27;</span> + today_post + <span class="string">&#x27; 篇&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;moments_post_info_title&quot;&gt;最近更新：&lt;/span&gt;&lt;span class=&quot;moments_post_info_number&quot;&gt;&#x27;</span> + last_update_time + <span class="string">&#x27;&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&#x27;</span>;</span><br><span class="line">  html_item += <span class="string">&#x27;&lt;/div&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> month_item <span class="keyword">of</span> datalist_slice) &#123;</span><br><span class="line">    html_item += <span class="string">&#x27;&lt;h2&gt;&#x27;</span> + month_item[<span class="number">0</span>] + <span class="string">&#x27;&lt;/h2&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> post_item <span class="keyword">of</span> month_item[<span class="number">1</span>]) &#123;</span><br><span class="line">      <span class="keyword">var</span> rel = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">      <span class="keyword">if</span> (nofollow &amp;&amp; opentype == <span class="string">&#x27;_blank&#x27;</span>)&#123;</span><br><span class="line">        rel = <span class="string">&#x27;noopener nofollow&#x27;</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nofollow)&#123;</span><br><span class="line">        rel = <span class="string">&#x27;nofollow&#x27;</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span>(opentype == <span class="string">&#x27;_blank&#x27;</span>)&#123;</span><br><span class="line">        rel = <span class="string">&#x27;noopener&#x27;</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        rel = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      html_item += <span class="string">&#x27; &lt;div class=&quot;moments-item&quot;&gt;&#x27;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//左侧头像</span></span><br><span class="line">        html_item += <span class="string">&#x27; &lt;a target=&quot;&#x27;</span> + opentype + <span class="string">&#x27;&quot; class=&quot;moments-item-img&quot; href=&quot;&#x27;</span> + post_item[<span class="number">2</span>] + <span class="string">&#x27;&quot; title=&quot;&#x27;</span> + post_item[<span class="number">0</span>] + <span class="string">&#x27;&quot;rel=&quot;&#x27;</span>+ rel + <span class="string">&#x27;&quot;&gt;&#x27;</span>;</span><br><span class="line">        html_item += <span class="string">&#x27;&lt;img onerror=&quot;this.onerror=null,this.src=&amp;quot;https://cdn.jsdelivr.net/gh/Zfour/Butterfly-friend-poor-html/friendcircle/404.png&amp;quot;&quot;&#x27;</span>;</span><br><span class="line">        html_item += <span class="string">&#x27; src=&quot;&#x27;</span> + post_item[<span class="number">4</span>] + <span class="string">&#x27;&quot;&gt;&lt;/a&gt;&#x27;</span>;</span><br><span class="line">        <span class="comment">//右侧文章信息</span></span><br><span class="line">        html_item += <span class="string">&#x27;&lt;div class=&quot;moments-item-info&quot;&gt;&#x27;</span>;</span><br><span class="line">          <span class="comment">//文章名</span></span><br><span class="line">          html_item += <span class="string">`&lt;a target=&quot;<span class="subst">$&#123;opentype&#125;</span>&quot; class=&quot;moments-item-title&quot; href=&quot;<span class="subst">$&#123;post_item[<span class="number">2</span>]&#125;</span>&quot; title=&quot;<span class="subst">$&#123;post_item[<span class="number">0</span>]&#125;</span>&quot;rel=&quot;<span class="subst">$&#123;rel&#125;</span>&quot;&gt;<span class="subst">$&#123;post_item[<span class="number">0</span>]&#125;</span>&lt;/a&gt;`</span>;</span><br><span class="line">          </span><br><span class="line">          html_item += <span class="string">&#x27;&lt;div class=&quot;moments-item-time&quot;&gt;&#x27;</span>;</span><br><span class="line">            <span class="comment">//文章作者</span></span><br><span class="line">            html_item += <span class="string">&#x27;&lt;span&gt;&#x27;</span> + post_item[<span class="number">3</span>] + <span class="string">&#x27;&lt;/span&gt;&#x27;</span>;</span><br><span class="line">            <span class="comment">//文章时间</span></span><br><span class="line">            html_item += <span class="string">&#x27;&lt;time class=&quot;moments_post_time&quot; datetime=&quot;&#x27;</span> + post_item[<span class="number">1</span>] + <span class="string">&#x27;&quot; title=&quot;&#x27;</span> + post_item[<span class="number">1</span>] + <span class="string">&#x27;&quot;&gt;&#x27;</span> + post_item[<span class="number">1</span>] + <span class="string">&#x27;&lt;/time&gt;&#x27;</span>;</span><br><span class="line">          html_item += <span class="string">&#x27;&lt;/div&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line">        html_item += <span class="string">&#x27;&lt;/div&gt;&#x27;</span></span><br><span class="line">      </span><br><span class="line">      html_item += <span class="string">&#x27;&lt;/div&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (data[<span class="number">1</span>].length - maxnumber &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    html_item += <span class="string">&#x27;&lt;div style=&quot;text-align: center&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;moments_load_button&quot; &#x27;</span> +</span><br><span class="line">        <span class="string">&#x27;onclick=&quot;load_more_post()&quot;&gt;加载更多...&lt;/button&gt;&#x27;</span> +</span><br><span class="line">        <span class="string">&#x27;&lt;/div&gt;&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  html_item += <span class="string">&#x27;&lt;style&gt;.moments-item-info span&#123;padding-left:.3rem;padding-right:.3rem&#125;.moments_post_time time&#123;padding-left:.3rem;cursor:default&#125;.moments_post_info_title&#123;font-weight:700&#125;.moments_post_info_number&#123;float:right&#125;.moments_chart&#123;align-items:flex-start;flex:1;width:100px;height:60px;margin:20px&#125;@media screen and (max-width:500px)&#123;.info_user_pool&#123;padding:10px;flex-direction:column;max-height:200px&#125;.moments_chart&#123;flex:0;width:100%;height:160px;margin:0&#125;&#125;.moments-item:before&#123;border:0&#125;@media screen and (min-width:500px)&#123;.moments_post_time&#123;float:right&#125;&#125;.moments_load_button&#123;-webkit-transition-duration:.4s;transition-duration:.4s;text-align:center;border:1px solid #ededed;border-radius:.3em;display:inline-block;background:transparent;color:#555;padding:.5em 1.25em&#125;.moments_load_button:hover&#123;color:#3090e4;border-color:#3090e4&#125;.moments-item&#123;position:relative;display:-webkit-box;display:-moz-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-align:center;-moz-box-align:center;-o-box-align:center;-ms-flex-align:center;-webkit-align-items:center;align-items:center;margin:0 0 1rem .5rem;-webkit-transition:all .2s ease-in-out;-moz-transition:all .2s ease-in-out;-o-transition:all .2s ease-in-out;-ms-transition:all .2s ease-in-out;transition:all .2s ease-in-out;box-shadow:rgba(0,0,0,0.07) 0 2px 2px 0,rgba(0,0,0,0.1) 0 1px 5px 0;border-radius:2px&#125;.moments-item-img&#123;overflow:hidden;width:80px;height:80px&#125;.moments-item-img img&#123;max-width:100%;width:100%;height:100%;object-fit:cover&#125;.moments-item-info&#123;-webkit-box-flex:1;-moz-box-flex:1;-o-box-flex:1;box-flex:1;-webkit-flex:1;-ms-flex:1;flex:1;padding:0 .8rem&#125;.moments-item-title&#123;display:-webkit-box;overflow:hidden;-webkit-box-orient:vertical;font-size:1.1em;-webkit-transition:all .3s;-moz-transition:all .3s;-o-transition:all .3s;-ms-transition:all .3s;transition:all .3s;-webkit-line-clamp:1&#125;&lt;/style&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> moments_container = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;moments_container&#x27;</span>) ;</span><br><span class="line">  append_div(moments_container, html_item)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> load_more_post = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;moments_container&#x27;</span>))&#123;</span><br><span class="line">    maxnumber = maxnumber + addnumber;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">&#x27;moments_container&#x27;</span>) .innerHTML = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    data_handle(nofollow,orign_data, maxnumber)&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//加载更多文章</span></span><br><span class="line"><span class="comment">//将html放入指定id的div容器</span></span><br><span class="line"><span class="keyword">var</span> append_div = <span class="function">(<span class="params">parent, text</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;moments_container&#x27;</span>))&#123;</span><br><span class="line">    loading_pic.innerHTML = <span class="string">``</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> text === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> temp = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">    temp.innerHTML = text;</span><br><span class="line">    <span class="comment">// 防止元素太多 进行提速</span></span><br><span class="line">    <span class="keyword">var</span> frag = <span class="built_in">document</span>.createDocumentFragment();</span><br><span class="line">    <span class="keyword">while</span> (temp.firstChild) &#123;</span><br><span class="line">      frag.appendChild(temp.firstChild);</span><br><span class="line">    &#125;</span><br><span class="line">    parent.appendChild(frag);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    parent.appendChild(text);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//去重</span></span><br><span class="line"><span class="keyword">var</span> unique = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(arr))</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//时区优化</span></span><br><span class="line"><span class="keyword">var</span> formatDate = <span class="function">(<span class="params">strDate</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">Date</span>.parse(strDate.replace(<span class="regexp">/-/g</span>, <span class="string">&quot;/&quot;</span>)));</span><br><span class="line">    <span class="keyword">var</span> gettimeoffset;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">new</span> <span class="built_in">Date</span>().getTimezoneOffset()) &#123;</span><br><span class="line">      gettimeoffset = <span class="keyword">new</span> <span class="built_in">Date</span>().getTimezoneOffset();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      gettimeoffset = <span class="number">8</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> timeoffset = gettimeoffset * <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line">    <span class="keyword">var</span> len = date.getTime();</span><br><span class="line">    <span class="keyword">var</span> date2 = <span class="keyword">new</span> <span class="built_in">Date</span>(len - timeoffset);</span><br><span class="line">    <span class="keyword">var</span> sec = date2.getSeconds().toString();</span><br><span class="line">    <span class="keyword">var</span> min = date2.getMinutes().toString();</span><br><span class="line">    <span class="keyword">if</span> (sec.length === <span class="number">1</span>) &#123;</span><br><span class="line">      sec = <span class="string">&quot;0&quot;</span> + sec;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (min.length === <span class="number">1</span>) &#123;</span><br><span class="line">      min = <span class="string">&quot;0&quot;</span> + min;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> date2.getFullYear().toString() + <span class="string">&quot;/&quot;</span> + (date2.getMonth() + <span class="number">1</span>).toString() + <span class="string">&quot;/&quot;</span> + date2.getDate().toString() + <span class="string">&quot; &quot;</span> + date2.getHours().toString() + <span class="string">&quot;:&quot;</span> + min + <span class="string">&quot;:&quot;</span> + sec</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> timezoon = <span class="function">(<span class="params">datalist_slice</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> time = datalist_slice[<span class="number">0</span>][<span class="number">1</span>][<span class="number">0</span>][<span class="number">5</span>];</span><br><span class="line">  <span class="keyword">return</span> formatDate(time)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//今日时间</span></span><br><span class="line"><span class="keyword">var</span> todaypost = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  <span class="keyword">var</span> year = date.getFullYear();</span><br><span class="line">  <span class="keyword">var</span> month = (date.getMonth() + <span class="number">1</span>).toString();</span><br><span class="line">  <span class="keyword">var</span> day = (date.getDate()).toString();</span><br><span class="line">  <span class="keyword">if</span> (month.length === <span class="number">1</span>) &#123;</span><br><span class="line">    month = <span class="string">&quot;0&quot;</span> + month;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (day.length === <span class="number">1</span>) &#123;</span><br><span class="line">    day = <span class="string">&quot;0&quot;</span> + day;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> year + <span class="string">&quot;-&quot;</span> + month + <span class="string">&quot;-&quot;</span> + day</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//月份切片</span></span><br><span class="line"><span class="keyword">var</span> slice_month = <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> monthlist = [];</span><br><span class="line">  <span class="keyword">var</span> datalist = [];</span><br><span class="line">  <span class="keyword">var</span> data_slice = data;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> item <span class="keyword">in</span> data_slice) &#123;</span><br><span class="line">    data_slice[item].push(item);</span><br><span class="line">    <span class="keyword">if</span> (data_slice[item][<span class="number">1</span>].lenth !== <span class="number">10</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> list = data_slice[item][<span class="number">1</span>].split(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">      <span class="keyword">if</span> (list[<span class="number">1</span>].length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        list[<span class="number">1</span>] = <span class="string">&quot;0&quot;</span> + list[<span class="number">1</span>]</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (list[<span class="number">2</span>].length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        list[<span class="number">2</span>] = <span class="string">&quot;0&quot;</span> + list[<span class="number">2</span>]</span><br><span class="line">      &#125;</span><br><span class="line">      data_slice[item][<span class="number">1</span>] = list.join(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> month = data_slice[item][<span class="number">1</span>].slice(<span class="number">0</span>, <span class="number">7</span>);</span><br><span class="line">    <span class="keyword">if</span> (monthlist.indexOf(month) !== -<span class="number">1</span>) &#123;</span><br><span class="line">      datalist[monthlist.length - <span class="number">1</span>][<span class="number">1</span>].push(data_slice[item])</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      monthlist.push(month);</span><br><span class="line">      datalist.push([month, [data_slice[item]]])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> mounthgroup <span class="keyword">of</span> datalist) &#123;</span><br><span class="line">    mounthgroup.push(mounthgroup[<span class="number">1</span>][<span class="number">0</span>][<span class="number">6</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> datalist</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>引入的css修改了字体样式和位置：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.moments-item-img</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.moments-item-info</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">padding-left</span>: .<span class="number">3rem</span>;</span><br><span class="line">    <span class="attribute">padding-right</span>: .<span class="number">3rem</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">600</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.moments-item-title</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#4978f5</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">900</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.moments_post_time</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: none <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ff612c</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-tag">a</span><span class="selector-class">.moments-item-title</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#cfa8ff</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">900</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="基于Butterfly的外挂标签引入"><a href="#基于Butterfly的外挂标签引入" class="headerlink" title="基于Butterfly的外挂标签引入"></a>基于Butterfly的外挂标签引入</h2><blockquote><p>参考教程：店长的<a href="https://akilar.top/posts/615e2dec/">Akilarの糖果屋-基于Butterfly的外挂标签引入</a></p></blockquote><p>因为这里涉及的源码修改都是直接拷贝的，所以不写新增和修改源码了。</p><hr><h1 id="非主题源码修改区"><a href="#非主题源码修改区" class="headerlink" title="非主题源码修改区"></a>非主题源码修改区</h1><h2 id="双栏卡片主页文章"><a href="#双栏卡片主页文章" class="headerlink" title="双栏卡片主页文章"></a>双栏卡片主页文章</h2><blockquote><p>参考教程：冰老师的<a href="https://zfe.space/post/52914.html">教程：基于Butterfly主题的双栏卡片主页文章css样式</a></p></blockquote><p>(我这里直接在主题配置文件引入冰老师的css，所以不涉及其他修改)</p><hr><h2 id="字体样式修改"><a href="#字体样式修改" class="headerlink" title="字体样式修改"></a>字体样式修改</h2><blockquote><p>参考教程：店长的<a href="https://akilar.top/posts/ebf20e02/">Custom Beautify</a></p></blockquote><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@font-face</span>&#123;</span><br><span class="line">    <span class="attribute">font-family</span>:<span class="string">&#x27;aqqxs&#x27;</span> ;  <span class="comment">/* 字体名自定义即可 */</span></span><br><span class="line">    <span class="attribute">src</span>:<span class="built_in">url</span>(<span class="string">&#x27;https://cdn.jsdelivr.net/gh/2x-ercha/cdn-for-try/fonts/FXAiQingQiXiangSuo.ttf&#x27;</span>); <span class="comment">/* 字体文件路径 */</span></span><br><span class="line">    <span class="attribute">font-display</span> : swap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span>,<span class="selector-tag">h2</span>,<span class="selector-tag">h3</span>,<span class="selector-tag">h4</span>,<span class="selector-tag">h5</span>,<span class="selector-tag">h6</span>,</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-id">#site-name</span>,<span class="selector-tag">span</span><span class="selector-id">#subtitle</span>,<span class="selector-tag">a</span><span class="selector-class">.site-page</span>,</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.title</span>,</span><br><span class="line"><span class="selector-id">#aside-content</span>,</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.article-sort-item-title</span>,</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.article-title</span>,</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.categoryBar-list-link</span>,</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.blog-slider__title</span>,</span><br><span class="line"><span class="selector-class">.article-sort-title</span>,</span><br><span class="line"><span class="selector-class">.tag-cloud-title</span>,</span><br><span class="line"><span class="selector-class">.category-title</span>,</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.category-list-link</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&#x27;aqqxs&#x27;</span>, sans-serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="版权字体微调"><a href="#版权字体微调" class="headerlink" title="版权字体微调"></a>版权字体微调</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.post-copyright</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&#x27;aqqxs&#x27;</span>, sans-serif;</span><br><span class="line">    <span class="attribute">font-size</span>: large</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="首页磁铁字体微调"><a href="#首页磁铁字体微调" class="headerlink" title="首页磁铁字体微调"></a>首页磁铁字体微调</h2><p>其实就是用阴影给分类的标题上了描边</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-class">.categoryBar-list-link</span> &#123;</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">#000000</span>1a <span class="number">1px</span> <span class="number">0</span> <span class="number">0</span>, <span class="number">#000000</span> <span class="number">0</span> <span class="number">1px</span> <span class="number">0</span>, <span class="number">#000000</span> -<span class="number">1px</span> <span class="number">0</span> <span class="number">0</span>, <span class="number">#000000</span>00 <span class="number">0</span> -<span class="number">1px</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="鼠标样式及各种透明"><a href="#鼠标样式及各种透明" class="headerlink" title="鼠标样式及各种透明"></a>鼠标样式及各种透明</h2><blockquote><p>参考文章：小康的<a href="https://www.antmoe.com/posts/a811d614/index.html">Hexo 博客之 butterfly 主题优雅魔改系列</a>和店长的<a href="https://akilar.top/posts/ebf20e02/">Custom Beautify</a></p></blockquote><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 鼠标样式 */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">cursor</span>: <span class="built_in">url</span>(<span class="string">https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/img/default.cur</span>),</span><br><span class="line">        default;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span>,</span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">cursor</span>: <span class="built_in">url</span>(<span class="string">https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/img/pointer.cur</span>),</span><br><span class="line">        default;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 页脚透明 */</span></span><br><span class="line"><span class="selector-id">#footer</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: transparent<span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 头图透明 */</span></span><br><span class="line"><span class="selector-id">#page-header</span>&#123;</span><br><span class="line">  <span class="attribute">background</span>: transparent<span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*top-img黑色透明玻璃效果移除，不建议加，除非你执着于完全一图流或者背景图对比色明显 */</span></span><br><span class="line"><span class="selector-id">#page-header</span><span class="selector-class">.post-bg</span>:before &#123;</span><br><span class="line">  background-color: transparent<span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*夜间模式伪类遮罩层透明*/</span></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-id">#footer</span><span class="selector-pseudo">::before</span>&#123;</span><br><span class="line">  <span class="attribute">background</span>: transparent<span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-id">#page-header</span><span class="selector-pseudo">::before</span>&#123;</span><br><span class="line">  <span class="attribute">background</span>: transparent<span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="Twikoo评论框高度"><a href="#Twikoo评论框高度" class="headerlink" title="Twikoo评论框高度"></a>Twikoo评论框高度</h2><p>根据店长的建议修改成了这样：</p><blockquote><ul><li>首先只需要设置最小高度即可，不需要再加一条高度（虽然文本框是超出转换为滚动条的，但是还是要符合开发逻辑才行啊）。</li><li>然后加一条在聚焦状态下的样式，隐藏图片。这样手机端输入的时候不会被背景图片影响文字输入。</li></ul></blockquote><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.tk-input</span><span class="selector-attr">[data-v-619b4c52]</span></span><br><span class="line">  <span class="selector-class">.el-textarea__inner</span>&#123;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">210px</span> <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.el-textarea__inner</span><span class="selector-pseudo">:focus</span>&#123;</span><br><span class="line">      <span class="attribute">background-image</span>: none <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="卡片背景透明度颜色重写"><a href="#卡片背景透明度颜色重写" class="headerlink" title="卡片背景透明度颜色重写"></a>卡片背景透明度颜色重写</h2><p><strong>PS: 这个其实准备重新弄了</strong></p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  <span class="comment">/* --card-bg: #fff; */</span></span><br><span class="line">  --card-bg: <span class="number">#ffefef</span>d9;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> &#123;</span><br><span class="line">  <span class="comment">/* --card-bg: #121212; */</span></span><br><span class="line">  --card-bg: <span class="number">#121212</span>88;</span><br><span class="line">  --btn-hover-<span class="attribute">color</span>: <span class="number">#787878</span>;</span><br><span class="line">  --btn-bg: <span class="number">#1f1f1f</span>;</span><br><span class="line">  --btn-hover-<span class="attribute">color</span>: <span class="number">#ff3f3f</span>;</span><br><span class="line">  --btn-bg: <span class="number">#a153ff</span>;</span><br><span class="line">  <span class="comment">/* --font-color: rgba(255,255,255,0.7); */</span></span><br><span class="line">  <span class="comment">/* --hr-border: rgba(255,255,255,0.4); */</span></span><br><span class="line">  --<span class="attribute">font</span>-<span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>);</span><br><span class="line">  --hr-<span class="attribute">border</span>: <span class="built_in">rgb</span>(<span class="number">161</span>, <span class="number">83</span>, <span class="number">255</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="标签外挂css微调"><a href="#标签外挂css微调" class="headerlink" title="标签外挂css微调"></a>标签外挂css微调</h2><p>店长那直接白嫖过来的标签外挂不怎么适合我的颜色魔改，所以也相应地做了微调</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#article-container</span> <span class="selector-class">.tabs</span> &gt; <span class="selector-class">.tab-contents</span> <span class="selector-class">.tab-item-content</span><span class="selector-class">.active</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ffffff</span>aa;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-id">#article-container</span> <span class="selector-class">.tabs</span> &gt; <span class="selector-class">.tab-contents</span> <span class="selector-class">.tab-item-content</span><span class="selector-class">.active</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#000000</span>5e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="另外这里给店长打个广告"><a href="#另外这里给店长打个广告" class="headerlink" title="另外这里给店长打个广告"></a>另外这里给店长打个广告</h1><p><strong>butterfly魔改售后服务中心</strong><del>（其实就是店长自己的群）</del></p><img src=https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/akicandyroom.jpg alt='🧊Akilarの糖果屋' style='max-height:500px'>]]></content>
      
      
      <categories>
          
          <category> 贰猹随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Course </tag>
            
            <tag> Diary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html入门学习（〇）</title>
      <link href="9661.html"/>
      <url>9661.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>其实这篇时间应该放在一之前的。但我又不太想违背写正确的发布时间。那就随意一下吧~~~</p><p>这里用来记录我学习前端知识的参考和练习的网站，也方便日后的查找。</p><hr><h3 id="菜鸟教程"><a href="#菜鸟教程" class="headerlink" title="菜鸟教程"></a>菜鸟教程</h3><p><a href="https://www.runoob.com/html/html-tutorial.html">菜鸟教程-HTML 教程</a></p><h3 id="educoder的新用途"><a href="#educoder的新用途" class="headerlink" title="educoder的新用途"></a>educoder的新用途</h3><p><a href="https://www.educoder.net/paths/844">Web应用开发——HTML/CSS</a></p><p><a href="https://www.educoder.net/paths/40">JavaScript在线实战：从入门到精通</a></p><hr><p>以后有看到就继续加上去</p><p>同时魔改博客的时候也在实践中学习css和js喽！</p>]]></content>
      
      
      <categories>
          
          <category> 前端入门学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html入门学习（一）</title>
      <link href="10752.html"/>
      <url>10752.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p><strong>卧槽，大年三十我在干嘛。<del>我在水文章（bushi)</del> 我在学新知识</strong></p><hr><p>我其实也不怎么知道我学前端知识干啥。可能只是想有更广的知识面吧，反正<strong>立下了大一下的自学前端知识（<code>html,css,js</code>三件套）的flag</strong></p><p>趁着春节这周ACM不用训练，时间较好安排，不妨开始<code>html</code>喽</p><hr><p>我就不在这里重复说html是什么，做什么的。这里只是作为笔记的整理，适合翻阅查看而已。以下开始正题：</p><hr><h2 id="基本内容"><a href="#基本内容" class="headerlink" title="基本内容"></a>基本内容</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>基础格式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;!DOCTYPE html&gt;</code> 声明这是个html文档（虽然我觉得文件后缀名就能判断出来）</p><p><code>&lt;html&gt;&lt;/html&gt;</code> html的开头结尾</p><p><code>&lt;head&gt;&lt;/head&gt;</code>必要的声明，比如标题，编码方式，还有此文档外部引入的css等等，都在这里声明（此部分不会在网页中显示）</p><p><code>&lt;body&gt;&lt;/body&gt;</code>文档的主体部分</p><p>所以文章的整个基本结构应该是</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">html</span><br><span class="line">- head</span><br><span class="line">- body</span><br></pre></td></tr></table></figure><hr><h2 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h2><p>比较可能会在md里面打的：</p><p><b style="color: red;">常用红色加粗文本</b><br/><code>&lt;b style=&quot;color: red;&quot;&gt;常用红色加粗文本&lt;/b&gt;</code><br><b style="color: orange;">常用橙色加粗文本</b><br/><code>&lt;b style=&quot;color: orange;&quot;&gt;常用橙色加粗文本&lt;/b&gt;</code><br><b style="color: yellow;">常用黄色加粗文本</b><br/><code>&lt;b style=&quot;color: yellow;&quot;&gt;常用黄色加粗文本&lt;/b&gt;</code><br><b style="color: green;">常用绿色加粗文本</b><br/><code>&lt;b style=&quot;color: green;&quot;&gt;常用绿色加粗文本&lt;/b&gt;</code><br><b style="color: cyan;">常用青色加粗文本</b><br/><code>&lt;b style=&quot;color: cyan;&quot;&gt;常用青色加粗文本&lt;/b&gt;</code><br><b style="color: blue;">常用蓝色加粗文本</b><br/><code>&lt;b style=&quot;color: blue;&quot;&gt;常用蓝色加粗文本&lt;/b&gt;</code><br><b style="color: purple;">常用紫色加粗文本</b><br/><code>&lt;b style=&quot;color: purple;&quot;&gt;常用紫色加粗文本&lt;/b&gt;</code><br><strong style="color: violet;">还有strong加粗</strong><br/><code>&lt;strong style=&quot;color: violet;&quot;&gt;还有strong加粗&lt;/strong&gt;</code></p><hr><h2 id="其他常用"><a href="#其他常用" class="headerlink" title="其他常用"></a>其他常用</h2><p><b style="color: white;">b标签是加粗</b><br><strong style="color: cornsilk;">strong标签也是加粗</strong><br><big style="color: red;">big标签是放大</big><br><small style="color: blueviolet;">small标签是缩小</small><br><em style="color: pink;">em是斜体</em><br><i style="color: cornsilk;">i也是斜体</i><br><sup style="color: cyan;">sup上标</sup>正常<sub style="color: cyan;">sub下标</sub><br><ins style="color: orange;">ins标签插入字（下划线）</ins><br><del style="color: violet;">del标签删除字</del></p><hr><h2 id="代码？"><a href="#代码？" class="headerlink" title="代码？"></a>代码？</h2><p>对以下东西比较迷惑</p><p><dfn>定义项目</dfn><br><br><code>一段电脑代码 print("Hello World")</code><br><br><samp>计算机样本</samp><br><br><kbd>键盘输入</kbd><br><br><var>变量</var></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--对以下东西比较迷惑--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dfn</span>&gt;</span>定义项目<span class="tag">&lt;/<span class="name">dfn</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">code</span>&gt;</span>一段电脑代码 print(&quot;Hello World&quot;)<span class="tag">&lt;/<span class="name">code</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">samp</span>&gt;</span>计算机样本<span class="tag">&lt;/<span class="name">samp</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span>键盘输入<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">var</span>&gt;</span>变量<span class="tag">&lt;/<span class="name">var</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--迷惑结束--&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p><abbr title="abbr标签缩写，可以隐藏内容呀">鼠标移到我上边看内容</abbr><br/><code>&lt;abbr title=&quot;abbr标签缩写，可以隐藏内容呀&quot;&gt;鼠标移到我上边看内容&lt;/abbr&gt;</code></p><p><code>&lt;address&gt; </code>标签定义文档作者/所有者的联系信息。<br>如果<code>&lt;address&gt;</code> 元素位于<code>&lt;body&gt;</code>元素内部，则它表示该文档作者/所有者的联系信息。<br>如果<code>&lt;address&gt;</code>元素位于<code> &lt;article&gt;</code> 元素内部，则它表示该文章作者/所有者的联系信息。<br><code>&lt;address&gt;</code> 元素的文本通常呈现为斜体。大多数浏览器会在该元素的前后添加换行。<br>如</p><address>Written by <a href="mailto:noionion@outlook.com">noionion</a>.<br/> Visit us at:<br/><a href="https://noionion.top/">noionion.top</a><br/>HNU univsity Changsha Hunan<br/>Chine</address><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;address&gt;</span><br><span class="line">Written by &lt;a href&#x3D;&quot;mailto:noionion@outlook.com&quot;&gt;noionion&lt;&#x2F;a&gt;.&lt;br&#x2F;&gt; </span><br><span class="line">Visit us at:&lt;br&#x2F;&gt;</span><br><span class="line">&lt;a href&#x3D;&quot;https:&#x2F;&#x2F;noionion.top&#x2F;&quot;&gt;noionion.top&lt;&#x2F;a&gt;&lt;br&#x2F;&gt;</span><br><span class="line">HNU univsity Changsha Hunan&lt;br&#x2F;&gt;</span><br><span class="line">Chine</span><br><span class="line">&lt;&#x2F;address&gt;</span><br></pre></td></tr></table></figure><p>该段落文字从左到右显示。<br/><br><bdo dir="rtl">该段落文字从右到左显示。</bdo><br/><code>&lt;bdo dir=&quot;rtl&quot;&gt;该段落文字从右到左显示。&lt;/bdo&gt;</code></p><blockquote cite="http://www.worldwildlife.org/who/index.html">长文本引用blockquote<br/> 定义引用cite<br/>和md的引用是一样的</blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">blockquote</span> <span class="attr">cite</span>=<span class="string">&quot;http://www.worldwildlife.org/who/index.html&quot;</span>&gt;</span></span><br><span class="line">长文本引用blockquote<span class="tag">&lt;<span class="name">br</span>/&gt;</span> 定义引用cite<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">和md的引用是一样的</span><br><span class="line"><span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&lt;q style=”color: lightblue;”;”&gt;短文本引用q（有点类似于加个双引号？）</q><br/><br/><code>&lt;q style=&quot;color: lightblue;&quot;;&quot;&gt;短文本引用q（有点类似于加个双引号？）&lt;/q&gt;&lt;br/&gt;</code></p><p><cite>使用cite标签来定义作品的标题</cite>&lt;br&gt;<code>&lt;cite&gt;使用cite标签来定义作品的标题&lt;/cite&gt;</code></p><hr><p>暂时写到这里（剩下的还没学啦）</p>]]></content>
      
      
      <categories>
          
          <category> 前端入门学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>butterfly-css-for-hpptalk: 给HPP的说说页魔改主题（适用于Butterfly）</title>
      <link href="14413.html"/>
      <url>14413.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="butterfly-css-for-hpptalk"><a href="#butterfly-css-for-hpptalk" class="headerlink" title="butterfly-css-for-hpptalk"></a>butterfly-css-for-hpptalk</h1><p>一个提供适配Butterfly主题的HexoPlusPlus-talk的css仓库</p><p>github: <a href="https://github.com/2X-ercha/butterfly-css-for-hpptalk">https://github.com/2X-ercha/butterfly-css-for-hpptalk</a></p><hr><h2 id="Bfnoion"><a href="#Bfnoion" class="headerlink" title="Bfnoion"></a>Bfnoion</h2><p>引用地址：<a href="https://cdn.jsdelivr.net/gh/2x-ercha/butterfly-css-for-hpptalk/Butterfly_1.css">https://cdn.jsdelivr.net/gh/2x-ercha/butterfly-css-for-hpptalk/Butterfly_1.css</a></p><p>已对bf主题色适配（已支持魔改颜色后的bf）</p><h3 id="效果图："><a href="#效果图：" class="headerlink" title="效果图："></a>效果图：</h3><h4 id="（未配上作者魔改后的bf前的效果）"><a href="#（未配上作者魔改后的bf前的效果）" class="headerlink" title="（未配上作者魔改后的bf前的效果）"></a>（未配上作者魔改后的bf前的效果）</h4><p><img src="https://cdn.jsdelivr.net/gh/2X-ercha/picture-bed@master/1612706582000.png" alt="light_normal"></p><p><img src="https://cdn.jsdelivr.net/gh/2X-ercha/picture-bed@master/1612706593000.png" alt="dark_normal"></p><h4 id="（配上作者魔改后的bf后的效果）"><a href="#（配上作者魔改后的bf后的效果）" class="headerlink" title="（配上作者魔改后的bf后的效果）"></a>（配上作者魔改后的bf后的效果）</h4><p><img src="https://cdn.jsdelivr.net/gh/2X-ercha/picture-bed@master/1612707007000.png" alt="light_revision"></p><p><img src="https://cdn.jsdelivr.net/gh/2X-ercha/picture-bed@master/1612707030000.png" alt="dark_revision"></p><hr><h2 id="第二个"><a href="#第二个" class="headerlink" title="第二个"></a>第二个</h2><p>还没出。。。（咕咕咕）</p><p><img src="https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic/image/baitian/file_6574840.webp"></p>]]></content>
      
      
      <categories>
          
          <category> 前端入门学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Project </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HPP专用测试文章</title>
      <link href="17660.html"/>
      <url>17660.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>最近博主上手了<a href="https://github.com/ChenYFan">@ChenYFan</a>开发的hexo后台系统<a href="https://github.com/HexoPlusPlus/HexoPlusPlus">HexoPlusPlus</a>，<del>然后成为了HPP测试版的小白鼠</del></p><p>又不想在测试过程中拿去修改其他的文章，所以单开一页专门测试</p><p>以下为日常测试内容</p><hr><h2 id="试一试新建"><a href="#试一试新建" class="headerlink" title="试一试新建"></a>试一试新建</h2><h2 id="试一试更改"><a href="#试一试更改" class="headerlink" title="试一试更改"></a>试一试更改</h2><h2 id="试一试图片上传"><a href="#试一试图片上传" class="headerlink" title="试一试图片上传"></a>试一试图片上传</h2><p><img src="https://cdn.jsdelivr.net/gh/2X-ercha/picture-bed@master/1612602820000.png"></p><h2 id="试一试手机端"><a href="#试一试手机端" class="headerlink" title="试一试手机端"></a>试一试手机端</h2><p>输入法：中文/English</p><h2 id="试一试表情"><a href="#试一试表情" class="headerlink" title="试一试表情"></a>试一试表情</h2><p><img src="https://cdn.jsdelivr.net/gh/Dreamy-TZK/iemotion-pic@latest/img/QQ/0.gif"><img src="https://cdn.jsdelivr.net/gh/Dreamy-TZK/iemotion-pic@latest/img/bilibili_tv_gif/doge.gif"><img src="https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic/image/bilibili2233/[2233%E5%A8%98_%E5%8D%96%E8%90%8C].png"><img src="https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic/image/Menhera-chan/1.jpg"><img src="https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic/image/Tsuri-me-ju_mimi/10753776_key@2x.png"><img src="https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic/image/Mafumafu/199749454.png"><img src="https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic/image/Snow-Miku/3583066@2x.png"><img src="https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic/image/Sweetie-Bunny/12311678.png"><img src="https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic/image/aodamiao/01.gif"><img src="https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic/image/Heybox/expression_cube.png"><img src="https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic/image/baitian/file_6574832.webp"><img src="https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic/image/weisuomeng/1.jpg"><img src="https://cdn.jsdelivr.net/gh/Dreamy-TZK/iemotion-pic@latest/img/%E7%BD%97%E5%B0%8F%E9%BB%91/%E4%BD%A0%E5%A5%BD%E5%91%80.png"><img src="https://cdn.jsdelivr.net/gh/Dreamy-TZK/iemotion-pic@latest/img/%E9%82%A3%E5%85%94/%E3%80%82%E3%80%82%E3%80%82.png"></p><hr><p><a href="mailto:&#72;&#x65;&#120;&#x6f;&#x50;&#x6c;&#x75;&#x73;&#80;&#108;&#117;&#115;&#x40;&#x31;&#46;&#x30;&#46;&#x37;">&#72;&#x65;&#120;&#x6f;&#x50;&#x6c;&#x75;&#x73;&#80;&#108;&#117;&#115;&#x40;&#x31;&#46;&#x30;&#46;&#x37;</a>测试结束，没有bug</p>]]></content>
      
      
      <categories>
          
          <category> 用于测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Course </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HNU:ACM校队预选寒假训练1.25-1.31-div3-杂题-题解</title>
      <link href="49783.html"/>
      <url>49783.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>题解仅供参考</p><p><a href="https://vjudge.net/contest/419530">编程练习专题（各种杂题）</a></p><p>题外话：我得重新整个实用的大数板子了</p><hr><h1 id="A"><a href="#A" class="headerlink" title="A"></a>A</h1><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>就是个裸的辗转相除法，没什么坑，int就能过</p><h1 id="B"><a href="#B" class="headerlink" title="B"></a>B</h1><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>就是求一堆数里的素数（这题貌似用最简单的判断素数方法就能过）</p><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>可以对前1e7个数用筛法判断存表（不过这题确实没必要）</p><h1 id="C"><a href="#C" class="headerlink" title="C"></a>C</h1><h2 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a>题目大意</h2><p>求1-n的奇数平方和</p><h2 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h2><p>法一：用公式解决（注意<code>n(n+1)(n+2)</code>会超长整数范围）</p><p>法二：预处理打表（核心代码如下）</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> pow2[<span class="number">100001</span>];</span><br><span class="line">pow2[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">100000</span>;i+=<span class="number">2</span>)&#123;</span><br><span class="line">    pow2[i]=i*i+pow2[i<span class="number">-2</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h2><p>打表被老师嘲讽了</p><h1 id="D"><a href="#D" class="headerlink" title="D"></a>D</h1><h2 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h2><p>这题挺坑的，还要在出发点相遇（题目没讲清楚吧）</p><p>具体的解法是，假设输入的数是<code>a/b c/d</code></p><p>化简 a/b 和 c/d 得到新的 a,b,c,d，答案为 lcm(a,c)/gcd(b,d)</p><p>注意分母为1的情况</p><h1 id="E"><a href="#E" class="headerlink" title="E"></a>E</h1><h2 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h2><p>这题是个纯数学题，看平均分后有多少刀是重复的</p><p>即 a+b-gcd(a,b)</p><h1 id="F"><a href="#F" class="headerlink" title="F"></a>F</h1><h2 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a>题目大意</h2><p>求最大质因数是第几个素数</p><h2 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a>题解</h2><p>显然用埃氏筛轻松解决</p><h1 id="G"><a href="#G" class="headerlink" title="G"></a>G</h1><h2 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a>题解</h2><p>显然 c 是 b 的倍数且满足 gcd(a,c)==b 即可</p><p>循环 c 累加 b，找到最小的 c 后直接 break </p><h1 id="H"><a href="#H" class="headerlink" title="H"></a>H</h1><h2 id="题解-6"><a href="#题解-6" class="headerlink" title="题解"></a>题解</h2><p>根据题目可知，一共有三种形式的小数需要我们去转换成分数，分别为:</p><ul><li><p>有限小数：形如 0.2,0.33</p></li><li><p>纯循环小数：形如 0.333333333…</p></li><li><p>非纯循环小数：形如 0.32477777… ，0.24367676767…</p></li></ul><p>显然，无限不循环小数不可能转换为分数（中学知识），而对于上面两种循环小数，我们不妨分情况来讨论。</p><p><strong>1、纯循环小数</strong></p><p>0.33333… * 10 = 3.33333…</p><p>(10 - 1) * 0.33333… = 3</p><p>即 9 * 0.33333… = 3</p><p>所以 0.33333… = 3/9 = 1/3</p><p>再举一个例子</p><p>0.474747… * 100 = 47.474747…</p><p>(100 - 1) * 0.474747… = 47</p><p>即 99 * 0.474747… = 47</p><p>所以 0.474747… = 47/99</p><p>由上述两个例子我们可以发现，纯循环小数化成分数过后其分子就为所循环单元化成的数，分母则全由9组成，位数和循环数的位数相同。</p><p><strong>2、非纯循环小数</strong></p><p>0.4777777… * 10 = 4.7777…</p><p>0.477777… * 100 = 47.77777…</p><p>(100 - 10) * 0.4777777… = 43</p><p>所以 0.4777777… = 43/90</p><p>再举一个例子</p><p>0.323565656… * 1000 = 323.56565656…</p><p>0.323565656… * 100000= 32356.565656…</p><p>(10000 - 1000) * 0.32356565656… = 32033</p><p>所以 0.32356565656… = 32033/99000</p><p>由上述两个例子我们可以发现，非纯循环小数化成分数过后其分子为 非循环部分与第一个循环部分 组成的数减去非循环部分的数，分母则为9与0组成的数，9的位数和循环部分数的位数相同，0的位数则和非循环部分数的位数相同</p><p><strong>PS：对于有限小数，不妨看作是非纯循环小数的一种特例子，即0.3 = 0.30000000</strong></p><h1 id="I"><a href="#I" class="headerlink" title="I"></a>I</h1><h2 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a>题目大意</h2><p>输出[1,2,…,n]的第i个子序列</p><p>自序列的顺序按字典序排序</p><h2 id="题解-7"><a href="#题解-7" class="headerlink" title="题解"></a>题解</h2><p>这题就很有意思了</p><p>对 n=1 而言，子序列为</p><p>[1]</p><p>对 n=2 而言，子序列为</p><p>[1],[1,2]</p><p>[2],[2,1]</p><p>对 n=3 而言，子序列为</p><p>[1],[1,2],[1,2,3],[1,3],[1,3,2]</p><p>[2],[2,1],[2,1,3],[2,3],[2,3,1]</p><p>[3],[3,1],[3,1,2],[3,2],[3,2,1]</p><p>……</p><p>显然可以发现，长度为 n 的序列的子序列 S(n) 满足这样一个关系式：<code>S(n)=n*(S(n-1)+1)</code></p><p>如果按上面的写的话，将 S(n) 个数分为 n 组，每组有 S(n-1)+1 个</p><p>那么第 i 个子序列的开头就很明显了，为 <code>x1=i/(S(n-1)+1)+1</code></p><p>假如 n=3,i=9 ,求出的第9个子序列的第一个数为 <code>x1=2</code></p><p>接下来对第 x1 行处理，去除第一个数，新的序列为</p><p>[1],[1,3]</p><p>[3],[3,1]</p><p>即为序列 [1,3] 的子序列</p><p>所求即为第 <code>i%(S(n-1)+1)-1</code> 个子序列</p><p>以此类推</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> s[<span class="number">21</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">bool</span> t[<span class="number">21</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    s[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=<span class="number">20</span>;i++)</span><br><span class="line">        s[i]=i*(s[i<span class="number">-1</span>]+<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> m;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%d %lld&quot;</span>,&amp;n,&amp;m))&#123;</span><br><span class="line">        <span class="built_in">memset</span>(t,<span class="literal">false</span>,<span class="keyword">sizeof</span>(t));</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> k,num=n;</span><br><span class="line">        <span class="keyword">while</span>(m&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            m--;</span><br><span class="line">            k=m/(s[--num]+<span class="number">1</span>);</span><br><span class="line">            m=m%(s[num]+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">int</span> number=<span class="number">0</span>,i;</span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!t[i])number++;</span><br><span class="line">                <span class="keyword">if</span>(number==k+<span class="number">1</span>)<span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,i);</span><br><span class="line">            t[i]=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(m&gt;<span class="number">0</span>)<span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="J"><a href="#J" class="headerlink" title="J"></a>J</h1><h2 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a>题目大意</h2><p>其实就是最大上升子序列和</p><h2 id="题解-8"><a href="#题解-8" class="headerlink" title="题解"></a>题解</h2><p>DP题一道,dp[i]记录从1-i的最大子序列和，不断维护最大值即可，核心代码如下</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> maxx=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> maxs=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i;j++)</span><br><span class="line">        <span class="keyword">if</span>(num[i]&gt;num[j])</span><br><span class="line">            maxs=max(maxs,dp[j]);</span><br><span class="line">    dp[i]=maxs+num[i];</span><br><span class="line">    maxx=max(maxx,dp[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="K"><a href="#K" class="headerlink" title="K"></a>K</h1><h2 id="题解-9"><a href="#题解-9" class="headerlink" title="题解"></a>题解</h2><p>01背包问题，不过这题反向记录不被录取的最小概率会比较好算</p><p>dp[i]记录的是 i 万美元下不被录取的最小概率，核心代码如下</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> i,j;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10005</span>;i++)</span><br><span class="line">dp[i]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld %lf&quot;</span>,&amp;a[i],&amp;b[i]);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line"><span class="keyword">for</span>(j=n;j&gt;=a[i];j--)</span><br><span class="line">dp[j]=min(dp[j],dp[j-a[i]]*(<span class="number">1</span>-b[i]))</span><br></pre></td></tr></table></figure><h1 id="L"><a href="#L" class="headerlink" title="L"></a>L</h1><h2 id="题解-10"><a href="#题解-10" class="headerlink" title="题解"></a>题解</h2><p>数塔（数字三角形）什么的已经很老套了，这里就不讲了（不过递归会超时）</p><h1 id="M"><a href="#M" class="headerlink" title="M"></a>M</h1><h2 id="题目大意-5"><a href="#题目大意-5" class="headerlink" title="题目大意"></a>题目大意</h2><p>求 N！ 的位数</p><h2 id="题解-11"><a href="#题解-11" class="headerlink" title="题解"></a>题解</h2><p>求位数我们其实比较容易想到的是 log10(i)+1</p><p>log10(N!) = log10(1<em>2</em>L*N) = log10(1) + log10(2) + L + log10(N)</p><p>最后对和取整+1即为答案</p><h1 id="N"><a href="#N" class="headerlink" title="N"></a>N</h1><h2 id="题目大意-6"><a href="#题目大意-6" class="headerlink" title="题目大意"></a>题目大意</h2><p>就是个大数加法板子。。。</p><h2 id="题解-12"><a href="#题解-12" class="headerlink" title="题解"></a>题解</h2><p>略（基本上每个板子都能过吧）</p><h1 id="O"><a href="#O" class="headerlink" title="O"></a>O</h1><h2 id="题目大意-7"><a href="#题目大意-7" class="headerlink" title="题目大意"></a>题目大意</h2><p>大数累乘求 N!</p><h2 id="题解-13"><a href="#题解-13" class="headerlink" title="题解"></a>题解</h2><p><code>10000!</code>足足有近36000位，所以考虑了下压位处理</p><p>这题卡了空间没卡时间，打表反而会 MLE，每次运算求解就可</p><p>核心代码如下：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line">a[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    <span class="keyword">int</span> k=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">10000</span>;j++)&#123;</span><br><span class="line">        a[j]=i*a[j]+k;</span><br><span class="line">        k=a[j]/<span class="number">10000</span>;</span><br><span class="line">        a[j]%=<span class="number">10000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">10000</span>; ; i--)</span><br><span class="line">    <span class="keyword">if</span>(a[i] != <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a[i]);</span><br><span class="line">i--;</span><br><span class="line"><span class="keyword">for</span>( ; i != <span class="number">-1</span>; i--)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%04d&quot;</span>,a[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong>PS:注意 0! =1</strong></p><h1 id="P"><a href="#P" class="headerlink" title="P"></a>P</h1><h2 id="题目大意-8"><a href="#题目大意-8" class="headerlink" title="题目大意"></a>题目大意</h2><p>求每组大数和</p><h2 id="题解-14"><a href="#题解-14" class="headerlink" title="题解"></a>题解</h2><p>还是个大数板子题，不过注意这题有个单独的数据 <code>0</code> 比较恶心</p><h1 id="Q"><a href="#Q" class="headerlink" title="Q"></a>Q</h1><h2 id="题目大意-9"><a href="#题目大意-9" class="headerlink" title="题目大意"></a>题目大意</h2><p>求 R 的 n 次方根</p><h2 id="题解-15"><a href="#题解-15" class="headerlink" title="题解"></a>题解</h2><p>对整数部分和小数部分分别运算，注意最后输出格式（小数的乘法确实难搞）</p><h1 id="R"><a href="#R" class="headerlink" title="R"></a>R</h1><h2 id="题目大意-10"><a href="#题目大意-10" class="headerlink" title="题目大意"></a>题目大意</h2><p>求区间内的菲波那契数的个数</p><h2 id="题解-16"><a href="#题解-16" class="headerlink" title="题解"></a>题解</h2><p>这题我采用的是先打表后查找的方式，菲波那契数的第500项位数就超过100位了</p><p>（然后大数比较我写错了，找BUG找了半天）</p><p>普通查找即可（不需要二分就可以过）</p><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> fb[<span class="number">1006</span>][<span class="number">504</span>] =&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> a1[<span class="number">504</span>],b1[<span class="number">504</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">min_fb_a1</span><span class="params">(<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">200</span>; ; i--)</span><br><span class="line">        <span class="keyword">if</span>(fb[m][i] != <span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">for</span>(j = <span class="number">200</span>; ; j--)</span><br><span class="line">        <span class="keyword">if</span>(a1[j] != <span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span>(i&lt;j)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(i&gt;j)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>( ; i != <span class="number">-1</span>; i--)</span><br><span class="line">        <span class="keyword">if</span>(fb[m][i] &lt; a1[i])</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(fb[m][i] &gt; a1[i])</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">min_deng_fb_b1</span><span class="params">(<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">200</span>; ; i--)</span><br><span class="line">        <span class="keyword">if</span>(fb[m][i] != <span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">for</span>(j = <span class="number">200</span>; ; j--)</span><br><span class="line">        <span class="keyword">if</span>(b1[j] != <span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span>(i&lt;j)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(i&gt;j)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>( ; i != <span class="number">-1</span>; i--)</span><br><span class="line">        <span class="keyword">if</span>(fb[m][i] &lt; b1[i])</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(fb[m][i] &gt; b1[i])</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, k;</span><br><span class="line">    <span class="built_in">string</span> a,b;</span><br><span class="line">    fb[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    fb[<span class="number">2</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">3</span>; i &lt;= <span class="number">500</span>; i++)&#123;</span><br><span class="line">        k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt;= <span class="number">200</span>; j++)&#123;</span><br><span class="line">            fb[i][j] = fb[i<span class="number">-1</span>][j]+fb[i<span class="number">-2</span>][j]+k;</span><br><span class="line">            k = fb[i][j]/<span class="number">10</span>;</span><br><span class="line">            fb[i][j] = fb[i][j]%<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a==<span class="string">&quot;0&quot;</span>&amp;&amp;b==<span class="string">&quot;0&quot;</span>)<span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">memset</span>(a1,<span class="number">0</span>,<span class="keyword">sizeof</span>(a1));</span><br><span class="line">        <span class="built_in">memset</span>(b1,<span class="number">0</span>,<span class="keyword">sizeof</span>(b1));</span><br><span class="line">        <span class="keyword">for</span>(i=a.length()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)a1[a.length()<span class="number">-1</span>-i]=<span class="keyword">int</span>(a[i])<span class="number">-48</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=b.length()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)b1[b.length()<span class="number">-1</span>-i]=<span class="keyword">int</span>(b[i])<span class="number">-48</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> start,end;</span><br><span class="line">        <span class="keyword">for</span>(start=<span class="number">1</span>;start&lt;=<span class="number">500</span>;start++)</span><br><span class="line">            <span class="keyword">if</span>(!min_fb_a1(start))<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span>(start!=<span class="number">1</span>)start--;</span><br><span class="line">        <span class="keyword">for</span>(end=start;end&lt;=<span class="number">500</span>;end++)</span><br><span class="line">            <span class="keyword">if</span>(!min_deng_fb_b1(end))<span class="keyword">break</span>;</span><br><span class="line">        end--;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,end-start);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="S"><a href="#S" class="headerlink" title="S"></a>S</h1><h2 id="题解-17"><a href="#题解-17" class="headerlink" title="题解"></a>题解</h2><p>继续我的大数打表行为emmm</p><h1 id="T"><a href="#T" class="headerlink" title="T"></a>T</h1><h2 id="题解-18"><a href="#题解-18" class="headerlink" title="题解"></a>题解</h2><p>跟大数加法没太大区别，只不过变成头尾补0了</p><h1 id="U"><a href="#U" class="headerlink" title="U"></a>U</h1><h2 id="题解-19"><a href="#题解-19" class="headerlink" title="题解"></a>题解</h2><p>这题我的解法跟别人可能不太一样。。。我直接让组合出的数做为下标存到布尔数组里，再枚举数组值为 true 的下标（暴力不需要考虑重复）</p><p>太丢脸了就不放代码了</p><h1 id="V"><a href="#V" class="headerlink" title="V"></a>V</h1><h2 id="题目大意-11"><a href="#题目大意-11" class="headerlink" title="题目大意"></a>题目大意</h2><p>已知树的前根中根遍历，求后根遍历</p><h2 id="题解-20"><a href="#题解-20" class="headerlink" title="题解"></a>题解</h2><p>这题也是老题了，熟悉这三种遍历方式的自然知道怎么判断树的根节点（不需要构建树）</p><h1 id="W"><a href="#W" class="headerlink" title="W"></a>W</h1><h2 id="题目大意-12"><a href="#题目大意-12" class="headerlink" title="题目大意"></a>题目大意</h2><ul><li><p>1，2是友谊数</p></li><li><p>如果 a,b （可相同）是友谊数，那么 ab+a+b 也是友谊数</p></li></ul><p>求 n 是不是友谊数</p><h2 id="题解-21"><a href="#题解-21" class="headerlink" title="题解"></a>题解</h2><p>这是道数学题。可以发现公式</p><p>n+1 = ab+a+b+1 = (a+1)(b+1)</p><p>又因为所有友谊数都是由 1,2 衍生，可以知道 n+1 可以表示成 pow(2,x)*pow(3,y) 的形式</p><p>判断 n 是否满足上述结构即可</p>]]></content>
      
      
      <categories>
          
          <category> C++学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何实现校园疫情防控自动打卡</title>
      <link href="7431.html"/>
      <url>7431.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><div class="note warning simple"><p><strong>免责声明</strong> 本教程仅提供参考学习使用，若读者参考本教程编写脚本后违反相关法律法规造成损失，将由读者自行承担，教程所有者不承担一切责任！</p></div><div class="note warning simple"><p><strong>请在法律循序范围内自行参考制作自己的打卡脚本，当发生发烧等异常现象是仍需如实填报</strong></p></div><p><strong>此教程针对有爬虫基础的同学编写</strong></p><p><del>本来是想开源的，但考虑到前阵子的健康码APP事件，以及自动打卡扩散出去实际上是影响疫情防控的行为，还有水一篇博文的需要</del></p><p>使用说明书地址：无了，因为被辅导员约谈了</p><p><strong>所以不开源啦，说明书也删啦！</strong></p><p>所以还想自动打卡的，白嫖请找其他服务商 <del>(我认识一些，但我就是不说，唉，就是玩儿)</del>，自己写的话可以看下面教程</p><p><strong>为了保命我也不会放核心代码</strong></p><p>理论上来说，只要是能用网页进入打卡页面的打卡网站，都可以参考本教程实现。身在湖大，就用湖大的疫情防控打卡<strong>举个栗子</strong>了</p><hr><h2 id="教程分三步"><a href="#教程分三步" class="headerlink" title="教程分三步"></a>教程分三步</h2><p>打卡-微信提醒（已过期）-自动化</p><h2 id="你需要"><a href="#你需要" class="headerlink" title="你需要"></a>你需要</h2><ul><li>一个Github账号</li><li>微信（X）</li></ul><p>教程开始！</p><hr><h1 id="用Python实现打卡功能"><a href="#用Python实现打卡功能" class="headerlink" title="用Python实现打卡功能"></a>用Python实现打卡功能</h1><p>最开始想的是用模拟浏览器的方式进行点击处理，但未免过于复杂。后来从大佬那了解到只要知道登录和打卡时网页发送了什么数据给后台(post)就可</p><p>打开<a href="https://fangkong.hnu.edu.cn/app/#/login">湖大的打卡界面</a>，进行登录，康康网页发送了些什么</p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20210124220537.png"></p><p>找到右侧的login文件并查看它的请求内容，显然，Code是我们的账号，Password是我们的密码，VerCode是验证码，那Token又是什么东西呢？</p><p>回到登录页，刷新验证码，网络会得到两个传输文件</p><p>可以看到，它向 <a href="https://fangkong.hnu.edu.cn/api/v1/account/getimgvcode">https://fangkong.hnu.edu.cn/api/v1/account/getimgvcode</a> 这个网址get了一下，然后得到了响应，显然响应得到的token就是了</p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20210124221019.png"></p><p>通过检索网页html可以得到，这个验证码的地址格式为</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;https://fangkong.hnu.edu.cn/imagevcode?token=&quot;</span> + token</span><br></pre></td></tr></table></figure><p>所以第一步要登录所发送的数据就剩验证码内容了</p><h2 id="step-1-爬取验证码并解析"><a href="#step-1-爬取验证码并解析" class="headerlink" title="step 1: 爬取验证码并解析"></a>step 1: 爬取验证码并解析</h2><p>爬取验证码的操作就和爬图片没什么区别,只是前面先加了一步爬取token的操作（这里的请求头不做严格要求）</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">token_json = requests.get(<span class="string">&quot;https://fangkong.hnu.edu.cn/api/v1/account/getimgvcode&quot;</span>, headers=headers_1)</span><br></pre></td></tr></table></figure><p>对爬取的数据解码成字典并取出token</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">data = json.loads(token_json.text)</span><br><span class="line">token = data[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;Token&quot;</span>]</span><br></pre></td></tr></table></figure><p>爬验证码并保存</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">img_url = <span class="string">&quot;https://fangkong.hnu.edu.cn/imagevcode?token=&quot;</span> + token</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;img.jpg&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> img:</span><br><span class="line">    img.write(requests.get(img_url).content)</span><br></pre></td></tr></table></figure><p>为了自动化方便一些，这里采用在线调用接口的方式进行（接口来自于百度飞桨OCR识别）</p><blockquote><p><strong>这里安利一篇教程（来自大二学长）</strong>：<a href="https://zhuanlan.zhihu.com/p/342405677">使用Python快速实现图片文字识别（30行代码）</a></p></blockquote><p>直接放代码（我也是直接<code>ctrl</code>+<code>c</code>和<code>ctrl</code>+<code>v</code>过来的）</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">headers_3 = &#123;</span><br><span class="line">        <span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;cloud.baidu.com&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.114 Safari/537.36 Edg/89.0.774.76&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;*/*&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Origin&#x27;</span>: <span class="string">&#x27;https://cloud.baidu.com&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Fetch-Site&#x27;</span>: <span class="string">&#x27;same-origin&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Fetch-Mode&#x27;</span>: <span class="string">&#x27;cors&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Fetch-Dest&#x27;</span>: <span class="string">&#x27;empty&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;https://cloud.baidu.com/product/ocr/general&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6&#x27;</span>,</span><br><span class="line">    &#125; <span class="comment"># 百度OCR识别验证码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;img.jpg&quot;</span>,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    img = base64.b64encode(f.read())</span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;image&#x27;</span>: <span class="string">&#x27;data:image/jpeg;base64,&#x27;</span>+<span class="built_in">str</span>(img)[<span class="number">2</span>:-<span class="number">1</span>],</span><br><span class="line">    <span class="string">&#x27;image_url&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;https://aip.baidubce.com/rest/2.0/ocr/v1/general_basic&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;detect_direction&#x27;</span>: <span class="string">&#x27;false&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">response = requests.post(<span class="string">&#x27;https://cloud.baidu.com/aidemo&#x27;</span>, headers=headers_3, data=data)</span><br><span class="line">result = response.json()[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;words_result&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;words&#x27;</span>]</span><br></pre></td></tr></table></figure><p>result就是我们的验证码内容了（识别率还挺高的）</p><h2 id="step-2-登录"><a href="#step-2-登录" class="headerlink" title="step 2: 登录"></a>step 2: 登录</h2><p>登录需要发送的信息在上文已经说明了，是一个JSON字符串 <strong>(注意键值对都是字符串（除了null）)</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&quot;Code&quot;</span>:<span class="string">&quot;2020****0131&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Password&quot;</span>:<span class="string">&quot;**********&quot;</span>,</span><br><span class="line">    <span class="string">&quot;WechatUserinfoCode&quot;</span>:null, <span class="comment"># 非必要</span></span><br><span class="line">    <span class="string">&quot;VerCode&quot;</span>:result,</span><br><span class="line">    <span class="string">&quot;Token&quot;</span>:token</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我们可以向网页发送请求了！</p><p>为了保持会话（服务器才知道你登录和提交打卡信息用的是一个号），这里<strong>建立一个临时会话</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">session = requests.Session()</span><br></pre></td></tr></table></figure><p>然后复制粘贴再打引号你的请求头 <strong>(注意一定要login文件的headers,和上面爬验证码和解析验证码用的headers_1不同，这里记为headers_2)</strong></p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20210124223843.png"></p><p>然后post你的账号密码验证码（注意url也是login文件的请求地址，记得对data做json字符串处理）</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">response = session.post(<span class="string">&quot;https://fangkong.hnu.edu.cn/api/v1/account/login&quot;</span>, headers=headers_2, data=json.dumps(data))</span><br></pre></td></tr></table></figure><p>如果得到的<code>response.json()[&quot;code&quot;]</code>不为0，那么验证码错误，需要重新登录（百度的OCR也有一定概率出错的）</p><p>至此，登录部分就完成啦！</p><h2 id="step-3-打卡"><a href="#step-3-打卡" class="headerlink" title="step 3: 打卡"></a>step 3: 打卡</h2><p>我们试着打卡一次，得到的请求如下（因为今天已经打卡过了，我也不记得打卡时网络传输的文件是啥，我只能找一下昨天的截图</p><p>唉，找不到</p><p>大概就这些数据吧</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">data1 = &#123; <span class="comment"># 假期版本</span></span><br><span class="line">    <span class="comment"># &quot;Temperature&quot;:null,</span></span><br><span class="line">    <span class="string">&quot;RealProvince&quot;</span>:RealProvince,</span><br><span class="line">    <span class="string">&quot;RealCity&quot;</span>:RealCity,</span><br><span class="line">    <span class="string">&quot;RealCounty&quot;</span>:RealCounty,</span><br><span class="line">    <span class="string">&quot;RealAddress&quot;</span>:RealAddress,</span><br><span class="line">    <span class="string">&quot;IsUnusual&quot;</span>:<span class="string">&quot;0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;UnusualInfo&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;IsTouch&quot;</span>:<span class="string">&quot;0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;IsInsulated&quot;</span>:<span class="string">&quot;0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;IsSuspected&quot;</span>:<span class="string">&quot;0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;IsDiagnosis&quot;</span>:<span class="string">&quot;0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;tripinfolist&quot;</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;aTripDate&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;FromAdr&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;ToAdr&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Number&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;trippersoninfolist&quot;</span>:[]</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;toucherinfolist&quot;</span>:[],</span><br><span class="line">    <span class="string">&quot;dailyinfo&quot;</span>:</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;IsVia&quot;</span>:<span class="string">&quot;0&quot;</span>,</span><br><span class="line">      <span class="string">&quot;DateTrip&quot;</span>:<span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;IsInCampus&quot;</span>:<span class="string">&quot;0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;IsViaHuBei&quot;</span>:<span class="string">&quot;0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;IsViaWuHan&quot;</span>:<span class="string">&quot;0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;InsulatedAddress&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;TouchInfo&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;IsNormalTemperature&quot;</span>:<span class="string">&quot;1&quot;</span></span><br><span class="line">    <span class="comment"># &quot;Longitude&quot;:null,</span></span><br><span class="line">    <span class="comment"># &quot;Latitude&quot;:null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data2 = &#123; <span class="comment">#上学期间版本</span></span><br><span class="line">    <span class="string">&quot;BackState&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;MorningTemp&quot;</span>: <span class="string">&quot;36.5&quot;</span>,</span><br><span class="line">    <span class="string">&quot;NightTemp&quot;</span>: <span class="string">&quot;36.5&quot;</span>,</span><br><span class="line">    <span class="string">&quot;RealAddress&quot;</span>: RealAddress,</span><br><span class="line">    <span class="string">&quot;RealCity&quot;</span>: RealCity,</span><br><span class="line">    <span class="string">&quot;RealCounty&quot;</span>: RealCounty,</span><br><span class="line">    <span class="string">&quot;RealProvince&quot;</span>: RealProvince,</span><br><span class="line">    <span class="string">&quot;tripinfolist&quot;</span>: []</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>和上面一样post数据即可 <strong>（注意是<code>session.post()</code>而不是<code>requests.post()</code>）</strong></p><p>提交的url为<a href="https://fangkong.hnu.edu.cn/api/v1/clockinlog/add%EF%BC%8C">https://fangkong.hnu.edu.cn/api/v1/clockinlog/add，</a> 请求头和登录时的请求头headers_2一样即可。</p><p>如果你要查看结果</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">msg = response.json()[<span class="string">&quot;msg&quot;</span>]</span><br><span class="line">print(msg)</span><br></pre></td></tr></table></figure><p>即可，如果打卡成功返回的信息即为<code>成功</code></p><p>至此，你已经可以实现一键打卡了！</p><hr><h1 id="微信提醒（已过期）"><a href="#微信提醒（已过期）" class="headerlink" title="微信提醒（已过期）"></a>微信提醒（已过期）</h1><p>这里安利一个应用 <a href="http://sc.ftqq.com/3.version">server酱</a> 。你可以向指定的网页发送一个get/post请求来达到微信推送的目的。</p><p>server酱的登录就需要开头说到的github账号了。如果你没有github的账号，可以点此去注册一个 <a href="https://github.com/">https://github.com</a></p><p>登录后根据官网上的提示绑定微信号，获取你的SCKEY。然后在你代码你需要的地方嵌入请求即可</p><p>例如，我在打卡成功后嵌入这样一段代码（其中sckey就是server提供的SCKEY字符串，msg是上文打卡时返回的信息）：</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">requests.get(<span class="string">&quot;http://sc.ftqq.com/&quot;</span>+ sckey +<span class="string">&quot;.send?text=打卡成功啦！&amp;desp=&quot;</span> + msg)</span><br></pre></td></tr></table></figure><p>打卡成功会给我发送如下消息：</p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/1.jpg" alt="打卡消息通知"><br><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/2.jpg" alt="打卡成功"><br><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/3.jpg" alt="今天已经打卡过了"></p><hr><h1 id="利用github-action实现自动化"><a href="#利用github-action实现自动化" class="headerlink" title="利用github action实现自动化"></a>利用github action实现自动化</h1><p>github账号实现微信提醒其实只是次要部分，其真正的用途实际上是实现自动化打卡</p><p>毕竟你不太可能24小时开着电脑，也不太可能白嫖服务器 <del>(如果能的话麻烦告诉我，我也要！)</del></p><h2 id="step-1-设置TOKEN-如果之前已经设置过，请跳过此步"><a href="#step-1-设置TOKEN-如果之前已经设置过，请跳过此步" class="headerlink" title="step 1:设置TOKEN (如果之前已经设置过，请跳过此步)"></a>step 1:设置TOKEN (如果之前已经设置过，请跳过此步)</h2><p>鼠标放在右上角，选择 <code>setting</code> <del>(这边直接偷走小康的图，懒得自己截图上传了)</del></p><p><img src="https://cdn.jsdelivr.net/gh/blogimg/picbed@latest/2020/05/14/a81f88e80fd7105d7cc3e1844970e8bd.png"></p><p>点击 <code>Developer settings</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/blogimg/picbed@latest/2020/05/14/66df62fbc0d51403fcdc8223c4b6ce52.png"></p><p>选择 <code>Personal access tokens</code>，添加一个新的 TOKEN。</p><p>这个 TOKEN 主要使用来启动 actions 和上传结果用的。</p><p>设置名字为 <code>GITHUB_TOKEN</code> , 然后勾选 <code>repo</code> , <code>admin:repo_hook</code> , <code>workflow</code> 等选项，最后点击 <code>Generate token</code> 即可。</p><p><img src="https://cdn.jsdelivr.net/gh/blogimg/picbed@latest/2020/05/15/23ee2808dce8dab17e06107d1ddaf5d6.png"></p><p>名字请务必使用 <code>GITHUB_TOKEN</code> 。</p><h2 id="step-2-编写action配置文件"><a href="#step-2-编写action配置文件" class="headerlink" title="step 2: 编写action配置文件"></a>step 2: 编写action配置文件</h2><p>github会自动对 <code>.github/workflows/</code> 目录下的 <code>xxx.yml</code> 自动运行。例如我的目录结构为：</p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20210128085105.png"></p><p>其中的 <code>AutoClockIn.py</code> 就是打卡的程序代码</p><p>yml代码说明：</p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20210128085719.png"></p><blockquote><p><strong>1</strong> 为自动运行的时间，遵循 <code>UTF-0</code> 时间，+8h 后才是北京时间。如果想自行设定其他时间可以百度<code>cron表达式在线转换</code>,然后删除年和秒的部分。</p></blockquote><blockquote><p><strong>2</strong> 为手动运行的时间，点仓库那个<code>star</code>(<code>unstar</code>要多点一次)就可以手动运行啦！</p></blockquote><p>其他的代码注释应该看得懂，看不懂照着打就是了。</p><h2 id="step-3-创建仓库"><a href="#step-3-创建仓库" class="headerlink" title="step 3: 创建仓库"></a>step 3: 创建仓库</h2><p>这里建议创建个私有仓库（<strong>公开被白嫖后出事你是负责任的</strong>，免责声明可能都救不了你）</p><p>（而且<strong>公开的话意味着你的账号密码公开</strong>，除非你像我一样采用了密钥处理） <del>(什么，你想学？我这里不讲这个东西)</del></p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20210128091623.png"></p><p>熟悉git操作的我就不多说了</p><p>不熟悉也没关系，我们手动创建也可</p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20210128094701.png"></p><p>然后建立你的py文件并把打卡代码复制上去</p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20210128094908.png"></p><p>创建文件夹类似 <code>/github</code> ，同样的，我们创建yml文件并复制粘贴代码</p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20210128095424.png"></p><p><strong>这里再次强调文件目录结构要和上面截图的一样！！！</strong></p><p>全部保存完后可以启动试试啦！</p><h2 id="step-4-启动action"><a href="#step-4-启动action" class="headerlink" title="step 4: 启动action"></a>step 4: 启动action</h2><p>为了保证自动的正常进行，手动启动调试是一个好习惯</p><p>点击仓库右上角的 <code>star</code> 按钮，然后点击 <code>actions</code></p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20210128100003.png"></p><p>成功的话应该是这样的（因为我已经打卡好多天了，所以记录挺多的）</p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20210128100249.png"></p><hr><div class="note warning simple"><p>最后再次强调，当发生发烧等异常现象是仍需如实填报！！！</p></div><hr><h1 id="完结撒花！"><a href="#完结撒花！" class="headerlink" title="完结撒花！"></a>完结撒花！</h1>]]></content>
      
      
      <categories>
          
          <category> 实用项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Project </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Twikoo-Magic: 一个适用于Twikoo评论系统和HexoPlusPlus的表情仓库</title>
      <link href="4712.html"/>
      <url>4712.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="Twikoo-Magic"><a href="#Twikoo-Magic" class="headerlink" title="Twikoo-Magic"></a>Twikoo-Magic</h1><p>github仓库地址：<a href="https://github.com/2X-ercha/Twikoo-Magic">https://github.com/2X-ercha/Twikoo-Magic</a></p><h3 id="更新说明"><a href="#更新说明" class="headerlink" title="更新说明"></a>更新说明</h3><h4 id="2021-1-15"><a href="#2021-1-15" class="headerlink" title="2021/1/15"></a>2021/1/15</h4><blockquote><p><strong>基于2021/1/14 <a href="https://twikoo.js.org/">Twikoo</a> 更新<code>1.1.0-beta</code>，所有表情都将以缩写形式（如:[ text ]:）输出。1/14之前本仓库有部分表情text缺失及重复, 导致无法正常使用表情</strong><br><strong>1/14后的所有表情json列表已全部更新，已适配<code>Twikoo@1.1.0-beta</code>及此后的版本</strong><br><strong>此前版本所造成的不便作者深感抱歉</strong></p></blockquote><h4 id="2021-2-4"><a href="#2021-2-4" class="headerlink" title="2021/2/4"></a>2021/2/4</h4><blockquote><p>对<a href="https://github.com/ChenYFan">@ChenYFan</a>开发的hexo后台系统<a href="https://github.com/HexoPlusPlus/HexoPlusPlus">HexoPlusPlus</a>也可以直接适配</p></blockquote><h4 id="2021-3-16"><a href="#2021-3-16" class="headerlink" title="2021/3/16"></a>2021/3/16</h4><blockquote><p>小康的表情速查站点jsd源失效（小康github号被封了），将逐步搬迁一部分表情包加入Twikoo-Magic</p></blockquote><h3 id="oss镜像站"><a href="#oss镜像站" class="headerlink" title="oss镜像站"></a>oss镜像站</h3><p>备用的json位于文件夹Class_oss中，图床采用阿里云oss，国内访问速度较快（不过使用了镜像站的json的话记得自己改一下表情组的名字，同时<strong>不要滥用备用站点！！！</strong></p><p><strong>访问量</strong>（自2021.1.6 00:00:00）</p><p><img src="https://count.getloli.com/get/@2X-ercha@Twikoo-Magic?theme=gelbooru"></p><h3 id="白嫖提示"><a href="#白嫖提示" class="headerlink" title="白嫖提示"></a>白嫖提示</h3><blockquote><p>建议白嫖的各位大大们去<a href="https://github.com/2X-ercha/Twikoo-Magic/issues/1">issue#1</a>留言 <del>(不妨给本仓库点个star？)</del></p></blockquote><blockquote><p>本仓库不适配 Valine，如果想找到可以直接用于 valine.json 的表情仓库，建议右转<a href="https://github.com/GamerNoTitle/Valine-Magic">Valine-Magic</a></p></blockquote><blockquote><p>同样适配 Twikoo 的表情仓库还有<a href="https://emotion.xiaokang.me/">小康的表情速查</a>，<strong>在此感谢小康采用了我的oss镜像源！</strong></p></blockquote><h3 id="Twikoo-HexoPlusPlus"><a href="#Twikoo-HexoPlusPlus" class="headerlink" title="Twikoo | HexoPlusPlus"></a>Twikoo | HexoPlusPlus</h3><p>如果采用主站，请直接点击<strong>表情速览</strong>的文字链接；采用oss站点请点击文字链接下方的 <code>oss</code> 链接 </p><p>请注意：如果你想添加多个分类，请记得在每个分类(除了最后一个）的最后一个表情后面加个<code>,</code>否则Twikoo无法识别。</p><p>列表位于对应链接的json文件中。</p><p>复制的时候不要将头尾的 <code>&#123;&#125;</code> 复制进去呀！</p><p>如果你有新的表情包想要加入，你可以提出issue，或者直接发到<a href="mailto:noionion@outlook.com">noionion@outlook.com</a>，并注上你的ID和表情包名字（中文英文都需要）</p><h3 id="表情分类"><a href="#表情分类" class="headerlink" title="表情分类"></a>表情分类</h3><p>为方便阅读，这里提供的json均未压缩。</p><p><strong>表情速览</strong></p><table><thead><tr><th align="center"><img src="https://valinecdn.bili33.top/bilibiliHotKey/7.jpg"></th><th align="center"><img src="https://valinecdn.bili33.top/bilibilitv/[tv_doge].png"></th><th align="center"><img src="https://valinecdn.bili33.top/bilibili2233/[2233%E5%A8%98_%E7%AC%AC%E4%B8%80].png"></th></tr></thead><tbody><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/bilibiliHotKey">哔哩哔哩热词系列</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/bilibilitv">哔哩哔哩小电视系列</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/bilibili2233">哔哩哔哩2233娘系列</a></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/bilibiliHotKey">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/bilibilitv">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/bilibili2233">oss</a></td></tr><tr><td align="center"><img src="https://valinecdn.bili33.top/alu/%E4%B8%AD%E6%9E%AA.png"></td><td align="center"><img src='https://valinecdn.bili33.top/Menhera-chan/5.jpg' width=120 height=102></img></td><td align="center"><img src="https://valinecdn.bili33.top/HONKAI3-Daily/14.gif"></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/alu">阿鲁alu系列</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/Menhera-chan">メンヘラちゃん(Menhera-chan)系列表情包</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/HONKAI3-Daily">HONKAI崩坏3 日常篇</a></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/alu">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/Menhera-chan">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/HONKAI3-Daily">oss</a></td></tr><tr><td align="center"><img src="https://valinecdn.bili33.top/HONKAI3-Star/3.gif"></td><td align="center"><img src="https://valinecdn.bili33.top/HONKAI3-Crayon/16.gif"></td><td align="center"><img src="https://valinecdn.bili33.top/HONKAI3-Pure/13.gif"></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/HONKAI3-Star">HONKAI崩坏3 观星篇</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/HONKAI3-Crayon">HONKAI崩坏3 蜡笔日常篇</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/HONKAI3-Pure">HONKAI崩坏3 纯色日常篇</a></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/HONKAI3-Star">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/HONKAI3-Crayon">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/HONKAI3-Pure">oss</a></td></tr><tr><td align="center"><img src='https://valinecdn.bili33.top/HONKAI3-Stan/4f921b8ad8c16f3d2c73e3c04c5735ca9b41187b.gif' width=104 height=74.4></td><td align="center"><img src='https://valinecdn.bili33.top/HONKAI3-AIChan/d65b36ccae610bc4479209cd6e62bb91b0f76188.jpg' width=125 height=111></img></td><td align="center"><img src='https://valinecdn.bili33.top/HONKAI3-Durandal-Search/f1b9a456587638e488d93ccaa95dde59aef3af01.gif' height=100 width=100></img></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/HONKAI3-Stan">HONKAI崩坏3 史丹</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/HONKAI3-AIChan">HONKAI崩坏3 爱酱</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/HONKAI3-Durandal-Search">HONKAI崩坏3 目标！幽兰黛尔</a></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/HONKAI3-Stan">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/HONKAI3-AIChan">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/HONKAI3-Durandal-Search">oss</a></td></tr><tr><td align="center"><img src='https://valinecdn.bili33.top/HONKAI3-MEI/bf68423446465d396d3cbd8856882b5e9fb1c0c7.gif' width=120 height=120></td><td align="center"><img src='https://valinecdn.bili33.top/HONKAI3-NEWYEAR-2019/dc1a2b2032fad29373fe8460d4ad89ca848355a9.jpg' width=120 height=120></td><td align="center"><img src="https://valinecdn.bili33.top/Tsuri-me-ju_mimi/10753793_key@2x.png"></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/HONKAI3-MEI">HONKAI崩坏3 芽衣的剑道修行</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/HONKAI3-NEWYEAR-2019">HONKAI崩坏3 2019新年</a></td><td align="center"><a href="https://github.com/2X-ercha/Twikoo-Magic/tree/master/Classification/Tsuri-me-ju_mimi">つり目獣耳スタンプ(Sticker of the slant eyes &amp; cat girl)</a></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/HONKAI3-MEI">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/HONKAI3-NEWYEAR-2019">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/Tsuri-me-ju_mimi">oss</a></td></tr><tr><td align="center"><img src="https://valinecdn.bili33.top/Arcaea/184064198.png" style="zoom:50%;" /></td><td align="center"><img src="https://valinecdn.bili33.top/Mafumafu/199749477.png" style="zoom:50%;" /></td><td align="center"><img src="https://valinecdn.bili33.top/weibo/d_jiyan.png"></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/Arcaea">Arcaea</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/MafuMafu">動く！まふまふスタンプ（ねこ）Mafumafu Animation sticker (cat)</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/weibo">微博原生表情包</a></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/Arcaea">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/MafuMafu">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/weibo">oss</a></td></tr><tr><td align="center"><img src="https://valinecdn.bili33.top/Tieba-New/image_emoticon25.png"></td><td align="center"><img src="https://valinecdn.bili33.top/Snow-Miku/3583066@2x.png" style="zoom:50%;" /></td><td align="center"><img src="https://valinecdn.bili33.top/Sweetie-Bunny/12311679.png" style="zoom:50%;" /></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/Tieba-New">百度贴吧原生表情包</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/Snow-Miku">Snow Miku雪初音表情包（LINE）</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/Sweetie-Bunny">うさみみ少女（SWEETIE BUNNY）</a></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/Tieba-New">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/Snow-Miku">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/Sweetie-Bunny">oss</a></td></tr><tr><td align="center"><img src="https://valinecdn.bili33.top/Little-Bad/我们一起做坏坏的事.jpg" style="zoom:50%;" /></td><td align="center"><img src="https://valinecdn.bili33.top/Yurui-Neko/029.png" style="zoom:50%;" /></td><td align="center"><img src="https://valinecdn.bili33.top/Cute-Emoji/010.png" style="zoom:50%;" /></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/Little-Bad">小坏坏表情包</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/Yurui-Neko">Yurui-Neko</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/Cute-Emoji">Cute-Emoji</a></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/Little-Bad">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/Yurui-Neko">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/Cute-Emoji">oss</a></td></tr><tr><td align="center"><img src="https://valinecdn.bili33.top/Set667/032.png" style="zoom:50%;" /></td><td align="center"><img src="https://valinecdn.bili33.top/Marup/038.png" style="zoom:50%;" /></td><td align="center"><img src="https://valinecdn.bili33.top/Convenience-Store-Notes2/010.png" style="zoom:50%;" /></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/Set667">Set667</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/Marup">Marup</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/Convenience-Store-Notes2">Convenience Store Notes2</a></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/Set667">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/Marup">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/Convenience-Store-Notes2">oss</a></td></tr><tr><td align="center"><img src="https://valinecdn.bili33.top/Coolapk/coolapk_emotion_71.png"></td><td align="center"><img src="https://valinecdn.bili33.top/aodamiao/01.gif"></td><td align="center"><img src="https://valinecdn.bili33.top/lengtu/04.gif"></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/Coolapk">Coolapk酷安</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/aodamiao">aodamiao嗷大喵</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/lengtu">lengtu冷兔</a></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/Coolapk">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/aodamiao">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/lengtu">oss</a></td></tr><tr><td align="center"><img src="https://valinecdn.bili33.top/QQ/tuosai.gif"></td><td align="center"><img src="https://valinecdn.bili33.top/dingtalk/emotion_107.png"></td><td align="center"><img src="https://valinecdn.bili33.top/Heybox/expression_heziji_22.png" style="zoom:33%;" /><img src="https://valinecdn.bili33.top/Heybox/expression_cube_wa.png"></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/QQ">QQ官方表情</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/dingtalk">钉钉官方表情</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/Heybox">小黑盒表情包（包括盒娘和方块）</a></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/QQ">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/dingtalk">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/Heybox">oss</a></td></tr><tr><td align="center"><img src="https://valinecdn.bili33.top/Majotabi/367516718.png"></td><td align="center"><img src="https://cdn.jsdelivr.net/gh/cpddo/emotion/xiaochou/19.webp" style="zoom:50%;" /></td><td align="center"><img src="https://cdn.jsdelivr.net/gh/cpddo/emotion/yuanshen/11.jpg" style="zoom:50%;" /></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/Majotabi">魔女之旅Majotabi（官方）</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/xiaochou">小丑</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/Genshin">原神</a></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/Majotabi">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/xiaochou">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/Genshin">oss</a></td></tr><tr><td align="center"><img src="https://cdn.jsdelivr.net/gh/cpddo/emotion/baitian/file_6574887.webp" style="zoom: 33%;" /></td><td align="center"><img src="https://cdn.jsdelivr.net/gh/cpddo/emotion/teletubbies/26.jpg" style="zoom:33%;" /></td><td align="center"><img src="https://cdn.jsdelivr.net/gh/cpddo/emotion/tom_jerry/5.jpg" style="zoom:67%;" /></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/baitian">柏田</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/teletubbies">天线宝宝</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/tom_jerry">猫和老鼠</a></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/baitian">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/teletubbies">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/tom_jerry">oss</a></td></tr><tr><td align="center"><img src="https://cdn.jsdelivr.net/gh/cpddo/emotion/ali/042.gif"  /></td><td align="center"><img src="https://cdn.jsdelivr.net/gh/cpddo/emotion/xiaobiaoqing/11.jpg" style="zoom:150%;" /></td><td align="center"><img src="https://cdn.jsdelivr.net/gh/cpddo/emotion/tusiji/0011.gif" style="zoom:150%;" /></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/ali">阿狸</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/weisuomeng">猥琐萌</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/tusiji">兔斯基</a></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/ali">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/weisuomeng">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/tusiji">oss</a></td></tr><tr><td align="center"><img src="https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Arknights_longmen/longmen_01.jpg"></td><td align="center"><img src="https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Arknights_two/two_01.jpg"></td><td align="center"><img src="https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Arknights_three/three_01.jpg"></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/Arknights_longmen">明日方舟-龙门小憩</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/Arknights_two">明日方舟-第二弹</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/Arknights_three">明日方舟-第三弹</a></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/Arknights_longmen">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/Arknights_two">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/Arknights_three">oss</a></td></tr><tr><td align="center"><img src="https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Arknights_four/four_01.jpg"></td><td align="center"><img src="https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Arknights_five/five_01.jpg"></td><td align="center"><img src="https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Arknights_working/working_01.jpg"></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/Arknights_four">明日方舟-第四弹</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/Arknights_five">明日方舟-第五弹</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/Arknights_working">明日方舟-工作中</a></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/Arknights_four">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/Arknights_five">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/Arknights_working">oss</a></td></tr><tr><td align="center"><img src="https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Arknights_tea-drinking/tea-drinking_01.jpg"></td><td align="center"><img src="https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Arknights_keyhole_report/keyhole_report_01.jpg"></td><td align="center"><img src="https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Arknights_theater/theater_01.jpg"></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/Arknights_tea-drinking">明日方舟-饮茶中</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/Arknights_keyhole_report">明日方舟-秘闻</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/Arknights_theater">明日方舟-小剧场</a></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/Arknights_tea-drinking">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/Arknights_keyhole_report">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/Arknights_theater">oss</a></td></tr><tr><td align="center"><img src="https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Arknights_interesting_news/interesting_news_01.jpg"></td><td align="center"><img src="https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Arknights_bustle/bustle_01.jpg"></td><td align="center"><img src="https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Arknights_rest/rest_01.jpg"></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/Arknights_interesting_news">明日方舟-趣闻</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/Arknights_bustle">明日方舟-喧闹</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/Arknights_rest">明日方舟-休憩中</a></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/Arknights_interesting_news">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/Arknights_bustle">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/Arknights_rest">oss</a></td></tr><tr><td align="center"><img src="https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Arknights_chen/chen_01.jpg"></td><td align="center"><img src="https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Arknights_rabbit/rabbit_01.jpg"></td><td align="center"><img src="https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Arknights_anecdote/anecdote_01.jpg"></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/Arknights_chen">明日方舟-都是陈</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/Arknights_rabbit">明日方舟-都是兔</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/Arknights_anecdote">明日方舟-逸话</a></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/Arknights_chen">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/Arknights_rabbit">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/Arknights_anecdote">oss</a></td></tr><tr><td align="center"><img src="https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Arknights_aridity/aridity_01.jpg"></td><td align="center"><img src="https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Arknights_conformity/conformity_01.jpg"></td><td align="center"><img src="https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Arknights_phantom/phantom_01.jpg"></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/Arknights_aridity">明日方舟-荒芜</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/Arknights_conformity">明日方舟-整合</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/Arknights_phantom">明日方舟-魅影</a></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/Arknights_aridity">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/Arknights_conformity">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/Arknights_phantom">oss</a></td></tr><tr><td align="center"><img src="https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Arknights_coffeehouse/coffeehouse_01.jpg"></td><td align="center"><img src="https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/huaji/huaji(1).gif"></td><td align="center"><img src="https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/smallshake/null-23175f4710329ce8.jpg" style="zoom:80%;" /></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/Arknights_coffeehouse">明日方舟-咖啡屋</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/huaji">滑稽</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/smallshake">小鲨鱼</a></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/Arknights_coffeehouse">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/huaji">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/smallshake">oss</a></td></tr><tr><td align="center"><img src="https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/bilibili_tv_gif/doge.gif"></td><td align="center"><img src="https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/%E7%BD%97%E5%B0%8F%E9%BB%91/%E4%BD%A0%E5%A5%BD%E5%91%80.png"></td><td align="center"><img src="https://twikoo-magic.oss-cn-hangzhou.aliyuncs.com/%E9%82%A3%E5%85%94/%E3%80%82%E3%80%82%E3%80%82.png"></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/bilibili_tv_gif">bilibili动态小电视</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/%E7%BD%97%E5%B0%8F%E9%BB%91">罗小黑</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Classification/%E9%82%A3%E5%85%94">那年那兔那些事儿</a></td></tr><tr><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/bilibili_tv_gif">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/%E7%BD%97%E5%B0%8F%E9%BB%91">oss</a></td><td align="center"><a href="https://github.com/2x-ercha/Twikoo-Magic/tree/master/Class_oss/%E9%82%A3%E5%85%94">oss</a></td></tr></tbody></table><h3 id="免责声明"><a href="#免责声明" class="headerlink" title="免责声明"></a>免责声明</h3><p>本仓库内所有图片均来源于网络，仅供学习交流使用。若用户违反相关法律法规造成损失，将由用户自行承担，本仓库所有者和PR提交者不承担一切责任！</p>]]></content>
      
      
      <categories>
          
          <category> 实用项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Project </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新年前爬个明日方舟的立绘</title>
      <link href="53760.html"/>
      <url>53760.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>新年前随手写的爬虫，2021新年快乐呀！</p><hr><p>今天有个朋友跟我说，他想爬一下明日方舟的人物立绘</p><p>虽然没玩过明日方舟，但自己也去看了看图，好家伙，画得针不戳</p><p>emmm，那我试着爬一爬吧</p><p><strong>（本代码太水所以就不挂 GitHub 了啦,代码在下面）</strong></p><hr><p>先看看朋友给的图片的链接：<code>http://prts.wiki/images/6/65/%E7%AB%8B%E7%BB%98_%E5%87%AF%E5%B0%94%E5%B8%8C_2.png</code></p><p>按照这格式，我觉得只能访问主站了…… <a href="http://prts.wiki/">http://prts.wiki</a></p><p>主站长这样<del>（玩方舟的小伙伴别吐槽我）</del></p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20201230232636.png"></p><p>然后我在左侧菜单里面翻找了半天（啊啊啊，立绘在哪里啊！！！）</p><img src="https://cdn.jsdelivr.net/gh/NotFoundNEKKO/BQBTwT@1.0/真叫人质壁分离.jpg" width="300" height="300"><p>。。。我眼瞎，右上角大大的搜索框我看不见。。。</p><hr><p>搜索立绘，然后选了选范围为多媒体，然后最下面把单页最大显示数量调成500</p><p>唉，刚好一页（我不用从好多页网页爬图了，开心！）</p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20201230233429.png"></p><p>现在就得开始爬图了</p><hr><p>F12 看一下网页源代码</p><p>蒽？这个链接貌似有点不对</p><p>给的是 <code>/images/thumb/6/65/%E7%AB%8B%E7%BB%98_%E5%87%AF%E5%B0%94%E5%B8%8C_2.png</code> ，我要的是这个 <code>http://prts.wiki/images/6/65/%E7%AB%8B%E7%BB%98_%E5%87%AF%E5%B0%94%E5%B8%8C_2.png</code> 嘛！</p><p>比对一下，后面的都一样（那后期字符串剪一剪就差不多啦）</p><hr><p>因为之前也爬过图片，所以自己感觉总体来说难度不大（我发现我还是比较善于用字符串find）</p><p>我就直接上代码了</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://prts.wiki/index.php?title=%E7%89%B9%E6%AE%8A:%E6%90%9C%E7%B4%A2&amp;limit=500&amp;offset=0&amp;profile=images&amp;search=%E7%AB%8B%E7%BB%98&quot;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;Cookie&quot;</span>: <span class="string">&quot;arccount62298=c; arccount62019=c&quot;</span>,</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36 Edg/87.0.664.66&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">html = requests.get(url, headers=headers)</span><br><span class="line">html.encoding = html.apparent_encoding</span><br><span class="line">soup = BeautifulSoup(html.text, <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span> = soup.find_all(class_ = <span class="string">&quot;searchResultImage&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    os.mkdir(<span class="string">&quot;./Arknights&quot;</span>)  <span class="comment">##  创建文件夹</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">os.chdir(<span class="string">&quot;./Arknights&quot;</span>)</span><br><span class="line">num=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">    string = <span class="built_in">str</span>(s)</span><br><span class="line"></span><br><span class="line">    namebegin = string.find(<span class="string">&#x27;title=&quot;文件&#x27;</span>)</span><br><span class="line">    nameend = string[namebegin:].find(<span class="string">&#x27;png&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    name = string[namebegin+<span class="number">10</span>:namebegin+nameend+<span class="number">3</span>]</span><br><span class="line">    name = name.replace(<span class="string">&quot; &quot;</span>,<span class="string">&quot;_&quot;</span>)</span><br><span class="line"></span><br><span class="line">    urlbegin = string.find(<span class="string">&#x27;data-src=&quot;/images/thumb/&#x27;</span>)</span><br><span class="line">    urlend = string[urlbegin:].find(<span class="string">&#x27;png&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    imgurl = <span class="string">&#x27;http://prts.wiki/images/&#x27;</span> + string[urlbegin+<span class="number">24</span>:urlbegin+urlend+<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">    img = requests.get(imgurl, headers=headers).content</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(name, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(img)</span><br><span class="line">        num+=<span class="number">1</span></span><br><span class="line">        print(<span class="string">&quot;已爬取&#123;&#125;张,图片名称为：&#123;&#125;，链接为：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(num,name,imgurl))</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>代码不长，但因为不太会 <a href="https://beautifulsoup.readthedocs.io/zh_CN/v4.4.0/#">BeautifulSoup</a> 而走了不少弯路。不过最终还是爬完了所有立绘</p><p>最后结果如下</p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20201230234602.png"></p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20201230234715.png"></p><hr><blockquote><p>那位小伙伴说有重复，而且想做分类</p></blockquote><p>然后他自己写了半天，然后我看不下去了。。。</p><p>然后也做了分类去重（我就稍微多了几行。。。）</p><p>代码这里就不放了，小伙伴的博客文章里有我原先那个代码的注释版<del>（注释多的有点惨不忍睹）</del></p><p>以及我修改后的代码也在他的文章的最下边<a href="https://heart-of-engine.github.io/posts/fccf.html">点我右转！</a></p><p>最后再次祝看到这篇博客的小伙伴：</p><h2 id="2021，新年快乐鸭！"><a href="#2021，新年快乐鸭！" class="headerlink" title="2021，新年快乐鸭！"></a>2021，新年快乐鸭！</h2>]]></content>
      
      
      <categories>
          
          <category> 爬虫试水 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人哔哔: ACM新生杯的前前后后</title>
      <link href="22496.html"/>
      <url>22496.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>ACM新生杯已经过去了两天，明天晚上也是校队面试了，也有些想吐槽吐槽。</p><hr><h2 id="考前"><a href="#考前" class="headerlink" title="考前"></a>考前</h2><p>说实在，本来对自己并不是太看好，特别是自己提前一个月说要复习但直到最后一天才临时抱佛脚看了一小会。<br>STL 也没复习完，临时看DP也看着看着就睡着了～<br>感觉自己好颓啊,,Ծ^Ծ,,</p><p>虽然说自己考过 OI ，但我感觉自己就和初学者没什么两样。</p><p>两年没考，估计新生杯也是水过去了。而且对全英文的题感觉十分恐惧，前一天就拿着去年的题目看了看，专门花了点时间试着翻译翻译。（蒽，感觉还可）</p><p>新生杯当天（12月26）早上也是差点就睡过头了，睡觉前迷迷糊糊订了七点半的闹钟，早上闹钟响却在八点四十。急匆匆地过去差点迟到,,Ծ^Ծ,,</p><hr><h2 id="考时考后"><a href="#考时考后" class="headerlink" title="考时考后"></a>考时考后</h2><p>5个小时考完人真的好累，考的时候还因为WA还找不到问题差点心态爆炸（下午才知道是题目数据问题），本来卡在第12名多提交了1次就掉到了13（第12有奖金，第13没有），想着既然都掉出去了就再提交一次吧（没想到下午重测后就是这次提交让我爬回了第12）。这时提交时已经只剩4分钟了。就收工了。（此时排名14）</p><p>之后还发生了点小插曲，走回快到德智园的时候突然发现没有签退，又狂奔了1公里回去（还好赶上了）</p><p>回去后一直在研究自己k题为什么错了，实在找不到自己错哪了。把代码发给出题者看，才发现后台数据把k题和l题数据搞反了。一顿修正后，我的排名从14升到11又掉回12。</p><p>心情起落就像过山车，但还好奖金有了(*￣m￣)</p><hr><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>晚上表彰还有一堆奇奇怪怪的事就懒得写了，就是自己的账号和名字后台数据又乱了导致了一堆乱七八糟的事</p><p>害，反正最终也是妥善解决了</p><p>不过最终ACM给我的最终感触是，<strong>终究还是太菜了</strong></p><hr><p>明晚就要校队纳新了。进了校队也意味着一件事，至少两个暑假我都得留校训练了</p><p>不能回中学看老师和学弟学妹，不能回家，不能找小伙伴……</p><p>游戏也不能花时间了（所以原神也卸了）</p><p>加油了，<strong>菜鸡GGP</strong>！</p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/ACM.jpg" alt="年纪轻轻打什么ACM"></p>]]></content>
      
      
      <categories>
          
          <category> 贰猹随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> Diary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬一言？白嫖太香啦！</title>
      <link href="59329.html"/>
      <url>59329.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>最近上课也上到爬虫了，我想起了 <code>@GamerNoTitle</code> 做过一个爬一言的BLOG：<a href="https://bili33.top/2020/02/11/Hitokoto-Spider/">Hitokoto-Spider 一言库爬虫开发日记</a> <del>（据说这是他的第一个Python实战）</del></p><p>于是我觉得我的第一个实战也可以来搞一个（当然抄代码是不可能的）</p><p>参考了一下一言的官方开发者文档，我就敲代码了</p><p>项目地址：<a href="https://github.com/2X-ercha/Hitokoto-Spider">https://github.com/2X-ercha/Hitokoto-Spider</a></p><h1 id="利用一言官方API爬取"><a href="#利用一言官方API爬取" class="headerlink" title="利用一言官方API爬取"></a>利用一言官方API爬取</h1><p>文档中接口说明如下：</p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20201224082448.png" alt="官方接口"></p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20201224082638.png" alt="请求地址"></p><p>因为有先看了大佬的博客，知道爬下来是个json（这玩意比html好解析多了）</p><p>所以我看了看官方json的说明：</p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20201224083113.png" alt="参数说明"></p><p>有些信息是我不需要的，我就不管他了</p><p>保留一下信息：<code>&quot;id&quot;, &quot;sort&quot;, &quot;hitokoto&quot;, &quot;from&quot;, &quot;from_who&quot;, &quot;creator&quot;, &quot;created_at&quot;</code></p><p>好了，我们开始爬了</p><h2 id="利用requests库爬取数据"><a href="#利用requests库爬取数据" class="headerlink" title="利用requests库爬取数据"></a>利用requests库爬取数据</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Hitokoto_spider</span>():</span></span><br><span class="line">    ids=np.zeros(<span class="number">10000</span>,dtype=<span class="built_in">bool</span>)</span><br><span class="line">    res=r.get(<span class="string">&quot;https://v1.hitokoto.cn&quot;</span>,timeout=<span class="number">60</span>)</span><br><span class="line">    </span><br><span class="line">    data=res.json()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> ids[data[<span class="string">&quot;id&quot;</span>]]:</span><br><span class="line">        print(<span class="string">&quot;&#123;&#125;:\t&#123;&#125;&quot;</span>.<span class="built_in">format</span>(data[<span class="string">&quot;id&quot;</span>],data[<span class="string">&quot;hitokoto&quot;</span>]))    <span class="comment"># 输出爬取内容</span></span><br><span class="line">        ids[data[<span class="string">&quot;id&quot;</span>]]=<span class="literal">True</span></span><br></pre></td></tr></table></figure><p>用ids数组来判断是否抓取过（因为我知道一言的总数不多，数组大小我就只设了10000）</p><p>然后爬着爬着，就错误了？？？</p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20201221112308.png"></p><p>我又爬了一次，让他输出错误的状态码，他给我返回了513</p><p>这是啥子嘛！</p><p>于是我加入了个判断状态码，状态码一错就休息一下重新再爬</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> res.status_code == <span class="number">513</span>:</span><br><span class="line">    time.sleep(<span class="number">30</span>)                          <span class="comment"># 抓取错误时延时delay时间后重新抓取</span></span><br><span class="line">    <span class="keyword">return</span> Hitokoto_spider()</span><br></pre></td></tr></table></figure><p>然后。。。出门了一趟，回来你给我看这个？？？</p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20201221161958.png"></p><p>原来我电脑休眠了</p><p>然后我把电脑的休眠调掉，把上面的 <code>res.status_code == 513</code> 改成 <code>res.status_code != 200</code></p><p>开始爬！</p><hr><p>在他爬的时候，我加入了json文件支持</p><p>由于本人不太喜欢手动创建，又怕我不小心勿删了文件导致程序出错</p><p>所以我给了个默认创建（所以这段代码比较长）</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_config</span>():</span>  <span class="comment"># 配置文件创建和读取</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&quot;./data&quot;</span>):</span><br><span class="line">            os.mkdir(<span class="string">&quot;./data&quot;</span>)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./data/_config.json&#x27;</span>) <span class="keyword">as</span> config_js:</span><br><span class="line">            config = js.load(config_js)</span><br><span class="line">            <span class="keyword">return</span> config</span><br><span class="line">    <span class="keyword">except</span> IOError:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./data/_config.json&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> config:</span><br><span class="line">            configs = &#123;</span><br><span class="line">                <span class="string">&quot;path&quot;</span>: <span class="string">&quot;./data/Hitokoto.csv&quot;</span>,        <span class="comment"># 文件输出路径</span></span><br><span class="line">                <span class="string">&quot;times&quot;</span>: <span class="number">3000</span>,                <span class="comment"># 抓取次数</span></span><br><span class="line">                <span class="string">&quot;delay&quot;</span>: <span class="number">2</span>,                <span class="comment"># 抓取休眠延迟，针对一言的QPS设置</span></span><br><span class="line">                <span class="string">&quot;timeout&quot;</span>: <span class="number">60</span>,                <span class="comment"># 连接超时时间（单位：秒）</span></span><br><span class="line">                <span class="comment"># 读取显示</span></span><br><span class="line">                <span class="string">&quot;from&quot;</span>: <span class="literal">True</span>,                <span class="comment"># 来自什么作品</span></span><br><span class="line">                <span class="string">&quot;from_who&quot;</span>: <span class="literal">True</span>,            <span class="comment"># 来自谁</span></span><br><span class="line">                <span class="string">&quot;creator&quot;</span>: <span class="literal">False</span>,            <span class="comment"># 哪位用户提交的</span></span><br><span class="line">                <span class="string">&quot;created_at&quot;</span>: <span class="literal">False</span>            <span class="comment"># 何时提交</span></span><br><span class="line">            &#125;</span><br><span class="line">            a = js.dumps(configs, indent=<span class="number">4</span>, separators=(<span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27;:&#x27;</span>))</span><br><span class="line">            config.write(a)</span><br><span class="line">        <span class="keyword">return</span> read_config()</span><br></pre></td></tr></table></figure><p>之后看到的一些调用就变成这样子了</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cfg = read_config()</span><br><span class="line">print(cfg[<span class="string">&quot;hitokoto&quot;</span>])</span><br></pre></td></tr></table></figure><hr><p>然后要把爬下来的一言存下来</p><p>我又加了一点点代码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_csv</span>():</span></span><br><span class="line">    cfg=read_config()</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(cfg[<span class="string">&quot;path&quot;</span>],<span class="string">&quot;w+&quot;</span>,newline=<span class="string">&quot;&quot;</span>,encoding=<span class="string">&quot;utf8&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        csv_file = csv.writer(file)</span><br><span class="line">        head = [<span class="string">&quot;id&quot;</span>, <span class="string">&quot;sort&quot;</span>, <span class="string">&quot;hitokoto&quot;</span>, <span class="string">&quot;from&quot;</span>, <span class="string">&quot;from_who&quot;</span>, <span class="string">&quot;creator&quot;</span>, <span class="string">&quot;created_at&quot;</span>] <span class="comment"># 创建csv表头</span></span><br><span class="line">        csv_file.writerow(head)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">append_csv</span>(<span class="params">inputs</span>):</span></span><br><span class="line">    cfg = read_config()</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(cfg[<span class="string">&quot;path&quot;</span>],<span class="string">&quot;a+&quot;</span>,newline=<span class="string">&#x27;&#x27;</span>,encoding=<span class="string">&quot;utf8&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        csv_file = csv.writer(file)</span><br><span class="line">        data = [inputs]</span><br><span class="line">        csv_file.writerows(data)</span><br></pre></td></tr></table></figure><p>同时对爬虫的代码进行一点点修改</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Hitokoto_spider</span>():</span></span><br><span class="line">    cfg=read_config()</span><br><span class="line">    res=r.get(<span class="string">&quot;https://v1.hitokoto.cn&quot;</span>,timeout=cfg[<span class="string">&quot;timeout&quot;</span>])</span><br><span class="line">    <span class="keyword">if</span> res.status_code != <span class="number">200</span>:</span><br><span class="line">        time.sleep(cfg[<span class="string">&quot;delay&quot;</span>])                          <span class="comment"># 抓取错误时延时delay时间后重新抓取</span></span><br><span class="line">        <span class="keyword">return</span> Hitokoto_spider()</span><br><span class="line">    data=res.json()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> ids[data[<span class="string">&quot;id&quot;</span>]]:</span><br><span class="line">        print(<span class="string">&quot;&#123;&#125;:\t&#123;&#125;&quot;</span>.<span class="built_in">format</span>(data[<span class="string">&quot;id&quot;</span>],data[<span class="string">&quot;hitokoto&quot;</span>]))    <span class="comment"># 输出爬取内容</span></span><br><span class="line">        ids[data[<span class="string">&quot;id&quot;</span>]]=<span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 自动把分类码还原为分类</span></span><br><span class="line">        sorts = [<span class="string">&quot;Animation&quot;</span>, <span class="string">&quot;Comics&quot;</span>, <span class="string">&quot;Games&quot;</span>, <span class="string">&quot;Literature&quot;</span>, <span class="string">&quot;Original&quot;</span>, <span class="string">&quot;Internet&quot;</span>,</span><br><span class="line">                 <span class="string">&quot;Other&quot;</span>, <span class="string">&quot;Film and television&quot;</span>, <span class="string">&quot;Poetry&quot;</span>, <span class="string">&quot;Netease&quot;</span>, <span class="string">&quot;Philosophy&quot;</span>, <span class="string">&quot;Smart&quot;</span>]</span><br><span class="line">        x=<span class="built_in">ord</span>(data[<span class="string">&quot;type&quot;</span>])-<span class="number">97</span></span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span>&lt;=x&lt;<span class="number">12</span>: sort = sorts[x]</span><br><span class="line">        <span class="keyword">else</span>: sort = <span class="string">&quot;Animation&quot;</span></span><br><span class="line"></span><br><span class="line">        inputs = [data[<span class="string">&quot;id&quot;</span>], sort, data[<span class="string">&quot;hitokoto&quot;</span>], data[<span class="string">&quot;from&quot;</span>], data[<span class="string">&quot;from_who&quot;</span>], data[<span class="string">&quot;creator&quot;</span>], data[<span class="string">&quot;created_at&quot;</span>]]</span><br><span class="line">        append_csv(inputs)</span><br></pre></td></tr></table></figure><p>之前的爬取错误也出来了</p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/98AF804F886C8E103E053686F3C1B219.png"></p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/B5ABF194905AA6D17F6A96DFCBBC8050.png"></p><p>我原本以为是 <code>TimeoutError</code></p><p>加入了 <code>except TimeoutError</code> 后仍然发生了这样的问题</p><p>不管了，不管他什么问题，通通 except !</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Hitokoto_spider</span>():</span>  <span class="comment"># 爬取</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        cfg=read_config()</span><br><span class="line">        res=r.get(<span class="string">&quot;https://v1.hitokoto.cn&quot;</span>,timeout=cfg[<span class="string">&quot;timeout&quot;</span>])</span><br><span class="line">        <span class="keyword">if</span> res.status_code != <span class="number">200</span>:</span><br><span class="line">            time.sleep(cfg[<span class="string">&quot;delay&quot;</span>])                          <span class="comment"># 抓取错误时延时delay时间后重新抓取</span></span><br><span class="line">            <span class="keyword">return</span> Hitokoto_spider()</span><br><span class="line">        data=res.json()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> ids[data[<span class="string">&quot;id&quot;</span>]]:</span><br><span class="line">            print(<span class="string">&quot;&#123;&#125;:\t&#123;&#125;&quot;</span>.<span class="built_in">format</span>(data[<span class="string">&quot;id&quot;</span>],data[<span class="string">&quot;hitokoto&quot;</span>]))    <span class="comment"># 输出爬取内容</span></span><br><span class="line">            ids[data[<span class="string">&quot;id&quot;</span>]]=<span class="literal">True</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 自动把分类码还原为分类</span></span><br><span class="line">            sorts = [<span class="string">&quot;Animation&quot;</span>, <span class="string">&quot;Comics&quot;</span>, <span class="string">&quot;Games&quot;</span>, <span class="string">&quot;Literature&quot;</span>, <span class="string">&quot;Original&quot;</span>, <span class="string">&quot;Internet&quot;</span>,</span><br><span class="line">                     <span class="string">&quot;Other&quot;</span>, <span class="string">&quot;Film and television&quot;</span>, <span class="string">&quot;Poetry&quot;</span>, <span class="string">&quot;Netease&quot;</span>, <span class="string">&quot;Philosophy&quot;</span>, <span class="string">&quot;Smart&quot;</span>]</span><br><span class="line">            x=<span class="built_in">ord</span>(data[<span class="string">&quot;type&quot;</span>])-<span class="number">97</span></span><br><span class="line">            <span class="keyword">if</span> <span class="number">0</span>&lt;=x&lt;<span class="number">12</span>: sort = sorts[x]</span><br><span class="line">            <span class="keyword">else</span>: sort = <span class="string">&quot;Animation&quot;</span></span><br><span class="line"></span><br><span class="line">            inputs = [data[<span class="string">&quot;id&quot;</span>], sort, data[<span class="string">&quot;hitokoto&quot;</span>], data[<span class="string">&quot;from&quot;</span>], data[<span class="string">&quot;from_who&quot;</span>], data[<span class="string">&quot;creator&quot;</span>], data[<span class="string">&quot;created_at&quot;</span>]]</span><br><span class="line">            append_csv(inputs)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        time.sleep(<span class="number">60</span>)</span><br><span class="line">        Hitokoto_spider()</span><br></pre></td></tr></table></figure><h2 id="加入重复爬取"><a href="#加入重复爬取" class="headerlink" title="加入重复爬取"></a>加入重复爬取</h2><p>上面的代码只能让我单次爬取，每次爬取都会覆盖原先的文档</p><p>所以我把ids数组存了下来</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_ids</span>():</span></span><br><span class="line">    ids_file = <span class="string">&quot;./data/ids.npy&quot;</span></span><br><span class="line">    np.save(ids_file, ids)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_ids</span>():</span></span><br><span class="line">    ids_file = <span class="string">&quot;./data/ids.npy&quot;</span></span><br><span class="line">    ids=np.load(ids_file)</span><br><span class="line">    <span class="keyword">return</span> ids</span><br></pre></td></tr></table></figure><p>在每次爬取前load，在爬取结束时save就可以啦！</p><h2 id="数据整理"><a href="#数据整理" class="headerlink" title="数据整理"></a>数据整理</h2><p>因为API接口的随机性，爬到的id并不是按顺序爬到的，所以得进行排序</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sort_Hitokoto</span>():</span></span><br><span class="line">    cfg = read_config()</span><br><span class="line">    Hitokoto_data = pd.read_csv(cfg[<span class="string">&quot;path&quot;</span>])</span><br><span class="line">    Hitokoto_data = Hitokoto_data.sort_values(<span class="string">&quot;id&quot;</span>)</span><br><span class="line">    Hitokoto_data.to_csv(cfg[<span class="string">&quot;path&quot;</span>],index=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>最终的结果长这样啦！</p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/20201224092203.png"></p><hr><p>这个项目还没做完，之后可能会做API和GUI，以及非官方的一言收集</p><p>官方API的随机性使得我现在的爬取基本上是爬不到的</p><p>官方一言库共4396条</p><blockquote><p>2020.12.21，30000次爬取，获取3323条</p></blockquote><blockquote><p>2020.12.22，30000次爬取，获取29条</p></blockquote><blockquote><p>2020.12.23，40000次爬取，获取0条</p></blockquote><p>慢慢爬吧</p><hr><h1 id="附：直接利用官网的具体id爬取"><a href="#附：直接利用官网的具体id爬取" class="headerlink" title="附：直接利用官网的具体id爬取"></a>附：直接利用官网的具体id爬取</h1><p>这个方法是解析网站 <a href="https://hitokoto.cn/?id=1">https://hitokoto.cn/?id=1</a> 的html来爬去</p><p>网站地址后面id接的数字对应的就是相应一言的id，范围：1-6623</p><blockquote><p>优点：避免随机，一次爬取就可爬取全部</p></blockquote><blockquote><p>缺点：只能爬到id,一言文本和作者</p></blockquote><p>直接贴代码，有兴趣可以自己复制去试试</p><p><strong>注：id不连续</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;Cookie&quot;</span>: <span class="string">&quot;arccount62298=c; arccount62019=c&quot;</span>,</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36 Edg/87.0.664.66&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;hitokoto.csv&quot;</span>,<span class="string">&quot;w+&quot;</span>,newline=<span class="string">&quot;&quot;</span>,encoding=<span class="string">&quot;utf8&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    csv_file = csv.writer(file)</span><br><span class="line">    head = [<span class="string">&quot;id&quot;</span>, <span class="string">&quot;hitokoto&quot;</span>, <span class="string">&quot;from&quot;</span>] <span class="comment"># 创建csv表头</span></span><br><span class="line">    csv_file.writerow(head)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">id</span> <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6624</span>):</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        url = <span class="string">&quot;https://hitokoto.cn/?id=&quot;</span> + <span class="built_in">str</span>(<span class="built_in">id</span>)</span><br><span class="line">        html = requests.get(url, headers = headers, timeout = <span class="number">60</span>)</span><br><span class="line">        soup = BeautifulSoup(html.text, <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line"></span><br><span class="line">        hitokoto = soup.find(<span class="built_in">id</span> = <span class="string">&quot;hitokoto_text&quot;</span>)</span><br><span class="line">        <span class="comment"># print(hitokoto.string)</span></span><br><span class="line">        author = soup.find(<span class="built_in">id</span> = <span class="string">&quot;hitokoto_author&quot;</span>)</span><br><span class="line">        <span class="comment"># print(author.string[3:])</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;hitokoto.csv&quot;</span>,<span class="string">&quot;a+&quot;</span>,newline=<span class="string">&#x27;&#x27;</span>,encoding=<span class="string">&quot;utf8&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">            csv_file = csv.writer(file)</span><br><span class="line">            data = [[<span class="built_in">id</span>,hitokoto.string,author.string[<span class="number">3</span>:]]]</span><br><span class="line">            print(<span class="string">&quot;&#123;&#125;\t&#123;&#125;\t&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">id</span>,hitokoto.string,author.string[<span class="number">3</span>:]))</span><br><span class="line">            csv_file.writerows(data)</span><br><span class="line">    <span class="keyword">except</span>:<span class="keyword">continue</span></span><br></pre></td></tr></table></figure><p>（我就是用这个方式获取到了一言库的数据总数）</p>]]></content>
      
      
      <categories>
          
          <category> 爬虫试水 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Project </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单搭建一个廉价、私人、无限制图片大小的稳定图床</title>
      <link href="44642.html"/>
      <url>44642.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>找一个合适的图床挺难的，但又不得不必要</p><p>作为大学4年都想好好写博客的我貌似用的完github的300M免费空间（我怕我之后会传视频之类的东西），而且github的服务器在国外，速度终归是比较慢</p><p>而且平常用的是 windows ，写博客用的是 ubantu，传文件总归比较麻烦</p><p>所以找个合适的图床还是十分有必要的</p><p>但很多公共图床又具有各种图片大小的限制，它的共享性质又让我难以接受（毕竟写博客需要上传一些私货）</p><p>所以就决定搭建自己的图床啦！</p><p><strong>以下开始正题</strong></p><hr><h1 id="图床服务器选择"><a href="#图床服务器选择" class="headerlink" title="图床服务器选择"></a>图床服务器选择</h1><p>我选择的是阿里云 OSS ，大公司的服务还有传输速度都还不错，而且对象存储 OSS 的价格一年才9块不到（双12打7折）<del>所以我又冲动的买了5年</del><br>容量也是挺大的，40G 用来做图床那简直绰绰有余。至于私人、安全这些方面就不用多说了</p><p>以及我用了 PicGo 来作为本地上传的工具，这下子方便很多啦！</p><h1 id="搭建过程"><a href="#搭建过程" class="headerlink" title="搭建过程"></a>搭建过程</h1><h2 id="阿里云OSS部分"><a href="#阿里云OSS部分" class="headerlink" title="阿里云OSS部分"></a>阿里云OSS部分</h2><h3 id="购买阿里云的OSS服务"><a href="#购买阿里云的OSS服务" class="headerlink" title="购买阿里云的OSS服务"></a>购买阿里云的OSS服务</h3><p>购买阿里云OSS的网站：<a href="https://www.aliyun.com/product/oss/">https://www.aliyun.com/product/oss/</a></p><p>可以选择按流付费(默认方式)和买套餐包年包月,个人推荐使用套餐（毕竟9块一年挺划算的）</p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/picturebed1.png"></p><p>买完后：</p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/picturebed2.png"></p><h3 id="在控制台新建Bucket"><a href="#在控制台新建Bucket" class="headerlink" title="在控制台新建Bucket"></a>在控制台新建Bucket</h3><p>bucket：一个存储图片的地方。</p><p>然后我们进行配置</p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/picturebed3-1.png"><br><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/picturebed3-2.png"></p><p>记得读写权限选择公共读，然后地域如果前面你购买时选的是中国大陆通用那你国内节点随意，其他情况的话前后相同就对啦</p><p>然后在概览里面找到这个，记下来（后面配置 PicGo 时要用到的 ”确认存储区域“ ）</p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/picturebed4.png"></p><p>然后在文件管理里创建你要放图片的文件夹。比如我这里是 img/</p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/picturebed5.png"></p><p>千万千万记得在文件夹名后面加 /</p><h3 id="创建子用户并获取-AccessKey"><a href="#创建子用户并获取-AccessKey" class="headerlink" title="创建子用户并获取 AccessKey"></a>创建子用户并获取 AccessKey</h3><p>鼠标移到右上角头像处，下拉菜单中有一个 AccessKey管理，戳进去</p><p>然后建立子用户</p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/picturebed6-1.png"></p><p>控制访问台这个可选可不选，但编程访问一定要选</p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/picturebed6-2.png"></p><p>然后掏出你的<del>小本本</del>记事本，复制下你的 AccessKeyId 和 AccessKeySecret，这个特别重要（因为之后是查不到的）</p><p><strong>↑ ↑ ↑ ！！！强调<del>3次</del>！！！↑ ↑ ↑</strong></p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/picturebed6-3.png"></p><p>最后给你的子用户上使用 OSS 服务的管理权限</p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/picturebed6-4.png"><br><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/picturebed6-5.png"></p><h2 id="PicGo-配置部分"><a href="#PicGo-配置部分" class="headerlink" title="PicGo 配置部分"></a>PicGo 配置部分</h2><p>PicGo 的 github项目地址 <a href="https://github.com/Molunerfinn/PicGo">在这里</a></p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/picturebed7.png"></p><p>下面的 readme 也有说明相关的下载链接及白嫖开发说明</p><p>你也可以从 <a href="https://github.com/Molunerfinn/PicGo/releases">https://github.com/Molunerfinn/PicGo/releases</a> 找到系统对应的文件进行下载</p><p>因为国内下载速度很慢，不限速链接在 <a href="https://xjhui.lanzoux.com/iiqzehthhni">这里</a> ，蓝奏云好评</p><p>安装后长这样：</p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/picturebed8-1.png"></p><p>进入图床设置的阿里云OSS</p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/picturebed8-2.png"></p><p>然后输入你上面记下来的 <code>AccessKeyId</code> 和 <code>AccessKeySecret</code> 、 <code>Bucket名</code> 、 <code>确认存储区域</code> 、 <code>指定存储路径</code></p><p>不会的话可以参考一下我的</p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/picturebed8-3.png"></p><p>然后我们就配置完啦！试一试，走你！</p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/picturebed8-4.png"></p><p>引用时直接点图片下方的复制就行啦（记得选择是什么格式的）</p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/picturebed9.png"></p><hr><p>这篇博客的所有图片都是从自己搭的图床引用的</p><p>这里吐槽一下 PicGo 的上传，有时候会上传失败让你重新配置，多试几次就行了</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Course </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>stl的正确食用方式（不定时更新）</title>
      <link href="10146.html"/>
      <url>10146.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="C-STL-（一个标准模版库）"><a href="#C-STL-（一个标准模版库）" class="headerlink" title="C++ - STL （一个标准模版库）"></a>C++ - STL （一个标准模版库）</h1><p>(不定时更新)</p><p>STL 里包含了许多我们特别常用的标准数据结构和算法的模版，比如栈(stack)，队列(queue)，映射(map)，优先队列(priority_queue)，还有向量(priority_queue)等等。</p><p>有了这样一个模板库，像我这种懒人终于不需要手打一些数据结构啦（会是会，但我就是不想打）</p><p>再着，因为下个月月底得打ACM的新生赛了，因为各种各样的事咕了好久没有复习C++了，总归得开始点知识储备</p><p>所以得充实充实自己的脑袋瓜啦<del>（啊，脑壳好疼）</del></p><hr><blockquote><p>2020/11/29 突然想起来我有带《算法设计入门经典》，里面也有一大块是讲 STL 的，我决定就按着它的顺序复习（和学习）了</p></blockquote><h2 id="复习时间表"><a href="#复习时间表" class="headerlink" title="复习时间表"></a>复习时间表</h2><p>以此时间表来观察鸽子有多鸽</p><blockquote><p>2020/11/28 栈和队列</p></blockquote><blockquote><p>2020/11/29 排序检索</p></blockquote><blockquote><p>2020/11/30 不定长数组</p></blockquote><blockquote><p>2020/12/03 集合</p></blockquote><blockquote><p>2020/12/20 映射 <del>（你看，咕咕咕了好久）</del></p></blockquote><hr><h1 id="排序与检索"><a href="#排序与检索" class="headerlink" title="排序与检索"></a>排序与检索</h1><h2 id="排序-sort"><a href="#排序-sort" class="headerlink" title="排序(sort)"></a>排序(sort)</h2><p>sort 函数默认使用数组元素默认的大小进行升序排序，只有在需要按照特殊依据进行排序时才需要传入额外的比较函数。<br>我习惯上会定义成cmp<br>原理嘛~~~其实就是快速排序(quicksort)</p><h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3><p>sort 所在的库文件是 <algorithm>，所以：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br></pre></td></tr></table></figure><h3 id="sort函数的使用"><a href="#sort函数的使用" class="headerlink" title="sort函数的使用"></a>sort函数的使用</h3><p>假设一个数组 a 的 [x,y) 部分需要排序，则：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">sort(a+x,a+y); <span class="comment">//对数组a的 [x,y) 进行升序排序，直接改变这一区间的元素顺序</span></span><br></pre></td></tr></table></figure><p>如果要降序，就需要传入比较函数了，方法和下面类似，这里不再打出</p><p>当然也可以对结构体等使用，这时就得传入比较函数来确定需要比较的函数，例如</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//关键字排序</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">scores</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> Chinese,Math;</span><br><span class="line">&#125;class1;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(class1 a,class1 b)</span></span>&#123; <span class="comment">//关键字排序规则，降序</span></span><br><span class="line">    <span class="keyword">if</span>(a.Chinese!=b.Chinese)<span class="keyword">return</span> a.Chinese&gt;b.Chinese;</span><br><span class="line">    <span class="keyword">return</span> a.Math&gt;=b.Math;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    sort(a+x,a+y,cmp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上对于任意的对象，有了cmp和重载＜号，sort()都是可以进行相关的排序的（比如后面的victor，调用的方式改成了<code>sort(v.begin(),v.end())</code>）</p><h2 id="检索"><a href="#检索" class="headerlink" title="检索"></a>检索</h2><p>lower_bound() 和 upper_bound() 所在的库文件也是 <algorithm></p><h3 id="lower-bound-应用于有序区间"><a href="#lower-bound-应用于有序区间" class="headerlink" title="lower_bound (应用于有序区间)"></a>lower_bound (应用于有序区间)</h3><p>这是二分查找（binary search）的一种版本，试图在已排序的[first,last)中寻找元素value：</p><p>如果[first,last)具有与value相等的元素(s),便返回一个迭代器，指向其中第一个元素；</p><p>如果没有这样的元素存在，便返回“假设这样的元素存在时应该出现的位置”，</p><p>也就是说，<strong>它返回一个迭代器，指向第一个“不小于value”的元素；</strong></p><p>如果value大于 [first,last) 内的任何一个元素，则返回last。</p><h3 id="upper-bound-应用于有序区间"><a href="#upper-bound-应用于有序区间" class="headerlink" title="upper_bound (应用于有序区间)"></a>upper_bound (应用于有序区间)</h3><p>算法upper_bound是二分查找（binary search）法的一个版本。它试图在已排序的[first,last)中寻找value。更明确地说，它会返回“在不破坏顺序的情况下，可插入value的最后一个合适的位置”。</p><p>由于STL规范“区间圈定”时的起头和结尾并不对称（是的，[first,last)包含first但不包含last）,所以upper_bound与lower_bound的返回值意义大有不同。如果你查找某值，而它的确出现在区间之内，则lower_bound返回的是一个指向该元素的迭代器。然而upper_bound不这么做，因为upper_bound所返回的是在不破坏排序状态的情况下，value可被插入“最后一个”合适位置。</p><p>所以，<strong>如果value存在，那么它返回的迭代器将指向value的下一位置，而非指向value本身。</strong></p><h3 id="lower-bound-和-upper-bound-的使用"><a href="#lower-bound-和-upper-bound-的使用" class="headerlink" title="lower_bound() 和 upper_bound() 的使用"></a>lower_bound() 和 upper_bound() 的使用</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> pos1=lower_bound(a+x,a+y,value);</span><br><span class="line"><span class="keyword">int</span> pos1=upper_bound(a+x,a+y,value);</span><br></pre></td></tr></table></figure><hr><h1 id="不定长数组：vector"><a href="#不定长数组：vector" class="headerlink" title="不定长数组：vector"></a>不定长数组：vector</h1><p>这玩意我是基本没用到过啦，不过紫书后面的大整数类用的就是不定长数组（也可以称之为向量）。恰如它的翻译“不定长数组”，其实就是类似于 a- [] -</p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;  //导入不定长数组的模板库</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br></pre></td></tr></table></figure><p>建立各种数据类型的不定长数组</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vectorint;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; vectordouble;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; vectorchar;</span><br></pre></td></tr></table></figure><p>balabala……当然他可以是二维/三维的，such as:</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>*&gt; a;  <span class="comment">//二维vector</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>**&gt; a;  <span class="comment">//三维vector</span></span><br></pre></td></tr></table></figure><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="vector对象的存放-删除"><a href="#vector对象的存放-删除" class="headerlink" title="vector对象的存放/删除"></a>vector对象的存放/删除</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">v.push_back(num);  <span class="comment">//在数组的最后添加一个数据</span></span><br><span class="line">v.pop_back();  <span class="comment">//删除最后一个数据</span></span><br><span class="line">v.erase(pos);  <span class="comment">//删除pos位置的数据</span></span><br><span class="line">v.erase(begin,end);  <span class="comment">//删除 [begin,end) 区间的数据</span></span><br><span class="line">v.insert(pos,elem);  <span class="comment">//在pos位置插入数据elem</span></span><br></pre></td></tr></table></figure><h3 id="vector对象的数据读取-查找"><a href="#vector对象的数据读取-查找" class="headerlink" title="vector对象的数据读取/查找"></a>vector对象的数据读取/查找</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">num=v[i];  <span class="comment">//正常就可以像数组这么用</span></span><br><span class="line">v.front();  <span class="comment">//传回第一个数据</span></span><br><span class="line">v.back();  <span class="comment">//传回最后一个数据</span></span><br><span class="line">v.at(idx);  <span class="comment">//传回索引idx所指的数据，如果idx越界，抛出out_of_range</span></span><br><span class="line"></span><br><span class="line">v.begin();  <span class="comment">//返回数组头的指针/迭代器</span></span><br><span class="line">v.end();  <span class="comment">//返回数组尾+1的指针/迭代器</span></span><br><span class="line">v.rbegin();  <span class="comment">//传回一个逆向队列的第一个数据</span></span><br><span class="line">v.rend();  <span class="comment">//传回一个逆向队列的最后一个数据的下一个位置</span></span><br></pre></td></tr></table></figure><h3 id="vector对象的大小"><a href="#vector对象的大小" class="headerlink" title="vector对象的大小"></a>vector对象的大小</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">v.size();  <span class="comment">//返回容器中实际数据的个数</span></span><br><span class="line">v.max_size();  <span class="comment">//得到vector最大可以是多大</span></span><br><span class="line">v.resize(num);  <span class="comment">//改变当前使用数据的大小，如果它比当前使用的大，者填充默认值</span></span><br><span class="line">v.capacity();  <span class="comment">//返回当前vector分配的大小</span></span><br><span class="line">v.reserve(num);  <span class="comment">//改变当前vector所分配空间的大小</span></span><br><span class="line">v.clear();  <span class="comment">//移除容器中所有数据</span></span><br><span class="line">v.empty();  <span class="comment">//判断容器是否为空</span></span><br></pre></td></tr></table></figure><h3 id="vector对象的其他函数"><a href="#vector对象的其他函数" class="headerlink" title="vector对象的其他函数"></a>vector对象的其他函数</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">v1.swap(v2);  <span class="comment">//交换两个vector（好像是这么用的，有待考证）</span></span><br><span class="line">c.assign(beg,end);  <span class="comment">//将[beg; end)区间中的数据赋值给c</span></span><br><span class="line">c.assign(n,elem);  <span class="comment">//将n个elem的拷贝赋值给c</span></span><br><span class="line">get_allocator;  <span class="comment">//使用构造函数返回一个拷贝</span></span><br><span class="line">v.~ <span class="built_in">vector</span> &lt;Elem&gt;();  <span class="comment">//销毁所有数据，释放内存    </span></span><br></pre></td></tr></table></figure><h2 id="内存管理与效率（补充）"><a href="#内存管理与效率（补充）" class="headerlink" title="内存管理与效率（补充）"></a>内存管理与效率（补充）</h2><blockquote><p> 1》<strong>使用reserve()函数提前设定容量大小，避免多次容量扩充操作导致效率低下。</strong><br> (1) size()告诉你容器中有多少元素。它没有告诉你容器为它容纳的元素分配了多少内存。 <br> (2) capacity()告诉你容器在它已经分配的内存中可以容纳多少元素。那是容器在那块内存中总共可以容纳多少元素，而不是还可以容纳多少元素。如果你想知道一个vector或string中有多少没有被占用的内存，你必须从capacity()中减去size()。如果size和capacity返回同样的值，容器中就没有剩余空间了，而下一次插入（通过insert或push_back等）会引发上面的重新分配步骤。<br> (3) resize(Container::size_type n)强制把容器改为容纳n个元素。调用resize之后，size将会返回n。如果n小于当前大小，容器尾部的元素会被销毁。如果n大于当前大小，新默认构造的元素会添加到容器尾部。如果n大于当前容量，在元素加入之前会发生重新分配。<br> (4) reserve(Container::size_type n)强制容器把它的容量改为至少n，提供的n不小于当前大小。这一般强迫进行一次重新分配，因为容量需要增加。  </p></blockquote><p>例如：</p><p>假定你想建立一个容纳1-1000值的vector<int>。没有使用reserve，你可以像这样来做：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">1000</span>; ++i) v.push_back(i);</span><br></pre></td></tr></table></figure><p>在大多数STL实现中，这段代码在循环过程中将会导致2到10次重新分配。（10这个数没什么奇怪的。记住vector在重新分配发生时一般把容量翻倍，而1000约等于210。）</p><p>把代码改为使用reserve，我们得到这个：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">v.reserve(<span class="number">1000</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">1000</span>; ++i) v.push_back(i);</span><br></pre></td></tr></table></figure><p>这在循环中不会发生重新分配。</p><blockquote><p> 2》<strong>使用“交换技巧”来修整vector过剩空间/内存</strong><br> 有一种方法来把它从曾经最大的容量减少到它现在需要的容量。这样减少容量的方法常常被称为“收缩到合适（shrink to fit）”。该方法只需一条语句：</p></blockquote><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(ivec).swap(ivec);</span><br></pre></td></tr></table></figure><p>表达式vector<int>(ivec)建立一个临时vector，它是ivec的一份拷贝：vector的拷贝构造函数做了这个工作。但是，vector的拷贝构造函数只分配拷贝的元素需要的内存，所以这个临时vector没有多余的容量。然后我们让临时vector和ivec交换数据，这时我们完成了，ivec只有临时变量的修整过的容量，而这个临时变量则持有了曾经在ivec中的没用到的过剩容量。在这里（这个语句结尾），临时vector被销毁，因此释放了以前ivec使用的内存，收缩到合适。</p><hr><h1 id="集合：set"><a href="#集合：set" class="headerlink" title="集合：set"></a>集合：set</h1><p><del>在计算与人工智能概论课划水</del></p><p><code>set</code> 就是数学上的集合——每个元素只出现一次，且从小到大排序。</p><p>和 <code>sort</code> 一样，自定义类型也可以构造 <code>set</code> ，但同样必须定义 <code>&lt;</code> 运算符</p><p>原理上 <code>set</code> 使用了二叉树，同时，对于关联容器来说，不需要做内存拷贝和内存移动。set容器内所有元素都是以节点的方式来存储，其节点结构和链表差不多，指向父节点和子节点。插入的时候只需要稍做变换，把节点的指针指向新的节点就可以了。删除的时候类似，稍做变换后把指向删除节点的指针指向其他节点也OK了。这里的一切操作就是指针换来换去，和内存移动没有关系。</p><p>另外，在set中查找是使用二分查找</p><h2 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br></pre></td></tr></table></figure><p>常见的可以直接使用的类型 set 有</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; intset;  <span class="comment">//定义一个int类型的set容器</span></span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">float</span>&gt; floatset;  <span class="comment">//定义一个float类型的set容器</span></span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">char</span>&gt; charset;  <span class="comment">//定义一个char类型的set容器</span></span><br><span class="line"><span class="built_in">set</span>&lt;<span class="built_in">string</span>&gt; strset;  <span class="comment">//定义一个string类型的set容器</span></span><br></pre></td></tr></table></figure><p><del>跟其他的容器看起来也差不多吧</del></p><h2 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h2><h3 id="set对象的存放"><a href="#set对象的存放" class="headerlink" title="set对象的存放"></a>set对象的存放</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">s.insert(key_value);  <span class="comment">//将key_value插入到set中 ，返回值是pair&lt;set&lt;int&gt;::iterator,bool&gt;，bool标志着插入是否成功，而iterator代表插入的位置，若key_value已经在set中，则iterator表示的key_value在set中的位置</span></span><br><span class="line">s.inset(first,second);  <span class="comment">//将定位器first到second之间的元素插入到set中，返回值是void</span></span><br><span class="line"></span><br><span class="line">s.erase(iterator);  <span class="comment">//删除定位器iterator指向的值</span></span><br><span class="line">s.erase(first,second);  <span class="comment">//删除定位器first和second之间的值</span></span><br><span class="line">s.erase(key_value);  <span class="comment">//删除键值key_value的值</span></span><br></pre></td></tr></table></figure><p><strong>Ps set中的删除操作是不进行任何的错误检查的，比如定位器的是否合法等等，所以用的时候自己一定要注意。</strong></p><h3 id="set对象的数据读取"><a href="#set对象的数据读取" class="headerlink" title="set对象的数据读取"></a>set对象的数据读取</h3><p>显然set容器是没办法向数组那样直接用下标查询的，查询只能靠迭代器来实现</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">s.find(value);  <span class="comment">//返回给定值value的指针，如果没找到则返回end()</span></span><br><span class="line">s.lower_bound(key_value);  <span class="comment">//返回第一个大于等于key_value的定位器</span></span><br><span class="line">s.upper_bound(key_value);  <span class="comment">//返回最后一个大于等于key_value的定位器</span></span><br><span class="line">s.count();  <span class="comment">//用来查找set中某个某个键值出现的次数</span></span><br><span class="line">s.begin();  <span class="comment">//返回set容器的第一个迭代器</span></span><br><span class="line">s.end();  <span class="comment">//返回set容器的最后一个迭代器</span></span><br><span class="line">s.rbegin();  <span class="comment">//传回一个逆向set的第一个数据</span></span><br><span class="line">s.rend();  <span class="comment">//传回一个逆向set的最后一个数据的下一个位置</span></span><br></pre></td></tr></table></figure><p><strong>Ps count()这个函数在set并不是很实用，因为一个键值在set只可能出现0或1次，这样就变成了判断某一键值是否在set出现过了</strong></p><p><strong>Ps 注意begin()和end()函数是不检查set是否为空的，使用前最好使用empty()检验一下set是否为空.</strong></p><h3 id="set对象的大小"><a href="#set对象的大小" class="headerlink" title="set对象的大小"></a>set对象的大小</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">s.empty();  <span class="comment">//判断set容器是否为空</span></span><br><span class="line">s.size();  <span class="comment">//返回当前set容器中的元素个数</span></span><br><span class="line">s.max_size();  <span class="comment">//返回set容器可能包含的元素最大个数</span></span><br><span class="line">s.clean();  <span class="comment">//删除set容器中所有的元素</span></span><br></pre></td></tr></table></figure><hr><h1 id="映射：map"><a href="#映射：map" class="headerlink" title="映射：map"></a>映射：map</h1><p>这个东西真的跟 python 的 <code>dict</code> 是差不多的（我觉得就一样！！！）</p><p>就是 key 到 value 的一个映射</p><p>简单的理解一下，其实就是数组的下标变成了非数字的各种数据类型，比如字符，字符串。</p><h2 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>: </span><br></pre></td></tr></table></figure><p>然后就跟其他的数据结构不太一样了</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">map</span> &lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; char2int_map;</span><br><span class="line"><span class="built_in">map</span> &lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; str2int_map;</span><br></pre></td></tr></table></figure><p>当然也可以</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">map</span> &lt;<span class="keyword">char</span>,<span class="keyword">char</span>&gt; char2char_map;</span><br><span class="line"><span class="built_in">map</span> &lt;<span class="keyword">char</span>,<span class="built_in">string</span>&gt; char2str_map;</span><br><span class="line"><span class="built_in">map</span> &lt;<span class="built_in">string</span>,<span class="keyword">char</span>&gt; str2char_map;</span><br></pre></td></tr></table></figure><h2 id="方法-2"><a href="#方法-2" class="headerlink" title="方法"></a>方法</h2><h3 id="map对象添加元素"><a href="#map对象添加元素" class="headerlink" title="map对象添加元素"></a>map对象添加元素</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt; map1;  </span><br><span class="line">map1.insert(<span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt;(<span class="number">1</span>,<span class="string">&quot;one&quot;</span>));</span><br><span class="line">map1.insert(<span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt;::value_ type(<span class="number">2</span>,<span class="string">&quot;two&quot;</span>));</span><br><span class="line">map1[<span class="number">3</span>]=<span class="string">&quot;three&quot;</span>;  <span class="comment">//map中最简单最常用的插入添加！</span></span><br></pre></td></tr></table></figure><h3 id="map对象的查找"><a href="#map对象的查找" class="headerlink" title="map对象的查找"></a>map对象的查找</h3><p>find()函数返回一个迭代器指向键值为key的元素，如果没找到就返回指向map尾部的迭代器。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="built_in">string</span> &gt;::iterator it;</span><br><span class="line">it=map1.find(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">if</span>(it==maplive.end())</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;No find&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Find&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><h3 id="map对象的删除"><a href="#map对象的删除" class="headerlink" title="map对象的删除"></a>map对象的删除</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span> ,<span class="built_in">string</span> &gt;::iterator it;</span><br><span class="line">it=maplive.find(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">if</span>(it==maplive.end())</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;no find&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span>  maplive.erase(it);  <span class="comment">//delete 112;</span></span><br></pre></td></tr></table></figure><h3 id="map对象的交换"><a href="#map对象的交换" class="headerlink" title="map对象的交换"></a>map对象的交换</h3><p>map中的swap不是一个容器中的元素交换，而是两个容器交换</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">map1.swap(map2);</span><br></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>map中的元素是自动按key升序排序,所以不能对map用sort函数</p><p><strong>以下列出map的其他各种方法</strong> <del>（大同小异）</del></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">m.begin();  <span class="comment">//返回指向map头部的迭代器</span></span><br><span class="line">m.clear();  <span class="comment">//删除所有元素</span></span><br><span class="line">m.count();  <span class="comment">//返回指定元素出现的次数</span></span><br><span class="line">m.empty();  <span class="comment">//如果map为空则返回true</span></span><br><span class="line">m.end();    <span class="comment">//返回指向map末尾的迭代器</span></span><br><span class="line">m.equal_range();  <span class="comment">//返回特殊条目的迭代器对</span></span><br><span class="line">m.erase();  <span class="comment">//删除一个元素</span></span><br><span class="line">m.find();   <span class="comment">//查找一个元素</span></span><br><span class="line">m.get_allocator();<span class="comment">//返回map的配置器</span></span><br><span class="line">m.insert(); <span class="comment">//插入元素</span></span><br><span class="line">m.key_comp();  <span class="comment">//返回比较元素key的函数</span></span><br><span class="line">m.lower_bound();  <span class="comment">//返回键值&gt;=给定元素的第一个位置</span></span><br><span class="line">m.max_size();  <span class="comment">//返回可以容纳的最大元素个数</span></span><br><span class="line">m.rbegin(); <span class="comment">//返回一个指向map尾部的逆向迭代器</span></span><br><span class="line">m.rend();   <span class="comment">//返回一个指向map头部的逆向迭代器</span></span><br><span class="line">m.size();   <span class="comment">//返回map中元素的个数</span></span><br><span class="line">m.swap();   <span class="comment">//交换两个map</span></span><br><span class="line">m.upper_bound();  <span class="comment">//返回键值&gt;给定元素的第一个位置</span></span><br><span class="line">m.value_comp();   <span class="comment">//返回比较元素value的函数</span></span><br></pre></td></tr></table></figure><p><strong>Ps：注意用map的时候大部分要标准化，比如大小写统一之类的</strong></p><hr><h1 id="栈、队列和优先队列"><a href="#栈、队列和优先队列" class="headerlink" title="栈、队列和优先队列"></a>栈、队列和优先队列</h1><h2 id="栈-stack"><a href="#栈-stack" class="headerlink" title="栈(stack)"></a>栈(stack)</h2><p>栈，用一个很神奇的东西描述一下——腔肠动物（有口无肝门）<del>有点恶心</del></p><p>不过也道出了栈的本质——只有一个出入口<del>（吃什么吐什么）</del></p><p>像一个桶，最底下的东西是最先放进去的，也只有在最后才能拿出来，进去的顺序是12345，出来的顺序就是54321。 </p><p>我们基本的写法是自己用数组模拟并定义相关的各种函数，但既然有了这样一个模板库，我们就方便很多了（如果你大致知道一点类就知道，其实C++已经把这些数据结构封装成了类,所以我们才可以直接调用）</p><p>以下开始正题：</p><h3 id="定义-3"><a href="#定义-3" class="headerlink" title="定义"></a>定义</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;  //导入栈的模板库</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br></pre></td></tr></table></figure><p>栈里可以存放的数据类型挺多的，例如：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">stack</span> &lt;<span class="keyword">int</span>&gt; stkInt;  <span class="comment">//一个存放int的stack容器。</span></span><br><span class="line"><span class="built_in">stack</span> &lt;<span class="keyword">float</span>&gt; stkFloat;  <span class="comment">//一个存放float的stack容器。</span></span><br><span class="line"><span class="built_in">stack</span> &lt;<span class="built_in">string</span>&gt; stkString;  <span class="comment">//一个存放string的stack容器。 </span></span><br></pre></td></tr></table></figure><p>甚至可以定义个指针类型啥的<del>（反正指针我忘记怎么打了）</del></p><h3 id="方法-3"><a href="#方法-3" class="headerlink" title="方法"></a>方法</h3><h4 id="stack对象的存放"><a href="#stack对象的存放" class="headerlink" title="stack对象的存放"></a>stack对象的存放</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">stack</span>.push(elem);  <span class="comment">//往栈头添加元素</span></span><br><span class="line"><span class="built_in">stack</span>.pop();  <span class="comment">//从栈头移除第一个元素 </span></span><br></pre></td></tr></table></figure><h4 id="stack对象的拷贝构造与赋值"><a href="#stack对象的拷贝构造与赋值" class="headerlink" title="stack对象的拷贝构造与赋值"></a>stack对象的拷贝构造与赋值</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">stack</span>(<span class="keyword">const</span> <span class="built_in">stack</span> &amp;stk); / /拷贝构造函数</span><br><span class="line"><span class="built_in">stack</span>&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> <span class="built_in">stack</span> &amp;stk);  <span class="comment">//重载等号操作符</span></span><br></pre></td></tr></table></figure><p>such as</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; stkIntA, stkIntC;</span><br><span class="line"><span class="function"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; <span class="title">stkIntB</span><span class="params">(stkIntA)</span></span>;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; stkIntD;</span><br><span class="line">stkIntD = stkIntC;</span><br></pre></td></tr></table></figure><h4 id="stack对象的数据读取"><a href="#stack对象的数据读取" class="headerlink" title="stack对象的数据读取"></a>stack对象的数据读取</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">stack</span>.top();  <span class="comment">//返回最后一个压入栈元素</span></span><br></pre></td></tr></table></figure><h4 id="stack对象的大小"><a href="#stack对象的大小" class="headerlink" title="stack对象的大小"></a>stack对象的大小</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">stack</span>.empty();  <span class="comment">//判断堆栈是否为空</span></span><br><span class="line"><span class="built_in">stack</span>.size();  <span class="comment">//返回堆栈的大小</span></span><br></pre></td></tr></table></figure><h3 id="经典例题"><a href="#经典例题" class="headerlink" title="经典例题"></a>经典例题</h3><p><a href="https://www.luogu.com.cn/problem/P1739">表达式括号匹配</a></p><p><a href="https://www.luogu.com.cn/problem/P1044">栈</a></p><p><a href="https://www.luogu.com.cn/problem/P1155">双栈排序</a></p><h2 id="队列-queue"><a href="#队列-queue" class="headerlink" title="队列(queue)"></a>队列(queue)</h2><p>这个我就不用什么奇怪的东西来形容了，这个就是有入口有出口，按顺序排队进去排队出来</p><p><del>（干正事吧，芭芭脱丝）</del></p><h3 id="定义-4"><a href="#定义-4" class="headerlink" title="定义"></a>定义</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br></pre></td></tr></table></figure><p>同样也有存各种数据类型的队列</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; queueInt;  <span class="comment">//一个存放int的queue容器。</span></span><br><span class="line"><span class="built_in">queue</span> &lt;<span class="keyword">float</span>&gt; queueFloat;  <span class="comment">//一个存放float的queue容器。</span></span><br><span class="line"><span class="built_in">queue</span> &lt;<span class="built_in">string</span>&gt; queueString;  <span class="comment">//一个存放string的queue容器。 </span></span><br></pre></td></tr></table></figure><h3 id="方法-4"><a href="#方法-4" class="headerlink" title="方法"></a>方法</h3><h4 id="queue对象的存取"><a href="#queue对象的存取" class="headerlink" title="queue对象的存取"></a>queue对象的存取</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">queue</span>.push(X);  <span class="comment">//在队尾压入新元素 ，X为要压入的元素</span></span><br><span class="line"><span class="built_in">queue</span>.pop();  <span class="comment">//删除队列首元素但不返回其值</span></span><br></pre></td></tr></table></figure><h4 id="queue对象的数据读取"><a href="#queue对象的数据读取" class="headerlink" title="queue对象的数据读取"></a>queue对象的数据读取</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">queue</span>.front();  <span class="comment">// 返回队首元素的值，但不删除该元素</span></span><br><span class="line"><span class="built_in">queue</span>.back();  <span class="comment">//返回队列尾元素的值，但不删除该元素  </span></span><br></pre></td></tr></table></figure><h4 id="queue对象的大小"><a href="#queue对象的大小" class="headerlink" title="queue对象的大小"></a>queue对象的大小</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">queue</span>.empty();  <span class="comment">//判断堆栈是否为空</span></span><br><span class="line"><span class="built_in">queue</span>.size();  <span class="comment">//返回堆栈的大小</span></span><br></pre></td></tr></table></figure><h3 id="经典例题-1"><a href="#经典例题-1" class="headerlink" title="经典例题"></a>经典例题</h3><p>广度优先算法(bfs)就是一个使用队列的例子</p><p>其他的例题嘛。。。说实在我好像没写过多少，看到再列出来吧</p><hr><blockquote><p>这里又开始咕了</p></blockquote><p>· 优先队列</p><hr>]]></content>
      
      
      <categories>
          
          <category> C++学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>筛法</title>
      <link href="33729.html"/>
      <url>33729.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="闲来无事稍稍复习了一下筛法"><a href="#闲来无事稍稍复习了一下筛法" class="headerlink" title="闲来无事稍稍复习了一下筛法"></a>闲来无事稍稍复习了一下筛法</h1><p>素数这玩意大家都应该不陌生，常规的判断素数的方法应该都会。只不过，常规的方式仅仅只是判断一个数是否为素数，如果判断出0~n中所有的素数，常规方式的时间复杂度就比较高了。</p><p>所以大佬们搞出了好多大佬方法，我习惯统称为素数筛（其实应该叫<strong>筛法</strong>）。</p><p><strong>PS: 这期的代码会用 <code>C++</code> 和 <code>Python</code> 写</strong></p><hr><h2 id="先来常规方法趴"><a href="#先来常规方法趴" class="headerlink" title="先来常规方法趴"></a>先来常规方法趴</h2><p>常规方式，就是判定n是否是素数，就是循环2~n-1，判断是否整除</p><p>这里写的比较完整点，下面小于2的判断就不打了</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(n&lt;<span class="number">2</span>)<span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;%d&lt;2，不予判断&quot;</span>,n); </span><br><span class="line"><span class="keyword">bool</span> isprime=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;n;i++)</span><br><span class="line"><span class="keyword">if</span>(n%i==<span class="number">0</span>)&#123;</span><br><span class="line">isprime=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(isprime)<span class="built_in">cout</span>&lt;&lt;n&lt;&lt;<span class="string">&quot;为素数&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;n&lt;&lt;<span class="string">&quot;为合数&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line">isprime=<span class="literal">True</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="built_in">int</span>(math.sqrt(n))+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span> n%i==<span class="number">0</span>:</span><br><span class="line">        isprime=<span class="literal">False</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">if</span> isprime:print(<span class="string">&quot;&#123;&#125;为素数&quot;</span>.<span class="built_in">format</span>(n))</span><br><span class="line"><span class="keyword">else</span>:print(<span class="string">&quot;&#123;&#125;为合数&quot;</span>.<span class="built_in">format</span>(n))</span><br></pre></td></tr></table></figure><p>代码是一样的，只是我现在是在学 <code>python</code> ，所以我会打个 <code>python</code> 的版本出来（由于 <code>python</code> 本身的原因，速度会比 <code>C++</code> 慢） </p><p>当然，如果只是判断一个数，以上的常规做法就足够使用了，但如果是多个数，就需要弄出一个素数表了</p><p>（如果用上面方法进行 2 ~ N 的筛查，时间复杂度为O(n^2)</p><hr><hr><h2 id="筛法"><a href="#筛法" class="headerlink" title="筛法"></a>筛法</h2><p><strong>PS：以下代码是求 1 ~ N 的素数</strong></p><p>众所周知，合数的定义说明它有除 1 和本身外的因子</p><p>那么，合数是质数或合数的倍数了，也就可以通过筛除当前数的小于n的倍数来解决许多合数</p><p>下面讲解的三种算法中，都用了这样一个原理：</p><p><strong>如果当前的数没有被筛出，显然它不是前面任意数的倍数，那它实锤素数了，把他记进小本本</strong></p><hr><h3 id="朴素筛"><a href="#朴素筛" class="headerlink" title="朴素筛"></a>朴素筛</h3><p>为什么朴素呢，这个方法确实简单直白</p><p>时间复杂度为O(nlogn)</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> prime[<span class="number">1001</span>];</span><br><span class="line"><span class="keyword">bool</span> st[<span class="number">1001</span>]; <span class="comment">// 假设都是素数吧（true为合数）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 朴素筛</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_prime</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!st[i])prime[++prime[<span class="number">0</span>]]=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i*i;j&lt;=n;j+=i)st[j]=<span class="literal">true</span>; <span class="comment">// 不管是合数还是质数，都用来筛掉后面它的倍数</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">st[<span class="number">0</span>]=<span class="literal">true</span>,st[<span class="number">1</span>]=<span class="literal">true</span>; <span class="comment">// 先把0和1筛掉</span></span><br><span class="line">get_prime(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">prime=[]</span><br><span class="line">st=[<span class="literal">False</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">1001</span>)] <span class="comment"># 假设都是素数吧（True为合数）</span></span><br><span class="line">st[<span class="number">0</span>]=<span class="literal">True</span></span><br><span class="line">st[<span class="number">1</span>]=<span class="literal">True</span></span><br><span class="line"><span class="comment"># 先把0和1筛掉</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 朴素筛</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_prime</span>(<span class="params">N</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,N+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> st[i]==<span class="literal">False</span>:</span><br><span class="line">            prime.append(i)</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i*i,N+<span class="number">1</span>,i): <span class="comment"># 不管是合数还是质数，都用来筛掉后面它的倍数</span></span><br><span class="line">            st[j]=<span class="literal">True</span></span><br><span class="line"></span><br><span class="line">get_prime(<span class="number">1000</span>)</span><br></pre></td></tr></table></figure><hr><h3 id="埃氏筛"><a href="#埃氏筛" class="headerlink" title="埃氏筛"></a>埃氏筛</h3><p>全称 ‘’<a href="https://baike.baidu.com/item/%E5%9F%83%E6%8B%89%E6%89%98%E6%96%AF%E7%89%B9%E5%B0%BC">埃拉托斯特尼</a>筛法’’，好家伙，他发现上面那个朴素筛干了一件不太好的事</p><p>明明一个合数都可以分解质因数了，为什么要合数筛合数啊，全用素数筛它不香吗？</p><p>于是许多数字不需要被筛它的(因素个数)遍了</p><p>这大大节省了好多时间啊</p><p>于是优秀的埃氏筛时间复杂度为O(nloglogn)，<del>emmm，针不戳！</del></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> prime[<span class="number">1001</span>];</span><br><span class="line"><span class="keyword">bool</span> st[<span class="number">1001</span>]; <span class="comment">// 假设都是素数吧（true为合数）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 埃氏筛</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_prime</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!st[i])&#123;</span><br><span class="line">prime[++prime[<span class="number">0</span>]]=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i*i;j&lt;=n;j+=i)st[j]=<span class="literal">true</span>; <span class="comment">// 可以用质数就把所有的合数都筛掉</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">st[<span class="number">0</span>]=<span class="literal">true</span>,st[<span class="number">1</span>]=<span class="literal">true</span>; <span class="comment">// 先把0和1筛掉</span></span><br><span class="line">get_prime(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">prime=[]</span><br><span class="line">st=[<span class="literal">False</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">1001</span>)] <span class="comment"># 假设都是素数吧（true为合数）</span></span><br><span class="line">st[<span class="number">0</span>]=<span class="literal">True</span></span><br><span class="line">st[<span class="number">1</span>]=<span class="literal">True</span></span><br><span class="line"><span class="comment"># 先把0和1筛掉</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 埃氏筛</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_prime</span>(<span class="params">N</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,N+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> st[i]==<span class="literal">False</span>:</span><br><span class="line">            prime.append(i)</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i*i,N+<span class="number">1</span>,i): <span class="comment"># 可以用质数就把所有的合数都筛掉</span></span><br><span class="line">                st[j]=<span class="literal">True</span></span><br><span class="line"></span><br><span class="line">get_prime(<span class="number">1000</span>)</span><br></pre></td></tr></table></figure><p>于是程序员们发现，这，这不就把最内层的 for 放到了 if 里面？</p><p><del>啊这，这埃拉托斯特尼就这样名垂千古了？</del></p><p>不过说实在效率确实提升了挺多（已经很接近O(n)了）</p><hr><h3 id="线性筛"><a href="#线性筛" class="headerlink" title="线性筛"></a>线性筛</h3><p>这个就很 nb 了，它还有另外一个名字：”欧拉筛法” <del>（居然百度百科查不到）</del></p><p>上面两种筛法都有一个缺点，就是一个合数可能会被多个数重复筛出</p><p>例如朴素筛中，100会重复被2,4,5,10,20,25,50筛出，而在埃氏筛中，100只会被2和5筛出</p><p>而在埃氏筛中，30会被2,3,5筛出</p><p>埃氏筛只解决了一部分问题，剩余的线性筛就出来干活了</p><p>一个合数只会经过一次筛选，它的核心在于</p><p><strong>只被该合数最小的质因数筛出</strong></p><p>那么，如何实现这个算法？</p><p>假设 a 是合数 n 的最小质因数，那么 n = i * (n / i)</p><p>i 和 n / i 一定小于 n ，i 已经在 2 ~ n 的素数表里了，所以我们要做的就是在循环到 n / i 时把 n 筛出</p><p>为了更好地理解，我去爬了张图：</p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/img/oula.png"></p><p>从图上我们看到，第一列筛掉的是最小素因子是 2 的数，第二列筛掉的是最小素因子为 3 的数，依次类推，可以把所有的合数都筛掉。</p><p>因为是按照最小素因子筛选，每个数的最小素因数只有一个，所以可以保证每个数都只会被筛一遍。</p><p>例如， i = 6 时，第一个素数是 2 ，能整除，筛掉 12 后就break；至于第二个素数 3 ， 6 x 3 中的最小素因数肯定是前一个素数 2 ，所以它要到  i = 9 ，素数取 2 时才被筛掉。</p><p>欧拉筛的速度大概是埃氏的 3 - 4 倍，然而在小数据中却有被完爆的可能<del>（因为埃氏筛cache友好？）</del>。</p><p>线性筛的时间复杂度就十分优秀了，为O(n)</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> prime[<span class="number">1001</span>];</span><br><span class="line"><span class="keyword">bool</span> isprime[<span class="number">1001</span>]; <span class="comment">// 假设都是素数吧（true为合数）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 线性筛</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_prime</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!isprime[i])prime[++prime[<span class="number">0</span>]]=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=prime[<span class="number">0</span>]&amp;&amp;i*prime[j]&lt;=n;++j) <span class="comment">// 对于任意一个合数x，假设pj为x最小质因子，当i&lt;x/pj时，一定会被筛掉</span></span><br><span class="line">&#123;</span><br><span class="line">isprime[i*prime[j]]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span>(i%prime[j]==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line"><span class="comment">// 1.i%pj==0, pj定为i最小质因子，pj也定为pj*i最小质因子</span></span><br><span class="line">             <span class="comment">// 2.i%pj!=0, pj定小于i的所有质因子，所以pj也为pj*i最小质因子</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">isprime[<span class="number">0</span>]=<span class="literal">true</span>,isprime[<span class="number">1</span>]=<span class="literal">true</span>; <span class="comment">// 先把0和1筛掉</span></span><br><span class="line">get_prime(<span class="number">100</span>);</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">prime=[]</span><br><span class="line">st=[<span class="literal">False</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">1001</span>)] <span class="comment"># 假设都是素数吧（true为合数）</span></span><br><span class="line">st[<span class="number">0</span>]=<span class="literal">True</span></span><br><span class="line">st[<span class="number">1</span>]=<span class="literal">True</span></span><br><span class="line"><span class="comment"># 先把0和1筛掉</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 线性筛</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_prime</span>(<span class="params">N</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,N+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> st[i]==<span class="literal">False</span>:</span><br><span class="line">            prime.append(i)</span><br><span class="line">        <span class="keyword">for</span> pj <span class="keyword">in</span> prime: <span class="comment"># 对于任意一个合数x，假设pj为x最小质因子，当i&lt;x/pj时，一定会被筛掉</span></span><br><span class="line">            <span class="keyword">if</span> pj*i&gt;N:<span class="keyword">break</span></span><br><span class="line">            st[pj*i]=<span class="literal">True</span></span><br><span class="line">            <span class="keyword">if</span> i%pj==<span class="number">0</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="comment"># 1.i%pj==0, pj定为i最小质因子，pj也定为pj*i最小质因子</span></span><br><span class="line">            <span class="comment"># 2.i%pj!=0, pj定小于i的所有质因子，所以pj也为pj*i最小质因子</span></span><br><span class="line"></span><br><span class="line">get_prime(<span class="number">1000</span>)</span><br></pre></td></tr></table></figure><p>线性筛在超量数据面前的效率是非常高的</p><p>只是线性筛这个做法比较难以理解</p><hr><p>好累啊，打这一篇写了一个中午，困死了，睡了睡了</p><p><del>（在图书馆下午2点多睡觉就很迷）</del></p>]]></content>
      
      
      <categories>
          
          <category> C++学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于C++高精度运算的几种方式</title>
      <link href="48355.html"/>
      <url>48355.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="关于C-高精度运算的几种方式"><a href="#关于C-高精度运算的几种方式" class="headerlink" title="关于C++高精度运算的几种方式"></a>关于C++高精度运算的几种方式</h1><p>今天刚好写到了一题需要高精的题，查题解时看到了 <code>__int64</code> ,想来想去就决定复习一下高精度运算了~~~</p><hr><h2 id="传统数组模拟加减乘除法运算（-noip-常见算法）"><a href="#传统数组模拟加减乘除法运算（-noip-常见算法）" class="headerlink" title="传统数组模拟加减乘除法运算（ noip 常见算法）"></a>传统数组模拟加减乘除法运算（ noip 常见算法）</h2><p>传统数组高精，实际上就是模拟人类在草稿纸上笔算的过程。<del>（如果你是数学大佬，那我告辞）</del></p><h3 id="高精度加法"><a href="#高精度加法" class="headerlink" title="高精度加法"></a>高精度加法</h3><p>直接附代码了（下面都是）</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> a1[<span class="number">600</span>],b1[<span class="number">600</span>];</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">600</span>],b[<span class="number">600</span>],c[<span class="number">600</span>],lena,lenb,lenc,i,x;</span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line"><span class="built_in">memset</span>(b,<span class="number">0</span>,<span class="keyword">sizeof</span>(b));</span><br><span class="line"><span class="built_in">memset</span>(c,<span class="number">0</span>,<span class="keyword">sizeof</span>(c));</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a1&gt;&gt;b1;</span><br><span class="line">lena=<span class="built_in">strlen</span>(a1);</span><br><span class="line">lenb=<span class="built_in">strlen</span>(b1);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=lena<span class="number">-1</span>;i++)</span><br><span class="line">a[lena-i]=a1[i]<span class="number">-48</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=lenb<span class="number">-1</span>;i++)</span><br><span class="line">b[lenb-i]=b1[i]<span class="number">-48</span>;</span><br><span class="line">lenc=<span class="number">1</span>;</span><br><span class="line">x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(lenc&lt;=lena||lenc&lt;=lenb)</span><br><span class="line">&#123;</span><br><span class="line">c[lenc]=a[lenc]+b[lenc]+x;</span><br><span class="line">x=c[lenc]/<span class="number">10</span>;</span><br><span class="line">c[lenc]%=<span class="number">10</span>;</span><br><span class="line">lenc++;</span><br><span class="line">&#125;</span><br><span class="line">c[lenc]=x;</span><br><span class="line"><span class="keyword">if</span>(c[lenc]==<span class="number">0</span>)</span><br><span class="line">lenc--;</span><br><span class="line"><span class="keyword">for</span>(i=lenc;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;c[i];</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="高精度减法"><a href="#高精度减法" class="headerlink" title="高精度减法"></a>高精度减法</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> n[<span class="number">100</span>],a1[<span class="number">100</span>],b1[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100</span>],b[<span class="number">100</span>],c[<span class="number">100</span>],lena,lenb,lenc,i,x;</span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line"><span class="built_in">memset</span>(b,<span class="number">0</span>,<span class="keyword">sizeof</span>(b));</span><br><span class="line"><span class="built_in">memset</span>(c,<span class="number">0</span>,<span class="keyword">sizeof</span>(c));</span><br><span class="line">gets(a1);</span><br><span class="line">gets(b1);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strlen</span>(a1)&lt;<span class="built_in">strlen</span>(b1)||(<span class="built_in">strlen</span>(a1)==<span class="built_in">strlen</span>(b1)&amp;&amp;<span class="built_in">strcmp</span>(a1,b1)&lt;<span class="number">0</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">strcpy</span>(n,a1);</span><br><span class="line"><span class="built_in">strcpy</span>(a1,b1);</span><br><span class="line"><span class="built_in">strcpy</span>(b1,n);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;-&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">lena=<span class="built_in">strlen</span>(a1);</span><br><span class="line">lenb=<span class="built_in">strlen</span>(b1);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=lena<span class="number">-1</span>;i++)</span><br><span class="line">a[lena-i]=a1[i]<span class="number">-48</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=lenb<span class="number">-1</span>;i++)</span><br><span class="line">b[lenb-i]=b1[i]<span class="number">-48</span>;</span><br><span class="line">lenc=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(lenc&lt;=lena||lenc&lt;=lenb)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[lenc]&lt;b[lenc])</span><br><span class="line">&#123;</span><br><span class="line">a[lenc]+=<span class="number">10</span>;</span><br><span class="line">a[lenc+<span class="number">1</span>]--;</span><br><span class="line">&#125;</span><br><span class="line">c[lenc]=a[lenc]-b[lenc];</span><br><span class="line">lenc++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>((c[lenc]==<span class="number">0</span>)&amp;&amp;(lenc&gt;<span class="number">1</span>))</span><br><span class="line">lenc--;</span><br><span class="line"><span class="keyword">for</span>(i=lenc;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;c[i];</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="高精度乘法"><a href="#高精度乘法" class="headerlink" title="高精度乘法"></a>高精度乘法</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> a1[<span class="number">2002</span>],b1[<span class="number">2002</span>];</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">2002</span>],b[<span class="number">2002</span>],c[<span class="number">4002</span>],lena,lenb,lenc,i,j,x;</span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line"><span class="built_in">memset</span>(b,<span class="number">0</span>,<span class="keyword">sizeof</span>(b));</span><br><span class="line"><span class="built_in">memset</span>(c,<span class="number">0</span>,<span class="keyword">sizeof</span>(c));</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a1&gt;&gt;b1;</span><br><span class="line">lena=<span class="built_in">strlen</span>(a1);</span><br><span class="line">lenb=<span class="built_in">strlen</span>(b1);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=lena<span class="number">-1</span>;i++)</span><br><span class="line">a[lena-i]=a1[i]<span class="number">-48</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=lenb<span class="number">-1</span>;i++)</span><br><span class="line">b[lenb-i]=b1[i]<span class="number">-48</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=lena;i++)</span><br><span class="line">&#123;</span><br><span class="line">x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=lenb;j++)</span><br><span class="line">&#123;</span><br><span class="line">c[i+j<span class="number">-1</span>]=a[i]*b[j]+x+c[i+j<span class="number">-1</span>];</span><br><span class="line">x=c[i+j<span class="number">-1</span>]/<span class="number">10</span>;</span><br><span class="line">c[i+j<span class="number">-1</span>]%=<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">c[i+lenb]=x;</span><br><span class="line">&#125;</span><br><span class="line">lenc=lena+lenb;</span><br><span class="line"><span class="keyword">while</span>(c[lenc]==<span class="number">0</span>&amp;&amp;lenc&gt;<span class="number">1</span>)</span><br><span class="line">lenc--;</span><br><span class="line"><span class="keyword">for</span>(i=lenc;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;c[i];</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="高精度除法"><a href="#高精度除法" class="headerlink" title="高精度除法"></a>高精度除法</h3><h4 id="高精除低精"><a href="#高精除低精" class="headerlink" title="高精除低精"></a>高精除低精</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> a1[<span class="number">100</span>],c1[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100</span>],c[<span class="number">100</span>],lena,i,x=<span class="number">0</span>,lenc,b;</span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line"><span class="built_in">memset</span>(c,<span class="number">0</span>,<span class="keyword">sizeof</span>(c));</span><br><span class="line">gets(a1);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;b;</span><br><span class="line">lena=<span class="built_in">strlen</span>(a1);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=lena<span class="number">-1</span>;i++)</span><br><span class="line">a[i+<span class="number">1</span>]=a1[i]<span class="number">-48</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=lena;i++)</span><br><span class="line">&#123;</span><br><span class="line">c[i]=(x*<span class="number">10</span>+a[i])/b;</span><br><span class="line">x=(x*<span class="number">10</span>+a[i])%b;</span><br><span class="line">&#125;</span><br><span class="line">lenc=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(c[lenc]==<span class="number">0</span>&amp;&amp;lenc&lt;lena)</span><br><span class="line">lenc++;</span><br><span class="line"><span class="keyword">for</span>(i=lenc;i&lt;=lena;i++)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;c[i];</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="高精除高精"><a href="#高精除高精" class="headerlink" title="高精除高精"></a>高精除高精</h4><p>这个复杂一点，要用到前面的好几种高精度运算</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">101</span>],b[<span class="number">101</span>],c[<span class="number">101</span>],d,i;</span><br><span class="line"></span><br><span class="line"><span class="comment">//--------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> a[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">a[<span class="number">0</span>]=s.length();</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=a[<span class="number">0</span>];i++)</span><br><span class="line">a[i]=s[a[<span class="number">0</span>]-i]<span class="number">-48</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//--------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> a[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">if</span>(a[<span class="number">0</span>]==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="number">0</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=a[<span class="number">0</span>];i&gt;<span class="number">0</span>;i--)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;a[i];</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> b[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">if</span>(a[<span class="number">0</span>]&gt;b[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(a[<span class="number">0</span>]&lt;b[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(i=a[<span class="number">0</span>];i&gt;<span class="number">0</span>;i--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]&gt;b[i])</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(a[i]&lt;b[i])</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">jian</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> b[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> flag,i;</span><br><span class="line">flag=cmp(a,b);</span><br><span class="line"><span class="keyword">if</span>(flag==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">a[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=a[<span class="number">0</span>];i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]&lt;b[i])</span><br><span class="line">&#123;</span><br><span class="line">a[i+<span class="number">1</span>]--;</span><br><span class="line">a[i]+=<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">a[i]-=b[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(a[<span class="number">0</span>]&gt;<span class="number">0</span>&amp;&amp;a[a[<span class="number">0</span>]]==<span class="number">0</span>)</span><br><span class="line">a[<span class="number">0</span>]--;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">numcpy</span><span class="params">(<span class="keyword">int</span> p[],<span class="keyword">int</span> q[],<span class="keyword">int</span> det)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=p[<span class="number">0</span>];i++)</span><br><span class="line">q[i+det<span class="number">-1</span>]=p[i];</span><br><span class="line">q[<span class="number">0</span>]=p[<span class="number">0</span>]+det<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">chugao</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> b[],<span class="keyword">int</span> c[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,tmp[<span class="number">101</span>];</span><br><span class="line">c[<span class="number">0</span>]=a[<span class="number">0</span>]-b[<span class="number">0</span>]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(i=c[<span class="number">0</span>];i&gt;<span class="number">0</span>;i--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(tmp,<span class="number">0</span>,<span class="keyword">sizeof</span>(tmp));</span><br><span class="line">numcpy(b,tmp,i);</span><br><span class="line"><span class="keyword">while</span>(cmp(a,tmp)&gt;=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">c[i]++;</span><br><span class="line">jian(a,tmp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(c[<span class="number">0</span>]&gt;<span class="number">0</span>&amp;&amp;c[c[<span class="number">0</span>]]==<span class="number">0</span>)</span><br><span class="line">c[<span class="number">0</span>]--;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line"><span class="built_in">memset</span>(b,<span class="number">0</span>,<span class="keyword">sizeof</span>(b));</span><br><span class="line"><span class="built_in">memset</span>(c,<span class="number">0</span>,<span class="keyword">sizeof</span>(c));</span><br><span class="line">init(a);</span><br><span class="line">init(b);</span><br><span class="line">chugao(a,b,c);</span><br><span class="line">print(c);</span><br><span class="line">print(a);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="高精乘方"><a href="#高精乘方" class="headerlink" title="高精乘方"></a>高精乘方</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">char</span>  a[])</span>          <span class="comment">//数字转化为字符串存储</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> t=m;</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; t;i++)&#123;</span><br><span class="line">   a[i]=t%<span class="number">10</span>+<span class="number">48</span>;</span><br><span class="line">   t/=<span class="number">10</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">char</span>  str[],<span class="keyword">int</span> l)</span> <span class="comment">//字符串翻转</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">char</span> temp;</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=l/<span class="number">2</span>;i++)</span><br><span class="line">   &#123;</span><br><span class="line">       temp=str[i];</span><br><span class="line">       str[i]=str[l-i];</span><br><span class="line">       str[l-i]=temp;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n,<span class="keyword">char</span>  result[])</span>          <span class="comment">//高精度m^n 乘法</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">char</span> a[<span class="number">20</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">   <span class="keyword">int</span>  c[<span class="number">5000</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">   <span class="keyword">int</span> la,lr;</span><br><span class="line">   <span class="keyword">if</span>(n==<span class="number">0</span> || m==<span class="number">1</span>)&#123;result[<span class="number">0</span>]=<span class="string">&#x27;1&#x27;</span>;<span class="keyword">return</span> ;&#125;</span><br><span class="line">   change(m,a);           <span class="comment">//将数字转化为字符</span></span><br><span class="line">   la=<span class="built_in">strlen</span>(a)<span class="number">-1</span>;         <span class="comment">//记录字符a 的位数</span></span><br><span class="line">   lr=la;</span><br><span class="line">   <span class="built_in">strcpy</span>(result,a);       <span class="comment">//积初始化为a*1</span></span><br><span class="line">   <span class="keyword">int</span> i,j,k,l;</span><br><span class="line">   <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=n;i++)&#123;          <span class="comment">//result*=a^(n-1)</span></span><br><span class="line">   <span class="built_in">memset</span>(c,<span class="number">0</span>,<span class="keyword">sizeof</span>(c));</span><br><span class="line">   <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;=la;j++)           <span class="comment">//大数相乘</span></span><br><span class="line">     <span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;=lr;k++)&#123;</span><br><span class="line">      c[j+k]+=(a[j]<span class="number">-48</span>)*(result[k]<span class="number">-48</span>);</span><br><span class="line">      c[j+k+<span class="number">1</span>]+=c[j+k]/<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">      c[j+k]%=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    l=k+j+<span class="number">1</span>;      <span class="comment">//记录当前可能的最大位数</span></span><br><span class="line">   <span class="keyword">while</span>(c[l]==<span class="number">0</span>)l--;    <span class="comment">//去除la+lr+1 最高几位的的0</span></span><br><span class="line">   <span class="built_in">memset</span>(result,<span class="number">0</span>,<span class="keyword">sizeof</span>(result));</span><br><span class="line">   <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;=l;j++)result[j]=c[j]+<span class="string">&#x27;0&#x27;</span>;<span class="comment">//将临时变量c 里的数字转化为字符存到result 中</span></span><br><span class="line">   lr=l;      <span class="comment">//刷新result 的字符个数</span></span><br><span class="line">  &#125;</span><br><span class="line">  reverse(result,lr);    <span class="comment">//字符串翻转，方便输出</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> m,n;</span><br><span class="line">  <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;m,&amp;n),m&amp;&amp;n)</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="keyword">char</span>  result[<span class="number">5000</span>]=&#123;<span class="number">0</span>&#125;;      <span class="comment">// 这句必须放到循环体内，WA得好苦 因为有这句</span></span><br><span class="line">      <span class="keyword">if</span>(n==<span class="number">0</span> ||m==<span class="number">1</span>) result[<span class="number">0</span>]=<span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">      mul(m,n,result);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,result);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="高精度取模"><a href="#高精度取模" class="headerlink" title="高精度取模"></a>高精度取模</h3><p>这个就十分简单了，都不用记录商</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> k=<span class="number">0</span>,a,b,i;</span><br><span class="line"><span class="keyword">bool</span> flag;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;s&gt;&gt;b;<span class="comment">//输入被除数和除数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.size();i++)<span class="comment">//从高位开始，一位一位向低位</span></span><br><span class="line">    &#123;</span><br><span class="line">        a=a*<span class="number">10</span>+s[i]-<span class="string">&#x27;0&#x27;</span>;<span class="comment">//加上被除数的这一位</span></span><br><span class="line">        a%=b;<span class="comment">//一直取余</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;a;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="当然还有大佬用的重载运算符操作"><a href="#当然还有大佬用的重载运算符操作" class="headerlink" title="当然还有大佬用的重载运算符操作"></a>当然还有大佬用的重载运算符操作</h2><p>这个东西我就真的不会了</p><p>直接上个实例吧</p><p>高精度的GCD（最大公约数）</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,l,r) for (int i=l;i&lt;=r;++i)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Mx=<span class="number">1252</span>,MOD=<span class="number">100000000</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BIGN</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> a[Mx+<span class="number">10</span>];</span><br><span class="line">BIGN()&#123;<span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span> a);&#125;</span><br><span class="line"><span class="keyword">int</span> &amp;<span class="keyword">operator</span> [](<span class="keyword">int</span> i)&#123;<span class="keyword">return</span> a[i];&#125;</span><br><span class="line"><span class="keyword">void</span> <span class="keyword">operator</span> /=(<span class="keyword">int</span> x)&#123; <span class="comment">//高精 &#x27;/=&#x27;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=Mx;i&gt;=<span class="number">1</span>;--i)</span><br><span class="line">a[i<span class="number">-1</span>]+=a[i]%x*MOD,a[i]/=x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> <span class="keyword">operator</span> -=(BIGN &amp;b)&#123; <span class="comment">//高精 &#x27;-=&#x27;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;Mx;++i)</span><br><span class="line">a[i]=a[i]-b[i]+(a[i<span class="number">-1</span>]+MOD)/MOD <span class="number">-1</span>,a[i<span class="number">-1</span>]=(a[i<span class="number">-1</span>]+MOD)%MOD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> <span class="keyword">operator</span> *=(<span class="keyword">int</span> x)&#123; <span class="comment">//高精 &#x27;*=&#x27;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;Mx;++i)</span><br><span class="line">a[i]=a[i]*x+a[i<span class="number">-1</span>]/MOD,a[i<span class="number">-1</span>]%=MOD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(BIGN &amp;b)&#123; <span class="comment">//重定义 &#x27;&lt;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=Mx;i&gt;=<span class="number">1</span>;--i)</span><br><span class="line"><span class="keyword">if</span> (a[i]!=b[i]) <span class="keyword">return</span> a[i]&lt;b[i];</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">iszero</span><span class="params">()</span></span>&#123; <span class="comment">//判0</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;Mx;++i) <span class="keyword">if</span> (a[i]!=<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> tp[<span class="number">10005</span>]=&#123;<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;0&#x27;</span>&#125;;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,tp+<span class="number">8</span>);</span><br><span class="line"><span class="keyword">int</span> len=<span class="built_in">strlen</span>(tp+<span class="number">1</span>),p=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (len<span class="number">-8</span>*p+<span class="number">1</span>&gt;<span class="number">0</span>)</span><br><span class="line"><span class="built_in">scanf</span>(tp+len<span class="number">-8</span>*p+++<span class="number">1</span>,<span class="string">&quot;%8d&quot;</span>,&amp;a[p]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> p=Mx;</span><br><span class="line"><span class="keyword">while</span> (!a[p]&amp;&amp;p&gt;<span class="number">0</span>) p--;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a[p--]);</span><br><span class="line"><span class="keyword">while</span> (p&gt;<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;%08d&quot;</span>,a[p--]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">BIGN <span class="title">gcd</span><span class="params">(BIGN x,BIGN y)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> g=<span class="number">0</span>;<span class="keyword">bool</span> x1,y1;</span><br><span class="line"><span class="keyword">while</span> (!x.iszero() &amp;&amp; !y.iszero())&#123;</span><br><span class="line">x1=!(x[<span class="number">1</span>]&amp;<span class="number">1</span>),y1=!(y[<span class="number">1</span>]&amp;<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (x1 &amp;&amp; y1)&#123;g++;x/=<span class="number">2</span>,y/=<span class="number">2</span>;&#125;<span class="keyword">else</span></span><br><span class="line"><span class="keyword">if</span> (x1 || y1)&#123;<span class="keyword">if</span> (x1) x/=<span class="number">2</span>;<span class="keyword">else</span> y/=<span class="number">2</span>;&#125;<span class="keyword">else</span></span><br><span class="line"><span class="keyword">if</span> (y&lt;x) x-=y;<span class="keyword">else</span> y-=x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (x&lt;y) x=y;</span><br><span class="line"><span class="keyword">while</span> (g--) x*=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line">BIGN a,b;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">a.read();</span><br><span class="line">b.read();</span><br><span class="line">gcd(a,b).print();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="懒人专用-int64"><a href="#懒人专用-int64" class="headerlink" title="懒人专用 __int64"></a>懒人专用 __int64</h2><p>其实是上面第一种忘得差不多了，第二种还不会</p><p>不过针对 <code>GCC</code> 和 <code>VC</code> ，这个东西是有差别的</p><p>主要是输入啦</p><p><strong>VC6.0</strong> 的 64 位整数分别叫做 <code>__int64</code> 与 <code>unsigned __int64</code> ，其范围分别是[-2^63, 2^63)与[0,2^64)，即 -9223372036854775808 ~ 9223372036854775807 与 0 ~ 18446744073709551615 (约 1800 亿亿)。对 64 位整数的运算与 32 位整数基本相同，都支持四则运算与位运算等。当进行 64 位与 32 位的混合运算时， 32 位整数会被隐式转换成 64 位整数。但是， VC 的输入输出与 <code>__int64</code> 的兼容就不是很好了，如果你写下这样一段代码：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">__int64 a;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;a;</span><br></pre></td></tr></table></figure><p>那么，在第2行会收到“ <code>error C2679: binary &#39;&gt;&gt;&#39; : no operator defined which takes a right-hand operand of type &#39;__int64&#39; (or there is no acceptable conversion)</code> ”的错误；在第3行会收到“ <code>error C2593: &#39;operator &lt;&lt;&#39; is ambiguous</code> ”的错误。那是不是就不能进行输入输出呢？当然不是，你可以使用C的写法：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%I64d&quot;</span>,&amp;a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%I64d&quot;</span>,a);</span><br></pre></td></tr></table></figure><p>就可以正确输入输出了。当使用 <code>unsigned __int64</code> 时，把 <code>&quot;I64d&quot;</code> 改为 <code>&quot;I64u&quot;</code> 就可以了。</p><p><strong>OJ</strong> 通常使用 <code>g++</code> 编译器。其 64 位扩展方式与 VC 有所不同，它们分别叫做 long long 与  unsigned long long 。处理规模与除输入输出外的使用方法同上。对于输入输出，它的扩展比VC好。既可以使用</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;a;</span><br></pre></td></tr></table></figure><p>也可以使用</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,a);</span><br></pre></td></tr></table></figure><p>使用无符号数时，将 <code>&quot;%lld&quot;</code> 改成 <code>&quot;%llu&quot;</code> 即可。<br>最后再说明两点点：</p><p>  1、作为一个特例，如果你使用的是 Dev-C++ 的 g++ 编译器，它使用的是 “%I64d” 而非 “%lld” 。</p><p>  2、注意： <code>__int64</code> 是两个短的下划线</p><hr><h2 id="最后补充一个-int128-和-uint128"><a href="#最后补充一个-int128-和-uint128" class="headerlink" title="最后补充一个 __int128 和 __uint128"></a>最后补充一个 __int128 和 __uint128</h2><h4 id="PS：这玩意只有-Linux-可以用"><a href="#PS：这玩意只有-Linux-可以用" class="headerlink" title="PS：这玩意只有 Linux 可以用"></a>PS：这玩意只有 Linux 可以用</h4><p>定义方式 <code>__int64</code> 是一样的</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">__int128 a;</span><br></pre></td></tr></table></figure><p>只是这玩意还不能用 <code>cin</code> 和 <code>cout</code> 进行读入读出（ <code>scanf</code> 和 <code>printf</code> 也不行）</p><p>所幸现在的 oj 基本上都是 linux 系统的</p><p>所以只能抄一个读入读出代码了</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> __int128 <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    __int128 x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">            f=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=x*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(__int128 x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">        x=-x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;<span class="number">9</span>)</span><br><span class="line">        print(x/<span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    __int128 a = read();</span><br><span class="line">    __int128 b = read();</span><br><span class="line">    print(a + b);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="关于高精度的算法我知道的就这些了，当然你如果学的是-python"><a href="#关于高精度的算法我知道的就这些了，当然你如果学的是-python" class="headerlink" title="关于高精度的算法我知道的就这些了，当然你如果学的是 python"></a>关于高精度的算法我知道的就这些了，当然你如果学的是 python</h3><p><del>好吧，以上东西你不需要</del></p>]]></content>
      
      
      <categories>
          
          <category> C++学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人哔哔: 关于我为什么搞博客</title>
      <link href="46581.html"/>
      <url>46581.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="Why"><a href="#Why" class="headerlink" title="Why"></a>Why</h1><h3 id="搞清为什么做一件事，对于我来说是十分重要的。"><a href="#搞清为什么做一件事，对于我来说是十分重要的。" class="headerlink" title="搞清为什么做一件事，对于我来说是十分重要的。"></a>搞清为什么做一件事，对于我来说是十分重要的。</h3><p>博客这个东西，对于我来说应当是遥远的记忆了。之前高一高二还在打 <strong>noip</strong> 的时候，曾在洛谷上打过几篇题解。也是那时，初次了解到了博客。</p><p>不过那时写题解只能说是一时兴起，再加上后来退赛之后，学业繁重，就没空去运维了，所以没做多少就咕咕咕了。</p><p>国内外有挺多平台是支持我们这些穷苦老百姓白嫖一定的空间去制作自己的博客的，也给了相当多样的主题。我接触过的有 <strong>CSDN 社区</strong>，<strong>博客园</strong>，<strong>阿里云的美站</strong>（这个不能白嫖），还有以前我用的<strong>洛谷</strong>，现在用的 <strong>github page</strong> 等等。许多网站都是给了特别傻瓜式的操作平台和后台文章部署。虽然这样做确实简单了许多，对于我这种完全不懂 <code>html</code> 和 <code>css </code>的蒟蒻来讲更是天堂。不过还是限制了许多想象的空间，比如自己美化主题页面，导入一些小的板块啥的就特别难受，缺了一点码代码的乐趣。当我了解到有 <a href="https://pages.github.com/">github page</a> 和 <a href="https://hexo.io/zh-cn/">hexo</a> 这种神奇的东西可以满足我的需求时，我一下子有了搭博客的想法。于是我开始找相关的教程进行学习。</p><blockquote><p>教程来自 <a href="https://blog.csdn.net/sinat_37781304">zjufangzh</a> 的 <a href="https://blog.csdn.net/sinat_37781304/article/details/82729029">hexo史上最全搭建教程</a> </p></blockquote><h4 id="PS："><a href="#PS：" class="headerlink" title="PS："></a>PS：</h4><p>关键的一个契机是我的一个朋友 @<a href="http://lijyya.site/">lijyya</a> 刚好开始搭建她的博客。于是乎我觉得我也不能落后，才开始做这件事，进而了解到 <strong>github page</strong> 。</p><h1 id="Power"><a href="#Power" class="headerlink" title="Power"></a>Power</h1><h3 id="有想法是不够的，关键是要让临时起意变成持之以恒。"><a href="#有想法是不够的，关键是要让临时起意变成持之以恒。" class="headerlink" title="有想法是不够的，关键是要让临时起意变成持之以恒。"></a>有想法是不够的，关键是要让临时起意变成持之以恒。</h3><p>所以，我<del>一气之下</del>买了 5 年的域名<del>（ 冲动是魔鬼 ）</del>。</p><p>同时我作了一点小宣传，想要让我的小伙伴们来督促督促我。</p><p><del>（你们的关注是我前进的最好动力！！！）</del></p><h1 id="Try"><a href="#Try" class="headerlink" title="Try"></a>Try</h1><p>当然搭建过程也遇到了各种各样的 <del>sb</del> 问题。开始搭建的时候用的是 windows ， windows 系统搞这种运维总会出现一些无法准确描述的问题。这种事情在度娘上也无法解决。</p><p>所以我选择求教大佬。在求教之前，我先在自己的电脑上安装了 ubuntu 和 windows 双系统，并在 ubuntu 上重新搭建我的博客。</p><p>这次终于是比较顺利了点，同时<del>不懂教程人话的</del>我向大佬 @<a href="https://bili33.top/">GamerNoTitle</a> 求教了许多问题。</p><p>这里致谢大佬在高三百忙之际还能给我一点指点，当然这时候我也不能经常性的骚扰大佬啦，很多东西还是要自己学习的。</p><p>经历了两天肝到半夜的搭建时间，终于是把博客搭得有个样了。</p><h1 id="End"><a href="#End" class="headerlink" title="End"></a>End</h1><p>虽然 <strong>hexo</strong> 写文章也是挺简单的，它内置了 <strong>markdown</strong> ，可以让我在打好一个文章后经过 <strong>markdown</strong> 的格式修饰就可直接发布。这个过程对于我来说显然轻松了很多，也不用再花时间去学习html。同时他的模板代码我是可以修改的，这又满足了我的需求（虽然我现在还不会）～～～</p><p>今后这个博客我会不断的更新，会推一些自己的日记啦，自己 <strong>ps</strong> 画的图<del>（手残）</del>，一些 <strong>C++/Python</strong> 的学习记录/题解，一些奇怪软件/插件的使用，还有以后可能会做的项目。</p><hr><h1 id="所以，这个博客，算是我大学未来四年的生活学习记录了！"><a href="#所以，这个博客，算是我大学未来四年的生活学习记录了！" class="headerlink" title="所以，这个博客，算是我大学未来四年的生活学习记录了！"></a>所以，这个博客，算是我大学未来四年的生活学习记录了！</h1><hr>]]></content>
      
      
      <categories>
          
          <category> 贰猹随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Diary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【NOI1995】石子合并——题解</title>
      <link href="49862.html"/>
      <url>49862.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="原题"><a href="#原题" class="headerlink" title="原题"></a>原题</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>在一个圆形操场的四周摆放 N 堆石子,现要将石子有次序地合并成一堆.规定每次只能选相邻的 2 堆合并成新的一堆，并将新的一堆的石子数，记为该次合并的得分。</p><p>试设计出一个算法,计算出将 N 堆石子合并成 1 堆的最小得分和最大得分。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>数据的第 1 行是正整数 N，表示有 N 堆石子。</p><p>第 2 行有 N 个整数，第 i 个整数 ai​ 表示第 i 堆石子的个数。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出共 2 行，第 1 行为最小得分，第 2 行为最大得分。</p><h2 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h2><h3 id="输入-1"><a href="#输入-1" class="headerlink" title="输入 #1"></a>输入 #1</h3><p>4<br>4 5 9 4</p><h3 id="输出-1"><a href="#输出-1" class="headerlink" title="输出 #1"></a>输出 #1</h3><p>43<br>54</p><hr><h1 id="题解（搬运自我好久好久之前在洛谷发的博客）"><a href="#题解（搬运自我好久好久之前在洛谷发的博客）" class="headerlink" title="题解（搬运自我好久好久之前在洛谷发的博客）"></a>题解（搬运自我好久好久之前在洛谷发的博客）</h1><p><del>（顺便做个博客文章格式的测试）</del></p><p><del>（<strong>大佬轻喷</strong>）</del></p><p><strong>《信息学奥赛一本通–提高篇》</strong>给了一个非常优秀的O(8n3)的代码</p><p><del>作为<strong>蒟蒻</strong>我表示<strong>看不懂</strong></del></p><p><strong><del>难受</del></strong></p><p>不过没关系</p><p><strong>蒟蒻有蒟蒻的dp方法</strong></p><p>淡定地枚举了区间长度,然后一层一层增加</p><p>一段一段地维护**<del>（不懂的可以手动看代码模拟）</del>**</p><p>然后，默默地祭出了O(2n3)的代码</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">201</span>],sum[<span class="number">201</span>];</span><br><span class="line"><span class="keyword">int</span> Fmin[<span class="number">201</span>][<span class="number">201</span>],Fmax[<span class="number">201</span>][<span class="number">201</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span><span class="comment">//读入优化大法好！！！</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> ch=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)res=res*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>,ch=getchar();</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n=read();</span><br><span class="line">    <span class="comment">//把环拉成一条2*n的线</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)a[i]=a[i+n]=read();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">2</span>*n;++i)sum[i]=sum[i<span class="number">-1</span>]+a[i];</span><br><span class="line"><span class="built_in">memset</span>(Fmin,<span class="number">127</span>/<span class="number">3</span>,<span class="keyword">sizeof</span>(Fmin));<span class="comment">//取最小值需要一点放大的初值</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">2</span>*n;++i)Fmin[i][i]=<span class="number">0</span>;<span class="comment">//这个不改会炸的！！！</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">1</span>;l&lt;n;++l)<span class="comment">//枚举区间长度1到n-1</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i+l&lt;=<span class="number">2</span>*n;++i)<span class="comment">//枚举左端点</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=i;k&lt;i+l;++k)<span class="comment">//这个就不用解释了吧~~~</span></span><br><span class="line">&#123;</span><br><span class="line">Fmin[i][i+l]=min(Fmin[i][i+l],Fmin[i][k]+Fmin[k+<span class="number">1</span>][i+l]+sum[i+l]-sum[i<span class="number">-1</span>]);</span><br><span class="line">Fmax[i][i+l]=max(Fmax[i][i+l],Fmax[i][k]+Fmax[k+<span class="number">1</span>][i+l]+sum[i+l]-sum[i<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ansmin=<span class="number">923917391</span>,ansmax=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//然后开个O(2n)求最终答案（因为把环拉成链了）</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;++i)ansmin=min(ansmin,Fmin[i][i+n<span class="number">-1</span>]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;++i)ansmax=max(ansmax,Fmax[i][i+n<span class="number">-1</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ansmin);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ansmax);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>~~然后，常数其实也没有2那么大啦~~~时间复杂度具体怎么算我也不知道</p><p><del>估计一下时间复杂度差不多只有O(n3)</del></p>]]></content>
      
      
      <categories>
          
          <category> C++学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
